Bridge.assembly("Kusto.JavaScript.Client",function($asm,globals){"use strict";Bridge.define("Kusto.Charting.AnomalyDataHelper2",{statics:{props:{TimestampColumnName:null,ValueColumnName:null,SeriesColumnName:null,AnomalySerieSuffix:null},ctors:{init:function(){this.TimestampColumnName="Timestamp";this.ValueColumnName="Value";this.SeriesColumnName="Series";this.AnomalySerieSuffix="(anomaly)"}},methods:{EnchanceDataWithAnomalyDataFromServiceAsync:function(kustoContext,data){var $step=0,$task1,$taskResult1,$jumpFromFinally,$tcs=new System.Threading.Tasks.TaskCompletionSource,$returnValue,dataAsCsl,query,results,$t,$async_e,$asyncBody=Bridge.fn.bind(this,function(){try{for(;;){$step=System.Array.min([0,1],$step);switch($step){case 0:if(kustoContext==null){$tcs.setResult(data);return}if(dataAsCsl=Kusto.Charting.AnomalyDataHelper2.DataItemsToDataTableLiteral(data),query=(dataAsCsl||"")+(System.String.format("| summarize dt = makelist({0}, 100000), y=makelist({1}, 100000) by {2}\r\n| extend (anomalies, scores, baseline)=series_decompose_anomalies(y)\r\n| project dt, y, anomalies, Series\r\n| mvexpand dt to typeof(datetime), y to typeof(double), anomalies to typeof(double) limit 1000000\r\n| where anomalies != 0\r\n| project dt, anomaly_value = (anomalies * anomalies)*y, Series",Kusto.Charting.AnomalyDataHelper2.TimestampColumnName,Kusto.Charting.AnomalyDataHelper2.ValueColumnName,Kusto.Charting.AnomalyDataHelper2.SeriesColumnName)||""),$task1=kustoContext.Kusto$Charting$IKustoClientContext$ExecuteQueryAsync(Kusto.Charting.AnomalyDataHelper2.AnomalyInputOutputRecord,query),$step=1,$task1.isCompleted())continue;$task1.continue($asyncBody);return;case 1:if($taskResult1=$task1.getAwaitedResult(),results=$taskResult1,results=($t=Kusto.Charting.AnomalyDataHelper2.AnomalyInputOutputRecord,System.Linq.Enumerable.from(results,$t).ToArray($t)),results==null||!System.Linq.Enumerable.from(results,Kusto.Charting.AnomalyDataHelper2.AnomalyInputOutputRecord).any()){$tcs.setResult(data);return}data.AddRange(System.Linq.Enumerable.from(results,Kusto.Charting.AnomalyDataHelper2.AnomalyInputOutputRecord).select($asm.$.Kusto.Charting.AnomalyDataHelper2.f1));$tcs.setResult(data);return;default:$tcs.setResult(null);return}}}catch($async_e1){$async_e=System.Exception.create($async_e1);$tcs.setException($async_e)}},arguments);return $asyncBody(),$tcs.task},DataItemsToDataTableLiteral:function(items){var $t,result=new System.Text.StringBuilder,item,seriesName;result.append("datatable");result.appendLine(System.String.format("({0}:datetime,{1}:double,{2}:string)",Kusto.Charting.AnomalyDataHelper2.TimestampColumnName,Kusto.Charting.AnomalyDataHelper2.ValueColumnName,Kusto.Charting.AnomalyDataHelper2.SeriesColumnName));result.append("[");$t=Bridge.getEnumerator(items,Kusto.Charting.DataItem);try{while($t.moveNext())item=$t.Current,result.append("datetime("),result.append(System.DateTime.format(item.ArgumentDateTime,"o")),result.append("),"),result.append("double("),result.append(System.Double.format(item.ValueData)),result.append("),"),seriesName=Kusto.Cloud.Platform.Text.StringLiteral.GetLiteral(item.SeriesName),result.append(seriesName),result.appendLine(",")}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return result.appendLine("]"),result.toString()},EnchanceDataWithAnomalyDataFromColumns:function(data,anomalyColumns,anomalySeriesMap){var $t,$t1,valueData,anomalyColumn,anomalyData,anomalyPointsCount,i,valuePoint,anomalyPoint,seriesName,a,a1;anomalySeriesMap.v=new(System.Collections.Generic.Dictionary$2(System.String,System.String).ctor);var result=new(System.Collections.Generic.List$1(Kusto.Charting.DataItem).ctor),anomalyColumnsHashset=new(System.Collections.Generic.HashSet$1(System.String).$ctor1)(anomalyColumns),valueColumn=System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).where(function(d){return!anomalyColumnsHashset.contains(d.ValueName)}).select($asm.$.Kusto.Charting.AnomalyDataHelper2.f2).firstOrDefault(null,null);if(System.String.isNullOrEmpty(valueColumn))return data;result.AddRange(System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).where(function(d){return!anomalyColumnsHashset.contains(d.ValueName)}));valueData=System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).where(function(d){return System.String.equals(d.ValueName,valueColumn)}).ToArray(Kusto.Charting.DataItem);$t=Bridge.getEnumerator(anomalyColumns);try{while($t.moveNext()){if(anomalyColumn={v:$t.Current},anomalyData=System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).where(function($me,anomalyColumn){return function(d){return System.String.equals(d.ValueName,anomalyColumn.v)}}(this,anomalyColumn)).ToArray(Kusto.Charting.DataItem),valueData.length!==anomalyData.length)return data;for(anomalyPointsCount=0,i=0;i<valueData.length;i=i+1|0)valuePoint=valueData[System.Array.index(i,valueData)],anomalyPoint=anomalyData[System.Array.index(i,anomalyData)],anomalyPoint.ValueData!==0&&(anomalyPointsCount=anomalyPointsCount+1|0,seriesName=(anomalyPoint.SeriesName||"")+(Kusto.Charting.AnomalyDataHelper2.AnomalySerieSuffix||""),a=($t1=new Kusto.Charting.DataItem,$t1.ArgumentDateTime=anomalyPoint.ArgumentDateTime,$t1.ArgumentData=anomalyPoint.ArgumentData,$t1.SeriesName=seriesName,$t1.ValueData=valuePoint.ValueData,$t1.PrefferredChartKind=Kusto.Charting.ChartKind.Point,$t1),result.add(a),anomalySeriesMap.v.containsKey(seriesName)||anomalySeriesMap.v.add(seriesName,valuePoint.SeriesName));anomalyPointsCount===0&&(a1=($t1=new Kusto.Charting.DataItem,$t1.ArgumentDateTime=anomalyData[System.Array.index(0,anomalyData)].ArgumentDateTime,$t1.ArgumentData=null,$t1.SeriesName=(anomalyData[System.Array.index(0,anomalyData)].SeriesName||"")+(Kusto.Charting.AnomalyDataHelper2.AnomalySerieSuffix||""),$t1.ValueData=Number.NaN,$t1.PrefferredChartKind=Kusto.Charting.ChartKind.Point,$t1),result.add(a1))}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return result}}}});Bridge.ns("Kusto.Charting.AnomalyDataHelper2",$asm.$);Bridge.apply($asm.$.Kusto.Charting.AnomalyDataHelper2,{f1:function(r){var $t1;return $t1=new Kusto.Charting.DataItem,$t1.ArgumentDateTime=r.Timestamp,$t1.ArgumentData=System.DateTime.format(r.Timestamp,"o"),$t1.SeriesName=(r.Series||"")+(Kusto.Charting.AnomalyDataHelper2.AnomalySerieSuffix||""),$t1.ValueData=r.Value,$t1.PrefferredChartKind=Kusto.Charting.ChartKind.Point,$t1},f2:function(d){return d.ValueName}});Bridge.define("Kusto.Charting.AnomalyDataHelper2.AnomalyInputOutputRecord",{$kind:"nested class",fields:{Timestamp:null,Value:0,Series:null},ctors:{init:function(){this.Timestamp=System.DateTime.getDefaultValue()}}});Bridge.define("Kusto.Charting.ArgumentColumnType",{$kind:"enum",statics:{fields:{None:0,Numeric:2,DateTime:4,TimeSpan:8,String:16,Object:32,Geospatial:64,DateTimeOrTimeSpan:12,StringOrDateTimeOrTimeSpan:28,NumericOrDateTimeOrTimeSpan:14,StringOrObject:48,AllExceptGeospatial:62}},$flags:!0});Bridge.define("Kusto.Charting.ArgumentRestrictions",{$kind:"enum",statics:{fields:{None:0,MustHave:1,NotIncludedInSeries:2,GeospatialAsSeries:4}},$flags:!0});Bridge.define("Kusto.Charting.ChartKind",{$kind:"enum",statics:{fields:{Unspecified:0,Line:1,Point:2,Bar:3}}});Bridge.define("Kusto.Charting.ChartLimitsPolicy",{props:{MaxPointsPerChartError:0,MaxPointsPerChartWarning:0,MaxSeriesPerChartError:0,MaxSeriesPerChartWarning:0,MaxDatetimePeriodError:null},ctors:{init:function(){this.MaxDatetimePeriodError=new System.TimeSpan},ctor:function(maxPointsPerChartError,maxPointsPerChartWarning,maxSeriesPerChartError,maxSeriesPerChartWarning,maxDatetimePeriodError){this.$initialize();this.MaxPointsPerChartError=maxPointsPerChartError;this.MaxPointsPerChartWarning=maxPointsPerChartWarning;this.MaxSeriesPerChartError=maxSeriesPerChartError;this.MaxSeriesPerChartWarning=maxSeriesPerChartWarning;this.MaxDatetimePeriodError=maxDatetimePeriodError}}});Bridge.define("Kusto.Charting.DataChartsHelper",{statics:{fields:{c_minFractionOfIntervalsToDetectDistribution:0,c_minElementsAmountToFillGapsWithNans:0,c_decimalRoundingPrecision:0,c_doubleAcceptableApproximation:0,c_defaultArgumentNumeric:0,c_defaultArgumentString:null,c_defaultArgumentDatetime:null},ctors:{init:function(){this.c_defaultArgumentDatetime=System.DateTime.getDefaultValue();this.c_minFractionOfIntervalsToDetectDistribution=.8;this.c_minElementsAmountToFillGapsWithNans=4;this.c_decimalRoundingPrecision=8;this.c_doubleAcceptableApproximation=1e-8;this.c_defaultArgumentNumeric=Number.NaN;this.c_defaultArgumentString="<empty>";this.c_defaultArgumentDatetime=Bridge.getDefaultValue(System.DateTime)}},methods:{GetData:function(table,argumentColumnType,argumentRestrictions,seriesColumns,accumulateResults,xColumn,yColumns){argumentColumnType===void 0&&(argumentColumnType=16);argumentRestrictions===void 0&&(argumentRestrictions=0);seriesColumns===void 0&&(seriesColumns=null);accumulateResults===void 0&&(accumulateResults=!1);xColumn===void 0&&(xColumn=null);yColumns===void 0&&(yColumns=null);var chartProps=Kusto.Charting.DataChartsHelper.GetMetaData(table,argumentColumnType,argumentRestrictions,seriesColumns,xColumn,yColumns);return Kusto.Charting.DataChartsHelper.GetData$1(table,chartProps,accumulateResults)},GetData$1:function(table,metaData,accumulateResults){var i,baseSeriesName;if(accumulateResults===void 0&&(accumulateResults=!1),table==null||metaData==null)return System.Linq.Enumerable.empty();var tableSchema=table.Kusto$Charting$IChartingDataSource$GetSchema(),allColumns=System.Linq.Enumerable.from(tableSchema,System.Tuple$2(System.String,Kusto.Charting.ArgumentColumnType)).select($asm.$.Kusto.Charting.DataChartsHelper.f1).toList(Kusto.Charting.DataChartsHelper.ColumnDesc),seriesList=System.Linq.Enumerable.from(metaData.Kusto$Charting$IChartMetaData$SeriesIndexes,System.Int32).any()?System.Linq.Enumerable.from(allColumns,Kusto.Charting.DataChartsHelper.ColumnDesc).where(function(col){return System.Linq.Enumerable.from(metaData.Kusto$Charting$IChartMetaData$SeriesIndexes,System.Int32).contains(col.Index)}).ToArray(Kusto.Charting.DataChartsHelper.ColumnDesc):null,dataColumns=System.Linq.Enumerable.from(allColumns,Kusto.Charting.DataChartsHelper.ColumnDesc).where(function(col){return System.Linq.Enumerable.from(metaData.Kusto$Charting$IChartMetaData$DataIndexes,System.Int32).contains(col.Index)}).ToArray(Kusto.Charting.DataChartsHelper.ColumnDesc),unusedColumns=System.Linq.Enumerable.from(allColumns,Kusto.Charting.DataChartsHelper.ColumnDesc).where(function(col){return System.Linq.Enumerable.from(metaData.Kusto$Charting$IChartMetaData$UnusedIndexes,System.Int32).contains(col.Index)}).ToArray(Kusto.Charting.DataChartsHelper.ColumnDesc),argumentData=new Kusto.Charting.DataChartsHelper.ArgumentData(metaData.Kusto$Charting$IChartMetaData$ArgumentDataColumnIndex,metaData.Kusto$Charting$IChartMetaData$ArgumentDataColumnIndex!==-1?allColumns.getItem(metaData.Kusto$Charting$IChartMetaData$ArgumentDataColumnIndex).Name:"",metaData.Kusto$Charting$IChartMetaData$ArgumentDataColumnIndex!==-1?System.Linq.Enumerable.from(tableSchema,System.Tuple$2(System.String,Kusto.Charting.ArgumentColumnType)).elementAt(metaData.Kusto$Charting$IChartMetaData$ArgumentDataColumnIndex).Item2:Kusto.Charting.ArgumentColumnType.None,metaData.Kusto$Charting$IChartMetaData$ArgumentColumnType,metaData.Kusto$Charting$IChartMetaData$GeospatialColumnIndexes),result=new(System.Collections.Generic.List$1(Kusto.Charting.DataItem).ctor),lastValues=new(System.Collections.Generic.Dictionary$2(System.String,System.Double).ctor);for(i=0;i<table.Kusto$Charting$IChartingDataSource$RowsCount;i=i+1|0)baseSeriesName=Kusto.Charting.DataChartsHelper.GetBaseSeriesName(table,seriesList,i),metaData.Kusto$Charting$IChartMetaData$IsDataFormedAsSeries?Kusto.Charting.DataChartsHelper.ResolveDataSeriesFromDataRow(result,table,dataColumns,unusedColumns,i,baseSeriesName,metaData.Kusto$Charting$IChartMetaData$ArgumentColumnType,accumulateResults,metaData.Kusto$Charting$IChartMetaData$ArgumentDataColumnIndex):(argumentData.ResolveArgumentFromRow(table,i),Kusto.Charting.DataChartsHelper.ResolveDataItemsFromDataRow(result,table,dataColumns,unusedColumns,i,baseSeriesName,argumentData,lastValues,accumulateResults));return result},GetMetaData:function(table,argumentColumnType,argumentRestrictions,seriesColumns,xColumn,yColumns){var tableSchema,metaData,isTableValidForCharting,tempDataIndex,firstDataIndex;return(argumentColumnType===void 0&&(argumentColumnType=16),argumentRestrictions===void 0&&(argumentRestrictions=0),seriesColumns===void 0&&(seriesColumns=null),xColumn===void 0&&(xColumn=null),yColumns===void 0&&(yColumns=null),tableSchema=table.Kusto$Charting$IChartingDataSource$GetSchema(),tableSchema==null||!System.Linq.Enumerable.from(tableSchema,System.Tuple$2(System.String,Kusto.Charting.ArgumentColumnType)).any())?null:(seriesColumns==null&&(seriesColumns=new(System.Collections.Generic.List$1(System.String).ctor)),yColumns==null&&(yColumns=new(System.Collections.Generic.List$1(System.String).ctor)),metaData={v:new Kusto.Charting.DataChartsHelper.ChartMetaData(argumentColumnType)},Kusto.Charting.DataChartsHelper.ResolvePredefinedColumnsIndexes(table,seriesColumns,yColumns,xColumn,argumentRestrictions,metaData),isTableValidForCharting=!1,metaData.v.IsDataFormedAsSeries||(isTableValidForCharting=Kusto.Charting.DataChartsHelper.DetectChartDimensionsUsingColumnTypesAndData(tableSchema,table,argumentRestrictions,metaData),metaData.v.IsDataFormedAsSeries=!isTableValidForCharting),metaData.v.IsDataFormedAsSeries&&(isTableValidForCharting=Kusto.Charting.DataChartsHelper.DetectChartDimensionsUsingData(tableSchema,table,seriesColumns,argumentRestrictions,metaData)),!isTableValidForCharting)?null:(tempDataIndex=metaData.v.DataIndexes,metaData.v.DataIndexesList=System.Linq.Enumerable.from(tableSchema,System.Tuple$2(System.String,Kusto.Charting.ArgumentColumnType)).select(function(col,index){return index!==metaData.v.ArgumentDataColumnIndex&&!metaData.v.GeospatiaColumnlIndexesList.contains(index)&&(!System.Linq.Enumerable.from(tempDataIndex,System.Int32).any()||System.Linq.Enumerable.from(tempDataIndex,System.Int32).contains(index))&&!System.Linq.Enumerable.from(metaData.v.SeriesIndexes,System.Int32).contains(index)&&(!metaData.v.IsDataFormedAsSeries&&System.Enum.hasFlag(Kusto.Charting.ArgumentColumnType.NumericOrDateTimeOrTimeSpan,Bridge.box(col.Item2,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType)))||metaData.v.IsDataFormedAsSeries&&System.Enum.hasFlag(Kusto.Charting.ArgumentColumnType.StringOrObject,Bridge.box(col.Item2,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType))))?index:-1}).where($asm.$.Kusto.Charting.DataChartsHelper.f2).toList(System.Int32),metaData.v.ArgumentColumnType===Kusto.Charting.ArgumentColumnType.Geospatial&&(metaData.v.DataIndexesList.Count>1&&(firstDataIndex=System.Linq.Enumerable.from(metaData.v.DataIndexesList,System.Int32).first(),metaData.v.DataIndexesList.clear(),metaData.v.DataIndexesList.add(firstDataIndex)),argumentRestrictions===Kusto.Charting.ArgumentRestrictions.GeospatialAsSeries&&(metaData.v.ArgumentDataColumnIndex===-1||!System.Linq.Enumerable.from(metaData.v.DataIndexesList,System.Int32).any())))?null:(metaData.v.UnusedIndexes=System.Linq.Enumerable.range(0,System.Linq.Enumerable.from(tableSchema,System.Tuple$2(System.String,Kusto.Charting.ArgumentColumnType)).count()).except(metaData.v.DataIndexes).except(metaData.v.GeospatialColumnIndexes).except(metaData.v.SeriesIndexes).except(System.Array.init([metaData.v.ArgumentDataColumnIndex],System.Int32)).toList(System.Int32),metaData.v)},IsNumericType:function(type,considerDateTimeAndTimeSpanAsNumeric){if(considerDateTimeAndTimeSpanAsNumeric===void 0&&(considerDateTimeAndTimeSpanAsNumeric=!0),type==null)return!1;else if(Bridge.referenceEquals(type,System.TimeSpan)||Bridge.referenceEquals(type,System.DateTime))return considerDateTimeAndTimeSpanAsNumeric;else if(Bridge.referenceEquals(type,System.Byte)||Bridge.referenceEquals(type,System.Decimal)||Bridge.referenceEquals(type,System.Double)||Bridge.referenceEquals(type,System.Int16)||Bridge.referenceEquals(type,System.Int32)||Bridge.referenceEquals(type,System.Int64)||Bridge.referenceEquals(type,System.SByte)||Bridge.referenceEquals(type,System.UInt16)||Bridge.referenceEquals(type,System.UInt32)||Bridge.referenceEquals(type,System.UInt64))return!0;else if(Bridge.referenceEquals(type,System.Object)&&Bridge.Reflection.isGenericType(type)&&Bridge.referenceEquals(Bridge.Reflection.getGenericTypeDefinition(type),System.Nullable$1))return Kusto.Charting.DataChartsHelper.IsNumericType(System.Nullable.getUnderlyingType(type),considerDateTimeAndTimeSpanAsNumeric);return!1},GetAllArgumentColumns:function(table,columnsToExclude){var i,columnName;columnsToExclude===void 0&&(columnsToExclude=null);var result=new(System.Collections.Generic.List$1(System.String).ctor),schema=table.Kusto$Charting$IChartingDataSource$GetSchema(),n=System.Linq.Enumerable.from(table.Kusto$Charting$IChartingDataSource$GetSchema(),System.Tuple$2(System.String,Kusto.Charting.ArgumentColumnType)).count(),columnsToExcludeDefined=columnsToExclude!=null&&System.Linq.Enumerable.from(columnsToExclude,System.String).any();if(n>1)for(i=0;i<n;i=i+1|0)(columnName=System.Linq.Enumerable.from(schema,System.Tuple$2(System.String,Kusto.Charting.ArgumentColumnType)).elementAt(i).Item1,columnsToExcludeDefined&&System.Linq.Enumerable.from(columnsToExclude,System.String).contains(columnName))||result.add(columnName);return result},GetFirstStringColumnName:function(table,amountToSkip){var schema,n,i;for(amountToSkip===void 0&&(amountToSkip=0),schema=table.Kusto$Charting$IChartingDataSource$GetSchema(),n=System.Linq.Enumerable.from(table.Kusto$Charting$IChartingDataSource$GetSchema(),System.Tuple$2(System.String,Kusto.Charting.ArgumentColumnType)).count(),i=0;i<n;i=i+1|0)if(System.Linq.Enumerable.from(schema,System.Tuple$2(System.String,Kusto.Charting.ArgumentColumnType)).elementAt(i).Item2===Kusto.Charting.ArgumentColumnType.String)if(amountToSkip===0)return System.Linq.Enumerable.from(schema,System.Tuple$2(System.String,Kusto.Charting.ArgumentColumnType)).elementAt(i).Item1;else amountToSkip=amountToSkip-1|0;return null},FillGapsWithNaNs:function(data,argType){var $t,dataGroups,result,dg,serieDataItems;if(data==null||!System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).any()||data.Count<Kusto.Charting.DataChartsHelper.c_minElementsAmountToFillGapsWithNans)return data;dataGroups=System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).groupBy($asm.$.Kusto.Charting.DataChartsHelper.f3);result=new(System.Collections.Generic.List$1(Kusto.Charting.DataItem).$ctor2)(data.Count);$t=Bridge.getEnumerator(dataGroups);try{while($t.moveNext())dg=$t.Current,serieDataItems=Kusto.Charting.DataChartsHelper.FillGapsWithNaNs$1(dg.select($asm.$.Kusto.Charting.DataChartsHelper.f4),argType),result.AddRange(serieDataItems)}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return result},FillGapsWithNaNs$1:function(data,argType){var $t,argData,result,prevItem,item,currentDistance,gapLength,mod,j,newItem;if(System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).count()<Kusto.Charting.DataChartsHelper.c_minElementsAmountToFillGapsWithNans)return data;switch(argType){case Kusto.Charting.ArgumentColumnType.TimeSpan:case Kusto.Charting.ArgumentColumnType.DateTime:data=System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).orderBy($asm.$.Kusto.Charting.DataChartsHelper.f5);argData=System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).select($asm.$.Kusto.Charting.DataChartsHelper.f6).ToArray(System.Double);break;case Kusto.Charting.ArgumentColumnType.Numeric:data=System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).orderBy($asm.$.Kusto.Charting.DataChartsHelper.f7);argData=System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).select($asm.$.Kusto.Charting.DataChartsHelper.f7).ToArray(System.Double);break;default:return data}if(argData==null||!System.Linq.Enumerable.from(argData,System.Double).any())return data;var distances=Kusto.Charting.DataChartsHelper.SelectSuccessivePairs(argData),maxGroup=Kusto.Charting.DataChartsHelper.GetTopGroupByCount(distances,argType),initialDistance=maxGroup.Item1;if(maxGroup==null||System.Convert.toDouble(Bridge.box(maxGroup.Item2,System.Int32))/System.Linq.Enumerable.from(distances,System.Double).count()<Kusto.Charting.DataChartsHelper.c_minFractionOfIntervalsToDetectDistribution)return data;result=new(System.Collections.Generic.List$1(Kusto.Charting.DataItem).$ctor2)(System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).count());prevItem=null;$t=Bridge.getEnumerator(data,Kusto.Charting.DataItem);try{while($t.moveNext()){if(item=$t.Current,prevItem==null){result.add(item);prevItem=item;continue}if(currentDistance=Kusto.Charting.DataChartsHelper.GetDistance(prevItem,item,argType),currentDistance-initialDistance>Kusto.Charting.DataChartsHelper.c_doubleAcceptableApproximation){gapLength=0;try{gapLength=System.Convert.toInt32(Bridge.box(Bridge.Math.round(currentDistance/initialDistance,0,6),System.Double,System.Double.format,System.Double.getHashCode))}catch($e1){return $e1=System.Exception.create($e1),data}if(mod=currentDistance-gapLength*initialDistance,mod>Kusto.Charting.DataChartsHelper.c_doubleAcceptableApproximation)return data;for(j=1;j<gapLength;j=j+1|0){newItem=prevItem.Clone();newItem.ValueData=Number.NaN;switch(argType){case Kusto.Charting.ArgumentColumnType.Numeric:newItem.ArgumentNumeric+=initialDistance*j;newItem.ArgumentData=System.Double.format(newItem.ArgumentNumeric);break;case Kusto.Charting.ArgumentColumnType.DateTime:newItem.ArgumentDateTime=System.DateTime.addTicks(newItem.ArgumentDateTime,System.Convert.toInt64(Bridge.box(initialDistance,System.Double,System.Double.format,System.Double.getHashCode)).mul(System.Int64(j)));newItem.ArgumentData=System.DateTime.format(newItem.ArgumentDateTime);break;case Kusto.Charting.ArgumentColumnType.TimeSpan:newItem.ArgumentDateTime=System.DateTime.addTicks(newItem.ArgumentDateTime,System.Convert.toInt64(Bridge.box(initialDistance,System.Double,System.Double.format,System.Double.getHashCode)).mul(System.Int64(j)));newItem.ArgumentData=Bridge.toString(System.TimeSpan.fromTicks(System.DateTime.getTicks(newItem.ArgumentDateTime)));break}result.add(newItem)}}result.add(item);prevItem=item}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return result},ResolveArgumentType:function(data){if(data==null||!System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).any())return Kusto.Charting.ArgumentColumnType.None;var ts={};return System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).all(function(d){return!System.String.isNullOrEmpty(d.ArgumentData)&&System.String.indexOf(d.ArgumentData,":")>0&&System.TimeSpan.tryParse(d.ArgumentData,null,ts)})?Kusto.Charting.ArgumentColumnType.TimeSpan:System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).all($asm.$.Kusto.Charting.DataChartsHelper.f8)?Kusto.Charting.ArgumentColumnType.DateTime:System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).any($asm.$.Kusto.Charting.DataChartsHelper.f9)?Kusto.Charting.ArgumentColumnType.Numeric:Kusto.Charting.ArgumentColumnType.String},ValidateData:function(data,argType,limits,error){var $t,minValue,maxValue,item,seriesCount,dataPoints;if(error.v="",data==null||!System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).any())return error.v="Data was not provided",Kusto.Charting.ValidationStatus.PolicyViolationError;if(System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).where($asm.$.Kusto.Charting.DataChartsHelper.f10).any())return error.v="Data includes non-finite values",Kusto.Charting.ValidationStatus.PolicyViolationError;if(argType===Kusto.Charting.ArgumentColumnType.Geospatial&&System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).any($asm.$.Kusto.Charting.DataChartsHelper.f11))return error.v="Data includes invalid geospatial coordinates. Longitude values must be in range [-180,180]. Latitude values must be in range [-90,90].",Kusto.Charting.ValidationStatus.PolicyViolationError;if(argType===Kusto.Charting.ArgumentColumnType.DateTime&&System.TimeSpan.neq(limits.MaxDatetimePeriodError,Bridge.getDefaultValue(System.TimeSpan))){minValue=System.DateTime.getMaxValue();maxValue=System.DateTime.getMinValue();$t=Bridge.getEnumerator(data,Kusto.Charting.DataItem);try{while($t.moveNext())item=$t.Current,System.DateTime.lt(maxValue,item.ArgumentDateTime)&&(maxValue=item.ArgumentDateTime),System.DateTime.gt(minValue,item.ArgumentDateTime)&&(minValue=item.ArgumentDateTime)}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}if(System.DateTime.gt(minValue,maxValue)||System.TimeSpan.gt(System.DateTime.subdd(maxValue,minValue),limits.MaxDatetimePeriodError))return error.v="Input time range is too wide to fit into chart",Kusto.Charting.ValidationStatus.PolicyViolationError}return(seriesCount=System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).select($asm.$.Kusto.Charting.DataChartsHelper.f3).distinct().count(),dataPoints=System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).count(),seriesCount>limits.MaxSeriesPerChartError)?(error.v="Too many series\n"+(System.String.format("Provided data contains {0} series which exceeds allowed amount for the chart: {1}",Bridge.box(seriesCount,System.Int32),Bridge.box(limits.MaxSeriesPerChartError,System.Int32))||""),Kusto.Charting.ValidationStatus.PolicyViolationError):dataPoints>limits.MaxPointsPerChartError?(error.v="Too many points\n"+(System.String.format("Provided data contains {0} points which exceeds allowed amount for the chart: {1}",Bridge.box(dataPoints,System.Int32),Bridge.box(limits.MaxPointsPerChartError,System.Int32))||""),Kusto.Charting.ValidationStatus.PolicyViolationError):seriesCount>limits.MaxSeriesPerChartWarning||dataPoints>limits.MaxPointsPerChartWarning?(error.v="Too many series or data points\nChart can perform badly when large amount of data is used.\n"+(System.String.format("You are about to plot {0} series with {1} points.",Bridge.box(seriesCount,System.Int32),Bridge.box(dataPoints,System.Int32))||""),Kusto.Charting.ValidationStatus.PolicyViolationWarning):Kusto.Charting.ValidationStatus.Valid},ResolveJsonArrayType:function(value){var arr;try{arr=Newtonsoft.Json.JsonConvert.DeserializeObject(value,System.Array.type(System.String))}catch($e1){return $e1=System.Exception.create($e1),Kusto.Charting.ArgumentColumnType.None}return arr==null||System.Linq.Enumerable.from(arr,System.String).count()===0?Kusto.Charting.ArgumentColumnType.None:Kusto.Charting.DataChartsHelper.ArrayIsDouble(arr)?Kusto.Charting.ArgumentColumnType.Numeric:Kusto.Charting.DataChartsHelper.ArrayIsTimespan(arr)?Kusto.Charting.ArgumentColumnType.TimeSpan:Kusto.Charting.DataChartsHelper.ArrayIsDatetime(arr)?Kusto.Charting.ArgumentColumnType.DateTime:Kusto.Charting.ArgumentColumnType.String},SelectSuccessivePairs:function(collection){var $t,item;if(collection==null||System.Linq.Enumerable.from(collection,System.Double).count()<=1)return null;var result=System.Array.init(System.Linq.Enumerable.from(collection,System.Double).count()-1|0,0,System.Double),isFirstElement=!0,prev=Bridge.getDefaultValue(System.Double),idx=0;$t=Bridge.getEnumerator(collection);try{while($t.moveNext()){if(item=$t.Current,isFirstElement){isFirstElement=!1;prev=item;continue}result[System.Array.index(idx,result)]=Math.abs(item-prev);idx=idx+1|0;prev=item}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return result},GetTopGroupByCount:function(data,sequenceType){var $t,sorted=System.Linq.Enumerable.from(data,System.Double).orderBy($asm.$.Kusto.Charting.DataChartsHelper.f4),currentGroup=new(System.Collections.Generic.List$1(System.Double).$ctor2)(System.Linq.Enumerable.from(data,System.Double).count()),maxGroupCount=0,maxGroupValue=0,prevNum=null,num,diff;$t=Bridge.getEnumerator(sorted);try{while($t.moveNext()){if(num=$t.Current,!System.Nullable.hasValue(prevNum)){prevNum=num;currentGroup.add(num);continue}diff=num-System.Nullable.getValue(prevNum);diff>Kusto.Charting.DataChartsHelper.c_doubleAcceptableApproximation&&(System.Linq.Enumerable.from(currentGroup,System.Double).count()>maxGroupCount&&(maxGroupCount=System.Linq.Enumerable.from(currentGroup,System.Double).count(),maxGroupValue=Bridge.Math.round(System.Linq.Enumerable.from(currentGroup,System.Double).average(),Kusto.Charting.DataChartsHelper.c_decimalRoundingPrecision,6)),currentGroup.clear());currentGroup.add(num);prevNum=num}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return{Item1:maxGroupValue,Item2:maxGroupCount}},GetDistance:function(start,end,sequenceType){if(start==null||end==null)return-1;var distance=-1;switch(sequenceType){case Kusto.Charting.ArgumentColumnType.TimeSpan:case Kusto.Charting.ArgumentColumnType.DateTime:distance=System.Int64.toNumber(System.DateTime.getTicks(end.ArgumentDateTime).sub(System.DateTime.getTicks(start.ArgumentDateTime)));break;case Kusto.Charting.ArgumentColumnType.Numeric:distance=end.ArgumentNumeric-start.ArgumentNumeric;break}return Bridge.Math.round(Math.abs(distance),Kusto.Charting.DataChartsHelper.c_decimalRoundingPrecision,6)},ResolvePredefinedColumnsIndexes:function(data,seriesColumns,yColumns,xColumn,argumentRestrictions,metaData){var dataIsSeries=null,columns=data.Kusto$Charting$IChartingDataSource$GetSchema(),i,column,columnName,isY,isX,columnType,isSeries,value,type;if(argumentRestrictions===Kusto.Charting.ArgumentRestrictions.GeospatialAsSeries&&System.Linq.Enumerable.from(seriesColumns,System.String).any()&&(System.Linq.Enumerable.from(yColumns,System.String).any()||!System.String.isNullOrWhiteSpace(xColumn)))throw new Kusto.Charting.SeriesCreationException("GeospatialAsSeries: it's not possible to set both series and x/y columns.");for(i=0;i<System.Linq.Enumerable.from(columns,System.Tuple$2(System.String,Kusto.Charting.ArgumentColumnType)).count();i=i+1|0){if(column=System.Linq.Enumerable.from(columns,System.Tuple$2(System.String,Kusto.Charting.ArgumentColumnType)).elementAt(i),columnName=column.Item1,System.Linq.Enumerable.from(seriesColumns,System.String).any()&&System.Linq.Enumerable.from(seriesColumns,System.String).contains(columnName)){metaData.v.SeriesIndexesList.add(i);argumentRestrictions===Kusto.Charting.ArgumentRestrictions.GeospatialAsSeries&&metaData.v.GeospatiaColumnlIndexesList.add(i);continue}if(isY=System.Linq.Enumerable.from(yColumns,System.String).any()&&System.Linq.Enumerable.from(yColumns,System.String).contains(columnName),isX=!System.String.isNullOrWhiteSpace(xColumn)&&Bridge.referenceEquals(xColumn,columnName),isY||isX){if(columnType=column.Item2,isSeries=!1,System.Enum.hasFlag(Kusto.Charting.ArgumentColumnType.StringOrObject,Bridge.box(columnType,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType)))&&metaData.v.ArgumentColumnType!==Kusto.Charting.ArgumentColumnType.Geospatial&&(value=Bridge.toString(data.Kusto$Charting$IChartingDataSource$GetValue(0,i)),type=Kusto.Charting.DataChartsHelper.ResolveJsonArrayType(value),type!==Kusto.Charting.ArgumentColumnType.None&&(columnType=type,isSeries=!0)),System.Nullable.hasValue(dataIsSeries)){if(System.Nullable.getValue(dataIsSeries)!==isSeries)throw new Kusto.Charting.SeriesCreationException("Y-Axes and X-Axis both should be defined as scalars or as series");}else dataIsSeries=isSeries;if(metaData.v.ArgumentColumnType===Kusto.Charting.ArgumentColumnType.Geospatial)metaData.v.GeospatiaColumnlIndexesList.add(i),argumentRestrictions===Kusto.Charting.ArgumentRestrictions.GeospatialAsSeries&&metaData.v.SeriesIndexesList.add(i);else if(isX)if(System.Enum.hasFlag(metaData.v.ArgumentColumnType,Bridge.box(columnType,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType))))metaData.v.ArgumentDataColumnIndex=i;else throw new Kusto.Charting.SeriesCreationException(System.String.format("Type of column {0}, provided as X-Axis, does not match required by chart type",[columnName]));else if(isY)if(System.Enum.hasFlag(Kusto.Charting.ArgumentColumnType.NumericOrDateTimeOrTimeSpan,Bridge.box(columnType,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType))))metaData.v.DataIndexesList.add(i);else throw new Kusto.Charting.SeriesCreationException(System.String.format("Column {0}, provided as Y-Axis, sould be one of types: Numeric, DateTime, Timespan",[columnName]));}}if(metaData.v.IsDataFormedAsSeries=System.Nullable.hasValue(dataIsSeries)?System.Nullable.getValue(dataIsSeries):!1,!System.Linq.Enumerable.from(metaData.v.DataIndexesList,System.Int32).any()&&System.Linq.Enumerable.from(yColumns,System.String).any()&&metaData.v.ArgumentColumnType!==Kusto.Charting.ArgumentColumnType.Geospatial)throw new Kusto.Charting.SeriesCreationException("Any of columns defined as Y-Axes were not found in data, not of an appropriate type or used as argument or series");if(!System.String.isNullOrWhiteSpace(xColumn)&&metaData.v.ArgumentDataColumnIndex<0&&metaData.v.ArgumentColumnType!==Kusto.Charting.ArgumentColumnType.Geospatial)throw new Kusto.Charting.SeriesCreationException(System.String.format("Column {0}, provided as X-Axis, was not found in data",[xColumn]));if(System.Linq.Enumerable.from(seriesColumns,System.String).any()&&!System.Linq.Enumerable.from(metaData.v.SeriesIndexesList,System.Int32).any())throw new Kusto.Charting.SeriesCreationException("Any of columns, provided as Series, were not found in data");},ResolveDataSeriesFromDataRow:function(result,table,columns,propertyColumns,rowIdx,baseSeriesName,argumentColumnType,accumulate,argumentDataColumnIndex){var $t,$t1,$t2,argumentValue=table.Kusto$Charting$IChartingDataSource$GetValue(rowIdx,argumentDataColumnIndex),argumentActualType=Kusto.Charting.DataChartsHelper.ResolveJsonArrayType(Bridge.toString(argumentValue)),values,j,argumentData,dataItem;$t=Bridge.getEnumerator(columns,Kusto.Charting.DataChartsHelper.ColumnDesc);try{while($t.moveNext()){var column=$t.Current,cellValue=table.Kusto$Charting$IChartingDataSource$GetValue(rowIdx,column.Index),value=($t1=Bridge.as(cellValue,System.String),$t1!=null?$t1:Bridge.toString(cellValue)),type=Kusto.Charting.DataChartsHelper.ResolveJsonArrayType(value);if(type!==Kusto.Charting.ArgumentColumnType.None&&System.Enum.hasFlag(Kusto.Charting.ArgumentColumnType.NumericOrDateTimeOrTimeSpan,Bridge.box(type,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType)))){if(values=Kusto.Charting.DataChartsHelper.ParseJsonArrayAsDouble(value,!0),values==null||System.Linq.Enumerable.from(value,System.Char).count()===0)continue;var seriesName=System.String.isNullOrEmpty(baseSeriesName)?column.Name:(baseSeriesName||"")+":"+(column.Name||""),lastValue=0,argumentDateTime=Kusto.Charting.DataChartsHelper.GetArgumentDateTimeArray(argumentValue,argumentActualType,argumentDataColumnIndex,System.Linq.Enumerable.from(values,System.Double).count()),argumentNumeric=Kusto.Charting.DataChartsHelper.GetArgumentNumericArray(argumentValue,argumentActualType,argumentDataColumnIndex,System.Linq.Enumerable.from(values,System.Double).count()),argumentString=Kusto.Charting.DataChartsHelper.GetArgumentStringArray(argumentValue,argumentActualType,argumentDataColumnIndex,System.Linq.Enumerable.from(values,System.Double).count()),argumentProperties=System.Linq.Enumerable.from(propertyColumns,Kusto.Charting.DataChartsHelper.ColumnDesc).select(function(p){return table.Kusto$Charting$IChartingDataSource$GetValue(rowIdx,p.Index)}).select($asm.$.Kusto.Charting.DataChartsHelper.f12).ToArray(System.Object);for(j=0;j<values.length;j=j+1|0)argumentData="",System.Enum.hasFlag(Kusto.Charting.ArgumentColumnType.DateTimeOrTimeSpan,Bridge.box(argumentColumnType,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType)))&&System.Enum.hasFlag(Kusto.Charting.ArgumentColumnType.DateTimeOrTimeSpan,Bridge.box(argumentActualType,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType)))?argumentData=System.DateTime.format(argumentDateTime[System.Array.index(j,argumentDateTime)]):System.Enum.hasFlag(argumentColumnType,Bridge.box(Kusto.Charting.ArgumentColumnType.Numeric,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType)))&&argumentActualType===Kusto.Charting.ArgumentColumnType.Numeric?argumentData=System.Double.format(argumentNumeric[System.Array.index(j,argumentNumeric)]):System.Enum.hasFlag(argumentColumnType,Bridge.box(Kusto.Charting.ArgumentColumnType.String,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType)))&&(argumentData=argumentString[System.Array.index(j,argumentString)],System.String.isNullOrEmpty(argumentData)&&(argumentData=Bridge.as(argumentValue,System.String))),dataItem=($t2=new Kusto.Charting.DataItem,$t2.ArgumentData=argumentData,$t2.ArgumentDateTime=argumentDateTime[System.Array.index(j,argumentDateTime)],$t2.ArgumentNumeric=argumentNumeric[System.Array.index(j,argumentNumeric)],$t2.ValueData=accumulate?values[System.Array.index(j,values)]+lastValue:values[System.Array.index(j,values)],$t2.ValueName=column.Name,$t2.SeriesName=seriesName,$t2.Properties=Kusto.Charting.DataChartsHelper.ResolvePropertiesFromMultiValue(table,argumentProperties,propertyColumns,j),$t2),System.String.isNullOrEmpty(dataItem.ArgumentData)&&(dataItem.ArgumentData=Kusto.Charting.DataChartsHelper.c_defaultArgumentString),result.add(dataItem),lastValue=dataItem.ValueData}}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}},ResolveProperties:function(table,rowIdx,propertyColumns){return Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(Kusto.Charting.DataChartsHelper.ColumnDesc,propertyColumns)?"":Bridge.toArray(System.Linq.Enumerable.from(propertyColumns,Kusto.Charting.DataChartsHelper.ColumnDesc).select(function(column){var cellValue=table.Kusto$Charting$IChartingDataSource$GetValue(rowIdx,column.Index),value=Kusto.Charting.DataChartsHelper.ObjectToString(cellValue);return System.String.format("{0}:{1}",column.Name,value)})).join(", ")},ResolvePropertiesFromMultiValue:function(table,properties,propertyColumns,j){return Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(Kusto.Charting.DataChartsHelper.ColumnDesc,propertyColumns)?"":Bridge.toArray(System.Linq.Enumerable.from(propertyColumns,Kusto.Charting.DataChartsHelper.ColumnDesc).zip(properties,$asm.$.Kusto.Charting.DataChartsHelper.f13).select(function(kvp){var value,arr;return value=(arr=Bridge.as(kvp.Item2,System.Array.type(System.String)))!=null?arr[System.Array.index(j,arr)]:Kusto.Charting.DataChartsHelper.ObjectToString(kvp.Item2),System.String.format("{0}:{1}",kvp.Item1.Name,value)})).join(", ")},ObjectToString:function(o){var s,d;return(s=Bridge.as(o,System.String))!=null?s:Bridge.equals(d=Bridge.is(o,System.DateTime)?System.Nullable.getValue(Bridge.cast(Bridge.unbox(o,System.DateTime),System.DateTime)):null,null)?Bridge.toString(o):Kusto.Cloud.Platform.Utils.ExtendedDateTime.ToUtcString(d)},GetArgumentStringArray:function(value,argumentColumnType,argumentDataColumnIndex,count){if(!System.Enum.hasFlag(argumentColumnType,Bridge.box(Kusto.Charting.ArgumentColumnType.String,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType)))||argumentDataColumnIndex<0)return System.Array.init(count,null,System.String);var result=Kusto.Charting.DataChartsHelper.ParseJsonArrayAsString(Bridge.toString(value));return result==null?System.Array.init(count,null,System.String):result},GetArgumentNumericArray:function(value,argumentColumnType,argumentDataColumnIndex,count){if(argumentColumnType!==Kusto.Charting.ArgumentColumnType.Numeric||argumentDataColumnIndex<0)return System.Linq.Enumerable.repeat(Kusto.Charting.DataChartsHelper.c_defaultArgumentNumeric,count).ToArray(System.Double);var result=Kusto.Charting.DataChartsHelper.ParseJsonArrayAsDouble(Bridge.toString(value));return result==null?System.Linq.Enumerable.repeat(Kusto.Charting.DataChartsHelper.c_defaultArgumentNumeric,count).ToArray(System.Double):result},GetArgumentDateTimeArray:function(value,argumentColumnType,argumentDataColumnIndex,count){if(!System.Enum.hasFlag(Kusto.Charting.ArgumentColumnType.DateTimeOrTimeSpan,Bridge.box(argumentColumnType,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType)))||argumentDataColumnIndex<0)return System.Linq.Enumerable.repeat(Kusto.Charting.DataChartsHelper.c_defaultArgumentDatetime,count).ToArray(System.DateTime);var result=Kusto.Charting.DataChartsHelper.ParseJsonArrayAsDateTime(Bridge.toString(value),argumentColumnType);return result==null?System.Linq.Enumerable.repeat(Kusto.Charting.DataChartsHelper.c_defaultArgumentDatetime,count).ToArray(System.DateTime):result},ResolveDataItemsFromDataRow:function(result,table,columns,propertyColumns,rowIdx,baseSeriesName,argumentData,lastValues,accumulate){var $t,$t1;System.Linq.Enumerable.from(columns,Kusto.Charting.DataChartsHelper.ColumnDesc).any()||argumentData.GeospatialArgumentDataType!==Kusto.Charting.ArgumentColumnType.Geospatial||result.add(($t=new Kusto.Charting.DataItem,$t.GeoCoordinates=argumentData.GeoCoordinates,$t.SeriesName=System.String.isNullOrWhiteSpace(baseSeriesName)?"":baseSeriesName,$t.Properties=Kusto.Charting.DataChartsHelper.ResolveProperties(table,rowIdx,propertyColumns),$t));$t=Bridge.getEnumerator(columns,Kusto.Charting.DataChartsHelper.ColumnDesc);try{while($t.moveNext()){var column=$t.Current,cellValue=table.Kusto$Charting$IChartingDataSource$GetValue(rowIdx,column.Index),value=Kusto.Charting.DataChartsHelper.TryConvertToDouble(cellValue,column.Type),lastValue={},dataItem=($t1=new Kusto.Charting.DataItem,$t1.ArgumentData=argumentData.Value,$t1.ArgumentDateTime=argumentData.DateTime,$t1.ArgumentNumeric=argumentData.NumericValue,$t1.ValueName=column.Name,$t1.Properties=Kusto.Charting.DataChartsHelper.ResolveProperties(table,rowIdx,propertyColumns),$t1);argumentData.GeospatialArgumentDataType===Kusto.Charting.ArgumentColumnType.Geospatial?(dataItem.SeriesName=System.String.isNullOrWhiteSpace(baseSeriesName)?"":baseSeriesName,dataItem.GeoCoordinates=argumentData.GeoCoordinates):dataItem.SeriesName=System.String.isNullOrEmpty(baseSeriesName)?column.Name:(baseSeriesName||"")+":"+(column.Name||"");dataItem.ValueData=accumulate&&lastValues.tryGetValue(dataItem.SeriesName,lastValue)?value+lastValue.v:value;result.add(dataItem);lastValues.setItem(dataItem.SeriesName,dataItem.ValueData)}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}},GetBaseSeriesName:function(table,seriesColumns,rowIdx){var $t,baseSeriesName="",baseSeriesNameBuilder,column,columnValue;if(seriesColumns!=null){baseSeriesNameBuilder=new System.Text.StringBuilder;$t=Bridge.getEnumerator(seriesColumns,Kusto.Charting.DataChartsHelper.ColumnDesc);try{while($t.moveNext())column=$t.Current,baseSeriesNameBuilder.getLength()>0&&baseSeriesNameBuilder.append(", "),columnValue=Bridge.toString(table.Kusto$Charting$IChartingDataSource$GetValue(rowIdx,column.Index)),columnValue=System.String.isNullOrWhiteSpace(columnValue)?Kusto.Charting.DataChartsHelper.c_defaultArgumentString:columnValue,baseSeriesNameBuilder.appendFormat("{0}:{1}",column.Name,columnValue)}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}baseSeriesName=baseSeriesNameBuilder.toString()}return baseSeriesName},TrySetGeoJSONPoint:function(value,point){point.v=null;try{point.v=Newtonsoft.Json.JsonConvert.DeserializeObject(value,Kusto.Charting.DataChartsHelper.GeoJSONPoint)}catch($e1){if($e1=System.Exception.create($e1),Bridge.is($e1,Newtonsoft.Json.JsonException))return!1;else throw $e1;}if((point.v!=null?point.v.coordinates:null)==null)return!1;else if(point.v.coordinates.length!==2)return!1;return!0},GetArgumentDateTime:function(value,argumentColumnType){if(!System.Enum.hasFlag(argumentColumnType,Bridge.box(Kusto.Charting.ArgumentColumnType.DateTime,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType)))&&!System.Enum.hasFlag(argumentColumnType,Bridge.box(Kusto.Charting.ArgumentColumnType.TimeSpan,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType))))return Kusto.Charting.DataChartsHelper.c_defaultArgumentDatetime;if(Bridge.is(value,System.DateTime))return System.Nullable.getValue(Bridge.cast(Bridge.unbox(value,System.DateTime),System.DateTime));else if(Bridge.is(value,System.TimeSpan))return Kusto.Charting.DataChartsHelper.TimeSpanToDateTime(System.Nullable.getValue(Bridge.cast(Bridge.unbox(value,System.TimeSpan),System.TimeSpan)));return Kusto.Charting.DataChartsHelper.c_defaultArgumentDatetime},ConvertToDouble:function(obj,type){var value=Kusto.Charting.DataChartsHelper.c_defaultArgumentNumeric;if(obj==null)return value;if(type===Kusto.Charting.ArgumentColumnType.DateTime)value=Kusto.Charting.DataChartsHelper.DateTimeToTotalSeconds(System.Nullable.getValue(Bridge.cast(Bridge.unbox(obj,System.DateTime),System.DateTime)));else if(type===Kusto.Charting.ArgumentColumnType.TimeSpan)value=Kusto.Charting.DataChartsHelper.TimeSpanToTotalSeconds(System.Nullable.getValue(Bridge.cast(Bridge.unbox(obj,System.TimeSpan),System.TimeSpan)));else try{value=System.Convert.toDouble(obj)}catch($e1){$e1=System.Exception.create($e1);value=Kusto.Charting.DataChartsHelper.c_defaultArgumentNumeric}return value},TryConvertToDouble:function(value,type){return value==null||Kusto.Charting.DataChartsHelper.IsEmptyValue(value)?Kusto.Charting.DataChartsHelper.c_defaultArgumentNumeric:Kusto.Charting.DataChartsHelper.ConvertToDouble(value,type)},DetectChartDimensionsUsingData:function(columns,table,seriesColumns,argumentRestrictions,metaData){var $t,resolvedColumnTypes=System.Array.init(System.Linq.Enumerable.from(columns,System.Tuple$2(System.String,Kusto.Charting.ArgumentColumnType)).count(),0,Kusto.Charting.ArgumentColumnType),firstNumericColumnIndex,i,column;if(table.Kusto$Charting$IChartingDataSource$RowsCount===0)return!1;for(firstNumericColumnIndex=-1,i=0;i<System.Linq.Enumerable.from(columns,System.Tuple$2(System.String,Kusto.Charting.ArgumentColumnType)).count();i=i+1|0)if((column=System.Linq.Enumerable.from(columns,System.Tuple$2(System.String,Kusto.Charting.ArgumentColumnType)).elementAt(i),resolvedColumnTypes[System.Array.index(i,resolvedColumnTypes)]=column.Item2,!metaData.v.DataIndexesList.contains(i))&&(column.Item2===Kusto.Charting.ArgumentColumnType.String||column.Item2===Kusto.Charting.ArgumentColumnType.Object)){var item=table.Kusto$Charting$IChartingDataSource$GetValue(0,i),value=($t=Bridge.as(item,System.String),$t!=null?$t:Bridge.toString(item)),type=Kusto.Charting.DataChartsHelper.ResolveJsonArrayType(value);if(type===Kusto.Charting.ArgumentColumnType.None){!System.Linq.Enumerable.from(seriesColumns,System.String).any()&&metaData.v.ArgumentDataColumnIndex<0&&metaData.v.SeriesIndexesList.add(i);continue}resolvedColumnTypes[System.Array.index(i,resolvedColumnTypes)]=type;System.Enum.hasFlag(metaData.v.ArgumentColumnType,Bridge.box(type,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType)))&&metaData.v.ArgumentDataColumnIndex<0?metaData.v.ArgumentDataColumnIndex=i:type===Kusto.Charting.ArgumentColumnType.Numeric&&firstNumericColumnIndex<0&&(firstNumericColumnIndex=i)}return Kusto.Charting.DataChartsHelper.CompleteChartDimentionsDetection(columns,argumentRestrictions,firstNumericColumnIndex,resolvedColumnTypes,metaData)},DetectChartDimensionsUsingColumnTypesAndData:function(columns,table,argumentRestrictions,metaData){for(var column,resolvedColumnTypes,$t,firstNumericColumnIndex=-1,geoJSONPointCandidateColumns=new(System.Collections.Generic.List$1(System.Int32).ctor),geoColumnsPredefined=System.Linq.Enumerable.from(metaData.v.GeospatiaColumnlIndexesList,System.Int32).any(),i=0;i<System.Linq.Enumerable.from(columns,System.Tuple$2(System.String,Kusto.Charting.ArgumentColumnType)).count();i=i+1|0)if(!metaData.v.DataIndexesList.contains(i)&&!metaData.v.SeriesIndexesList.contains(i))if(column=System.Linq.Enumerable.from(columns,System.Tuple$2(System.String,Kusto.Charting.ArgumentColumnType)).elementAt(i),metaData.v.ArgumentColumnType===Kusto.Charting.ArgumentColumnType.Geospatial&&System.Enum.hasFlag(Kusto.Charting.ArgumentColumnType.StringOrObject,Bridge.box(column.Item2,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType)))&&geoJSONPointCandidateColumns.add(i),metaData.v.ArgumentColumnType===Kusto.Charting.ArgumentColumnType.Geospatial&&System.Enum.hasFlag(Kusto.Charting.ArgumentColumnType.Numeric,Bridge.box(column.Item2,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType)))&&System.Linq.Enumerable.from(metaData.v.GeospatiaColumnlIndexesList,System.Int32).count()<2&&!geoColumnsPredefined)metaData.v.GeospatiaColumnlIndexesList.add(i);else if(System.Enum.hasFlag(metaData.v.ArgumentColumnType,Bridge.box(column.Item2,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType)))&&metaData.v.ArgumentDataColumnIndex<0)metaData.v.ArgumentDataColumnIndex=i;else if(column.Item2===Kusto.Charting.ArgumentColumnType.Numeric){firstNumericColumnIndex=i;break}if(metaData.v.ArgumentColumnType===Kusto.Charting.ArgumentColumnType.Geospatial&&System.Linq.Enumerable.from(metaData.v.GeospatiaColumnlIndexesList,System.Int32).count()<2&&!geoColumnsPredefined){metaData.v.GeospatiaColumnlIndexesList.clear();$t=Bridge.getEnumerator(geoJSONPointCandidateColumns);try{while($t.moveNext()){var columnId=$t.Current,columnFirstValue=Bridge.toString(table.Kusto$Charting$IChartingDataSource$GetValue(0,columnId)),geojsonPoint={};if(Kusto.Charting.DataChartsHelper.TrySetGeoJSONPoint(columnFirstValue,geojsonPoint)){metaData.v.GeospatiaColumnlIndexesList.add(columnId);break}}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}}return resolvedColumnTypes=System.Linq.Enumerable.from(columns,System.Tuple$2(System.String,Kusto.Charting.ArgumentColumnType)).select($asm.$.Kusto.Charting.DataChartsHelper.f14).ToArray(Kusto.Charting.ArgumentColumnType),Kusto.Charting.DataChartsHelper.CompleteChartDimentionsDetection(columns,argumentRestrictions,firstNumericColumnIndex,resolvedColumnTypes,metaData)},CompleteChartDimentionsDetection:function(columns,argumentRestrictions,firstNumericColumnIndex,resolvedColumnTypes,metaData){var $t,seriesOrArgumentDataIndex,geoColumnIndex,seriesDefaultIndex;if(metaData.v.ArgumentDataColumnIndex>=0&&System.Linq.Enumerable.from(metaData.v.SeriesIndexesList,System.Int32).any())return!0;if(metaData.v.ArgumentDataColumnIndex<0&&firstNumericColumnIndex<0&&System.Enum.hasFlag(metaData.v.ArgumentColumnType,Bridge.box(Kusto.Charting.ArgumentColumnType.Numeric,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType))))return!1;else if(metaData.v.ArgumentColumnType===Kusto.Charting.ArgumentColumnType.Geospatial&&!System.Linq.Enumerable.from(metaData.v.GeospatiaColumnlIndexesList,System.Int32).any())return!1;if(metaData.v.ArgumentDataColumnIndex<0&&metaData.v.ArgumentColumnType!==Kusto.Charting.ArgumentColumnType.Geospatial){if(System.Enum.hasFlag(Kusto.Charting.ArgumentColumnType.DateTimeOrTimeSpan,Bridge.box(metaData.v.ArgumentColumnType,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType))))return!1;System.Enum.hasFlag(metaData.v.ArgumentColumnType,Bridge.box(Kusto.Charting.ArgumentColumnType.Numeric,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType)))?System.Linq.Enumerable.from(columns,System.Tuple$2(System.String,Kusto.Charting.ArgumentColumnType)).count()>1&&(metaData.v.ArgumentDataColumnIndex=firstNumericColumnIndex):metaData.v.ArgumentDataColumnIndex=System.Enum.hasFlag(argumentRestrictions,Bridge.box(Kusto.Charting.ArgumentRestrictions.NotIncludedInSeries,Kusto.Charting.ArgumentRestrictions,System.Enum.toStringFn(Kusto.Charting.ArgumentRestrictions)))?Kusto.Charting.DataChartsHelper.GoBackwardsAndFindColumnNotInList(firstNumericColumnIndex,metaData.v.SeriesIndexes,metaData.v.DataIndexes):firstNumericColumnIndex-1|0}if(metaData.v.ArgumentDataColumnIndex<0&&System.Enum.hasFlag(argumentRestrictions,Bridge.box(Kusto.Charting.ArgumentRestrictions.MustHave,Kusto.Charting.ArgumentRestrictions,System.Enum.toStringFn(Kusto.Charting.ArgumentRestrictions)))&&(metaData.v.ArgumentDataColumnIndex=0),metaData.v.ArgumentColumnType===Kusto.Charting.ArgumentColumnType.Geospatial)if(seriesOrArgumentDataIndex=Kusto.Charting.DataChartsHelper.GetFirstStringAvailableColumnIndexOrNonStringIfAbsent(resolvedColumnTypes,metaData.v.GeospatialColumnIndexes),argumentRestrictions===Kusto.Charting.ArgumentRestrictions.GeospatialAsSeries){if(metaData.v.ArgumentDataColumnIndex=seriesOrArgumentDataIndex,!System.Linq.Enumerable.from(metaData.v.SeriesIndexesList,System.Int32).any()){$t=Bridge.getEnumerator(metaData.v.GeospatiaColumnlIndexesList);try{while($t.moveNext())geoColumnIndex=$t.Current,metaData.v.SeriesIndexesList.add(geoColumnIndex)}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}}}else seriesOrArgumentDataIndex===-1||System.Linq.Enumerable.from(metaData.v.SeriesIndexesList,System.Int32).any()||metaData.v.SeriesIndexesList.add(seriesOrArgumentDataIndex);else!System.Linq.Enumerable.from(metaData.v.SeriesIndexesList,System.Int32).any()&&metaData.v.ArgumentDataColumnIndex>=0&&(seriesDefaultIndex=metaData.v.ArgumentDataColumnIndex,resolvedColumnTypes[System.Array.index(metaData.v.ArgumentDataColumnIndex,resolvedColumnTypes)]!==Kusto.Charting.ArgumentColumnType.String?seriesDefaultIndex=Kusto.Charting.DataChartsHelper.GetFirstStringColumnIndex(resolvedColumnTypes):System.Enum.hasFlag(argumentRestrictions,Bridge.box(Kusto.Charting.ArgumentRestrictions.NotIncludedInSeries,Kusto.Charting.ArgumentRestrictions,System.Enum.toStringFn(Kusto.Charting.ArgumentRestrictions)))&&(seriesDefaultIndex=metaData.v.ArgumentDataColumnIndex-1|0),seriesDefaultIndex>=0&&!metaData.v.DataIndexesList.contains(seriesDefaultIndex)&&metaData.v.SeriesIndexesList.add(seriesDefaultIndex));return!0},GoBackwardsAndFindColumnNotInList:function(startIndex,seriesIndices,yIndexes){for(var isNotInSeries,isNotInYs,i=startIndex-1|0;i>=0;i=i-1|0)if(isNotInSeries=seriesIndices==null?!0:!System.Linq.Enumerable.from(seriesIndices,System.Int32).contains(i),isNotInYs=yIndexes==null?!0:!System.Linq.Enumerable.from(yIndexes,System.Int32).contains(i),isNotInSeries&&isNotInYs)return i;return-1},GetFirstStringColumnIndex:function(columns){for(var i=0;i<System.Linq.Enumerable.from(columns,Kusto.Charting.ArgumentColumnType).count();i=i+1|0)if(System.Linq.Enumerable.from(columns,Kusto.Charting.ArgumentColumnType).elementAt(i)===Kusto.Charting.ArgumentColumnType.String)return i;return-1},GetFirstStringAvailableColumnIndexOrNonStringIfAbsent:function(columns,indexesToExclude){for(var nonStringIndex=-1,i=0;i<System.Linq.Enumerable.from(columns,Kusto.Charting.ArgumentColumnType).count();i=i+1|0)if(columns[System.Array.index(i,columns)]!==Kusto.Charting.ArgumentColumnType.String||System.Linq.Enumerable.from(indexesToExclude,System.Int32).contains(i))nonStringIndex!==-1||System.Linq.Enumerable.from(indexesToExclude,System.Int32).contains(i)||(nonStringIndex=i);else return i;return nonStringIndex},TimeSpanToDateTime:function(ts){return ts.getTicks().lte(System.Int64(0))?System.DateTime.getMinValue():System.DateTime.create$2(ts.getTicks(),1)},TimeSpanToTotalSeconds:function(ts){return ts.getTotalSeconds()},DateTimeToTotalSeconds:function(dt){return System.TimeSpan.fromTicks(System.DateTime.getTicks(dt)).getTotalSeconds()},ParseJsonArrayAsDateTime:function(value,columnType){if(System.String.isNullOrWhiteSpace(value)||!System.String.startsWith(value.trim(),"["))return null;try{if(columnType===Kusto.Charting.ArgumentColumnType.DateTime)return System.Linq.Enumerable.from(Newtonsoft.Json.JsonConvert.DeserializeObject(value,System.Array.type(System.DateTime)),System.DateTime).select($asm.$.Kusto.Charting.DataChartsHelper.f15).ToArray(System.DateTime);else if(columnType===Kusto.Charting.ArgumentColumnType.TimeSpan){var resultAsTimeSpan=Newtonsoft.Json.JsonConvert.DeserializeObject(value,System.Array.type(System.TimeSpan));return System.Linq.Enumerable.from(resultAsTimeSpan,System.TimeSpan).select($asm.$.Kusto.Charting.DataChartsHelper.f16).ToArray(System.DateTime)}}catch($e1){$e1=System.Exception.create($e1)}return null},ParseJsonArrayAsDouble:function(value,considerDateTimeAndTimeSpanAsDouble){var result,valueAsArr,resolvedValueType,d,i,val,ts,dt;if(considerDateTimeAndTimeSpanAsDouble===void 0&&(considerDateTimeAndTimeSpanAsDouble=!1),System.String.isNullOrWhiteSpace(value)||!System.String.startsWith(value.trim(),"["))return null;try{valueAsArr=Newtonsoft.Json.JsonConvert.DeserializeObject(value,System.Array.type(System.String));result=System.Array.init(System.Linq.Enumerable.from(valueAsArr,System.String).count(),0,System.Double)}catch($e1){return $e1=System.Exception.create($e1),null}for(resolvedValueType=Kusto.Charting.ArgumentColumnType.None,d={},i=0;i<valueAsArr.length;i=i+1|0){if(val=valueAsArr[System.Array.index(i,valueAsArr)],val==null){result[System.Array.index(i,result)]=Number.NaN;continue}else if(System.Enum.hasFlag(Kusto.Charting.ArgumentColumnType.Numeric,Bridge.box(resolvedValueType,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType)))&&System.Double.tryParse(val,null,d)){resolvedValueType===Kusto.Charting.ArgumentColumnType.None&&(resolvedValueType=Kusto.Charting.ArgumentColumnType.Numeric);result[System.Array.index(i,result)]=d.v;continue}else if(considerDateTimeAndTimeSpanAsDouble){if(ts={},System.Enum.hasFlag(Kusto.Charting.ArgumentColumnType.TimeSpan,Bridge.box(resolvedValueType,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType)))&&System.TimeSpan.tryParse(val,null,ts)){resolvedValueType===Kusto.Charting.ArgumentColumnType.None&&(resolvedValueType=Kusto.Charting.ArgumentColumnType.TimeSpan);result[System.Array.index(i,result)]=ts.v.getTotalSeconds();continue}if(dt={},System.Enum.hasFlag(Kusto.Charting.ArgumentColumnType.DateTime,Bridge.box(resolvedValueType,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType)))&&System.DateTime.tryParse(val,null,dt)){resolvedValueType===Kusto.Charting.ArgumentColumnType.None&&(resolvedValueType=Kusto.Charting.ArgumentColumnType.DateTime);result[System.Array.index(i,result)]=System.TimeSpan.fromTicks(System.DateTime.getTicks(dt.v)).getTotalSeconds();continue}}return null}return resolvedValueType!==Kusto.Charting.ArgumentColumnType.None?result:null},ParseJsonArrayAsString:function(value){if(System.String.isNullOrWhiteSpace(value)||!System.String.startsWith(value.trim(),"["))return null;try{return Newtonsoft.Json.JsonConvert.DeserializeObject(value,System.Array.type(System.String))}catch($e1){$e1=System.Exception.create($e1)}return null},ArrayIsTimespan:function(arr){var $t,hasTimeSpanValues=!1,ts={},val;$t=Bridge.getEnumerator(arr);try{while($t.moveNext()){if(val=$t.Current,val==null)continue;else if(System.TimeSpan.tryParse(val,null,ts)){hasTimeSpanValues=!0;continue}return!1}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return hasTimeSpanValues},ArrayIsDatetime:function(arr){var $t,hasDateTimeValues=!1,d={},val;$t=Bridge.getEnumerator(arr);try{while($t.moveNext()){if(val=$t.Current,val==null)continue;else if(System.DateTime.tryParse(val,null,d)){hasDateTimeValues=!0;continue}return!1}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return hasDateTimeValues},ArrayIsDouble:function(arr){var $t,hasNumericValues=!1,d={},val;$t=Bridge.getEnumerator(arr);try{while($t.moveNext()){if(val=$t.Current,val==null)continue;else if(System.Double.tryParse(val,null,d)){hasNumericValues=!0;continue}return!1}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return hasNumericValues},IsEmptyValue:function(value){return value==null?!0:Bridge.referenceEquals(value,System.DBNull.Value)?!0:Bridge.is(value,System.String)&&System.String.isNullOrEmpty(Bridge.cast(value,System.String))?!0:!1}}}});Bridge.ns("Kusto.Charting.DataChartsHelper",$asm.$);Bridge.apply($asm.$.Kusto.Charting.DataChartsHelper,{f1:function(col,index){return new Kusto.Charting.DataChartsHelper.ColumnDesc(col.Item1,col.Item2,index)},f2:function(colIndex){return colIndex>=0},f3:function(d){return d.SeriesName},f4:function(d){return d},f5:function(d){return System.DateTime.getTicks(d.ArgumentDateTime)},f6:function(d){return System.Convert.toDouble(System.DateTime.getTicks(d.ArgumentDateTime))},f7:function(d){return d.ArgumentNumeric},f8:function(d){return!Bridge.equals(d.ArgumentDateTime,Kusto.Charting.DataChartsHelper.c_defaultArgumentDatetime)},f9:function(d){return!isNaN(d.ArgumentNumeric)},f10:function(d){return Math.abs(d.ValueData)===Number.POSITIVE_INFINITY},f11:function(d){return d.GeoCoordinates!=null&&(d.GeoCoordinates.Longitude>180||d.GeoCoordinates.Longitude<-180||d.GeoCoordinates.Latitude>90||d.GeoCoordinates.Latitude<-90)},f12:function(o){return Kusto.Charting.DataChartsHelper.ParseJsonArrayAsString(Bridge.as(o,System.String))||o},f13:function(a,b){return{Item1:a,Item2:b}},f14:function(c){return c.Item2},f15:function(dt){return Kusto.Cloud.Platform.Utils.ExtendedDateTime.ToUtc(dt)},f16:function(ts){return Kusto.Charting.DataChartsHelper.TimeSpanToDateTime(ts)}});Bridge.define("Kusto.Charting.DataChartsHelper.ArgumentData",{$kind:"nested class",fields:{m_requestedType:0,m_colIndex:0,m_colName:null,m_colType:0,m_geospatialIndexes:null},props:{GeospatialArgumentDataType:0,Value:null,DateTime:null,NumericValue:0,GeoCoordinates:null},ctors:{init:function(){this.DateTime=System.DateTime.getDefaultValue()},ctor:function(colIndex,colName,colType,requestedType,geospatialColumnIndexes){geospatialColumnIndexes===void 0&&(geospatialColumnIndexes=null);var $t;this.$initialize();this.m_colIndex=colIndex;this.m_colName=colName;this.m_colType=colType;this.m_requestedType=requestedType;geospatialColumnIndexes!=null&&System.Linq.Enumerable.from(geospatialColumnIndexes,System.Int32).any()?(this.m_geospatialIndexes=($t=System.Int32,System.Linq.Enumerable.from(geospatialColumnIndexes,$t).toList($t)),this.GeospatialArgumentDataType=Kusto.Charting.ArgumentColumnType.Geospatial):this.GeospatialArgumentDataType=Kusto.Charting.ArgumentColumnType.None}},methods:{ResolveArgumentFromRow:function(table,rowIndex){var $t,$t1,$t2,longitudeValue,latitudeValue,geojsonPoint;if(this.m_requestedType!==Kusto.Charting.ArgumentColumnType.Geospatial){this.ResolveArgument(table,rowIndex);return}this.m_geospatialIndexes.Count===2?(longitudeValue=table.Kusto$Charting$IChartingDataSource$GetValue(rowIndex,this.m_geospatialIndexes.getItem(0)),latitudeValue=table.Kusto$Charting$IChartingDataSource$GetValue(rowIndex,this.m_geospatialIndexes.getItem(1)),this.GeoCoordinates=($t=new Kusto.Charting.GeospatialCoordinates,$t.Longitude=Kusto.Charting.DataChartsHelper.TryConvertToDouble(longitudeValue,Kusto.Charting.ArgumentColumnType.Numeric),$t.Latitude=Kusto.Charting.DataChartsHelper.TryConvertToDouble(latitudeValue,Kusto.Charting.ArgumentColumnType.Numeric),$t)):(geojsonPoint={},this.GeoCoordinates=this.m_geospatialIndexes.Count===1&&Kusto.Charting.DataChartsHelper.TrySetGeoJSONPoint(Bridge.toString(table.Kusto$Charting$IChartingDataSource$GetValue(rowIndex,this.m_geospatialIndexes.getItem(0))),geojsonPoint)?($t=new Kusto.Charting.GeospatialCoordinates,$t.Longitude=($t1=geojsonPoint.v.coordinates)[System.Array.index(0,$t1)],$t.Latitude=($t2=geojsonPoint.v.coordinates)[System.Array.index(1,$t2)],$t):($t=new Kusto.Charting.GeospatialCoordinates,$t.Longitude=Kusto.Charting.DataChartsHelper.c_defaultArgumentNumeric,$t.Latitude=Kusto.Charting.DataChartsHelper.c_defaultArgumentNumeric,$t));this.m_colIndex!==-1&&this.ResolveArgument(table,rowIndex,!0)},ResolveArgument:function(table,rowIndex,includeColName){var argumentValue,argumentActualType,value;includeColName===void 0&&(includeColName=!1);argumentValue=table.Kusto$Charting$IChartingDataSource$GetValue(rowIndex,this.m_colIndex);argumentActualType=argumentValue==null?this.m_requestedType:this.m_colType;this.DateTime=Kusto.Charting.DataChartsHelper.GetArgumentDateTime(argumentValue,argumentActualType);value=this.m_colIndex>=0?Bridge.toString(argumentValue):"";System.String.isNullOrWhiteSpace(value)&&(value=Kusto.Charting.DataChartsHelper.c_defaultArgumentString);this.Value=includeColName?System.String.format("{0}:{1}",this.m_colName,value):value;this.NumericValue=!System.Enum.hasFlag(argumentActualType,Bridge.box(Kusto.Charting.ArgumentColumnType.Numeric,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType)))||Kusto.Charting.DataChartsHelper.IsEmptyValue(argumentValue)?Kusto.Charting.DataChartsHelper.c_defaultArgumentNumeric:Kusto.Charting.DataChartsHelper.TryConvertToDouble(argumentValue,argumentActualType)}}});Bridge.define("Kusto.Charting.IChartMetaData",{$kind:"interface"});Bridge.define("Kusto.Charting.DataChartsHelper.ColumnDesc",{$kind:"nested class",props:{Name:null,Type:0,Index:0},ctors:{ctor:function(name,type,index){this.$initialize();this.Name=name;this.Type=type;this.Index=index}}});Bridge.define("Kusto.Charting.DataChartsHelper.GeoJSON",{$kind:"nested enum",statics:{fields:{Point:0}}});Bridge.define("Kusto.Charting.DataChartsHelper.GeoJSONPoint",{$kind:"nested class",props:{type:0,coordinates:null}});Bridge.define("Kusto.Charting.DataItem",{props:{SeriesName:null,ArgumentData:null,ValueData:0,ValueName:null,ArgumentDateTime:null,ArgumentNumeric:0,GeoCoordinates:null,SecondaryAxisYName:null,PrefferredChartKind:0,Properties:null},ctors:{init:function(){this.ArgumentDateTime=System.DateTime.getDefaultValue()}},methods:{Clone:function(){var $t,$t1;return $t=new Kusto.Charting.DataItem,$t.SeriesName=this.SeriesName,$t.ArgumentData=this.ArgumentData,$t.ValueData=this.ValueData,$t.ValueName=this.ValueName,$t.ArgumentDateTime=this.ArgumentDateTime,$t.ArgumentNumeric=this.ArgumentNumeric,$t.SecondaryAxisYName=this.SecondaryAxisYName,$t.PrefferredChartKind=this.PrefferredChartKind,$t.Properties=this.Properties,$t.GeoCoordinates=this.GeoCoordinates==null?null:($t1=new Kusto.Charting.GeospatialCoordinates,$t1.Longitude=this.GeoCoordinates.Longitude,$t1.Latitude=this.GeoCoordinates.Latitude,$t1),$t}}});Bridge.define("Kusto.Charting.ExtendedDouble",{statics:{methods:{IsFinite:function(d){return!(Math.abs(d)===Number.POSITIVE_INFINITY)&&!isNaN(d)}}}});Bridge.define("Kusto.Charting.GeospatialCoordinates",{props:{Longitude:0,Latitude:0}});Bridge.define("Kusto.Charting.IChartingDataSource",{$kind:"interface"});Bridge.define("Kusto.Charting.IKustoClientContext",{$kind:"interface"});Bridge.define("Kusto.Charting.SeriesCreationException",{inherits:[System.Exception],ctors:{ctor:function(error){this.$initialize();System.Exception.ctor.call(this,error)}}});Bridge.define("Kusto.Charting.ValidationStatus",{$kind:"enum",statics:{fields:{Valid:0,PolicyViolationError:1,PolicyViolationWarning:2}}});Bridge.define("Kusto.Cloud.Platform.Text.StringLiteral",{statics:{fields:{categoryForLatin1:null},ctors:{init:function(){this.categoryForLatin1=System.Array.init([14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,11,24,24,24,26,24,24,24,20,21,24,25,24,19,24,24,8,8,8,8,8,8,8,8,8,8,24,24,25,25,25,24,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,24,21,27,18,27,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,20,25,21,25,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,11,24,26,26,26,26,28,28,27,28,1,22,25,19,28,27,28,25,10,10,27,1,28,24,27,10,1,23,10,10,10,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,25,1,1,1,1,1,1,1,1],System.Byte)}},methods:{ParseStringLiteral:function(literal){var result={};if(Kusto.Cloud.Platform.Text.StringLiteral.TryParseStringLiteral(literal,result))return result.v;throw new System.ArgumentException.$ctor1(System.String.format("Malformed string literal: '{0}'",[literal]));},TryParseStringLiteral:function(str,literal){var ret,ret1;if(literal.v=str,System.String.isNullOrWhiteSpace(literal.v))return!1;if((literal.v.charCodeAt(0)===104||literal.v.charCodeAt(0)===72)&&(literal.v=literal.v.substr(1)),System.String.startsWith(literal.v,'"',4)){if(literal.v.length>=2&&System.String.endsWith(literal.v,'"'))return(literal.v=literal.v.substr(1,literal.v.length-2|0),!Kusto.Cloud.Platform.Utils.ExtendedRegex.TryUnescape(literal.v,literal))?!1:!0}else if(System.String.startsWith(literal.v,"'",4)){if(literal.v.length>=2&&System.String.endsWith(literal.v,"'",4))return(literal.v=literal.v.substr(1,literal.v.length-2|0),!Kusto.Cloud.Platform.Utils.ExtendedRegex.TryUnescape(literal.v,literal))?!1:!0}else if(System.String.startsWith(literal.v,'@"',4)){if(literal.v.length>=3&&System.String.endsWith(literal.v,'"',4))return ret=literal.v.substr(2,literal.v.length-3|0),literal.v=System.String.replaceAll(ret,'""','"'),!0}else if(System.String.startsWith(literal.v,"@'",4)&&literal.v.length>=3&&System.String.endsWith(literal.v,"'",4))return ret1=literal.v.substr(2,literal.v.length-3|0),literal.v=System.String.replaceAll(ret1,"''","'"),!0;return!1},Equals:function(str1,str2){return str1==null&&str2==null?!0:str1==null||str2==null?!1:System.String.equals(str1,str2,4)},TrimSingleQuotes:function(name){return System.String.isNullOrWhiteSpace(name)?name:(System.String.startsWith(name,"'",4)&&System.String.endsWith(name,"'",4)&&name.length>=2&&(name=name.substr(1,name.length-2|0)),name)},TrimBrackets:function(input){return System.String.startsWith(input,"[",4)&&System.String.endsWith(input,"]",4)&&input.length>=2&&(input=input.substr(1,input.length-2|0)),input},InitArray:function(T,arr,value){if(arr!=null)for(var i=0;i<arr.length;i=i+1|0)arr[System.Array.index(i,arr)]=value},GetLiteral:function(value){return Kusto.Cloud.Platform.Text.StringLiteral.GetLiteral$1(value,!1)},GetLiteral$1:function(value,hidden){var $t,literal,c;if(value==null)return null;literal=new System.Text.StringBuilder;hidden&&literal.append("h");literal.append('"');$t=Bridge.getEnumerator(value);try{while($t.moveNext()){c=$t.Current;switch(c){case 39:literal.append("\\'");break;case 34:literal.append('\\"');break;case 92:literal.append("\\\\");break;case 0:literal.append("\\0");break;case 7:literal.append("\\a");break;case 8:literal.append("\\b");break;case 12:literal.append("\\f");break;case 10:literal.append("\\n");break;case 13:literal.append("\\r");break;case 9:literal.append("\\t");break;case 11:literal.append("\\v");break;default:Kusto.Cloud.Platform.Text.StringLiteral.ShouldBeEscaped(c)?(literal.append("\\u"),literal.append(System.UInt16.format(c,"x4"))):literal.append(String.fromCharCode(c));break}}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return literal.append('"'),literal.toString()},GetLiteralAsHiddenString:function(value){return Kusto.Cloud.Platform.Text.StringLiteral.GetLiteral$1(value,!0)},ShouldBeEscaped:function(c){return Kusto.Cloud.Platform.Text.StringLiteral.IsLatin1(c)?Kusto.Cloud.Platform.Text.StringLiteral.GetLatin1UnicodeCategory(c)===14:!0},GetLatin1UnicodeCategory:function(ch){return Kusto.Cloud.Platform.Text.StringLiteral.categoryForLatin1[System.Array.index(ch,Kusto.Cloud.Platform.Text.StringLiteral.categoryForLatin1)]},IsLatin1:function(ch){return ch<=255},IsAscii:function(ch){return ch<=127}}}});Bridge.define("Kusto.Cloud.Platform.Utils.BitTwiddling",{statics:{methods:{CountBits:function(n){for(var ret=0;n!==0;)n=n&(n-1|0),ret=ret+1|0;return ret},CountBits$1:function(n){for(var ret=0;n.ne(System.Int64(0));)n=n.and(n.sub(System.Int64(1))),ret=ret+1|0;return ret}}}});Bridge.define("Kusto.Cloud.Platform.Utils.ChopOptions",{$kind:"enum",statics:{fields:{ChopFromBeginning:1,ChopFromEnd:2,ChopFromMiddle:4,ThreeDotsCharacterNotSupported:8}}});Bridge.define("Kusto.Cloud.Platform.Utils.DateTimeRange",{inherits:function(){return[System.IEquatable$1(Kusto.Cloud.Platform.Utils.DateTimeRange)]},statics:{fields:{All:null},ctors:{init:function(){this.All=new Kusto.Cloud.Platform.Utils.DateTimeRange(Kusto.Cloud.Platform.Utils.ExtendedDateTime.MinValueUtc,Kusto.Cloud.Platform.Utils.ExtendedDateTime.MaxValueUtc)}},methods:{Aggregate:function(a,b){return new Kusto.Cloud.Platform.Utils.DateTimeRange(System.DateTime.gt(a.Begin,b.Begin)?b.Begin:a.Begin,System.DateTime.gt(a.End,b.End)?a.End:b.End)},Merge:function(ranges){var $t,result=new(System.Collections.Generic.List$1(Kusto.Cloud.Platform.Utils.DateTimeRange).ctor),orderedRanges,intermediateRange,range;if(Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(Kusto.Cloud.Platform.Utils.DateTimeRange,ranges))return result;orderedRanges=System.Linq.Enumerable.from(ranges,Kusto.Cloud.Platform.Utils.DateTimeRange).orderBy($asm.$.Kusto.Cloud.Platform.Utils.DateTimeRange.f1);intermediateRange=orderedRanges.first().Clone();result.add(intermediateRange);$t=Bridge.getEnumerator(orderedRanges);try{while($t.moveNext())range=$t.Current,System.DateTime.lte(range.Begin,intermediateRange.End)?System.DateTime.lt(intermediateRange.End,range.End)&&(intermediateRange.End=range.End):(intermediateRange=range.Clone(),result.add(intermediateRange))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return result},Intersect:function(rangeGroupA,rangeGroupB){var $t,$t1,$t2,intersectedTimeRanges,rangeFromA;if(Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(Kusto.Cloud.Platform.Utils.DateTimeRange,rangeGroupA)||Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(Kusto.Cloud.Platform.Utils.DateTimeRange,rangeGroupB))return new(System.Collections.Generic.List$1(Kusto.Cloud.Platform.Utils.DateTimeRange).ctor);intersectedTimeRanges=new(System.Collections.Generic.HashSet$1(Kusto.Cloud.Platform.Utils.DateTimeRange).ctor);$t=Bridge.getEnumerator(rangeGroupA,Kusto.Cloud.Platform.Utils.DateTimeRange);try{while($t.moveNext()){rangeFromA=$t.Current;$t1=Bridge.getEnumerator(rangeGroupB,Kusto.Cloud.Platform.Utils.DateTimeRange);try{while($t1.moveNext()){var rangeFromB=$t1.Current,intersectedStart=System.DateTime.create$2(System.Int64.max(System.DateTime.getTicks(rangeFromA.Begin),System.DateTime.getTicks(rangeFromB.Begin)),1),intersectedEnd=System.DateTime.create$2(System.Int64.min(System.DateTime.getTicks(rangeFromA.End),System.DateTime.getTicks(rangeFromB.End)),1);System.DateTime.lte(intersectedStart,intersectedEnd)&&intersectedTimeRanges.add(new Kusto.Cloud.Platform.Utils.DateTimeRange(intersectedStart,intersectedEnd))}}finally{Bridge.is($t1,System.IDisposable)&&$t1.System$IDisposable$Dispose()}}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return $t2=Kusto.Cloud.Platform.Utils.DateTimeRange,System.Linq.Enumerable.from(intersectedTimeRanges,$t2).toList($t2)}}},props:{Begin:null,End:null,Span:{get:function(){return System.DateTime.subdd(this.End,this.Begin)}},IsOpenRange:{get:function(){return Bridge.equalsT(this.Begin,Kusto.Cloud.Platform.Utils.ExtendedDateTime.MinValueUtc)||Bridge.equalsT(this.End,Kusto.Cloud.Platform.Utils.ExtendedDateTime.MaxValueUtc)}}},alias:["equalsT","System$IEquatable$1$Kusto$Cloud$Platform$Utils$DateTimeRange$equalsT"],ctors:{init:function(){this.Begin=System.DateTime.getDefaultValue();this.End=System.DateTime.getDefaultValue()},ctor:function(begin,end){this.$initialize();this.Begin=begin;this.End=end;throw new System.ArgumentException.$ctor1("DateTimeRange construction: End parameter should be later than Begin parameter");}},methods:{Clone:function(){return new Kusto.Cloud.Platform.Utils.DateTimeRange(this.Begin,this.End)},equalsT:function(other){return other==null?!1:Bridge.equalsT(this.Begin,other.Begin)&&Bridge.equalsT(this.End,other.End)},equals:function(other){return this.equalsT(Bridge.as(other,Kusto.Cloud.Platform.Utils.DateTimeRange))},getHashCode:function(){return Bridge.getHashCode(this.Begin)^Bridge.getHashCode(this.End)},toString:function(){return System.String.formatProvider(System.Globalization.CultureInfo.invariantCulture,"[Begin={0}, End={1}]",System.DateTime.format(this.Begin,"R"),System.DateTime.format(this.End,"R"))}}});Bridge.ns("Kusto.Cloud.Platform.Utils.DateTimeRange",$asm.$);Bridge.apply($asm.$.Kusto.Cloud.Platform.Utils.DateTimeRange,{f1:function(r){return r.Begin}});Bridge.define("Kusto.Cloud.Platform.Utils.ExtendedDateTime",{statics:{fields:{TicksPerMillisecond:System.Int64(0),TicksPerSecond:System.Int64(0),TicksPerMinute:System.Int64(0),TicksPerHour:System.Int64(0),TicksPerDay:System.Int64(0),MillisPerSecond:0,MillisPerMinute:0,MillisPerHour:0,MillisPerDay:0,DaysPerYear:0,DaysPer4Years:0,DaysPer100Years:0,DaysPer400Years:0,DaysTo1601:0,DaysTo1899:0,DaysTo1970:0,DaysTo10000:0,MinTicks:System.Int64(0),MaxTicks:System.Int64(0),MaxMillis:System.Int64(0),FileTimeOffset:System.Int64(0),DoubleDateOffset:System.Int64(0),OADateMinAsTicks:System.Int64(0),OADateMinAsDouble:0,OADateMaxAsDouble:0,DatePartYear:0,DatePartDayOfYear:0,DatePartMonth:0,DatePartDay:0,MinValueUtc:null,MaxValueUtc:null,SupportedNonStandardFormats:null,EpochStart:null,s_simulating:!1,s_simulatedUtcNow:null,s_numCharactersInIso8601:0,ts_lastUtcNow:null,ts_lastUtcNowAsString:null,DaysToMonth365:null,DaysToMonth366:null},events:{OnSimulatedTimeChange:null,OnStopSimulatingTime:null},props:{IsSimulatingTime:{get:function(){return Kusto.Cloud.Platform.Utils.ExtendedDateTime.s_simulating}},UtcNow:{get:function(){return Kusto.Cloud.Platform.Utils.ExtendedDateTime.s_simulating?Kusto.Cloud.Platform.Utils.ExtendedDateTime.s_simulatedUtcNow:System.DateTime.getUtcNow()}}},ctors:{init:function(){this.MinValueUtc=System.DateTime.getDefaultValue();this.MaxValueUtc=System.DateTime.getDefaultValue();this.EpochStart=System.DateTime.getDefaultValue();this.s_simulatedUtcNow=System.DateTime.getDefaultValue();this.ts_lastUtcNow=System.DateTime.getDefaultValue();this.TicksPerMillisecond=System.Int64(1e4);this.TicksPerSecond=System.Int64(1e7);this.TicksPerMinute=System.Int64(6e8);this.TicksPerHour=System.Int64([1640261632,8]);this.TicksPerDay=System.Int64([711573504,201]);this.MillisPerSecond=1e3;this.MillisPerMinute=6e4;this.MillisPerHour=36e5;this.MillisPerDay=864e5;this.DaysPerYear=365;this.DaysPer4Years=1461;this.DaysPer100Years=36524;this.DaysPer400Years=146097;this.DaysTo1601=584388;this.DaysTo1899=693593;this.DaysTo1970=719162;this.DaysTo10000=3652059;this.MinTicks=System.Int64(0);this.MaxTicks=System.Int64([-197705729,734668917]);this.MaxMillis=System.Int64([-464735232,73466]);this.FileTimeOffset=System.Int64([578224128,117558807]);this.DoubleDateOffset=System.Int64([-880558080,139527104]);this.OADateMinAsTicks=System.Int64([-1362739200,7273949]);this.OADateMinAsDouble=-657435;this.OADateMaxAsDouble=2958466;this.DatePartYear=0;this.DatePartDayOfYear=1;this.DatePartMonth=2;this.DatePartDay=3;this.MinValueUtc=System.DateTime.create$2(System.DateTime.getTicks(System.DateTime.getMinValue()),1);this.MaxValueUtc=System.DateTime.create$2(System.DateTime.getTicks(System.DateTime.getMaxValue()),1);this.SupportedNonStandardFormats=$asm.$.Kusto.Cloud.Platform.Utils.ExtendedDateTime.f1(new(System.Collections.Generic.Dictionary$2(System.Int32,System.Array.type(System.String)).ctor));this.EpochStart=System.DateTime.create(1970,1,1,0,0,0,0,1);this.s_numCharactersInIso8601=System.DateTime.format(Kusto.Cloud.Platform.Utils.ExtendedDateTime.MinValueUtc,"O").length;this.ts_lastUtcNow=Kusto.Cloud.Platform.Utils.ExtendedDateTime.MinValueUtc;this.ts_lastUtcNowAsString=System.DateTime.format(Kusto.Cloud.Platform.Utils.ExtendedDateTime.ts_lastUtcNow,"O");this.DaysToMonth365=System.Array.init([0,31,59,90,120,151,181,212,243,273,304,334,365],System.Int32);this.DaysToMonth366=System.Array.init([0,31,60,91,121,152,182,213,244,274,305,335,366],System.Int32)}},methods:{StopSimulatingTime:function(){Kusto.Cloud.Platform.Utils.ExtendedDateTime.s_simulating=!1;Bridge.staticEquals(Kusto.Cloud.Platform.Utils.ExtendedDateTime.OnStopSimulatingTime,null)||Kusto.Cloud.Platform.Utils.ExtendedDateTime.OnStopSimulatingTime()},ToUtcString:function(value){var inputTime=value,utcTime=inputTime;return System.DateTime.getKind(inputTime)===0?utcTime=System.DateTime.create$2(System.DateTime.getTicks(value),1):System.DateTime.getKind(inputTime)===2&&(utcTime=System.DateTime.toUniversalTime(inputTime)),System.String.format("{0:yyyy-MM-dd HH:mm:ss.fffffff}",[Bridge.box(utcTime,System.DateTime,System.DateTime.format)])},Max:function(t1,t2){return System.DateTime.gt(t1,t2)?t1:t2},Max$1:function(t1,t2){return Bridge.equals(t2,null)?t1:Bridge.equals(t1,null)?t2:Kusto.Cloud.Platform.Utils.ExtendedDateTime.Max(System.Nullable.getValue(t1),System.Nullable.getValue(t2))},Min:function(t1,t2){return System.DateTime.lt(t1,t2)?t1:t2},Min$1:function(t1,t2){return Bridge.equals(t2,null)?t1:Bridge.equals(t1,null)?t2:Kusto.Cloud.Platform.Utils.ExtendedDateTime.Min(System.Nullable.getValue(t1),System.Nullable.getValue(t2))},RangesIntersect:function(firstStart,firstEnd,secondStart,secondEnd){return System.DateTime.gte(firstStart,secondStart)&&System.DateTime.lte(firstStart,secondEnd)||System.DateTime.gte(firstEnd,secondStart)&&System.DateTime.lte(firstEnd,secondEnd)||System.DateTime.gte(secondStart,firstStart)&&System.DateTime.lte(secondStart,firstEnd)||System.DateTime.gte(secondEnd,firstStart)&&System.DateTime.lte(secondEnd,firstEnd)},ToUnixTimeSpan:function(date){return System.DateTime.subdd(System.DateTime.toUniversalTime(date),Kusto.Cloud.Platform.Utils.ExtendedDateTime.EpochStart)},FromTimeSpan:function(timeSpan){return System.DateTime.create$2(timeSpan.getTicks())},ToUtc:function(value){switch(System.DateTime.getKind(value)){case 1:return value;case 0:return System.DateTime.create$2(System.DateTime.getTicks(value),1);case 2:return System.DateTime.toUniversalTime(value);default:throw new System.ArgumentException.$ctor1(System.String.format("DateTimeKind: {0} is not supported",[Bridge.box(System.DateTime.getKind(value),System.DateTimeKind,System.Enum.toStringFn(System.DateTimeKind))]));}},FastAppendFormattedInt7:function(sb,value){var g=System.Int64.clipu16(System.Int64(48).add(value.mod(System.Int64(10)))),f,e,d,c,b,a;value=value.div(System.Int64(10));f=System.Int64.clipu16(System.Int64(48).add(value.mod(System.Int64(10))));value=value.div(System.Int64(10));e=System.Int64.clipu16(System.Int64(48).add(value.mod(System.Int64(10))));value=value.div(System.Int64(10));d=System.Int64.clipu16(System.Int64(48).add(value.mod(System.Int64(10))));value=value.div(System.Int64(10));c=System.Int64.clipu16(System.Int64(48).add(value.mod(System.Int64(10))));value=value.div(System.Int64(10));b=System.Int64.clipu16(System.Int64(48).add(value.mod(System.Int64(10))));value=value.div(System.Int64(10));a=System.Int64.clipu16(System.Int64(48).add(value.mod(System.Int64(10))));sb.append(String.fromCharCode(a));sb.append(String.fromCharCode(b));sb.append(String.fromCharCode(c));sb.append(String.fromCharCode(d));sb.append(String.fromCharCode(e));sb.append(String.fromCharCode(f));sb.append(String.fromCharCode(g))},FastAppendFormattedInt4:function(sb,value){var d=(48+value%10|0)&65535,c,b,a;value=Bridge.Int.div(value,10)|0;c=(48+value%10|0)&65535;value=Bridge.Int.div(value,10)|0;b=(48+value%10|0)&65535;value=Bridge.Int.div(value,10)|0;a=(48+value%10|0)&65535;sb.append(String.fromCharCode(a));sb.append(String.fromCharCode(b));sb.append(String.fromCharCode(c));sb.append(String.fromCharCode(d))},FastAppendFormattedInt2:function(sb,value){var b=(48+value%10|0)&65535,a;value=Bridge.Int.div(value,10)|0;a=(48+value%10|0)&65535;sb.append(String.fromCharCode(a));sb.append(String.fromCharCode(b))},FastGetParts:function(value,year,month,day,hour,minute,second,fraction){var ticks=System.DateTime.getTicks(value),n=System.Int64.clip32(ticks.div(Kusto.Cloud.Platform.Utils.ExtendedDateTime.TicksPerDay)),y400=Bridge.Int.div(n,Kusto.Cloud.Platform.Utils.ExtendedDateTime.DaysPer400Years)|0,y100,y4,y1;n=n-Bridge.Int.mul(y400,Kusto.Cloud.Platform.Utils.ExtendedDateTime.DaysPer400Years)|0;y100=Bridge.Int.div(n,Kusto.Cloud.Platform.Utils.ExtendedDateTime.DaysPer100Years)|0;y100===4&&(y100=3);n=n-Bridge.Int.mul(y100,Kusto.Cloud.Platform.Utils.ExtendedDateTime.DaysPer100Years)|0;y4=Bridge.Int.div(n,Kusto.Cloud.Platform.Utils.ExtendedDateTime.DaysPer4Years)|0;n=n-Bridge.Int.mul(y4,Kusto.Cloud.Platform.Utils.ExtendedDateTime.DaysPer4Years)|0;y1=Bridge.Int.div(n,Kusto.Cloud.Platform.Utils.ExtendedDateTime.DaysPerYear)|0;y1===4&&(y1=3);year.v=(((Bridge.Int.mul(y400,400)+Bridge.Int.mul(y100,100)|0)+Bridge.Int.mul(y4,4)|0)+y1|0)+1|0;n=n-Bridge.Int.mul(y1,Kusto.Cloud.Platform.Utils.ExtendedDateTime.DaysPerYear)|0;for(var leapYear=y1===3&&(y4!==24||y100===3),days=leapYear?Kusto.Cloud.Platform.Utils.ExtendedDateTime.DaysToMonth366:Kusto.Cloud.Platform.Utils.ExtendedDateTime.DaysToMonth365,m=n>>6;n>=days[System.Array.index(m,days)];)m=m+1|0;month.v=m;day.v=(n-days[System.Array.index(m-1|0,days)]|0)+1|0;hour.v=System.DateTime.getHour(value);minute.v=System.DateTime.getMinute(value);second.v=System.DateTime.getSecond(value);fraction.v=ticks.mod(Kusto.Cloud.Platform.Utils.ExtendedDateTime.TicksPerSecond)},FromUnixTimeSeconds$1:function(seconds){return System.DateTimeOffset.FromUnixTimeSeconds(seconds).UtcDateTime},FromUnixTimeSeconds:function(seconds){var secondsLong=Bridge.Int.clip64(seconds),additionTicks=Bridge.Int.clip64((seconds-System.Int64.toNumber(secondsLong))*Kusto.Cloud.Platform.Utils.ExtendedDateTime.TicksPerSecond);return System.DateTimeOffset.FromUnixTimeSeconds(secondsLong).AddTicks(additionTicks).UtcDateTime},FromUnixTimeMilliseconds$1:function(milliseconds){return System.DateTimeOffset.FromUnixTimeMilliseconds(milliseconds).UtcDateTime},FromUnixTimeMilliseconds:function(milliseconds){var millisecondsLong=Bridge.Int.clip64(milliseconds),additionTicks=Bridge.Int.clip64((milliseconds-System.Int64.toNumber(millisecondsLong))*Kusto.Cloud.Platform.Utils.ExtendedDateTime.TicksPerMillisecond);return System.DateTimeOffset.FromUnixTimeMilliseconds(millisecondsLong).AddTicks(additionTicks).UtcDateTime},FromUnixTimeMicroseconds$1:function(microseconds){var TicksPerMicrosecond=System.Int64(10),MicrosecondsPerMillisecond=System.Int64(1e3),milliseconds=microseconds.div(MicrosecondsPerMillisecond),additionTicks=microseconds.sub(milliseconds.mul(MicrosecondsPerMillisecond)).mul(TicksPerMicrosecond);return System.DateTimeOffset.FromUnixTimeMilliseconds(milliseconds).AddTicks(additionTicks).UtcDateTime},FromUnixTimeMicroseconds:function(microseconds){var TicksPerMicrosecond=System.Int64(10),MicrosecondsPerMillisecond=System.Int64(1e3),milliseconds=Bridge.Int.clip64(microseconds/MicrosecondsPerMillisecond),additionTicks=Bridge.Int.clip64((microseconds-System.Int64.toNumber(milliseconds.mul(MicrosecondsPerMillisecond)))*TicksPerMicrosecond);return System.DateTimeOffset.FromUnixTimeMilliseconds(milliseconds).AddTicks(additionTicks).UtcDateTime},FromUnixTimeNanoseconds:function(nanoseconds){var NanosecondsPerTick=System.Int64(100),NanosecondsPerMillisecond=System.Int64(1e6),milliseconds=nanoseconds.div(NanosecondsPerMillisecond),additionTicks=nanoseconds.sub(milliseconds.mul(NanosecondsPerMillisecond)).div(NanosecondsPerTick);return System.DateTimeOffset.FromUnixTimeMilliseconds(milliseconds).AddTicks(additionTicks).UtcDateTime}}}});Bridge.ns("Kusto.Cloud.Platform.Utils.ExtendedDateTime",$asm.$);Bridge.apply($asm.$.Kusto.Cloud.Platform.Utils.ExtendedDateTime,{f1:function(_o1){return _o1.add(4,System.Array.init(["yyyy"],System.String)),_o1.add(6,System.Array.init(["yyyyMM"],System.String)),_o1.add(8,System.Array.init(["yyyyMMdd"],System.String)),_o1.add(10,System.Array.init(["yyyyMMddHH"],System.String)),_o1.add(12,System.Array.init(["yyyyMMddHHmm"],System.String)),_o1.add(14,System.Array.init(["yyyyMMddHHmmss"],System.String)),_o1.add(17,System.Array.init(["yyyyMMdd HH:mm:ss"],System.String)),_o1.add(19,System.Array.init(["yyyyMMdd HH:mm:ss.f"],System.String)),_o1.add(20,System.Array.init(["yyyyMMdd HH:mm:ss.ff"],System.String)),_o1.add(21,System.Array.init(["yyyyMMdd HH:mm:ss.fff"],System.String)),_o1.add(22,System.Array.init(["yyyyMMdd HH:mm:ss.ffff"],System.String)),_o1.add(23,System.Array.init(["yyyyMMdd HH:mm:ss.fffff"],System.String)),_o1.add(24,System.Array.init(["yyyyMMdd HH:mm:ss.ffffff"],System.String)),_o1.add(25,System.Array.init(["yyyyMMdd HH:mm:ss.fffffff"],System.String)),_o1}});Bridge.define("Kusto.Cloud.Platform.Utils.ExtendedDateTime.RoundTo",{$kind:"nested enum",statics:{fields:{Second:0,Minute:1,Hour:2,Day:3}}});Bridge.define("Kusto.Cloud.Platform.Utils.ExtendedEnumerable",{statics:{methods:{SafeFastDistinct:function(T,collection){var asICollectionT,asICollection;return collection==null?null:(asICollectionT=Bridge.as(collection,System.Collections.Generic.ICollection$1(T)))!=null&&System.Array.getCount(asICollectionT,T)<=1?collection:(asICollection=Bridge.as(collection,System.Collections.ICollection))!=null&&System.Array.getCount(asICollection)<=1?collection:System.Linq.Enumerable.from(collection,T).distinct()},SafeSequenceEquals:function(T,collection,other,equalityComparer){equalityComparer===void 0&&(equalityComparer=null);var basicComparison=Kusto.Cloud.Platform.Utils.ExtendedEnumerable.BasicCompare(T,collection,other);return System.Nullable.hasValue(basicComparison)?System.Nullable.getValue(basicComparison):System.Linq.Enumerable.from(System.Linq.Enumerable.from(collection,T).orderBy($asm.$.Kusto.Cloud.Platform.Utils.ExtendedEnumerable.f1),T).sequenceEqual(System.Linq.Enumerable.from(other,T).orderBy($asm.$.Kusto.Cloud.Platform.Utils.ExtendedEnumerable.f2),equalityComparer)},SortedSequenceEquals:function(T,sortedCollection1,sortedCollection2,equalityComparer){equalityComparer===void 0&&(equalityComparer=null);var basicComparison=Kusto.Cloud.Platform.Utils.ExtendedEnumerable.BasicCompare(T,sortedCollection1,sortedCollection2);return System.Nullable.hasValue(basicComparison)?System.Nullable.getValue(basicComparison):System.Linq.Enumerable.from(sortedCollection1,T).sequenceEqual(sortedCollection2,equalityComparer)},SequenceEqual:function(T,collection,other,predicate){var basicComparison=Kusto.Cloud.Platform.Utils.ExtendedEnumerable.BasicCompare(T,collection,other),enumerator1,enumerator2;if(System.Nullable.hasValue(basicComparison))return System.Nullable.getValue(basicComparison);enumerator1=Bridge.getEnumerator(collection,T);try{enumerator2=Bridge.getEnumerator(other,T);try{while(enumerator1.System$Collections$IEnumerator$moveNext())if(!enumerator2.System$Collections$IEnumerator$moveNext()||!predicate(enumerator1[Bridge.geti(enumerator1,"System$Collections$Generic$IEnumerator$1$"+Bridge.getTypeAlias(T)+"$Current$1","System$Collections$Generic$IEnumerator$1$Current$1")],enumerator2[Bridge.geti(enumerator2,"System$Collections$Generic$IEnumerator$1$"+Bridge.getTypeAlias(T)+"$Current$1","System$Collections$Generic$IEnumerator$1$Current$1")]))return!1;if(enumerator2.System$Collections$IEnumerator$moveNext())return!1}finally{Bridge.hasValue(enumerator2)&&enumerator2.System$IDisposable$Dispose()}}finally{Bridge.hasValue(enumerator1)&&enumerator1.System$IDisposable$Dispose()}return!0},BasicCompare:function(T,collection,other){if(Bridge.referenceEquals(collection,other))return!0;if(collection==null||other==null)return!1;var length1=Kusto.Cloud.Platform.Utils.ExtendedEnumerable.GetSequenceLength(T,collection),length2=Kusto.Cloud.Platform.Utils.ExtendedEnumerable.GetSequenceLength(T,other);return System.Nullable.hasValue(length1)&&System.Nullable.hasValue(length2)&&System.Nullable.getValue(length1).ne(System.Nullable.getValue(length2))?!1:null},GetSequenceLength:function(T,sequence){var asArrayT,asIReadOnlyCollectionT,asICollectionT,asICollection;return(asArrayT=Bridge.as(sequence,System.Array.type(T)))!=null?System.Int64.lift(asArrayT.length):(asIReadOnlyCollectionT=Bridge.as(sequence,System.Collections.Generic.IReadOnlyCollection$1(T)))!=null?System.Int64.lift(System.Array.getCount(asIReadOnlyCollectionT,T)):(asICollectionT=Bridge.as(sequence,System.Collections.Generic.ICollection$1(T)))!=null?System.Int64.lift(System.Array.getCount(asICollectionT,T)):(asICollection=Bridge.as(sequence,System.Collections.ICollection))!=null?System.Int64.lift(System.Array.getCount(asICollection)):System.Int64.lift(null)},ToDisplayString:function(T,collection,delimiter,maxTake,nullString,estimatedStringSize){var $t,$t1,$t2,$t3,$t4,$t5;if(delimiter===void 0&&(delimiter=", "),maxTake===void 0&&(maxTake=null),nullString===void 0&&(nullString="[null]"),estimatedStringSize===void 0&&(estimatedStringSize=128),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(T,collection)||System.Nullable.lte(maxTake,0))return"";delimiter=($t=delimiter,$t!=null?$t:", ");nullString=($t1=nullString,$t1!=null?$t1:"[null]");var displayStringBuilder=new System.Text.StringBuilder("",estimatedStringSize),itemsPassed=0,enumerator=Bridge.getEnumerator(collection,T);try{for(enumerator.System$Collections$IEnumerator$moveNext()&&(displayStringBuilder.append(($t2=($t3=enumerator[Bridge.geti(enumerator,"System$Collections$Generic$IEnumerator$1$"+Bridge.getTypeAlias(T)+"$Current$1","System$Collections$Generic$IEnumerator$1$Current$1")])!=null?Bridge.toString($t3):null,$t2!=null?$t2:nullString)),itemsPassed=itemsPassed+1|0);enumerator.System$Collections$IEnumerator$moveNext()&&!System.Nullable.gte(itemsPassed,maxTake);)displayStringBuilder.append(delimiter),displayStringBuilder.append(($t4=($t5=enumerator[Bridge.geti(enumerator,"System$Collections$Generic$IEnumerator$1$"+Bridge.getTypeAlias(T)+"$Current$1","System$Collections$Generic$IEnumerator$1$Current$1")])!=null?Bridge.toString($t5):null,$t4!=null?$t4:nullString)),itemsPassed=itemsPassed+1|0;enumerator.System$Collections$IEnumerator$moveNext()&&(displayStringBuilder=displayStringBuilder.append(delimiter).append("... more"))}finally{Bridge.hasValue(enumerator)&&enumerator.System$IDisposable$Dispose()}return displayStringBuilder.toString()},SafeShallowClone:function(T,collection){return collection==null?null:new(System.Collections.Generic.List$1(T).$ctor1)(collection)},IndexOf:function(TCollection,collection,predicate){var $t,i,item;if(Bridge.staticEquals(predicate,null)||collection==null)return-1;i=0;$t=Bridge.getEnumerator(collection,TCollection);try{while($t.moveNext()){if(item=$t.Current,predicate(item))return i;i=i+1|0}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return-1},SafeConcat:function(T,first,second){return first==null?second:second==null?first:System.Linq.Enumerable.from(first,T).concat(second)},SafeUnion:function(T,first,second){return first==null&&second==null?null:first==null?System.Linq.Enumerable.from(second,T).distinct():second==null?System.Linq.Enumerable.from(first,T).distinct():System.Linq.Enumerable.from(first,T).union(second)},SafeFastNullIfEmpty:function(TCollection,collection){return collection==null||Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone(collection)?null:collection},SafeEmptyIEnumerableIfNull:function(T,collectionEnumerable){return collectionEnumerable||System.Linq.Enumerable.empty()},SafeFastAny$2:function(T,collection){var asICollection,asIReadOnlyCollection;return collection==null?!1:(asICollection=Bridge.as(collection,System.Collections.ICollection))!=null?System.Array.getCount(asICollection)!==0:(asIReadOnlyCollection=Bridge.as(collection,System.Collections.Generic.IReadOnlyCollection$1(T)))!=null?System.Array.getCount(asIReadOnlyCollection,T)!==0:System.Linq.Enumerable.from(collection,T).any()},SafeFastAny$1:function(T,collection){return collection!=null&&System.Array.getCount(collection,T)>0},SafeFastAny:function(collection){var $t,asICollection,e;if(collection==null)return!1;if((asICollection=Bridge.as(collection,System.Collections.ICollection))!=null)return System.Array.getCount(asICollection)!==0;e=Bridge.getEnumerator(collection);$t=Bridge.as(e,System.IDisposable);try{if(e.System$Collections$IEnumerator$moveNext())return!0}finally{Bridge.hasValue($t)&&$t.System$IDisposable$Dispose()}return!1},SafeFastAny$3:function(T,collection,predicate){return Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(T,collection)?System.Linq.Enumerable.from(collection,T).any(predicate):!1},SafeFastNone$2:function(T,collection){return!Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(T,collection)},SafeFastNone$1:function(T,collection){return!Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$1(T,collection)},SafeFastNone:function(collection){return!Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny(collection)},SafeFastNone$3:function(T,collection,predicate){return!Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$3(T,collection,predicate)},None$1:function(T,source,predicate){return!System.Linq.Enumerable.from(source,T).any(predicate)},None:function(T,source){return Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(T,source)},SafeFastContains:function(T,collection,item,comparer){return(comparer===void 0&&(comparer=null),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(T,collection))?!1:System.Linq.Enumerable.from(collection,T).contains(item,comparer)},DistinctBy:function(T,TKey,source,keySelector){return System.Linq.Enumerable.from(source,T).groupBy(keySelector).select($asm.$.Kusto.Cloud.Platform.Utils.ExtendedEnumerable.f3)},Intersect:function(T,collections){var enumerator,result;if(Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(System.Collections.Generic.IEnumerable$1(T),collections))return null;if(enumerator=Bridge.getEnumerator(collections,System.Collections.Generic.IEnumerable$1(T)),enumerator.System$Collections$IEnumerator$moveNext()){for(result=new(System.Collections.Generic.HashSet$1(T).$ctor1)(enumerator[Bridge.geti(enumerator,"System$Collections$Generic$IEnumerator$1$System$Collections$Generic$IEnumerable$1$"+Bridge.getTypeAlias(T)+"$Current$1","System$Collections$Generic$IEnumerator$1$Current$1")]);enumerator.System$Collections$IEnumerator$moveNext();)result.intersectWith(enumerator[Bridge.geti(enumerator,"System$Collections$Generic$IEnumerator$1$System$Collections$Generic$IEnumerable$1$"+Bridge.getTypeAlias(T)+"$Current$1","System$Collections$Generic$IEnumerator$1$Current$1")]);return result}return null},IntersectWith:function(T,collection,other){if(Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(T,collection))return other;if(Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(T,other))return collection;var result=new(System.Collections.Generic.HashSet$1(T).$ctor1)(collection);return result.intersectWith(other),result}}}});Bridge.ns("Kusto.Cloud.Platform.Utils.ExtendedEnumerable",$asm.$);Bridge.apply($asm.$.Kusto.Cloud.Platform.Utils.ExtendedEnumerable,{f1:function(item){return item},f2:function(items){return items},f3:function(x){return x.first()}});Bridge.define("Kusto.Cloud.Platform.Utils.ExtendedRegex",{statics:{methods:{TryUnescape:function(str,result){result.v="";try{return result.v=System.Text.RegularExpressions.Regex.unescape(str),!0}catch($e1){if($e1=System.Exception.create($e1),Bridge.is($e1,System.ArgumentException))return!1;else throw $e1;}},TryTransformWildCardPatternToRegex:function(wildcardPattern){try{var input=System.String.trim(wildcardPattern,[91,93]),regexString=System.String.replaceAll(input,"*",".*");return new System.Text.RegularExpressions.Regex.ctor(regexString,0)}catch($e1){return $e1=System.Exception.create($e1),null}},IsWildCardPattern:function(wildcardPattern){return System.String.indexOf(wildcardPattern,String.fromCharCode(42))>=0},RegexEquals:function(regex,other){if(Bridge.referenceEquals(regex,other))return!0;var otherAsRegex;return regex==null||other==null||!((otherAsRegex=Bridge.as(other,System.Text.RegularExpressions.Regex))!=null)?!1:Kusto.Cloud.Platform.Utils.ExtendedRegex.RegexEquals$1(regex,otherAsRegex)},RegexEquals$1:function(regex,other){return Bridge.referenceEquals(regex,other)?!0:regex==null||other==null?!1:System.String.equals(Bridge.toString(regex),Bridge.toString(other))&&regex.getOptions()===other.getOptions()&&System.TimeSpan.eq(regex.getMatchTimeout(),other.getMatchTimeout())},RegexEquivalent:function(regex,other){return Bridge.referenceEquals(regex,other)?!0:regex==null||other==null?!1:System.String.equals(Bridge.toString(regex),Bridge.toString(other))&&regex.getOptions()===other.getOptions()}}}});Bridge.define("Kusto.Cloud.Platform.Utils.ExtendedString",{statics:{fields:{c_postfix:null,c_wrap:null,c_newlineAsStringArray:null,c_nullGuids:null,SafeToString:null,EmptyArray:null,s_alternativeSpaceChars:null,s_alternativeNewlineChars:null},ctors:{init:function(){this.c_postfix="...";this.c_wrap="  ";this.c_newlineAsStringArray=System.Array.init(["\n"],System.String);this.c_nullGuids=System.Array.init([System.Guid.Empty.toString(),"{"+(System.Guid.Empty.toString()||"")+"}"],System.String);this.SafeToString=$asm.$.Kusto.Cloud.Platform.Utils.ExtendedString.f1;this.EmptyArray=System.Array.init(0,null,System.String);this.s_alternativeSpaceChars=$asm.$.Kusto.Cloud.Platform.Utils.ExtendedString.f2(new(System.Collections.Generic.HashSet$1(System.Char).ctor));this.s_alternativeNewlineChars=$asm.$.Kusto.Cloud.Platform.Utils.ExtendedString.f3(new(System.Collections.Generic.HashSet$1(System.Char).ctor))}},methods:{SafeGetHashCode:function(value){return value==null?20080512:Bridge.getHashCode(value)},GuidSafeFastGetHashCode:function(value){return value==null||value.length<26?Kusto.Cloud.Platform.Utils.ExtendedString.SafeGetHashCode(value):(value.charCodeAt(1)^value.charCodeAt(9)<<8|value.charCodeAt(10))^(value.charCodeAt(16)<<16|value.charCodeAt(17))^(value.charCodeAt(24)<<24|value.charCodeAt(25))},SafeToTraceString:function(value){return value==null?"[null]":value.length===0?"[empty]":value},SafeFormat:function(format,args){var args2,a,arg,arg2,argStr;if(args===void 0&&(args=[]),format==null)return"[format:null]";if(args==null||args.length===0)return System.String.format.apply(System.String,[format].concat(args));for(args2=System.Array.init(args.length,null,System.String),a=0;a<args.length;a=a+1|0)arg=args[System.Array.index(a,args)],arg==null?arg2="[null]":(argStr=Bridge.toString(arg),arg2=argStr==null?"[ToStringNull]":argStr.length===0?"[ToStringEmpty]":System.String.isNullOrWhiteSpace(argStr)?"[ToStringWhitespace]":argStr),args2[System.Array.index(a,args2)]=arg2;return System.String.format.apply(System.String,[format].concat(args2))},FormatWithCurrentCulture:function(format,args){return args===void 0&&(args=[]),Kusto.Cloud.Platform.Utils.ExtendedString.FormatWith(format,System.Globalization.CultureInfo.getCurrentCulture(),args)},FormatWithInvariantCulture:function(format,args){return args===void 0&&(args=[]),Kusto.Cloud.Platform.Utils.ExtendedString.FormatWith(format,System.Globalization.CultureInfo.invariantCulture,args)},FormatWith:function(format,formatProvider,args){return args===void 0&&(args=[]),System.String.formatProvider.apply(System.String,[formatProvider,format].concat(args))},SafeIsNullGuid:function(value){return System.String.isNullOrWhiteSpace(value)||Bridge.referenceEquals(value,Kusto.Cloud.Platform.Utils.ExtendedString.c_nullGuids[System.Array.index(0,Kusto.Cloud.Platform.Utils.ExtendedString.c_nullGuids)])||Bridge.referenceEquals(value,Kusto.Cloud.Platform.Utils.ExtendedString.c_nullGuids[System.Array.index(1,Kusto.Cloud.Platform.Utils.ExtendedString.c_nullGuids)])},GetDiff:function(lhs,rhs){var ret,i;if(Bridge.referenceEquals(lhs,rhs)){if(lhs==null)return"Strings are the same (both null)";else if(Bridge.referenceEquals(lhs,""))return"Strings are the same (both empty)";return"Strings are the same"}if(lhs==null)return"LHS is null, RHS is not";if(rhs==null)return"RHS is null, LHS is not";for(i=0;i<Math.min(lhs.length,rhs.length);i=i+1|0)if(lhs.charCodeAt(i)!==rhs.charCodeAt(i)){ret=Kusto.Cloud.Platform.Utils.ExtendedString.GetDiffFromPosition(lhs,rhs,i);break}return Kusto.Cloud.Platform.Utils.ExtendedString.GetDiffFromPosition(lhs,rhs,Math.min(lhs.length,rhs.length))},GetDiffFromPosition:function(lhs,rhs,position){var before=20,after=20,start=Math.max(0,position-before|0),count=before+after|0;return"Strings differ starting from position "+(Bridge.toString(position)||"")+" \nLHS=...'"+(Kusto.Cloud.Platform.Utils.ExtendedString.SafeSubstring(lhs,start,count)||"")+"'...\nRHS=...'"+(Kusto.Cloud.Platform.Utils.ExtendedString.SafeSubstring(rhs,start,count)||"")+"'...\n"+(System.String.fromCharCount(32,((start===0?position:before)+1|0)+7|0)||"")+"^"},SafeSubstring:function(value,startIndex,count){return value==null?null:(startIndex=Math.max(0,startIndex),startIndex>=value.length)?"":count<=0?"":(count=Math.min(count,value.length-startIndex|0),value.substr(startIndex,count))},SafeIsValidNonEmptyBase64:function(value,allowWhitespace){var $t,offsetFirstEquality,i,c,j;if((allowWhitespace===void 0&&(allowWhitespace=!1),allowWhitespace&&value!=null&&(value=value.trim()),System.String.isNullOrEmpty(value))||value.length%4!=0)return!1;offsetFirstEquality=-1;i=-1;$t=Bridge.getEnumerator(value);try{while($t.moveNext())if(c=$t.Current,i=i+1|0,(!(c>=48)||!(c<=57))&&(!(c>=65)||!(c<=90))&&(!(c>=97)||!(c<=122))&&c!==43&&c!==47){if(c===61){offsetFirstEquality=i;break}return!1}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}if(offsetFirstEquality===-1)return value.length%4==0;if((value.length-offsetFirstEquality|0)>3)return!1;for(j=offsetFirstEquality;j<value.length;j=j+1|0)if(value.charCodeAt(j)!==61)return!1;return!0},SafeIsDoubleSlashCommentOrEmptyBlock:function(cmd){if(System.String.isNullOrWhiteSpace(cmd))return!0;for(var slash=!1,i=0,c;;){if(i>=cmd.length)return!slash;if(c=cmd.charCodeAt(i),c===47){if(slash){while((i=i+1|0)<cmd.length)if(c=cmd.charCodeAt(i),c===13||c===10)break;slash=!1}else slash=!0;i=i+1|0;continue}if(slash)return!1;if(System.Char.isWhiteSpace(String.fromCharCode(c))||c===13||c===10){i=i+1|0;continue}return!1}},SafeFastTrim:function(text){return System.String.isNullOrEmpty(text)?text:text.trim()},TrimStart$1:function(text,prefix,comparison){return(comparison===void 0&&(comparison=4),System.String.startsWith(text,prefix,comparison))?text.substr(prefix.length,text.length-prefix.length|0):text},TrimStart:function(text,c,justOne){if(System.String.isNullOrEmpty(text))return text;if(justOne)return text.charCodeAt(0)===c?text.substr(1):text;if(text.charCodeAt(0)!==c)return text;for(var i=0;i<text.length&&text.charCodeAt(i)===c;)i=i+1|0;return i===text.length?"":text.substr(i)},TrimEnd:function(text,suffix,comparison){return(comparison===void 0&&(comparison=4),System.String.endsWith(text,suffix,comparison))?text.substr(0,text.length-suffix.length|0):text},TrimBalancedSquareBrackets:function(text,comparison){return comparison===void 0&&(comparison=4),text!=null&&System.String.startsWith(text,"[",comparison)&&System.String.endsWith(text,"]",comparison)&&(text=text.substr(1,text.length-2|0)),text},TrimBalancedRoundBrackets:function(text){return Kusto.Cloud.Platform.Utils.ExtendedString.TrimBalanced(text,"(",")")},TrimBalanced:function(text,openning,closing,comparison){return comparison===void 0&&(comparison=4),text!=null&&System.String.startsWith(text,openning,comparison)&&System.String.endsWith(text,closing,comparison)&&(text=text.substr(openning.length,text.length-(openning.length+closing.length|0)|0)),text},TrimBalancedSingleAndDoubleQuotes:function(text){if(System.String.isNullOrEmpty(text))return text;for(var start=0,end=text.length-1|0;start<end;){if(text.charCodeAt(start)===34&&text.charCodeAt(end)===34){start=start+1|0;end=end-1|0;continue}if(text.charCodeAt(start)===39&&text.charCodeAt(end)===39){start=start+1|0;end=end-1|0;continue}break}return start>end?"":text.substr(start,(end-start|0)+1|0)},DetermineMaxLineWidth:function(text){var ret,currentPos,i,c;if(System.String.isNullOrEmpty(text))return 0;for(ret=0,currentPos=0,i=0;i<text.length;i=i+1|0)c=text.charCodeAt(i),c===13||c===10?(ret=Math.max(ret,i-currentPos|0),currentPos=i+1|0):i===(text.length-1|0)&&(ret=Math.max(ret,(i-currentPos|0)+1|0));return ret},SafeCountCharacterUpTo:function(value,c,maxCount){var ret,i;if(value==null)return System.Int64(-1);for(ret=0,i=0;i<value.length;i=i+1|0)if(value.charCodeAt(i)===c&&(ret=ret+1|0),System.Int64(ret).equals(maxCount))break;return System.Int64(ret)},SafeCountAnyCharacterUpTo:function(value,chars,maxCount){var ret,i;if(value==null)return System.Int64(-1);for(ret=0,i=0;i<value.length;i=i+1|0)if(System.Array.contains(chars,value.charCodeAt(i),System.Char)&&(ret=ret+1|0),System.Int64(ret).equals(maxCount))break;return System.Int64(ret)},FindFirstNonWhitespaceCharacter:function(value,index){if(index===void 0&&(index=0),value==null)return-1;for(;;){if(index>=value.length)return-1;if(!System.Char.isWhiteSpace(String.fromCharCode(value.charCodeAt(index))))return index;index=index+1|0}},FirstFirstUnequalCharacter:function(lhs,rhs){if(Bridge.referenceEquals(lhs,rhs))return-1;if(lhs==null||rhs==null||lhs.length===0||rhs.length===0)return 0;for(var i=0;i<lhs.length&&i<rhs.length;i=i+1|0)if(lhs.charCodeAt(i)!==rhs.charCodeAt(i))return i;return i},CountNonOverlappingSubstrings$1:function(text,substring,comparison){if(comparison===void 0&&(comparison=4),System.String.isNullOrEmpty(text)||System.String.isNullOrEmpty(substring))return 0;for(var count=0,i=0;i<text.length;){if(i=System.String.indexOf(text,substring,i,null,comparison),i<0)return count;count=count+1|0;i=i+substring.length|0}return count},CountNonOverlappingSubstrings:function(text,c){if(System.String.isNullOrEmpty(text))return 0;for(var count=0,i=0;i<text.length;){if(i=System.String.indexOf(text,String.fromCharCode(c),i),i<0)return count;count=count+1|0;i=i+1|0}return count},SafeStartsWith:function(what,c){return System.String.isNullOrEmpty(what)?!1:what.charCodeAt(0)===c},SafeStartsWith$1:function(what,value,comparison){return(comparison===void 0&&(comparison=4),System.String.isNullOrEmpty(what))?!1:System.String.startsWith(what,value,comparison)},EqualsOrdinalIgnoreCase:function(me,other){return System.String.equals(me,other,5)},IsEmpty:function(me){return Bridge.referenceEquals(me,"")},IsNotEmpty:function(me){return!Bridge.referenceEquals(me,"")},IsNullOrEmpty:function(me){return System.String.isNullOrEmpty(me)},IsNotNullOrEmpty:function(me){return!System.String.isNullOrEmpty(me)},SafeGetTail:function(what,length){return what==null?null:length<=0?"":length>=what.length?what:what.substr(what.length-length|0)},SafeIndexOf$1:function(what,value,startIndex,comparisonType){return System.String.isNullOrEmpty(what)||System.String.isNullOrEmpty(value)||startIndex>what.length?-1:System.String.indexOf(what,value,startIndex,null,comparisonType)},SafeIndexOf:function(what,value,startIndex,count,comparisonType){return System.String.isNullOrEmpty(what)||System.String.isNullOrEmpty(value)||(startIndex+value.length|0)>what.length?-1:System.String.indexOf(what,value,startIndex,count,comparisonType)},SplitFirst$1:function(what,delimiter,comparison){var delimiterIndex;return(comparison===void 0&&(comparison=4),what==null||System.String.isNullOrEmpty(delimiter))?null:(delimiterIndex=System.String.indexOf(what,delimiter,0,null,comparison),delimiterIndex<0)?what:what.substr(0,delimiterIndex)},SplitFirst:function(what,delimiter){var delimiterIndex;return what==null?null:(delimiterIndex=System.String.indexOf(what,String.fromCharCode(delimiter)),delimiterIndex<0)?what:what.substr(0,delimiterIndex)},Rotate:function(s){return System.String.isNullOrEmpty(s)||s.length<2?s:(s.substr(1,s.length-1|0)||"")+(s.substr(0,1)||"")},AdjustNewLineDelimiter:function(text){for(var c,chars=System.String.toCharArray(text,0,text.length),resultBuilder=new System.Text.StringBuilder,i=0;i<chars.length;i=i+1|0){c=chars[System.Array.index(i,chars)];switch(c){case 13:i<(chars.length-1|0)&&chars[System.Array.index(i+1|0,chars)]===10&&(i=i+1|0);resultBuilder.append("\n");break;case 10:resultBuilder.append("\n");break;default:resultBuilder.append(String.fromCharCode(c));break}}return resultBuilder.toString()},ReplaceInvisibleWhitespaces:function(value){var sb,i,c;if(System.String.isNullOrEmpty(value))return value;for(sb=null,i=0;i<value.length;i=i+1|0)c=value.charCodeAt(i),Kusto.Cloud.Platform.Utils.ExtendedString.s_alternativeSpaceChars.contains(c)?(sb=Kusto.Cloud.Platform.Utils.ExtendedString.InitializeStringBuildIfNeeded(value,sb,i),sb.append(String.fromCharCode(32))):Kusto.Cloud.Platform.Utils.ExtendedString.s_alternativeNewlineChars.contains(c)?(sb=Kusto.Cloud.Platform.Utils.ExtendedString.InitializeStringBuildIfNeeded(value,sb,i),sb.append("\n")):sb!=null&&sb.append(String.fromCharCode(c));return sb==null?value:sb.toString()},InitializeStringBuildIfNeeded:function(value,sb,i){return sb!=null?sb:(sb=new System.Text.StringBuilder("",value.length),i>0&&sb.append(value.substr(0,i)),sb)}}}});Bridge.ns("Kusto.Cloud.Platform.Utils.ExtendedString",$asm.$);Bridge.apply($asm.$.Kusto.Cloud.Platform.Utils.ExtendedString,{f1:function(obj){var $t;return obj!=null?($t=Bridge.toString(obj),$t!=null?$t:"[ToStringNull]"):"[null]"},f2:function(_o1){return _o1.add(160),_o1.add(5760),_o1.add(6158),_o1.add(8192),_o1.add(8193),_o1.add(8194),_o1.add(8195),_o1.add(8196),_o1.add(8197),_o1.add(8198),_o1.add(8199),_o1.add(8200),_o1.add(8201),_o1.add(8202),_o1.add(8203),_o1.add(8239),_o1.add(8287),_o1.add(12288),_o1.add(65279),_o1},f3:function(_o2){return _o2.add(11),_o2}});Bridge.define("Kusto.Data.Common.CslQueryParser",{statics:{methods:{PrettifyQuery:function(query,appendText){var parser=new Kusto.Data.IntelliSense.CslCommandParser,commands=parser.Parse(null,query,Kusto.Data.IntelliSense.ParseMode.CommandTokensOnly),queryFormatted;return System.Linq.Enumerable.from(commands,Kusto.Data.IntelliSense.CslCommand).count()!==1?query:(queryFormatted=System.Linq.Enumerable.from(commands,Kusto.Data.IntelliSense.CslCommand).first().FormatAsString("\n",7),System.String.isNullOrEmpty(queryFormatted)&&(queryFormatted=query),System.String.isNullOrEmpty(appendText)||(queryFormatted=(queryFormatted||"")+(appendText||"")),queryFormatted)}}}});Bridge.define("Kusto.Data.Common.CslSyntaxGenerator",{statics:{fields:{s_keywords:null},ctors:{init:function(){this.s_keywords=$asm.$.Kusto.Data.Common.CslSyntaxGenerator.f1(new(System.Collections.Generic.HashSet$1(System.String).ctor))}},methods:{NormalizeDatabaseName$1:function(databaseName,forceNormalization){return Kusto.Data.Common.CslSyntaxGenerator.NormalizeName(databaseName,forceNormalization)},NormalizeDatabaseName:function(databaseName){return Kusto.Data.Common.CslSyntaxGenerator.NormalizeName(databaseName,!1)},NormalizeFunctionName:function(functionName,forceNormalizeFunctionName){return forceNormalizeFunctionName===void 0&&(forceNormalizeFunctionName=!1),Kusto.Data.Common.CslSyntaxGenerator.NormalizeName(functionName,forceNormalizeFunctionName)},NormalizeTableName:function(tableName,forceNormalizeTableName){return forceNormalizeTableName===void 0&&(forceNormalizeTableName=!1),Kusto.Data.Common.CslSyntaxGenerator.NormalizeName(tableName,forceNormalizeTableName)},NormalizeColumnName:function(columnName,forceNormalizeColumnName){return forceNormalizeColumnName===void 0&&(forceNormalizeColumnName=!1),Kusto.Data.Common.CslSyntaxGenerator.NormalizeName(columnName,forceNormalizeColumnName)},NormalizeRowStoreName:function(rowStoreName){return Kusto.Data.Common.CslSyntaxGenerator.NormalizeName(rowStoreName,!1)},NormalizeWorkloadGroupName:function(workloadGroupName){return Kusto.Data.Common.CslSyntaxGenerator.NormalizeName(workloadGroupName,!1)},IsIdentifier:function(token){if(System.String.isNullOrEmpty(token)||!System.Char.isLetter(token.charCodeAt(0))&&token.charCodeAt(0)!==95)return!1;return System.Linq.Enumerable.from(token,System.Char).all($asm.$.Kusto.Data.Common.CslSyntaxGenerator.f2)},IsAscii:function(c){return c<=127},NormalizeName:function(name,forceNormalization){return System.String.isNullOrEmpty(name)?name:!forceNormalization&&Kusto.Data.Common.CslSyntaxGenerator.IsIdentifier(name)&&!Kusto.Data.Common.CslSyntaxGenerator.IsKeyword(name)?name:System.String.startsWith(name,"[")?name:System.String.contains(name,"'")?'["'+(name||"")+'"]':"['"+(name||"")+"']"},IsKeyword:function(token){return Kusto.Data.Common.CslSyntaxGenerator.s_keywords.contains(token)}}}});Bridge.ns("Kusto.Data.Common.CslSyntaxGenerator",$asm.$);Bridge.apply($asm.$.Kusto.Data.Common.CslSyntaxGenerator,{f1:function(_o1){return _o1.add("access"),_o1.add("accounts"),_o1.add("accumulate"),_o1.add("add"),_o1.add("adl"),_o1.add("admin"),_o1.add("admins"),_o1.add("aggregations"),_o1.add("alias"),_o1.add("all"),_o1.add("alter"),_o1.add("alter-merge"),_o1.add("and"),_o1.add("anomalycolumns"),_o1.add("append"),_o1.add("artifacts"),_o1.add("as"),_o1.add("asc"),_o1.add("async"),_o1.add("attach"),_o1.add("avro"),_o1.add("apacheavro"),_o1.add("axes"),_o1.add("base"),_o1.add("basicauth"),_o1.add("between"),_o1.add("bin"),_o1.add("blob"),_o1.add("block"),_o1.add("blocked"),_o1.add("by"),_o1.add("cache"),_o1.add("caching"),_o1.add("cachingpolicy"),_o1.add("callout"),_o1.add("cancel"),_o1.add("capacity"),_o1.add("classification"),_o1.add("clear"),_o1.add("cluster"),_o1.add("column"),_o1.add("columns"),_o1.add("column-docstrings"),_o1.add("commands"),_o1.add("commands-and-queries"),_o1.add("commconcurrency"),_o1.add("commpools"),_o1.add("completed"),_o1.add("compressed"),_o1.add("consume"),_o1.add("contains"),_o1.add("continuous-export"),_o1.add("continuous-exports"),_o1.add("continuous-job"),_o1.add("conservative"),_o1.add("count"),_o1.add("crash"),_o1.add("create"),_o1.add("create-or-alter"),_o1.add("createdon"),_o1.add("create-merge"),_o1.add("csl"),_o1.add("cslschema"),_o1.add("csv"),_o1.add("cursor"),_o1.add("data"),_o1.add("database"),_o1.add("databasecreators"),_o1.add("databases"),_o1.add("alldatabasesadmins"),_o1.add("alldatabasesviewers"),_o1.add("dataexport"),_o1.add("dataformat"),_o1.add("datatable"),_o1.add("declare"),_o1.add("decryption-certificate-thumbprint"),_o1.add("default"),_o1.add("define"),_o1.add("delete"),_o1.add("delta"),_o1.add("desc"),_o1.add("detach"),_o1.add("details"),_o1.add("diagnostics"),_o1.add("disable"),_o1.add("distinct"),_o1.add("docstring"),_o1.add("drop"),_o1.add("drop-pretend"),_o1.add("dup-next-failed-ingest"),_o1.add("dup-next-ingest"),_o1.add("earliest"),_o1.add("echo"),_o1.add("effective"),_o1.add("enable"),_o1.add("encoding"),_o1.add("encodingpolicy"),_o1.add("entity"),_o1.add("ephemeral"),_o1.add("evaluate"),_o1.add("except"),_o1.add("execute"),_o1.add("export"),_o1.add("extend"),_o1.add("extent"),_o1.add("extentcontainers"),_o1.add("extents"),_o1.add("extentsmerge"),_o1.add("external"),_o1.add("externaldata"),_o1.add("external_data"),_o1.add("fabric"),_o1.add("fabriccache"),_o1.add("fabricclocks"),_o1.add("fabriclocks"),_o1.add("facet"),_o1.add("failures"),_o1.add("featureflags"),_o1.add("filter"),_o1.add("find"),_o1.add("first"),_o1.add("flags"),_o1.add("folder"),_o1.add("fork"),_o1.add("freshness"),_o1.add("from"),_o1.add("function"),_o1.add("functions"),_o1.add("generic"),_o1.add("get"),_o1.add("getschema"),_o1.add("groups"),_o1.add("harddelete"),_o1.add("hardretention"),_o1.add("has"),_o1.add("has_any"),_o1.add("hash"),_o1.add("hidden"),_o1.add("hot"),_o1.add("hotdata"),_o1.add("hotindex"),_o1.add("hours"),_o1.add("id"),_o1.add("if_later_than"),_o1.add("ifexists"),_o1.add("ifnotexists"),_o1.add("in"),_o1.add("in~"),_o1.add("ingest"),_o1.add("ingestion"),_o1.add("ingestionbatching"),_o1.add("ingestions"),_o1.add("ingestiontime"),_o1.add("ingestors"),_o1.add("inline"),_o1.add("internal"),_o1.add("into"),_o1.add("invoke"),_o1.add("journal"),_o1.add("json"),_o1.add("jobs"),_o1.add("key"),_o1.add("keys"),_o1.add("kind"),_o1.add("last"),_o1.add("latest"),_o1.add("legend"),_o1.add("let"),_o1.add("limit"),_o1.add("linear"),_o1.add("list"),_o1.add("load"),_o1.add("local"),_o1.add("location"),_o1.add("lookup"),_o1.add("log"),_o1.add("make-series"),_o1.add("management"),_o1.add("map"),_o1.add("mapping"),_o1.add("mappings"),_o1.add("materialize"),_o1.add("materialized-view"),_o1.add("materialized-views"),_o1.add("materialized-view-combine"),_o1.add("mdm"),_o1.add("memory"),_o1.add("mempools"),_o1.add("merge"),_o1.add("metadata"),_o1.add("method"),_o1.add("missing"),_o1.add("monitoring"),_o1.add("monitors"),_o1.add("move"),_o1.add("multidatabaseadmins"),_o1.add("mv-apply"),_o1.add("mv-expand"),_o1.add("mvapply"),_o1.add("mvexpand"),_o1.add("nan"),_o1.add("node"),_o1.add("none"),_o1.add("!between"),_o1.add("!in"),_o1.add("!in~"),_o1.add("null"),_o1.add("nulls"),_o1.add("of"),_o1.add("on"),_o1.add("older"),_o1.add("operation"),_o1.add("operations"),_o1.add("optional"),_o1.add("or"),_o1.add("orc"),_o1.add("order"),_o1.add("others"),_o1.add("over"),_o1.add("pack"),_o1.add("panels"),_o1.add("parse"),_o1.add("parse-where"),_o1.add("parquet"),_o1.add("partition"),_o1.add("partitioning"),_o1.add("password"),_o1.add("pathformat"),_o1.add("pattern"),_o1.add("pending"),_o1.add("persist"),_o1.add("plugin"),_o1.add("plugins"),_o1.add("policies"),_o1.add("policy"),_o1.add("pretend"),_o1.add("prettyname"),_o1.add("principal"),_o1.add("principals"),_o1.add("print"),_o1.add("project"),_o1.add("project-away"),_o1.add("project-keep"),_o1.add("project-rename"),_o1.add("project-reorder"),_o1.add("project-smart"),_o1.add("purge"),_o1.add("purge-cleanup"),_o1.add("queries"),_o1.add("query"),_o1.add("query_parameters"),_o1.add("queryexecution"),_o1.add("queryplan"),_o1.add("querythrottling"),_o1.add("query_weak_consistency"),_o1.add("query_results"),_o1.add("range"),_o1.add("readonly"),_o1.add("readwrite"),_o1.add("rebuild"),_o1.add("recycle"),_o1.add("reduce"),_o1.add("remote"),_o1.add("rename"),_o1.add("render"),_o1.add("replace"),_o1.add("resources"),_o1.add("restore"),_o1.add("restrict"),_o1.add("restricted_view_access"),_o1.add("resume-purges"),_o1.add("retention"),_o1.add("request_classification"),_o1.add("roles"),_o1.add("row_level_security"),_o1.add("roworder"),_o1.add("roworderpolicy"),_o1.add("rowstore"),_o1.add("rowstorepolicy"),_o1.add("rowstore_references"),_o1.add("rowstores"),_o1.add("rowstore_sealinfo"),_o1.add("run"),_o1.add("running"),_o1.add("sample"),_o1.add("sample-distinct"),_o1.add("sandbox"),_o1.add("sandboxes"),_o1.add("save"),_o1.add("scan"),_o1.add("schema"),_o1.add("script"),_o1.add("seal"),_o1.add("seals"),_o1.add("search"),_o1.add("serialize"),_o1.add("series"),_o1.add("servicepoints"),_o1.add("set"),_o1.add("set-or-append"),_o1.add("set-or-replace"),_o1.add("sharding"),_o1.add("shards"),_o1.add("show"),_o1.add("softdelete"),_o1.add("softretention"),_o1.add("sort"),_o1.add("sql"),_o1.add("stacked"),_o1.add("stacked100"),_o1.add("state"),_o1.add("statistics"),_o1.add("step"),_o1.add("storedqueryresultcontainers"),_o1.add("stream"),_o1.add("streamingingestion"),_o1.add("summarize"),_o1.add("sstream"),_o1.add("storage"),_o1.add("systemdb"),_o1.add("usage"),_o1.add("table"),_o1.add("tablepurge"),_o1.add("tables"),_o1.add("tags"),_o1.add("take"),_o1.add("tcpconnections"),_o1.add("tcpports"),_o1.add("tempstorage"),_o1.add("tenants"),_o1.add("threadpools"),_o1.add("threshold"),_o1.add("throw"),_o1.add("title"),_o1.add("to"),_o1.add("top"),_o1.add("top-hitters"),_o1.add("top-nested"),_o1.add("toscalar"),_o1.add("totable"),_o1.add("trace"),_o1.add("traceresults"),_o1.add("tsv"),_o1.add("type"),_o1.add("typeof"),_o1.add("undo"),_o1.add("unstacked"),_o1.add("unrestrictedviewers"),_o1.add("update"),_o1.add("user"),_o1.add("users"),_o1.add("using"),_o1.add("uuid"),_o1.add("verbose"),_o1.add("version"),_o1.add("view"),_o1.add("views"),_o1.add("viewers"),_o1.add("visible"),_o1.add("volatile"),_o1.add("v9"),_o1.add("v10"),_o1.add("w3clogfile"),_o1.add("warm"),_o1.add("warming"),_o1.add("whatif"),_o1.add("where"),_o1.add("with"),_o1.add("workload_group"),_o1.add("workload_groups"),_o1.add("writeaheadlog"),_o1.add("xaxis"),_o1.add("xcolumn"),_o1.add("xtitle"),_o1.add("yaxis"),_o1.add("ycolumns"),_o1.add("ymin"),_o1.add("ymax"),_o1.add("ysplit"),_o1.add("ytitle"),_o1.add("bool"),_o1.add("boolean"),_o1.add("int8"),_o1.add("char"),_o1.add("uint8"),_o1.add("byte"),_o1.add("int16"),_o1.add("uint16"),_o1.add("int"),_o1.add("int32"),_o1.add("uint"),_o1.add("uint32"),_o1.add("long"),_o1.add("int64"),_o1.add("ulong"),_o1.add("uint64"),_o1.add("float"),_o1.add("real"),_o1.add("double"),_o1.add("string"),_o1.add("time"),_o1.add("timespan"),_o1.add("date"),_o1.add("datetime"),_o1.add("guid"),_o1.add("uniqueid"),_o1.add("dynamic"),_o1.add("decimal"),_o1.add("GB"),_o1.add("MB"),_o1.add("application"),_o1.add("blockedprincipals"),_o1.add("bytes"),_o1.add("callstacks"),_o1.add("concurrency"),_o1.add("configuration"),_o1.add("consumers"),_o1.add("container"),_o1.add("containers"),_o1.add("datasize"),_o1.add("datastats"),_o1.add("datetime_pattern"),_o1.add("days"),_o1.add("dimensions"),_o1.add("disabled"),_o1.add("dryrun"),_o1.add("empty"),_o1.add("enabled"),_o1.add("exclude"),_o1.add("expired_tables_cleanup"),_o1.add("extentsize"),_o1.add("follower"),_o1.add("for"),_o1.add("format_datetime"),_o1.add("granularity"),_o1.add("identity"),_o1.add("include"),_o1.add("info"),_o1.add("maxRecords"),_o1.add("network"),_o1.add("period"),_o1.add("querylimit"),_o1.add("quota"),_o1.add("reason"),_o1.add("record"),_o1.add("records"),_o1.add("recoverability"),_o1.add("startofday"),_o1.add("startofmonth"),_o1.add("startofweek"),_o1.add("startofyear"),_o1.add("stats"),_o1.add("stored_query_result"),_o1.add("stored_query_results"),_o1.add("suspend"),_o1.add("transactions"),_o1.add("trim"),_o1.add("union"),_o1.add("until"),_o1.add("unused"),_o1.add("utilization"),_o1.add("violations"),_o1.add("3Dchart"),_o1.add("__contextual_datatable"),_o1.add("__crossCluster"),_o1.add("__crossDB"),_o1.add("__executeAndCache"),_o1.add("__id"),_o1.add("__isFuzzy"),_o1.add("__noWithSource"),_o1.add("__packedColumn"),_o1.add("__projectAway"),_o1.add("__sourceColumnIndex"),_o1.add("anomalychart"),_o1.add("areachart"),_o1.add("bagexpansion"),_o1.add("barchart"),_o1.add("bin_legacy"),_o1.add("card"),_o1.add("columnchart"),_o1.add("datascope"),_o1.add("decodeblocks"),_o1.add("expandoutput"),_o1.add("hotcache"),_o1.add("isfuzzy"),_o1.add("join"),_o1.add("ladderchart"),_o1.add("linechart"),_o1.add("nooptimization"),_o1.add("piechart"),_o1.add("pivotchart"),_o1.add("regex"),_o1.add("relaxed"),_o1.add("scatterchart"),_o1.add("simple"),_o1.add("stackedareachart"),_o1.add("timechart"),_o1.add("timeline"),_o1.add("timepivot"),_o1.add("with_itemindex"),_o1.add("with_match_id"),_o1.add("with_source"),_o1.add("with_step_name"),_o1.add("withsource"),_o1},f2:function(c){return(System.Char.isDigit(c)||System.Char.isLetter(c))&&Kusto.Data.Common.CslSyntaxGenerator.IsAscii(c)||c===95}});Bridge.define("Kusto.Data.Common.DatabaseShowFlavor",{$kind:"enum",statics:{fields:{Identity:0,Verbose:1,Policies:2,DataStats:3,Default:4}}});Bridge.define("Kusto.Data.Common.DataRecoverability",{$kind:"enum",statics:{fields:{Unknown:0,Enabled:1,Disabled:2}}});Bridge.define("Kusto.Data.Common.DataSourceCompressionType",{$kind:"enum",statics:{fields:{None:0,GZip:1,Zip:2}}});Bridge.define("Kusto.Data.Common.EntityType",{$kind:"enum",statics:{fields:{Unknown:0,Cluster:1,Database:2,Table:3,Column:4,Function:5,ExternalTable:6,MaterializedView:7}}});Bridge.define("Kusto.Data.Common.ExtendedDatabaseShowFlavor",{statics:{methods:{FastToString:function(that){switch(that){case Kusto.Data.Common.DatabaseShowFlavor.Identity:return"Identity";case Kusto.Data.Common.DatabaseShowFlavor.Verbose:return"Verbose";case Kusto.Data.Common.DatabaseShowFlavor.Policies:return"Policies";case Kusto.Data.Common.DatabaseShowFlavor.DataStats:return"DataStats";case Kusto.Data.Common.DatabaseShowFlavor.Default:return"Default";default:break}return System.String.format("[unknown: {0}]",[Bridge.box(that,System.Int32)])},FastIsDefined$1:function(value){var dummy={v:new Kusto.Data.Common.DatabaseShowFlavor};return Kusto.Data.Common.ExtendedDatabaseShowFlavor.FastTryParse(value,dummy,!1,!0)},FastIsDefined:function(value){switch(value){case Kusto.Data.Common.DatabaseShowFlavor.Identity:return!0;case Kusto.Data.Common.DatabaseShowFlavor.Verbose:return!0;case Kusto.Data.Common.DatabaseShowFlavor.Policies:return!0;case Kusto.Data.Common.DatabaseShowFlavor.DataStats:return!0;case Kusto.Data.Common.DatabaseShowFlavor.Default:return!0;default:return!1}},FastHasFlag$1:function(that,flag){return(that&flag)===flag},FastHasFlag:function(that,flag){return(that&flag)===flag},FastParse:function(value,ignoreCase){ignoreCase===void 0&&(ignoreCase=!1);var ret={v:new Kusto.Data.Common.DatabaseShowFlavor};if(Kusto.Data.Common.ExtendedDatabaseShowFlavor.FastTryParse(value,ret,ignoreCase))return ret.v;throw new System.Exception("Invalid enum value: "+(value||""));},FastTryParse:function(value,ret,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);switch(value){case"0":case"Identity":return ret.v=Kusto.Data.Common.DatabaseShowFlavor.Identity,!0;case"1":case"Verbose":return ret.v=Kusto.Data.Common.DatabaseShowFlavor.Verbose,!0;case"2":case"Policies":return ret.v=Kusto.Data.Common.DatabaseShowFlavor.Policies,!0;case"3":case"DataStats":return ret.v=Kusto.Data.Common.DatabaseShowFlavor.DataStats,!0;case"4":case"Default":return ret.v=Kusto.Data.Common.DatabaseShowFlavor.Default,!0;default:break}if(ignoreCase&&!System.String.isNullOrEmpty(value))switch(value.toLowerCase()){case"identity":return ret.v=Kusto.Data.Common.DatabaseShowFlavor.Identity,!0;case"verbose":return ret.v=Kusto.Data.Common.DatabaseShowFlavor.Verbose,!0;case"policies":return ret.v=Kusto.Data.Common.DatabaseShowFlavor.Policies,!0;case"datastats":return ret.v=Kusto.Data.Common.DatabaseShowFlavor.DataStats,!0;case"default":return ret.v=Kusto.Data.Common.DatabaseShowFlavor.Default,!0;default:break}if(!ignoreInts){var reti={v:0};if(System.Int32.tryParse(value,reti))return ret.v=reti.v,!0}return ret.v=0,!1},FastGetDescription:function(that){switch(that){case Kusto.Data.Common.DatabaseShowFlavor.Identity:return"";case Kusto.Data.Common.DatabaseShowFlavor.Verbose:return"";case Kusto.Data.Common.DatabaseShowFlavor.Policies:return"";case Kusto.Data.Common.DatabaseShowFlavor.DataStats:return"";case Kusto.Data.Common.DatabaseShowFlavor.Default:return"";default:return null}}}}});Bridge.define("Kusto.Data.Common.ExtendedDataRecoverability",{statics:{methods:{FastToString:function(that){switch(that){case Kusto.Data.Common.DataRecoverability.Unknown:return"Unknown";case Kusto.Data.Common.DataRecoverability.Enabled:return"Enabled";case Kusto.Data.Common.DataRecoverability.Disabled:return"Disabled";default:break}return System.String.format("[unknown: {0}]",[Bridge.box(that,System.Int32)])},FastIsDefined$1:function(value){var dummy={v:new Kusto.Data.Common.DataRecoverability};return Kusto.Data.Common.ExtendedDataRecoverability.FastTryParse(value,dummy,!1,!0)},FastIsDefined:function(value){switch(value){case Kusto.Data.Common.DataRecoverability.Unknown:return!0;case Kusto.Data.Common.DataRecoverability.Enabled:return!0;case Kusto.Data.Common.DataRecoverability.Disabled:return!0;default:return!1}},FastHasFlag$1:function(that,flag){return(that&flag)===flag},FastHasFlag:function(that,flag){return(that&flag)===flag},FastParse:function(value,ignoreCase){ignoreCase===void 0&&(ignoreCase=!1);var ret={v:new Kusto.Data.Common.DataRecoverability};if(Kusto.Data.Common.ExtendedDataRecoverability.FastTryParse(value,ret,ignoreCase))return ret.v;throw new System.Exception("Invalid enum value: "+(value||""));},FastTryParse:function(value,ret,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);switch(value){case"0":case"Unknown":return ret.v=Kusto.Data.Common.DataRecoverability.Unknown,!0;case"1":case"Enabled":return ret.v=Kusto.Data.Common.DataRecoverability.Enabled,!0;case"2":case"Disabled":return ret.v=Kusto.Data.Common.DataRecoverability.Disabled,!0;default:break}if(ignoreCase&&!System.String.isNullOrEmpty(value))switch(value.toLowerCase()){case"unknown":return ret.v=Kusto.Data.Common.DataRecoverability.Unknown,!0;case"enabled":return ret.v=Kusto.Data.Common.DataRecoverability.Enabled,!0;case"disabled":return ret.v=Kusto.Data.Common.DataRecoverability.Disabled,!0;default:break}if(!ignoreInts){var reti={v:0};if(System.Int32.tryParse(value,reti))return ret.v=reti.v,!0}return ret.v=0,!1},FastGetDescription:function(that){switch(that){case Kusto.Data.Common.DataRecoverability.Unknown:return"";case Kusto.Data.Common.DataRecoverability.Enabled:return"";case Kusto.Data.Common.DataRecoverability.Disabled:return"";default:return null}}}}});Bridge.define("Kusto.Data.Common.ExtendedDataSourceCompressionType",{statics:{methods:{FastToString:function(that){switch(that){case Kusto.Data.Common.DataSourceCompressionType.None:return"None";case Kusto.Data.Common.DataSourceCompressionType.GZip:return"GZip";case Kusto.Data.Common.DataSourceCompressionType.Zip:return"Zip";default:break}return System.String.format("[unknown: {0}]",[Bridge.box(that,System.Int32)])},FastIsDefined$1:function(value){var dummy={v:new Kusto.Data.Common.DataSourceCompressionType};return Kusto.Data.Common.ExtendedDataSourceCompressionType.FastTryParse(value,dummy,!1,!0)},FastIsDefined:function(value){switch(value){case Kusto.Data.Common.DataSourceCompressionType.None:return!0;case Kusto.Data.Common.DataSourceCompressionType.GZip:return!0;case Kusto.Data.Common.DataSourceCompressionType.Zip:return!0;default:return!1}},FastHasFlag$1:function(that,flag){return(that&flag)===flag},FastHasFlag:function(that,flag){return(that&flag)===flag},FastParse:function(value,ignoreCase){ignoreCase===void 0&&(ignoreCase=!1);var ret={v:new Kusto.Data.Common.DataSourceCompressionType};if(Kusto.Data.Common.ExtendedDataSourceCompressionType.FastTryParse(value,ret,ignoreCase))return ret.v;throw new System.Exception("Invalid enum value: "+(value||""));},FastTryParse:function(value,ret,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);switch(value){case"0":case"None":return ret.v=Kusto.Data.Common.DataSourceCompressionType.None,!0;case"1":case"GZip":return ret.v=Kusto.Data.Common.DataSourceCompressionType.GZip,!0;case"2":case"Zip":return ret.v=Kusto.Data.Common.DataSourceCompressionType.Zip,!0;default:break}if(ignoreCase&&!System.String.isNullOrEmpty(value))switch(value.toLowerCase()){case"none":return ret.v=Kusto.Data.Common.DataSourceCompressionType.None,!0;case"gzip":return ret.v=Kusto.Data.Common.DataSourceCompressionType.GZip,!0;case"zip":return ret.v=Kusto.Data.Common.DataSourceCompressionType.Zip,!0;default:break}if(!ignoreInts){var reti={v:0};if(System.Int32.tryParse(value,reti))return ret.v=reti.v,!0}return ret.v=0,!1},FastGetDescription:function(that){switch(that){case Kusto.Data.Common.DataSourceCompressionType.None:return"No compression";case Kusto.Data.Common.DataSourceCompressionType.GZip:return"GZip compression";case Kusto.Data.Common.DataSourceCompressionType.Zip:return"Zip compression";default:return null}}}}});Bridge.define("Kusto.Data.Common.ExtendedEntityType",{statics:{methods:{FastToString:function(that){switch(that){case Kusto.Data.Common.EntityType.Unknown:return"Unknown";case Kusto.Data.Common.EntityType.Cluster:return"Cluster";case Kusto.Data.Common.EntityType.Database:return"Database";case Kusto.Data.Common.EntityType.Table:return"Table";case Kusto.Data.Common.EntityType.Column:return"Column";case Kusto.Data.Common.EntityType.Function:return"Function";case Kusto.Data.Common.EntityType.ExternalTable:return"ExternalTable";case Kusto.Data.Common.EntityType.MaterializedView:return"MaterializedView";default:break}return System.String.format("[unknown: {0}]",[Bridge.box(that,System.Int32)])},FastIsDefined$1:function(value){var dummy={v:new Kusto.Data.Common.EntityType};return Kusto.Data.Common.ExtendedEntityType.FastTryParse(value,dummy,!1,!0)},FastIsDefined:function(value){switch(value){case Kusto.Data.Common.EntityType.Unknown:return!0;case Kusto.Data.Common.EntityType.Cluster:return!0;case Kusto.Data.Common.EntityType.Database:return!0;case Kusto.Data.Common.EntityType.Table:return!0;case Kusto.Data.Common.EntityType.Column:return!0;case Kusto.Data.Common.EntityType.Function:return!0;case Kusto.Data.Common.EntityType.ExternalTable:return!0;case Kusto.Data.Common.EntityType.MaterializedView:return!0;default:return!1}},FastHasFlag$1:function(that,flag){return(that&flag)===flag},FastHasFlag:function(that,flag){return(that&flag)===flag},FastParse:function(value,ignoreCase){ignoreCase===void 0&&(ignoreCase=!1);var ret={v:new Kusto.Data.Common.EntityType};if(Kusto.Data.Common.ExtendedEntityType.FastTryParse(value,ret,ignoreCase))return ret.v;throw new System.Exception("Invalid enum value: "+(value||""));},FastTryParse:function(value,ret,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);switch(value){case"0":case"Unknown":return ret.v=Kusto.Data.Common.EntityType.Unknown,!0;case"1":case"Cluster":return ret.v=Kusto.Data.Common.EntityType.Cluster,!0;case"2":case"Database":return ret.v=Kusto.Data.Common.EntityType.Database,!0;case"3":case"Table":return ret.v=Kusto.Data.Common.EntityType.Table,!0;case"4":case"Column":return ret.v=Kusto.Data.Common.EntityType.Column,!0;case"5":case"Function":return ret.v=Kusto.Data.Common.EntityType.Function,!0;case"6":case"ExternalTable":return ret.v=Kusto.Data.Common.EntityType.ExternalTable,!0;case"7":case"MaterializedView":case"materialized-view":return ret.v=Kusto.Data.Common.EntityType.MaterializedView,!0;default:break}if(ignoreCase&&!System.String.isNullOrEmpty(value))switch(value.toLowerCase()){case"unknown":return ret.v=Kusto.Data.Common.EntityType.Unknown,!0;case"cluster":return ret.v=Kusto.Data.Common.EntityType.Cluster,!0;case"database":return ret.v=Kusto.Data.Common.EntityType.Database,!0;case"table":return ret.v=Kusto.Data.Common.EntityType.Table,!0;case"column":return ret.v=Kusto.Data.Common.EntityType.Column,!0;case"function":return ret.v=Kusto.Data.Common.EntityType.Function,!0;case"externaltable":return ret.v=Kusto.Data.Common.EntityType.ExternalTable,!0;case"materializedview":case"materialized-view":return ret.v=Kusto.Data.Common.EntityType.MaterializedView,!0;default:break}if(!ignoreInts){var reti={v:0};if(System.Int32.tryParse(value,reti))return ret.v=reti.v,!0}return ret.v=0,!1},FastGetDescription:function(that){switch(that){case Kusto.Data.Common.EntityType.Unknown:return"Unknown";case Kusto.Data.Common.EntityType.Cluster:return"Cluster entity type";case Kusto.Data.Common.EntityType.Database:return"Database entity type";case Kusto.Data.Common.EntityType.Table:return"Table entity type";case Kusto.Data.Common.EntityType.Column:return"Column entity type";case Kusto.Data.Common.EntityType.Function:return"Function entity type";case Kusto.Data.Common.EntityType.ExternalTable:return"External table entity type";case Kusto.Data.Common.EntityType.MaterializedView:return"Materialized view entity type";default:return null}}}}});Bridge.define("Kusto.Data.Common.ExtendedIngestionErrorCategory",{statics:{methods:{FastToString:function(that){switch(that){case Kusto.Data.Common.IngestionErrorCategory.Unknown:return"Unknown";case Kusto.Data.Common.IngestionErrorCategory.InternalServiceError:return"InternalServiceError";case Kusto.Data.Common.IngestionErrorCategory.BadFormat:return"BadFormat";case Kusto.Data.Common.IngestionErrorCategory.BadRequest:return"BadRequest";case Kusto.Data.Common.IngestionErrorCategory.BlobNotFound:return"BlobNotFound";case Kusto.Data.Common.IngestionErrorCategory.UpdatePolicyFailure:return"UpdatePolicyFailure";case Kusto.Data.Common.IngestionErrorCategory.EntityNotFound:return"EntityNotFound";case Kusto.Data.Common.IngestionErrorCategory.UserAccessNotAuthorized:return"UserAccessNotAuthorized";case Kusto.Data.Common.IngestionErrorCategory.DataAccessNotAuthorized:return"DataAccessNotAuthorized";case Kusto.Data.Common.IngestionErrorCategory.FileTooLarge:return"FileTooLarge";case Kusto.Data.Common.IngestionErrorCategory.ThrottledOnEngine:return"ThrottledOnEngine";case Kusto.Data.Common.IngestionErrorCategory.DownloadFailed:return"DownloadFailed";default:break}return System.String.format("[unknown: {0}]",[Bridge.box(that,System.Int32)])},FastIsDefined$1:function(value){var dummy={v:new Kusto.Data.Common.IngestionErrorCategory};return Kusto.Data.Common.ExtendedIngestionErrorCategory.FastTryParse(value,dummy,!1,!0)},FastIsDefined:function(value){switch(value){case Kusto.Data.Common.IngestionErrorCategory.Unknown:return!0;case Kusto.Data.Common.IngestionErrorCategory.InternalServiceError:return!0;case Kusto.Data.Common.IngestionErrorCategory.BadFormat:return!0;case Kusto.Data.Common.IngestionErrorCategory.BadRequest:return!0;case Kusto.Data.Common.IngestionErrorCategory.BlobNotFound:return!0;case Kusto.Data.Common.IngestionErrorCategory.UpdatePolicyFailure:return!0;case Kusto.Data.Common.IngestionErrorCategory.EntityNotFound:return!0;case Kusto.Data.Common.IngestionErrorCategory.UserAccessNotAuthorized:return!0;case Kusto.Data.Common.IngestionErrorCategory.DataAccessNotAuthorized:return!0;case Kusto.Data.Common.IngestionErrorCategory.FileTooLarge:return!0;case Kusto.Data.Common.IngestionErrorCategory.ThrottledOnEngine:return!0;case Kusto.Data.Common.IngestionErrorCategory.DownloadFailed:return!0;default:return!1}},FastHasFlag$1:function(that,flag){return(that&flag)===flag},FastHasFlag:function(that,flag){return(that&flag)===flag},FastParse:function(value,ignoreCase){ignoreCase===void 0&&(ignoreCase=!1);var ret={v:new Kusto.Data.Common.IngestionErrorCategory};if(Kusto.Data.Common.ExtendedIngestionErrorCategory.FastTryParse(value,ret,ignoreCase))return ret.v;throw new System.Exception("Invalid enum value: "+(value||""));},FastTryParse:function(value,ret,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);switch(value){case"Unknown":return ret.v=Kusto.Data.Common.IngestionErrorCategory.Unknown,!0;case"InternalServiceError":return ret.v=Kusto.Data.Common.IngestionErrorCategory.InternalServiceError,!0;case"BadFormat":return ret.v=Kusto.Data.Common.IngestionErrorCategory.BadFormat,!0;case"BadRequest":return ret.v=Kusto.Data.Common.IngestionErrorCategory.BadRequest,!0;case"BlobNotFound":return ret.v=Kusto.Data.Common.IngestionErrorCategory.BlobNotFound,!0;case"UpdatePolicyFailure":return ret.v=Kusto.Data.Common.IngestionErrorCategory.UpdatePolicyFailure,!0;case"EntityNotFound":return ret.v=Kusto.Data.Common.IngestionErrorCategory.EntityNotFound,!0;case"UserAccessNotAuthorized":return ret.v=Kusto.Data.Common.IngestionErrorCategory.UserAccessNotAuthorized,!0;case"DataAccessNotAuthorized":return ret.v=Kusto.Data.Common.IngestionErrorCategory.DataAccessNotAuthorized,!0;case"FileTooLarge":return ret.v=Kusto.Data.Common.IngestionErrorCategory.FileTooLarge,!0;case"ThrottledOnEngine":return ret.v=Kusto.Data.Common.IngestionErrorCategory.ThrottledOnEngine,!0;case"DownloadFailed":return ret.v=Kusto.Data.Common.IngestionErrorCategory.DownloadFailed,!0;default:break}if(ignoreCase&&!System.String.isNullOrEmpty(value))switch(value.toLowerCase()){case"unknown":return ret.v=Kusto.Data.Common.IngestionErrorCategory.Unknown,!0;case"internalserviceerror":return ret.v=Kusto.Data.Common.IngestionErrorCategory.InternalServiceError,!0;case"badformat":return ret.v=Kusto.Data.Common.IngestionErrorCategory.BadFormat,!0;case"badrequest":return ret.v=Kusto.Data.Common.IngestionErrorCategory.BadRequest,!0;case"blobnotfound":return ret.v=Kusto.Data.Common.IngestionErrorCategory.BlobNotFound,!0;case"updatepolicyfailure":return ret.v=Kusto.Data.Common.IngestionErrorCategory.UpdatePolicyFailure,!0;case"entitynotfound":return ret.v=Kusto.Data.Common.IngestionErrorCategory.EntityNotFound,!0;case"useraccessnotauthorized":return ret.v=Kusto.Data.Common.IngestionErrorCategory.UserAccessNotAuthorized,!0;case"dataaccessnotauthorized":return ret.v=Kusto.Data.Common.IngestionErrorCategory.DataAccessNotAuthorized,!0;case"filetoolarge":return ret.v=Kusto.Data.Common.IngestionErrorCategory.FileTooLarge,!0;case"throttledonengine":return ret.v=Kusto.Data.Common.IngestionErrorCategory.ThrottledOnEngine,!0;case"downloadfailed":return ret.v=Kusto.Data.Common.IngestionErrorCategory.DownloadFailed,!0;default:break}if(!ignoreInts){var reti={v:0};if(System.Int32.tryParse(value,reti))return ret.v=reti.v,!0}return ret.v=0,!1},FastGetDescription:function(that){switch(that){case Kusto.Data.Common.IngestionErrorCategory.Unknown:return"";case Kusto.Data.Common.IngestionErrorCategory.InternalServiceError:return"";case Kusto.Data.Common.IngestionErrorCategory.BadFormat:return"";case Kusto.Data.Common.IngestionErrorCategory.BadRequest:return"";case Kusto.Data.Common.IngestionErrorCategory.BlobNotFound:return"";case Kusto.Data.Common.IngestionErrorCategory.UpdatePolicyFailure:return"";case Kusto.Data.Common.IngestionErrorCategory.EntityNotFound:return"";case Kusto.Data.Common.IngestionErrorCategory.UserAccessNotAuthorized:return"";case Kusto.Data.Common.IngestionErrorCategory.DataAccessNotAuthorized:return"";case Kusto.Data.Common.IngestionErrorCategory.FileTooLarge:return"";case Kusto.Data.Common.IngestionErrorCategory.ThrottledOnEngine:return"";case Kusto.Data.Common.IngestionErrorCategory.DownloadFailed:return"";default:return null}}}}});Bridge.define("Kusto.Data.Common.ExtendedIngestionErrorCode",{statics:{methods:{FastToString:function(that){switch(that){case Kusto.Data.Common.IngestionErrorCode.Unknown:return"Unknown";case Kusto.Data.Common.IngestionErrorCode.Stream_WrongNumberOfFields:return"Stream_WrongNumberOfFields";case Kusto.Data.Common.IngestionErrorCode.Stream_InputStreamTooLarge:return"Stream_InputStreamTooLarge";case Kusto.Data.Common.IngestionErrorCode.Stream_NoDataToIngest:return"Stream_NoDataToIngest";case Kusto.Data.Common.IngestionErrorCode.Stream_ClosingQuoteMissing:return"Stream_ClosingQuoteMissing";case Kusto.Data.Common.IngestionErrorCode.Stream_DynamicPropertyBagTooLarge:return"Stream_DynamicPropertyBagTooLarge";case Kusto.Data.Common.IngestionErrorCode.Download_SourceNotFound:return"Download_SourceNotFound";case Kusto.Data.Common.IngestionErrorCode.Download_AccessConditionNotSatisfied:return"Download_AccessConditionNotSatisfied";case Kusto.Data.Common.IngestionErrorCode.Download_Forbidden:return"Download_Forbidden";case Kusto.Data.Common.IngestionErrorCode.Download_AccountNotFound:return"Download_AccountNotFound";case Kusto.Data.Common.IngestionErrorCode.Download_BadRequest:return"Download_BadRequest";case Kusto.Data.Common.IngestionErrorCode.Download_NotTransient:return"Download_NotTransient";case Kusto.Data.Common.IngestionErrorCode.Download_UnknownError:return"Download_UnknownError";case Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_QuerySchemaDoesNotMatchTableSchema:return"UpdatePolicy_QuerySchemaDoesNotMatchTableSchema";case Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_FailedDescendantTransaction:return"UpdatePolicy_FailedDescendantTransaction";case Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_IngestionError:return"UpdatePolicy_IngestionError";case Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_UnknownError:return"UpdatePolicy_UnknownError";case Kusto.Data.Common.IngestionErrorCode.BadRequest_MissingJsonMappingtFailure:return"BadRequest_MissingJsonMappingtFailure";case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidBlob:return"BadRequest_InvalidBlob";case Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyBlob:return"BadRequest_EmptyBlob";case Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyArchive:return"BadRequest_EmptyArchive";case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidArchive:return"BadRequest_InvalidArchive";case Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyBlobUri:return"BadRequest_EmptyBlobUri";case Kusto.Data.Common.IngestionErrorCode.BadRequest_DatabaseNotExist:return"BadRequest_DatabaseNotExist";case Kusto.Data.Common.IngestionErrorCode.BadRequest_TableNotExist:return"BadRequest_TableNotExist";case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidKustoIdentityToken:return"BadRequest_InvalidKustoIdentityToken";case Kusto.Data.Common.IngestionErrorCode.BadRequest_FileTooLarge:return"BadRequest_FileTooLarge";case Kusto.Data.Common.IngestionErrorCode.BadRequest_TableAccessDenied:return"BadRequest_TableAccessDenied";case Kusto.Data.Common.IngestionErrorCode.BadRequest_MessageExhausted:return"BadRequest_MessageExhausted";case Kusto.Data.Common.IngestionErrorCode.General_BadRequest:return"General_BadRequest";case Kusto.Data.Common.IngestionErrorCode.General_InternalServerError:return"General_InternalServerError";case Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_Cyclic_Update_Not_Allowed:return"UpdatePolicy_Cyclic_Update_Not_Allowed";case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidMapping:return"BadRequest_InvalidMapping";case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidMappingReference:return"BadRequest_InvalidMappingReference";case Kusto.Data.Common.IngestionErrorCode.BadRequest_MappingReferenceWasNotFound:return"BadRequest_MappingReferenceWasNotFound";case Kusto.Data.Common.IngestionErrorCode.BadRequest_FormatNotSupported:return"BadRequest_FormatNotSupported";case Kusto.Data.Common.IngestionErrorCode.BadRequest_DuplicateMapping:return"BadRequest_DuplicateMapping";case Kusto.Data.Common.IngestionErrorCode.BadRequest_CorruptedMessage:return"BadRequest_CorruptedMessage";case Kusto.Data.Common.IngestionErrorCode.BadRequest_InconsistentMapping:return"BadRequest_InconsistentMapping";case Kusto.Data.Common.IngestionErrorCode.BadRequest_SyntaxError:return"BadRequest_SyntaxError";case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidOrEmptyTableName:return"BadRequest_InvalidOrEmptyTableName";case Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyDatabaseName:return"BadRequest_EmptyDatabaseName";case Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyTenantIdentifier:return"BadRequest_EmptyTenantIdentifier";case Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyMappingReference:return"BadRequest_EmptyMappingReference";case Kusto.Data.Common.IngestionErrorCode.BadRequest_EntityNotFound:return"BadRequest_EntityNotFound";case Kusto.Data.Common.IngestionErrorCode.BadRequest_EntityNameIsNotValid:return"BadRequest_EntityNameIsNotValid";case Kusto.Data.Common.IngestionErrorCode.General_AbandonedIngestion:return"General_AbandonedIngestion";case Kusto.Data.Common.IngestionErrorCode.General_ThrottledIngestion:return"General_ThrottledIngestion";case Kusto.Data.Common.IngestionErrorCode.General_TransientSchemaMismatch:return"General_TransientSchemaMismatch";case Kusto.Data.Common.IngestionErrorCode.BadRequest_DatabaseAccessDenied:return"BadRequest_DatabaseAccessDenied";case Kusto.Data.Common.IngestionErrorCode.BadRequest_UnexpectedCharacterInInputStream:return"BadRequest_UnexpectedCharacterInInputStream";case Kusto.Data.Common.IngestionErrorCode.Forbidden:return"Forbidden";case Kusto.Data.Common.IngestionErrorCode.BadRequest_ZeroRetentionPolicyWithNoUpdatePolicy:return"BadRequest_ZeroRetentionPolicyWithNoUpdatePolicy";case Kusto.Data.Common.IngestionErrorCode.BadRequest_CreationTimeEarlierThanSoftDeletePeriod:return"BadRequest_CreationTimeEarlierThanSoftDeletePeriod";case Kusto.Data.Common.IngestionErrorCode.BadRequest_NotSupported:return"BadRequest_NotSupported";case Kusto.Data.Common.IngestionErrorCode.Skipped_IngestByTagAlreadyExists:return"Skipped_IngestByTagAlreadyExists";case Kusto.Data.Common.IngestionErrorCode.Timeout:return"Timeout";default:break}return System.String.format("[unknown: {0}]",[Bridge.box(that,System.UInt32)])},FastIsDefined:function(value){var dummy={v:new Kusto.Data.Common.IngestionErrorCode};return Kusto.Data.Common.ExtendedIngestionErrorCode.FastTryParse(value,dummy,!1,!0)},FastIsDefined$1:function(value){switch(value){case Kusto.Data.Common.IngestionErrorCode.Unknown:return!0;case Kusto.Data.Common.IngestionErrorCode.Stream_WrongNumberOfFields:return!0;case Kusto.Data.Common.IngestionErrorCode.Stream_InputStreamTooLarge:return!0;case Kusto.Data.Common.IngestionErrorCode.Stream_NoDataToIngest:return!0;case Kusto.Data.Common.IngestionErrorCode.Stream_ClosingQuoteMissing:return!0;case Kusto.Data.Common.IngestionErrorCode.Stream_DynamicPropertyBagTooLarge:return!0;case Kusto.Data.Common.IngestionErrorCode.Download_SourceNotFound:return!0;case Kusto.Data.Common.IngestionErrorCode.Download_AccessConditionNotSatisfied:return!0;case Kusto.Data.Common.IngestionErrorCode.Download_Forbidden:return!0;case Kusto.Data.Common.IngestionErrorCode.Download_AccountNotFound:return!0;case Kusto.Data.Common.IngestionErrorCode.Download_BadRequest:return!0;case Kusto.Data.Common.IngestionErrorCode.Download_NotTransient:return!0;case Kusto.Data.Common.IngestionErrorCode.Download_UnknownError:return!0;case Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_QuerySchemaDoesNotMatchTableSchema:return!0;case Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_FailedDescendantTransaction:return!0;case Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_IngestionError:return!0;case Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_UnknownError:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_MissingJsonMappingtFailure:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidBlob:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyBlob:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyArchive:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidArchive:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyBlobUri:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_DatabaseNotExist:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_TableNotExist:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidKustoIdentityToken:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_FileTooLarge:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_TableAccessDenied:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_MessageExhausted:return!0;case Kusto.Data.Common.IngestionErrorCode.General_BadRequest:return!0;case Kusto.Data.Common.IngestionErrorCode.General_InternalServerError:return!0;case Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_Cyclic_Update_Not_Allowed:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidMapping:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidMappingReference:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_MappingReferenceWasNotFound:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_FormatNotSupported:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_DuplicateMapping:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_CorruptedMessage:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_InconsistentMapping:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_SyntaxError:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidOrEmptyTableName:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyDatabaseName:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyTenantIdentifier:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyMappingReference:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_EntityNotFound:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_EntityNameIsNotValid:return!0;case Kusto.Data.Common.IngestionErrorCode.General_AbandonedIngestion:return!0;case Kusto.Data.Common.IngestionErrorCode.General_ThrottledIngestion:return!0;case Kusto.Data.Common.IngestionErrorCode.General_TransientSchemaMismatch:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_DatabaseAccessDenied:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_UnexpectedCharacterInInputStream:return!0;case Kusto.Data.Common.IngestionErrorCode.Forbidden:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_ZeroRetentionPolicyWithNoUpdatePolicy:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_CreationTimeEarlierThanSoftDeletePeriod:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_NotSupported:return!0;case Kusto.Data.Common.IngestionErrorCode.Skipped_IngestByTagAlreadyExists:return!0;case Kusto.Data.Common.IngestionErrorCode.Timeout:return!0;default:return!1}},FastHasFlag$1:function(that,flag){return(that&flag)>>>0===flag},FastHasFlag:function(that,flag){return(that&flag)>>>0===flag},FastParse:function(value,ignoreCase){ignoreCase===void 0&&(ignoreCase=!1);var ret={v:new Kusto.Data.Common.IngestionErrorCode};if(Kusto.Data.Common.ExtendedIngestionErrorCode.FastTryParse(value,ret,ignoreCase))return ret.v;throw new System.Exception("Invalid enum value: "+(value||""));},FastTryParse:function(value,ret,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);switch(value){case"Unknown":return ret.v=Kusto.Data.Common.IngestionErrorCode.Unknown,!0;case"0x80DA0008":case"Stream_WrongNumberOfFields":return ret.v=Kusto.Data.Common.IngestionErrorCode.Stream_WrongNumberOfFields,!0;case"0x80DA0009":case"Stream_InputStreamTooLarge":return ret.v=Kusto.Data.Common.IngestionErrorCode.Stream_InputStreamTooLarge,!0;case"Stream_NoDataToIngest":return ret.v=Kusto.Data.Common.IngestionErrorCode.Stream_NoDataToIngest,!0;case"0x80DA000b":case"Stream_ClosingQuoteMissing":return ret.v=Kusto.Data.Common.IngestionErrorCode.Stream_ClosingQuoteMissing,!0;case"0x80DA000E":case"Stream_DynamicPropertyBagTooLarge":return ret.v=Kusto.Data.Common.IngestionErrorCode.Stream_DynamicPropertyBagTooLarge,!0;case"Download_SourceNotFound":return ret.v=Kusto.Data.Common.IngestionErrorCode.Download_SourceNotFound,!0;case"Download_AccessConditionNotSatisfied":return ret.v=Kusto.Data.Common.IngestionErrorCode.Download_AccessConditionNotSatisfied,!0;case"Download_Forbidden":return ret.v=Kusto.Data.Common.IngestionErrorCode.Download_Forbidden,!0;case"Download_AccountNotFound":return ret.v=Kusto.Data.Common.IngestionErrorCode.Download_AccountNotFound,!0;case"Download_BadRequest":return ret.v=Kusto.Data.Common.IngestionErrorCode.Download_BadRequest,!0;case"Download_NotTransient":return ret.v=Kusto.Data.Common.IngestionErrorCode.Download_NotTransient,!0;case"Download_UnknownError":return ret.v=Kusto.Data.Common.IngestionErrorCode.Download_UnknownError,!0;case"UpdatePolicy_QuerySchemaDoesNotMatchTableSchema":return ret.v=Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_QuerySchemaDoesNotMatchTableSchema,!0;case"UpdatePolicy_FailedDescendantTransaction":return ret.v=Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_FailedDescendantTransaction,!0;case"UpdatePolicy_IngestionError":return ret.v=Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_IngestionError,!0;case"UpdatePolicy_UnknownError":return ret.v=Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_UnknownError,!0;case"BadRequest_MissingJsonMappingtFailure":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_MissingJsonMappingtFailure,!0;case"BadRequest_InvalidBlob":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidBlob,!0;case"BadRequest_EmptyBlob":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyBlob,!0;case"BadRequest_EmptyArchive":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyArchive,!0;case"BadRequest_InvalidArchive":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidArchive,!0;case"BadRequest_EmptyBlobUri":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyBlobUri,!0;case"BadRequest_DatabaseNotExist":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_DatabaseNotExist,!0;case"BadRequest_TableNotExist":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_TableNotExist,!0;case"BadRequest_InvalidKustoIdentityToken":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidKustoIdentityToken,!0;case"BadRequest_FileTooLarge":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_FileTooLarge,!0;case"BadRequest_TableAccessDenied":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_TableAccessDenied,!0;case"BadRequest_MessageExhausted":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_MessageExhausted,!0;case"General_BadRequest":return ret.v=Kusto.Data.Common.IngestionErrorCode.General_BadRequest,!0;case"General_InternalServerError":return ret.v=Kusto.Data.Common.IngestionErrorCode.General_InternalServerError,!0;case"UpdatePolicy_Cyclic_Update_Not_Allowed":return ret.v=Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_Cyclic_Update_Not_Allowed,!0;case"BadRequest_InvalidMapping":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidMapping,!0;case"BadRequest_InvalidMappingReference":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidMappingReference,!0;case"BadRequest_MappingReferenceWasNotFound":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_MappingReferenceWasNotFound,!0;case"BadRequest_FormatNotSupported":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_FormatNotSupported,!0;case"BadRequest_DuplicateMapping":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_DuplicateMapping,!0;case"BadRequest_CorruptedMessage":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_CorruptedMessage,!0;case"BadRequest_InconsistentMapping":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_InconsistentMapping,!0;case"BadRequest_SyntaxError":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_SyntaxError,!0;case"BadRequest_InvalidOrEmptyTableName":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidOrEmptyTableName,!0;case"BadRequest_EmptyDatabaseName":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyDatabaseName,!0;case"BadRequest_EmptyTenantIdentifier":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyTenantIdentifier,!0;case"BadRequest_EmptyMappingReference":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyMappingReference,!0;case"BadRequest_EntityNotFound":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_EntityNotFound,!0;case"BadRequest_EntityNameIsNotValid":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_EntityNameIsNotValid,!0;case"General_AbandonedIngestion":return ret.v=Kusto.Data.Common.IngestionErrorCode.General_AbandonedIngestion,!0;case"General_ThrottledIngestion":return ret.v=Kusto.Data.Common.IngestionErrorCode.General_ThrottledIngestion,!0;case"General_TransientSchemaMismatch":return ret.v=Kusto.Data.Common.IngestionErrorCode.General_TransientSchemaMismatch,!0;case"BadRequest_DatabaseAccessDenied":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_DatabaseAccessDenied,!0;case"BadRequest_UnexpectedCharacterInInputStream":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_UnexpectedCharacterInInputStream,!0;case"Forbidden":return ret.v=Kusto.Data.Common.IngestionErrorCode.Forbidden,!0;case"BadRequest_ZeroRetentionPolicyWithNoUpdatePolicy":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_ZeroRetentionPolicyWithNoUpdatePolicy,!0;case"BadRequest_CreationTimeEarlierThanSoftDeletePeriod":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_CreationTimeEarlierThanSoftDeletePeriod,!0;case"BadRequest_NotSupported":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_NotSupported,!0;case"Skipped_IngestByTagAlreadyExists":return ret.v=Kusto.Data.Common.IngestionErrorCode.Skipped_IngestByTagAlreadyExists,!0;case"Timeout":return ret.v=Kusto.Data.Common.IngestionErrorCode.Timeout,!0;default:break}if(ignoreCase&&!System.String.isNullOrEmpty(value))switch(value.toLowerCase()){case"unknown":return ret.v=Kusto.Data.Common.IngestionErrorCode.Unknown,!0;case"stream_wrongnumberoffields":return ret.v=Kusto.Data.Common.IngestionErrorCode.Stream_WrongNumberOfFields,!0;case"stream_inputstreamtoolarge":return ret.v=Kusto.Data.Common.IngestionErrorCode.Stream_InputStreamTooLarge,!0;case"stream_nodatatoingest":return ret.v=Kusto.Data.Common.IngestionErrorCode.Stream_NoDataToIngest,!0;case"stream_closingquotemissing":return ret.v=Kusto.Data.Common.IngestionErrorCode.Stream_ClosingQuoteMissing,!0;case"stream_dynamicpropertybagtoolarge":return ret.v=Kusto.Data.Common.IngestionErrorCode.Stream_DynamicPropertyBagTooLarge,!0;case"download_sourcenotfound":return ret.v=Kusto.Data.Common.IngestionErrorCode.Download_SourceNotFound,!0;case"download_accessconditionnotsatisfied":return ret.v=Kusto.Data.Common.IngestionErrorCode.Download_AccessConditionNotSatisfied,!0;case"download_forbidden":return ret.v=Kusto.Data.Common.IngestionErrorCode.Download_Forbidden,!0;case"download_accountnotfound":return ret.v=Kusto.Data.Common.IngestionErrorCode.Download_AccountNotFound,!0;case"download_badrequest":return ret.v=Kusto.Data.Common.IngestionErrorCode.Download_BadRequest,!0;case"download_nottransient":return ret.v=Kusto.Data.Common.IngestionErrorCode.Download_NotTransient,!0;case"download_unknownerror":return ret.v=Kusto.Data.Common.IngestionErrorCode.Download_UnknownError,!0;case"updatepolicy_queryschemadoesnotmatchtableschema":return ret.v=Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_QuerySchemaDoesNotMatchTableSchema,!0;case"updatepolicy_faileddescendanttransaction":return ret.v=Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_FailedDescendantTransaction,!0;case"updatepolicy_ingestionerror":return ret.v=Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_IngestionError,!0;case"updatepolicy_unknownerror":return ret.v=Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_UnknownError,!0;case"badrequest_missingjsonmappingtfailure":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_MissingJsonMappingtFailure,!0;case"badrequest_invalidblob":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidBlob,!0;case"badrequest_emptyblob":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyBlob,!0;case"badrequest_emptyarchive":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyArchive,!0;case"badrequest_invalidarchive":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidArchive,!0;case"badrequest_emptybloburi":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyBlobUri,!0;case"badrequest_databasenotexist":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_DatabaseNotExist,!0;case"badrequest_tablenotexist":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_TableNotExist,!0;case"badrequest_invalidkustoidentitytoken":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidKustoIdentityToken,!0;case"badrequest_filetoolarge":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_FileTooLarge,!0;case"badrequest_tableaccessdenied":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_TableAccessDenied,!0;case"badrequest_messageexhausted":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_MessageExhausted,!0;case"general_badrequest":return ret.v=Kusto.Data.Common.IngestionErrorCode.General_BadRequest,!0;case"general_internalservererror":return ret.v=Kusto.Data.Common.IngestionErrorCode.General_InternalServerError,!0;case"updatepolicy_cyclic_update_not_allowed":return ret.v=Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_Cyclic_Update_Not_Allowed,!0;case"badrequest_invalidmapping":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidMapping,!0;case"badrequest_invalidmappingreference":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidMappingReference,!0;case"badrequest_mappingreferencewasnotfound":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_MappingReferenceWasNotFound,!0;case"badrequest_formatnotsupported":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_FormatNotSupported,!0;case"badrequest_duplicatemapping":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_DuplicateMapping,!0;case"badrequest_corruptedmessage":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_CorruptedMessage,!0;case"badrequest_inconsistentmapping":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_InconsistentMapping,!0;case"badrequest_syntaxerror":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_SyntaxError,!0;case"badrequest_invalidoremptytablename":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidOrEmptyTableName,!0;case"badrequest_emptydatabasename":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyDatabaseName,!0;case"badrequest_emptytenantidentifier":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyTenantIdentifier,!0;case"badrequest_emptymappingreference":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyMappingReference,!0;case"badrequest_entitynotfound":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_EntityNotFound,!0;case"badrequest_entitynameisnotvalid":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_EntityNameIsNotValid,!0;case"general_abandonedingestion":return ret.v=Kusto.Data.Common.IngestionErrorCode.General_AbandonedIngestion,!0;case"general_throttledingestion":return ret.v=Kusto.Data.Common.IngestionErrorCode.General_ThrottledIngestion,!0;case"general_transientschemamismatch":return ret.v=Kusto.Data.Common.IngestionErrorCode.General_TransientSchemaMismatch,!0;case"badrequest_databaseaccessdenied":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_DatabaseAccessDenied,!0;case"badrequest_unexpectedcharacterininputstream":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_UnexpectedCharacterInInputStream,!0;case"forbidden":return ret.v=Kusto.Data.Common.IngestionErrorCode.Forbidden,!0;case"badrequest_zeroretentionpolicywithnoupdatepolicy":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_ZeroRetentionPolicyWithNoUpdatePolicy,!0;case"badrequest_creationtimeearlierthansoftdeleteperiod":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_CreationTimeEarlierThanSoftDeletePeriod,!0;case"badrequest_notsupported":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_NotSupported,!0;case"skipped_ingestbytagalreadyexists":return ret.v=Kusto.Data.Common.IngestionErrorCode.Skipped_IngestByTagAlreadyExists,!0;case"timeout":return ret.v=Kusto.Data.Common.IngestionErrorCode.Timeout,!0;default:break}if(!ignoreInts){var reti={v:0};if(System.Int32.tryParse(value,reti))return ret.v=reti.v>>>0,!0}return ret.v=0,!1},FastGetDescription:function(that){switch(that){case Kusto.Data.Common.IngestionErrorCode.Unknown:return"Unknown error occurred";case Kusto.Data.Common.IngestionErrorCode.Stream_WrongNumberOfFields:return"Wrong number of fields.";case Kusto.Data.Common.IngestionErrorCode.Stream_InputStreamTooLarge:return"Input stream/record/field too large.";case Kusto.Data.Common.IngestionErrorCode.Stream_NoDataToIngest:return"No data streams to ingest";case Kusto.Data.Common.IngestionErrorCode.Stream_ClosingQuoteMissing:return"Invalid csv format - closing quote missing.";case Kusto.Data.Common.IngestionErrorCode.Stream_DynamicPropertyBagTooLarge:return"The combined size of the property bag's distinct keys is getting too large.";case Kusto.Data.Common.IngestionErrorCode.Download_SourceNotFound:return"Failed to download source from Azure storage - source not found";case Kusto.Data.Common.IngestionErrorCode.Download_AccessConditionNotSatisfied:return"Failed to download source from Azure storage - access condition not satisfied";case Kusto.Data.Common.IngestionErrorCode.Download_Forbidden:return"Failed to download source from Azure storage - access forbidden";case Kusto.Data.Common.IngestionErrorCode.Download_AccountNotFound:return"Failed to download source from Azure storage - account not found";case Kusto.Data.Common.IngestionErrorCode.Download_BadRequest:return"Failed to download source from Azure storage - bad request";case Kusto.Data.Common.IngestionErrorCode.Download_NotTransient:return"Failed to download source from Azure storage - not transient error";case Kusto.Data.Common.IngestionErrorCode.Download_UnknownError:return"Failed to download source from Azure storage - unknown error";case Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_QuerySchemaDoesNotMatchTableSchema:return"Failed to invoke update policy. Query schema does not match table schema";case Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_FailedDescendantTransaction:return"Failed to invoke update policy. Failed descendant transactional update policy";case Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_IngestionError:return"Failed to invoke update policy. Ingestion Error occurred";case Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_UnknownError:return"Failed to invoke update policy. Unknown error occurred";case Kusto.Data.Common.IngestionErrorCode.BadRequest_MissingJsonMappingtFailure:return"Json pattern was not ingested with jsonMapping parameter";case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidBlob:return"Blob is invalid";case Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyBlob:return"Blob is empty";case Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyArchive:return"Archive is empty";case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidArchive:return"Archive is invalid";case Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyBlobUri:return"Blob Uri is empty";case Kusto.Data.Common.IngestionErrorCode.BadRequest_DatabaseNotExist:return"Database does not exist";case Kusto.Data.Common.IngestionErrorCode.BadRequest_TableNotExist:return"Table does not exist";case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidKustoIdentityToken:return"Invalid kusto identity token";case Kusto.Data.Common.IngestionErrorCode.BadRequest_FileTooLarge:return"File too large";case Kusto.Data.Common.IngestionErrorCode.BadRequest_TableAccessDenied:return"Access to table is denied";case Kusto.Data.Common.IngestionErrorCode.BadRequest_MessageExhausted:return"Message is exhausted";case Kusto.Data.Common.IngestionErrorCode.General_BadRequest:return"Bad request";case Kusto.Data.Common.IngestionErrorCode.General_InternalServerError:return"Internal server error occurred";case Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_Cyclic_Update_Not_Allowed:return"Failed to invoke update policy. Cyclic update is not allowed";case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidMapping:return"Failed to parse ingestion mapping.";case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidMappingReference:return"Invalid mapping reference.";case Kusto.Data.Common.IngestionErrorCode.BadRequest_MappingReferenceWasNotFound:return"Mapping reference wasn't found.";case Kusto.Data.Common.IngestionErrorCode.BadRequest_FormatNotSupported:return"Format is not supported";case Kusto.Data.Common.IngestionErrorCode.BadRequest_DuplicateMapping:return"Ingestion properties contains ingestion mapping and ingestion mapping reference.";case Kusto.Data.Common.IngestionErrorCode.BadRequest_CorruptedMessage:return"Message is corrupted";case Kusto.Data.Common.IngestionErrorCode.BadRequest_InconsistentMapping:return"Inconsistent ingestion mapping";case Kusto.Data.Common.IngestionErrorCode.BadRequest_SyntaxError:return"Syntax error";case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidOrEmptyTableName:return"Table name is empty or invalid";case Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyDatabaseName:return"Database name is empty";case Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyTenantIdentifier:return"TenantIdentifier is empty";case Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyMappingReference:return"MappingReference is empty";case Kusto.Data.Common.IngestionErrorCode.BadRequest_EntityNotFound:return"Failed to locate an entity";case Kusto.Data.Common.IngestionErrorCode.BadRequest_EntityNameIsNotValid:return"Entity name is not valid";case Kusto.Data.Common.IngestionErrorCode.General_AbandonedIngestion:return"Abandoned ingestion.";case Kusto.Data.Common.IngestionErrorCode.General_ThrottledIngestion:return"Throttled ingestion.";case Kusto.Data.Common.IngestionErrorCode.General_TransientSchemaMismatch:return"Schema of target table at start time doesn't match the one at commit time.";case Kusto.Data.Common.IngestionErrorCode.BadRequest_DatabaseAccessDenied:return"Access to database is denied";case Kusto.Data.Common.IngestionErrorCode.BadRequest_UnexpectedCharacterInInputStream:return"Unexpected character in the input stream";case Kusto.Data.Common.IngestionErrorCode.Forbidden:return"Insufficient security permissions to execute request";case Kusto.Data.Common.IngestionErrorCode.BadRequest_ZeroRetentionPolicyWithNoUpdatePolicy:return"Table has zero rentention policy and is not the source table for any update policy";case Kusto.Data.Common.IngestionErrorCode.BadRequest_CreationTimeEarlierThanSoftDeletePeriod:return"Specified creation time is earlier than table's soft delete period";case Kusto.Data.Common.IngestionErrorCode.BadRequest_NotSupported:return"Request not supported";case Kusto.Data.Common.IngestionErrorCode.Skipped_IngestByTagAlreadyExists:return"Another stream with the same ingest-by tag was already ingested";case Kusto.Data.Common.IngestionErrorCode.Timeout:return"Ingestion operation timed out";default:return null}}}}});Bridge.define("Kusto.Data.Common.ExtendedStorageEngineKind",{statics:{methods:{FastToString:function(that){switch(that){case Kusto.Data.Common.StorageEngineKind.StorageV2:return"StorageV2";case Kusto.Data.Common.StorageEngineKind.StorageV3:return"StorageV3";default:break}return System.String.format("[unknown: {0}]",[Bridge.box(that,System.Int32)])},FastIsDefined$1:function(value){var dummy={v:new Kusto.Data.Common.StorageEngineKind};return Kusto.Data.Common.ExtendedStorageEngineKind.FastTryParse(value,dummy,!1,!0)},FastIsDefined:function(value){switch(value){case Kusto.Data.Common.StorageEngineKind.StorageV2:return!0;case Kusto.Data.Common.StorageEngineKind.StorageV3:return!0;default:return!1}},FastHasFlag$1:function(that,flag){return(that&flag)===flag},FastHasFlag:function(that,flag){return(that&flag)===flag},FastParse:function(value,ignoreCase){ignoreCase===void 0&&(ignoreCase=!1);var ret={v:new Kusto.Data.Common.StorageEngineKind};if(Kusto.Data.Common.ExtendedStorageEngineKind.FastTryParse(value,ret,ignoreCase))return ret.v;throw new System.Exception("Invalid enum value: "+(value||""));},FastTryParse:function(value,ret,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);switch(value){case"0":case"StorageV2":return ret.v=Kusto.Data.Common.StorageEngineKind.StorageV2,!0;case"1":case"StorageV3":return ret.v=Kusto.Data.Common.StorageEngineKind.StorageV3,!0;default:break}if(ignoreCase&&!System.String.isNullOrEmpty(value))switch(value.toLowerCase()){case"storagev2":return ret.v=Kusto.Data.Common.StorageEngineKind.StorageV2,!0;case"storagev3":return ret.v=Kusto.Data.Common.StorageEngineKind.StorageV3,!0;default:break}if(!ignoreInts){var reti={v:0};if(System.Int32.tryParse(value,reti))return ret.v=reti.v,!0}return ret.v=0,!1},FastGetDescription:function(that){switch(that){case Kusto.Data.Common.StorageEngineKind.StorageV2:return"V2 - extents data storage engine";case Kusto.Data.Common.StorageEngineKind.StorageV3:return"V3 - shard data storage engine";default:return null}}}}});Bridge.define("Kusto.Data.Common.ExtendedStreamingIngestionMechanismUsage",{statics:{methods:{FastToString:function(that){switch(that){case Kusto.Data.Common.StreamingIngestionMechanismUsage.None:return"None";case Kusto.Data.Common.StreamingIngestionMechanismUsage.UserData:return"UserData";case Kusto.Data.Common.StreamingIngestionMechanismUsage.SystemDB:return"SystemDB";case Kusto.Data.Common.StreamingIngestionMechanismUsage.UserDataAndSystemDB:return"UserDataAndSystemDB";default:break}var allFlags=Kusto.Data.Common.ExtendedStreamingIngestionMechanismUsage.FastGetFlags(that);return Bridge.toArray(allFlags).join("|")},FastIsDefined$1:function(value){var dummy={v:new Kusto.Data.Common.StreamingIngestionMechanismUsage};return Kusto.Data.Common.ExtendedStreamingIngestionMechanismUsage.FastTryParse(value,dummy,!1,!0)},FastIsDefined:function(value){switch(value){case Kusto.Data.Common.StreamingIngestionMechanismUsage.None:return!0;case Kusto.Data.Common.StreamingIngestionMechanismUsage.UserData:return!0;case Kusto.Data.Common.StreamingIngestionMechanismUsage.SystemDB:return!0;case Kusto.Data.Common.StreamingIngestionMechanismUsage.UserDataAndSystemDB:return!0;default:return!1}},FastHasFlag$1:function(that,flag){return(that&flag)===flag},FastHasFlag:function(that,flag){return(that&flag)===flag},FastHasAllFlags:function(that,flags){return(that&flags)===flags},FastHasAnyFlags:function(that,flags){return(that&flags)!=0},FastCountIntersectionsWith:function(that,flags){var intersections=that&flags;return Kusto.Cloud.Platform.Utils.BitTwiddling.CountBits(intersections)},FastParse:function(value,ignoreCase){ignoreCase===void 0&&(ignoreCase=!1);var ret={v:new Kusto.Data.Common.StreamingIngestionMechanismUsage};if(Kusto.Data.Common.ExtendedStreamingIngestionMechanismUsage.FastTryParse(value,ret,ignoreCase))return ret.v;throw new System.Exception("Invalid enum value: "+(value||""));},FastTryParse:function(value,ret,ignoreCase,ignoreInts){var $t,reti,parts,part,partResult;ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);switch(value){case"0":case"None":return ret.v=Kusto.Data.Common.StreamingIngestionMechanismUsage.None,!0;case"1":case"UserData":return ret.v=Kusto.Data.Common.StreamingIngestionMechanismUsage.UserData,!0;case"2":case"SystemDB":return ret.v=Kusto.Data.Common.StreamingIngestionMechanismUsage.SystemDB,!0;case"UserData | SystemDB":case"UserDataAndSystemDB":return ret.v=Kusto.Data.Common.StreamingIngestionMechanismUsage.UserDataAndSystemDB,!0;default:break}if(ignoreCase&&!System.String.isNullOrEmpty(value))switch(value.toLowerCase()){case"none":return ret.v=Kusto.Data.Common.StreamingIngestionMechanismUsage.None,!0;case"userdata":return ret.v=Kusto.Data.Common.StreamingIngestionMechanismUsage.UserData,!0;case"systemdb":return ret.v=Kusto.Data.Common.StreamingIngestionMechanismUsage.SystemDB,!0;case"userdataandsystemdb":return ret.v=Kusto.Data.Common.StreamingIngestionMechanismUsage.UserDataAndSystemDB,!0;default:break}if(!ignoreInts&&(reti={v:0},System.Int32.tryParse(value,reti)))return ret.v=reti.v,!0;if(ret.v=0,!System.String.isNullOrEmpty(value)&&System.String.contains(value,"|")){parts=System.String.split(value,System.Array.init([124],System.Char).map(function(i){return String.fromCharCode(i)}),null,1);$t=Bridge.getEnumerator(parts);try{while($t.moveNext())if(part=$t.Current,partResult={v:new Kusto.Data.Common.StreamingIngestionMechanismUsage},Kusto.Data.Common.ExtendedStreamingIngestionMechanismUsage.FastTryParse(part,partResult,ignoreCase,ignoreInts))ret.v|=partResult.v;else return ret.v=0,!1}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return!0}return!1},FastGetDescription:function(that){switch(that){case Kusto.Data.Common.StreamingIngestionMechanismUsage.None:return"Rowstore is not in use";case Kusto.Data.Common.StreamingIngestionMechanismUsage.UserData:return"Streaming ingestion mechanism is used for user data";case Kusto.Data.Common.StreamingIngestionMechanismUsage.SystemDB:return"Streaming ingestion mechanism is used for $systemdb";case Kusto.Data.Common.StreamingIngestionMechanismUsage.UserDataAndSystemDB:return"Streaming ingestion mechanism can be used for both user data and systemdb.";default:return null}},FastGetFlags:function(that){return new(Bridge.GeneratorEnumerable$1(Kusto.Data.Common.StreamingIngestionMechanismUsage))(Bridge.fn.bind(this,function(that){var $step=0,$jumpFromFinally,$returnValue,$async_e,$enumerator=new(Bridge.GeneratorEnumerator$1(Kusto.Data.Common.StreamingIngestionMechanismUsage))(Bridge.fn.bind(this,function(){try{for(;;)switch($step){case 0:if((that&Kusto.Data.Common.StreamingIngestionMechanismUsage.UserData)===Kusto.Data.Common.StreamingIngestionMechanismUsage.UserData){$step=1;continue}$step=3;continue;case 1:return $enumerator.current=Kusto.Data.Common.StreamingIngestionMechanismUsage.UserData,$step=2,!0;case 2:$step=3;continue;case 3:if((that&Kusto.Data.Common.StreamingIngestionMechanismUsage.SystemDB)===Kusto.Data.Common.StreamingIngestionMechanismUsage.SystemDB){$step=4;continue}$step=6;continue;case 4:return $enumerator.current=Kusto.Data.Common.StreamingIngestionMechanismUsage.SystemDB,$step=5,!0;case 5:$step=6;continue;case 6:if((that&Kusto.Data.Common.StreamingIngestionMechanismUsage.UserDataAndSystemDB)===Kusto.Data.Common.StreamingIngestionMechanismUsage.UserDataAndSystemDB){$step=7;continue}$step=9;continue;case 7:return $enumerator.current=Kusto.Data.Common.StreamingIngestionMechanismUsage.UserDataAndSystemDB,$step=8,!0;case 8:$step=9;continue;case 9:default:return!1}}catch($async_e1){$async_e=System.Exception.create($async_e1);throw $async_e;}}));return $enumerator},arguments))}}}});Bridge.define("Kusto.Data.Common.ExtendedTransformationMethod",{statics:{methods:{FastToString:function(that){switch(that){case Kusto.Data.Common.TransformationMethod.None:return"None";case Kusto.Data.Common.TransformationMethod.PropertyBagArrayToDictionary:return"PropertyBagArrayToDictionary";case Kusto.Data.Common.TransformationMethod.SourceLocation:return"SourceLocation";case Kusto.Data.Common.TransformationMethod.SourceLineNumber:return"SourceLineNumber";case Kusto.Data.Common.TransformationMethod.UnknownMethod1:return"UnknownMethod1";case Kusto.Data.Common.TransformationMethod.UnknownMethod:return"UnknownMethod";case Kusto.Data.Common.TransformationMethod.DateTimeFromUnixSeconds:return"DateTimeFromUnixSeconds";case Kusto.Data.Common.TransformationMethod.DateTimeFromUnixMilliseconds:return"DateTimeFromUnixMilliseconds";case Kusto.Data.Common.TransformationMethod.DateTimeFromUnixMicroseconds:return"DateTimeFromUnixMicroseconds";case Kusto.Data.Common.TransformationMethod.DateTimeFromUnixNanoseconds:return"DateTimeFromUnixNanoseconds";default:break}return System.String.format("[unknown: {0}]",[Bridge.box(that,System.Int32)])},FastIsDefined$1:function(value){var dummy={v:new Kusto.Data.Common.TransformationMethod};return Kusto.Data.Common.ExtendedTransformationMethod.FastTryParse(value,dummy,!1,!0)},FastIsDefined:function(value){switch(value){case Kusto.Data.Common.TransformationMethod.None:return!0;case Kusto.Data.Common.TransformationMethod.PropertyBagArrayToDictionary:return!0;case Kusto.Data.Common.TransformationMethod.SourceLocation:return!0;case Kusto.Data.Common.TransformationMethod.SourceLineNumber:return!0;case Kusto.Data.Common.TransformationMethod.UnknownMethod1:return!0;case Kusto.Data.Common.TransformationMethod.UnknownMethod:return!0;case Kusto.Data.Common.TransformationMethod.DateTimeFromUnixSeconds:return!0;case Kusto.Data.Common.TransformationMethod.DateTimeFromUnixMilliseconds:return!0;case Kusto.Data.Common.TransformationMethod.DateTimeFromUnixMicroseconds:return!0;case Kusto.Data.Common.TransformationMethod.DateTimeFromUnixNanoseconds:return!0;default:return!1}},FastHasFlag$1:function(that,flag){return(that&flag)===flag},FastHasFlag:function(that,flag){return(that&flag)===flag},FastParse:function(value,ignoreCase){ignoreCase===void 0&&(ignoreCase=!1);var ret={v:new Kusto.Data.Common.TransformationMethod};if(Kusto.Data.Common.ExtendedTransformationMethod.FastTryParse(value,ret,ignoreCase))return ret.v;throw new System.Exception("Invalid enum value: "+(value||""));},FastTryParse:function(value,ret,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);switch(value){case"0":case"None":return ret.v=Kusto.Data.Common.TransformationMethod.None,!0;case"1":case"PropertyBagArrayToDictionary":return ret.v=Kusto.Data.Common.TransformationMethod.PropertyBagArrayToDictionary,!0;case"2":case"SourceLocation":return ret.v=Kusto.Data.Common.TransformationMethod.SourceLocation,!0;case"3":case"SourceLineNumber":return ret.v=Kusto.Data.Common.TransformationMethod.SourceLineNumber,!0;case"4":case"UnknownMethod1":return ret.v=Kusto.Data.Common.TransformationMethod.UnknownMethod1,!0;case"5":case"UnknownMethod":return ret.v=Kusto.Data.Common.TransformationMethod.UnknownMethod,!0;case"6":case"DateTimeFromUnixSeconds":return ret.v=Kusto.Data.Common.TransformationMethod.DateTimeFromUnixSeconds,!0;case"7":case"DateTimeFromUnixMilliseconds":return ret.v=Kusto.Data.Common.TransformationMethod.DateTimeFromUnixMilliseconds,!0;case"8":case"DateTimeFromUnixMicroseconds":return ret.v=Kusto.Data.Common.TransformationMethod.DateTimeFromUnixMicroseconds,!0;case"9":case"DateTimeFromUnixNanoseconds":return ret.v=Kusto.Data.Common.TransformationMethod.DateTimeFromUnixNanoseconds,!0;default:break}if(ignoreCase&&!System.String.isNullOrEmpty(value))switch(value.toLowerCase()){case"none":return ret.v=Kusto.Data.Common.TransformationMethod.None,!0;case"propertybagarraytodictionary":return ret.v=Kusto.Data.Common.TransformationMethod.PropertyBagArrayToDictionary,!0;case"sourcelocation":return ret.v=Kusto.Data.Common.TransformationMethod.SourceLocation,!0;case"sourcelinenumber":return ret.v=Kusto.Data.Common.TransformationMethod.SourceLineNumber,!0;case"unknownmethod1":return ret.v=Kusto.Data.Common.TransformationMethod.UnknownMethod1,!0;case"unknownmethod":return ret.v=Kusto.Data.Common.TransformationMethod.UnknownMethod,!0;case"datetimefromunixseconds":return ret.v=Kusto.Data.Common.TransformationMethod.DateTimeFromUnixSeconds,!0;case"datetimefromunixmilliseconds":return ret.v=Kusto.Data.Common.TransformationMethod.DateTimeFromUnixMilliseconds,!0;case"datetimefromunixmicroseconds":return ret.v=Kusto.Data.Common.TransformationMethod.DateTimeFromUnixMicroseconds,!0;case"datetimefromunixnanoseconds":return ret.v=Kusto.Data.Common.TransformationMethod.DateTimeFromUnixNanoseconds,!0;default:break}if(!ignoreInts){var reti={v:0};if(System.Int32.tryParse(value,reti))return ret.v=reti.v,!0}return ret.v=0,!1},FastGetDescription:function(that){switch(that){case Kusto.Data.Common.TransformationMethod.None:return"Comma-separated value.";case Kusto.Data.Common.TransformationMethod.PropertyBagArrayToDictionary:return"Property bag array to dictionary.";case Kusto.Data.Common.TransformationMethod.SourceLocation:return"Source location.";case Kusto.Data.Common.TransformationMethod.SourceLineNumber:return"Source line number.";case Kusto.Data.Common.TransformationMethod.UnknownMethod1:return"Was GetPathElement";case Kusto.Data.Common.TransformationMethod.UnknownMethod:return"Unknown method.";case Kusto.Data.Common.TransformationMethod.DateTimeFromUnixSeconds:return"Converts UNIX epoch (seconds) to UTC datetime.";case Kusto.Data.Common.TransformationMethod.DateTimeFromUnixMilliseconds:return"Converts UNIX epoch (milliseconds) to UTC datetime.";case Kusto.Data.Common.TransformationMethod.DateTimeFromUnixMicroseconds:return"Converts UNIX epoch (microseconds) to UTC datetime.";case Kusto.Data.Common.TransformationMethod.DateTimeFromUnixNanoseconds:return"Converts UNIX epoch (nanoseconds) to UTC datetime.";default:return null}}}}});Bridge.define("Kusto.Data.Common.IngestionErrorCategory",{$kind:"enum",statics:{fields:{Unknown:0,InternalServiceError:1,BadFormat:2,BadRequest:3,BlobNotFound:4,UpdatePolicyFailure:5,EntityNotFound:6,UserAccessNotAuthorized:7,DataAccessNotAuthorized:8,FileTooLarge:9,ThrottledOnEngine:10,DownloadFailed:11}}});Bridge.define("Kusto.Data.Common.IngestionErrorCode",{$kind:"enum",statics:{fields:{Unknown:0,Stream_WrongNumberOfFields:2161770504,Stream_InputStreamTooLarge:2161770505,Stream_NoDataToIngest:2161770506,Stream_ClosingQuoteMissing:2161770507,Stream_DynamicPropertyBagTooLarge:2161770510,Download_SourceNotFound:2161770511,Download_AccessConditionNotSatisfied:2161770512,Download_Forbidden:2161770513,Download_AccountNotFound:2161770514,Download_BadRequest:2161770515,Download_NotTransient:2161770516,Download_UnknownError:2161770517,UpdatePolicy_QuerySchemaDoesNotMatchTableSchema:2161770518,UpdatePolicy_FailedDescendantTransaction:2161770519,UpdatePolicy_IngestionError:2161770520,UpdatePolicy_UnknownError:2161770521,BadRequest_MissingJsonMappingtFailure:2161770522,BadRequest_InvalidBlob:2161770523,BadRequest_EmptyBlob:2161770524,BadRequest_EmptyArchive:2161770525,BadRequest_InvalidArchive:2161770526,BadRequest_EmptyBlobUri:2161770527,BadRequest_DatabaseNotExist:2161770528,BadRequest_TableNotExist:2161770529,BadRequest_InvalidKustoIdentityToken:2161770530,BadRequest_FileTooLarge:2161770531,BadRequest_TableAccessDenied:2161770532,BadRequest_MessageExhausted:2161770533,General_BadRequest:2161770534,General_InternalServerError:2161770535,UpdatePolicy_Cyclic_Update_Not_Allowed:2161770536,BadRequest_InvalidMapping:2161770537,BadRequest_InvalidMappingReference:2161770538,BadRequest_MappingReferenceWasNotFound:2161770539,BadRequest_FormatNotSupported:2161770540,BadRequest_DuplicateMapping:2161770541,BadRequest_CorruptedMessage:2161770542,BadRequest_InconsistentMapping:2161770543,BadRequest_SyntaxError:2161770544,BadRequest_InvalidOrEmptyTableName:2161770545,BadRequest_EmptyDatabaseName:2161770546,BadRequest_EmptyTenantIdentifier:2161770547,BadRequest_EmptyMappingReference:2161770548,BadRequest_EntityNotFound:2161770549,BadRequest_EntityNameIsNotValid:2161770550,General_AbandonedIngestion:2161770551,General_ThrottledIngestion:2161770552,General_TransientSchemaMismatch:2161770553,BadRequest_DatabaseAccessDenied:2161770554,BadRequest_UnexpectedCharacterInInputStream:2161770555,Forbidden:2161770556,BadRequest_ZeroRetentionPolicyWithNoUpdatePolicy:2161770557,BadRequest_CreationTimeEarlierThanSoftDeletePeriod:2161770558,BadRequest_NotSupported:2161770559,Skipped_IngestByTagAlreadyExists:2161770560,Timeout:2161770561}},$utype:System.UInt32});Bridge.define("Kusto.Data.Common.StorageEngineKind",{$kind:"enum",statics:{fields:{StorageV2:0,StorageV3:1}}});Bridge.define("Kusto.Data.Common.StreamingIngestionMechanismUsage",{$kind:"enum",statics:{fields:{None:0,UserData:1,SystemDB:2,UserDataAndSystemDB:3}},$flags:!0});Bridge.define("Kusto.Data.Common.TransformationMethod",{$kind:"enum",statics:{fields:{None:0,PropertyBagArrayToDictionary:1,SourceLocation:2,SourceLineNumber:3,UnknownMethod1:4,UnknownMethod:5,DateTimeFromUnixSeconds:6,DateTimeFromUnixMilliseconds:7,DateTimeFromUnixMicroseconds:8,DateTimeFromUnixNanoseconds:9}}});Bridge.define("Kusto.Data.DmSettingsType",{$kind:"enum",statics:{fields:{AdminSettings:0,DataObtainerServiceSettings:1,DataAggregatorSettings:2,DataObtainerSettings:3,CloudQueueMessageManagerSettings:4,CloudManagersSettings:5,SchemaManagmentSettings:6,CommonSettings:7,DataImporterSettings:8,StatusReporterSettings:9,All:10}}});Bridge.define("Kusto.Data.ExtendedDmSettingsType",{statics:{methods:{FastToString:function(that){switch(that){case Kusto.Data.DmSettingsType.AdminSettings:return"AdminSettings";case Kusto.Data.DmSettingsType.DataObtainerServiceSettings:return"DataObtainerServiceSettings";case Kusto.Data.DmSettingsType.DataAggregatorSettings:return"DataAggregatorSettings";case Kusto.Data.DmSettingsType.DataObtainerSettings:return"DataObtainerSettings";case Kusto.Data.DmSettingsType.CloudQueueMessageManagerSettings:return"CloudQueueMessageManagerSettings";case Kusto.Data.DmSettingsType.CloudManagersSettings:return"CloudManagersSettings";case Kusto.Data.DmSettingsType.SchemaManagmentSettings:return"SchemaManagmentSettings";case Kusto.Data.DmSettingsType.CommonSettings:return"CommonSettings";case Kusto.Data.DmSettingsType.DataImporterSettings:return"DataImporterSettings";case Kusto.Data.DmSettingsType.StatusReporterSettings:return"StatusReporterSettings";case Kusto.Data.DmSettingsType.All:return"All";default:break}return System.String.format("[unknown: {0}]",[Bridge.box(that,System.Int32)])},FastIsDefined$1:function(value){var dummy={v:new Kusto.Data.DmSettingsType};return Kusto.Data.ExtendedDmSettingsType.FastTryParse(value,dummy,!1,!0)},FastIsDefined:function(value){switch(value){case Kusto.Data.DmSettingsType.AdminSettings:return!0;case Kusto.Data.DmSettingsType.DataObtainerServiceSettings:return!0;case Kusto.Data.DmSettingsType.DataAggregatorSettings:return!0;case Kusto.Data.DmSettingsType.DataObtainerSettings:return!0;case Kusto.Data.DmSettingsType.CloudQueueMessageManagerSettings:return!0;case Kusto.Data.DmSettingsType.CloudManagersSettings:return!0;case Kusto.Data.DmSettingsType.SchemaManagmentSettings:return!0;case Kusto.Data.DmSettingsType.CommonSettings:return!0;case Kusto.Data.DmSettingsType.DataImporterSettings:return!0;case Kusto.Data.DmSettingsType.StatusReporterSettings:return!0;case Kusto.Data.DmSettingsType.All:return!0;default:return!1}},FastHasFlag$1:function(that,flag){return(that&flag)===flag},FastHasFlag:function(that,flag){return(that&flag)===flag},FastParse:function(value,ignoreCase){ignoreCase===void 0&&(ignoreCase=!1);var ret={v:new Kusto.Data.DmSettingsType};if(Kusto.Data.ExtendedDmSettingsType.FastTryParse(value,ret,ignoreCase))return ret.v;throw new System.Exception("Invalid enum value: "+(value||""));},FastTryParse:function(value,ret,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);switch(value){case"AdminSettings":return ret.v=Kusto.Data.DmSettingsType.AdminSettings,!0;case"DataObtainerServiceSettings":return ret.v=Kusto.Data.DmSettingsType.DataObtainerServiceSettings,!0;case"DataAggregatorSettings":return ret.v=Kusto.Data.DmSettingsType.DataAggregatorSettings,!0;case"DataObtainerSettings":return ret.v=Kusto.Data.DmSettingsType.DataObtainerSettings,!0;case"CloudQueueMessageManagerSettings":return ret.v=Kusto.Data.DmSettingsType.CloudQueueMessageManagerSettings,!0;case"CloudManagersSettings":return ret.v=Kusto.Data.DmSettingsType.CloudManagersSettings,!0;case"SchemaManagmentSettings":return ret.v=Kusto.Data.DmSettingsType.SchemaManagmentSettings,!0;case"CommonSettings":return ret.v=Kusto.Data.DmSettingsType.CommonSettings,!0;case"DataImporterSettings":return ret.v=Kusto.Data.DmSettingsType.DataImporterSettings,!0;case"StatusReporterSettings":return ret.v=Kusto.Data.DmSettingsType.StatusReporterSettings,!0;case"All":return ret.v=Kusto.Data.DmSettingsType.All,!0;default:break}if(ignoreCase&&!System.String.isNullOrEmpty(value))switch(value.toLowerCase()){case"adminsettings":return ret.v=Kusto.Data.DmSettingsType.AdminSettings,!0;case"dataobtainerservicesettings":return ret.v=Kusto.Data.DmSettingsType.DataObtainerServiceSettings,!0;case"dataaggregatorsettings":return ret.v=Kusto.Data.DmSettingsType.DataAggregatorSettings,!0;case"dataobtainersettings":return ret.v=Kusto.Data.DmSettingsType.DataObtainerSettings,!0;case"cloudqueuemessagemanagersettings":return ret.v=Kusto.Data.DmSettingsType.CloudQueueMessageManagerSettings,!0;case"cloudmanagerssettings":return ret.v=Kusto.Data.DmSettingsType.CloudManagersSettings,!0;case"schemamanagmentsettings":return ret.v=Kusto.Data.DmSettingsType.SchemaManagmentSettings,!0;case"commonsettings":return ret.v=Kusto.Data.DmSettingsType.CommonSettings,!0;case"dataimportersettings":return ret.v=Kusto.Data.DmSettingsType.DataImporterSettings,!0;case"statusreportersettings":return ret.v=Kusto.Data.DmSettingsType.StatusReporterSettings,!0;case"all":return ret.v=Kusto.Data.DmSettingsType.All,!0;default:break}if(!ignoreInts){var reti={v:0};if(System.Int32.tryParse(value,reti))return ret.v=reti.v,!0}return ret.v=0,!1},FastGetDescription:function(that){switch(that){case Kusto.Data.DmSettingsType.AdminSettings:return"";case Kusto.Data.DmSettingsType.DataObtainerServiceSettings:return"";case Kusto.Data.DmSettingsType.DataAggregatorSettings:return"";case Kusto.Data.DmSettingsType.DataObtainerSettings:return"";case Kusto.Data.DmSettingsType.CloudQueueMessageManagerSettings:return"";case Kusto.Data.DmSettingsType.CloudManagersSettings:return"";case Kusto.Data.DmSettingsType.SchemaManagmentSettings:return"";case Kusto.Data.DmSettingsType.CommonSettings:return"";case Kusto.Data.DmSettingsType.DataImporterSettings:return"";case Kusto.Data.DmSettingsType.StatusReporterSettings:return"";case Kusto.Data.DmSettingsType.All:return"";default:return null}}}}});Bridge.define("Kusto.Data.ExtendedIngestionQueueType",{statics:{methods:{FastToString:function(that){switch(that){case Kusto.Data.IngestionQueueType.All:return"All";case Kusto.Data.IngestionQueueType.InputQueue:return"InputQueue";case Kusto.Data.IngestionQueueType.InternalQueue:return"InternalQueue";case Kusto.Data.IngestionQueueType.ReadyForAggregationQueue:return"ReadyForAggregationQueue";case Kusto.Data.IngestionQueueType.SecuredReadyForAggregationQueue:return"SecuredReadyForAggregationQueue";case Kusto.Data.IngestionQueueType.AggregatedReadyForImportQueue:return"AggregatedReadyForImportQueue";case Kusto.Data.IngestionQueueType.FailedIngestionsQueue:return"FailedIngestionsQueue";case Kusto.Data.IngestionQueueType.SuccessfulIngestionsQueue:return"SuccessfulIngestionsQueue";case Kusto.Data.IngestionQueueType.AbandonedIngestionsQueue:return"AbandonedIngestionsQueue";case Kusto.Data.IngestionQueueType.SecuredAbandonedIngestionsQueue:return"SecuredAbandonedIngestionsQueue";case Kusto.Data.IngestionQueueType.InternalFailedIngestionsQueue:return"InternalFailedIngestionsQueue";case Kusto.Data.IngestionQueueType.AbandonedInputQueues:return"AbandonedInputQueues";default:break}return System.String.format("[unknown: {0}]",[Bridge.box(that,System.Int32)])},FastIsDefined$1:function(value){var dummy={v:new Kusto.Data.IngestionQueueType};return Kusto.Data.ExtendedIngestionQueueType.FastTryParse(value,dummy,!1,!0)},FastIsDefined:function(value){switch(value){case Kusto.Data.IngestionQueueType.All:return!0;case Kusto.Data.IngestionQueueType.InputQueue:return!0;case Kusto.Data.IngestionQueueType.InternalQueue:return!0;case Kusto.Data.IngestionQueueType.ReadyForAggregationQueue:return!0;case Kusto.Data.IngestionQueueType.SecuredReadyForAggregationQueue:return!0;case Kusto.Data.IngestionQueueType.AggregatedReadyForImportQueue:return!0;case Kusto.Data.IngestionQueueType.FailedIngestionsQueue:return!0;case Kusto.Data.IngestionQueueType.SuccessfulIngestionsQueue:return!0;case Kusto.Data.IngestionQueueType.AbandonedIngestionsQueue:return!0;case Kusto.Data.IngestionQueueType.SecuredAbandonedIngestionsQueue:return!0;case Kusto.Data.IngestionQueueType.InternalFailedIngestionsQueue:return!0;case Kusto.Data.IngestionQueueType.AbandonedInputQueues:return!0;default:return!1}},FastHasFlag$1:function(that,flag){return(that&flag)===flag},FastHasFlag:function(that,flag){return(that&flag)===flag},FastParse:function(value,ignoreCase){ignoreCase===void 0&&(ignoreCase=!1);var ret={v:new Kusto.Data.IngestionQueueType};if(Kusto.Data.ExtendedIngestionQueueType.FastTryParse(value,ret,ignoreCase))return ret.v;throw new System.Exception("Invalid enum value: "+(value||""));},FastTryParse:function(value,ret,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);switch(value){case"0":case"All":return ret.v=Kusto.Data.IngestionQueueType.All,!0;case"1":case"InputQueue":return ret.v=Kusto.Data.IngestionQueueType.InputQueue,!0;case"2":case"InternalQueue":return ret.v=Kusto.Data.IngestionQueueType.InternalQueue,!0;case"3":case"ReadyForAggregationQueue":return ret.v=Kusto.Data.IngestionQueueType.ReadyForAggregationQueue,!0;case"4":case"SecuredReadyForAggregationQueue":return ret.v=Kusto.Data.IngestionQueueType.SecuredReadyForAggregationQueue,!0;case"5":case"AggregatedReadyForImportQueue":return ret.v=Kusto.Data.IngestionQueueType.AggregatedReadyForImportQueue,!0;case"6":case"FailedIngestionsQueue":return ret.v=Kusto.Data.IngestionQueueType.FailedIngestionsQueue,!0;case"7":case"SuccessfulIngestionsQueue":return ret.v=Kusto.Data.IngestionQueueType.SuccessfulIngestionsQueue,!0;case"9":case"AbandonedIngestionsQueue":return ret.v=Kusto.Data.IngestionQueueType.AbandonedIngestionsQueue,!0;case"10":case"SecuredAbandonedIngestionsQueue":return ret.v=Kusto.Data.IngestionQueueType.SecuredAbandonedIngestionsQueue,!0;case"11":case"InternalFailedIngestionsQueue":return ret.v=Kusto.Data.IngestionQueueType.InternalFailedIngestionsQueue,!0;case"12":case"AbandonedInputQueues":return ret.v=Kusto.Data.IngestionQueueType.AbandonedInputQueues,!0;default:break}if(ignoreCase&&!System.String.isNullOrEmpty(value))switch(value.toLowerCase()){case"all":return ret.v=Kusto.Data.IngestionQueueType.All,!0;case"inputqueue":return ret.v=Kusto.Data.IngestionQueueType.InputQueue,!0;case"internalqueue":return ret.v=Kusto.Data.IngestionQueueType.InternalQueue,!0;case"readyforaggregationqueue":return ret.v=Kusto.Data.IngestionQueueType.ReadyForAggregationQueue,!0;case"securedreadyforaggregationqueue":return ret.v=Kusto.Data.IngestionQueueType.SecuredReadyForAggregationQueue,!0;case"aggregatedreadyforimportqueue":return ret.v=Kusto.Data.IngestionQueueType.AggregatedReadyForImportQueue,!0;case"failedingestionsqueue":return ret.v=Kusto.Data.IngestionQueueType.FailedIngestionsQueue,!0;case"successfulingestionsqueue":return ret.v=Kusto.Data.IngestionQueueType.SuccessfulIngestionsQueue,!0;case"abandonedingestionsqueue":return ret.v=Kusto.Data.IngestionQueueType.AbandonedIngestionsQueue,!0;case"securedabandonedingestionsqueue":return ret.v=Kusto.Data.IngestionQueueType.SecuredAbandonedIngestionsQueue,!0;case"internalfailedingestionsqueue":return ret.v=Kusto.Data.IngestionQueueType.InternalFailedIngestionsQueue,!0;case"abandonedinputqueues":return ret.v=Kusto.Data.IngestionQueueType.AbandonedInputQueues,!0;default:break}if(!ignoreInts){var reti={v:0};if(System.Int32.tryParse(value,reti))return ret.v=reti.v,!0}return ret.v=0,!1},FastGetDescription:function(that){switch(that){case Kusto.Data.IngestionQueueType.All:return"";case Kusto.Data.IngestionQueueType.InputQueue:return"";case Kusto.Data.IngestionQueueType.InternalQueue:return"";case Kusto.Data.IngestionQueueType.ReadyForAggregationQueue:return"";case Kusto.Data.IngestionQueueType.SecuredReadyForAggregationQueue:return"";case Kusto.Data.IngestionQueueType.AggregatedReadyForImportQueue:return"";case Kusto.Data.IngestionQueueType.FailedIngestionsQueue:return"";case Kusto.Data.IngestionQueueType.SuccessfulIngestionsQueue:return"";case Kusto.Data.IngestionQueueType.AbandonedIngestionsQueue:return"";case Kusto.Data.IngestionQueueType.SecuredAbandonedIngestionsQueue:return"";case Kusto.Data.IngestionQueueType.InternalFailedIngestionsQueue:return"";case Kusto.Data.IngestionQueueType.AbandonedInputQueues:return"";default:return null}}}}});Bridge.define("Kusto.Data.Ingestion.ExtendedIngestionMappingKind",{statics:{methods:{FastToString:function(that){switch(that){case Kusto.Data.Ingestion.IngestionMappingKind.Unknown:return"Unknown";case Kusto.Data.Ingestion.IngestionMappingKind.Csv:return"Csv";case Kusto.Data.Ingestion.IngestionMappingKind.Json:return"Json";case Kusto.Data.Ingestion.IngestionMappingKind.Avro:return"Avro";case Kusto.Data.Ingestion.IngestionMappingKind.Parquet:return"Parquet";case Kusto.Data.Ingestion.IngestionMappingKind.SStream:return"SStream";case Kusto.Data.Ingestion.IngestionMappingKind.Orc:return"Orc";case Kusto.Data.Ingestion.IngestionMappingKind.ApacheAvro:return"ApacheAvro";case Kusto.Data.Ingestion.IngestionMappingKind.W3CLogFile:return"W3CLogFile";default:break}return System.String.format("[unknown: {0}]",[Bridge.box(that,System.Int32)])},FastIsDefined$1:function(value){var dummy={v:new Kusto.Data.Ingestion.IngestionMappingKind};return Kusto.Data.Ingestion.ExtendedIngestionMappingKind.FastTryParse(value,dummy,!1,!0)},FastIsDefined:function(value){switch(value){case Kusto.Data.Ingestion.IngestionMappingKind.Unknown:return!0;case Kusto.Data.Ingestion.IngestionMappingKind.Csv:return!0;case Kusto.Data.Ingestion.IngestionMappingKind.Json:return!0;case Kusto.Data.Ingestion.IngestionMappingKind.Avro:return!0;case Kusto.Data.Ingestion.IngestionMappingKind.Parquet:return!0;case Kusto.Data.Ingestion.IngestionMappingKind.SStream:return!0;case Kusto.Data.Ingestion.IngestionMappingKind.Orc:return!0;case Kusto.Data.Ingestion.IngestionMappingKind.ApacheAvro:return!0;case Kusto.Data.Ingestion.IngestionMappingKind.W3CLogFile:return!0;default:return!1}},FastHasFlag$1:function(that,flag){return(that&flag)===flag},FastHasFlag:function(that,flag){return(that&flag)===flag},FastParse:function(value,ignoreCase){ignoreCase===void 0&&(ignoreCase=!1);var ret={v:new Kusto.Data.Ingestion.IngestionMappingKind};if(Kusto.Data.Ingestion.ExtendedIngestionMappingKind.FastTryParse(value,ret,ignoreCase))return ret.v;throw new System.Exception("Invalid enum value: "+(value||""));},FastTryParse:function(value,ret,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);switch(value){case"0":case"Unknown":return ret.v=Kusto.Data.Ingestion.IngestionMappingKind.Unknown,!0;case"1":case"Csv":return ret.v=Kusto.Data.Ingestion.IngestionMappingKind.Csv,!0;case"2":case"Json":return ret.v=Kusto.Data.Ingestion.IngestionMappingKind.Json,!0;case"4":case"Avro":return ret.v=Kusto.Data.Ingestion.IngestionMappingKind.Avro,!0;case"5":case"Parquet":return ret.v=Kusto.Data.Ingestion.IngestionMappingKind.Parquet,!0;case"6":case"SStream":return ret.v=Kusto.Data.Ingestion.IngestionMappingKind.SStream,!0;case"7":case"Orc":return ret.v=Kusto.Data.Ingestion.IngestionMappingKind.Orc,!0;case"8":case"ApacheAvro":return ret.v=Kusto.Data.Ingestion.IngestionMappingKind.ApacheAvro,!0;case"9":case"W3CLogFile":return ret.v=Kusto.Data.Ingestion.IngestionMappingKind.W3CLogFile,!0;default:break}if(ignoreCase&&!System.String.isNullOrEmpty(value))switch(value.toLowerCase()){case"unknown":return ret.v=Kusto.Data.Ingestion.IngestionMappingKind.Unknown,!0;case"csv":return ret.v=Kusto.Data.Ingestion.IngestionMappingKind.Csv,!0;case"json":return ret.v=Kusto.Data.Ingestion.IngestionMappingKind.Json,!0;case"avro":return ret.v=Kusto.Data.Ingestion.IngestionMappingKind.Avro,!0;case"parquet":return ret.v=Kusto.Data.Ingestion.IngestionMappingKind.Parquet,!0;case"sstream":return ret.v=Kusto.Data.Ingestion.IngestionMappingKind.SStream,!0;case"orc":return ret.v=Kusto.Data.Ingestion.IngestionMappingKind.Orc,!0;case"apacheavro":return ret.v=Kusto.Data.Ingestion.IngestionMappingKind.ApacheAvro,!0;case"w3clogfile":return ret.v=Kusto.Data.Ingestion.IngestionMappingKind.W3CLogFile,!0;default:break}if(!ignoreInts){var reti={v:0};if(System.Int32.tryParse(value,reti))return ret.v=reti.v,!0}return ret.v=0,!1},FastGetDescription:function(that){switch(that){case Kusto.Data.Ingestion.IngestionMappingKind.Unknown:return"Unknown";case Kusto.Data.Ingestion.IngestionMappingKind.Csv:return"Csv";case Kusto.Data.Ingestion.IngestionMappingKind.Json:return"Json";case Kusto.Data.Ingestion.IngestionMappingKind.Avro:return"Avro";case Kusto.Data.Ingestion.IngestionMappingKind.Parquet:return"Parquet";case Kusto.Data.Ingestion.IngestionMappingKind.SStream:return"SStream";case Kusto.Data.Ingestion.IngestionMappingKind.Orc:return"Orc";case Kusto.Data.Ingestion.IngestionMappingKind.ApacheAvro:return"Apache Avro (through avro2json)";case Kusto.Data.Ingestion.IngestionMappingKind.W3CLogFile:return"W3C Extended Log File format";default:return null}}}}});Bridge.define("Kusto.Data.Ingestion.IngestionMappingKind",{$kind:"enum",statics:{fields:{Unknown:0,Csv:1,Json:2,Avro:4,Parquet:5,SStream:6,Orc:7,ApacheAvro:8,W3CLogFile:9}}});Bridge.define("Kusto.Data.IngestionQueueType",{$kind:"enum",statics:{fields:{All:0,InputQueue:1,InternalQueue:2,ReadyForAggregationQueue:3,SecuredReadyForAggregationQueue:4,AggregatedReadyForImportQueue:5,FailedIngestionsQueue:6,SuccessfulIngestionsQueue:7,AbandonedIngestionsQueue:9,SecuredAbandonedIngestionsQueue:10,InternalFailedIngestionsQueue:11,AbandonedInputQueues:12}}});Bridge.define("Kusto.Data.IntelliSense.AdminEngineRuleKind",{$kind:"enum",statics:{fields:{None:0,Start:0,YieldShowCommandOptions:0,YieldTableNamesForAdminOptions:1,YieldFunctionNamesForAdminOptions:2,YieldDatabaseNames:3,YieldShowBasicAuthOptions:4,YieldShowDatabasePrincipalsPoliciesAndSchemaOptions:5,YieldShowDatabasesOptions:6,YieldShowClusterPrincipalsOptions:7,YieldSetDatabaseAdminsUsersViewersPrettyNameOptions:8,YieldSetClusterAdminsUsersViewersDatabaseCreatorsOptions:9,YieldSetTableAdminsOptions:10,YieldAddDatabaseAdminsUsersViewersOptions:11,YieldDropDatabaseOptions:12,YieldAddClusterAdminsUsersViewersDatabaseCreatorsBlockedPrincipalsOptions:13,YieldDropClusterAdminsUsersViewersDatabaseCreatorsBlockedPrincipalsOptions:14,YieldAddClusterBlockedPrincipalsOptions:15,YieldAddTableAdminsOptions:16,YieldDropTableEntitiesOptions:17,YieldDeleteTableEntitiesOptions:18,YieldCreateTableEntitiesOptions:19,YieldAlterTableEntitiesOptions:20,YieldDropTableColumnsSyntaxOptions:21,YieldSetDatabaseUsersNoneOptions:22,YieldSetDatabaseAdminsNoneOptions:23,YieldSetDatabaseViewersNoneOptions:24,YieldSetClusterUsersNoneOptions:25,YieldSetClusterAdminsNoneOptions:26,YieldSetClusterViewersNoneOptions:27,YieldSetClusterDatabaseCreatorsNoneOptions:28,YieldSetTableAdminsNoneOptions:29,YieldShowTableEntitiesOptions:30,YieldAlterExtentTagsOptions:31,YieldAttachExtentsOptions:32,YieldAttachExtentsIntoTableOptions:33,YieldDropExtentTagsOptions:34,YieldMoveExtentsOptions:35,YieldMoveSpecifiedExtentsOptions:36,YieldMoveExtentsToTableOptions:37,YieldReplaceCommandOptions:38,YieldReplaceExtentsOptions:39,YieldRunCommandOptions:40,YieldShowExtentsOptions:41,YieldShowExtentsByEntityOptions:42,YieldShowExtentsByEntityWithTagsFiltersOptions:43,YieldSetCommandOptions:44,YieldSetOrAppendCommandOptions:45,YieldAddCommandOptions:46,YieldAttachCommandOptions:47,YieldDropCommandOptions:48,YieldMoveCommandOptions:49,YieldPoliciesOptions:50,YieldClusterPoliciesOptions:51,YieldDatabasePoliciesOptions:52,YieldTablePoliciesOptions:53,YieldColumnPoliciesOptions:54,YieldAlterCommandOptions:55,YieldAlterMergeCommandOptions:56,YieldDeleteCommandOptions:57,YieldCreateCommandOptions:58,YieldMultiplePoliciesOptions:59,YieldDatabaseCreatePersistencyOptions:60,YieldCreateIfNotExistsOptions:61,YieldAdminCommandsOptions:62,YieldExportCommandOptions:63,YieldExportCommandWithModifiersAndOptions:64,YieldExportCommandNoModifiersAndOptions:65,YieldAlterDatabaseCommandOptions:66,YieldDeleteMultiplePoliciesOptions:67,YieldIngestionDuplicationOptions:68,YieldPurgeOptions:69,YieldPurgeCleanupOptions:70,YieldPurgeWhatIfOptions:71,YieldPurgeWithPropertiesOptions:72,YieldPurgeTableOptions:73,YieldShowPrincipalCommandOptions:74,YieldAlterFunctionEntitiesOptions:75,YieldAlterMergePolicyRetentionOptions:76,YieldAlterMergePolicyRetentionSoftDeleteDefinedOptions:77,YieldAlterTimeSpanPolicyOptions:78,YieldCreateOrAlterOptions:79,YieldShowFabricOptions:80,YieldRowStoreCreatePersistencyOptions:81,YieldSetDatabaseIngestorsNoneOptions:82,YieldSetTableIngestorsNoneOptions:83,YieldSuspendNodeControlCommandOptions:84},ctors:{init:function(){this.None=Kusto.Data.IntelliSense.RuleKind.None;this.Start=Kusto.Data.IntelliSense.RuleKind.Last}}}});Bridge.define("Kusto.Data.IntelliSense.AnalyzedCommand",{fields:{Command:null,Context:null}});Bridge.define("Kusto.Data.IntelliSense.ApiKind",{$kind:"enum",statics:{fields:{Query:0,AdminSyncCommand:1,AdminAsyncCommand:2}}});Bridge.define("Kusto.Data.IntelliSense.ApplyPolicy",{statics:{fields:{NullApplyPolicy:null,AppendSpacePolicy:null,AppendPipePolicy:null,AppendStringLiteralArrayPolicy:null,StringComparisonPolicy:null,AppendCommaPolicy:null,AppendDoubleCommaPolicy:null,AppendSpaceStepBackPolicy:null,AppendSpaceAfterBracketPolicy:null,MoveAfterTheBracketPolicy:null,AppendAssignmentPolicy:null,AppendJoinClauseWithOpenningBracketPolicy:null,AppendJoinClauseWithoutOpenningBracketPolicy:null,AppendFindInClausePolicy:null,AppendSearchInClausePolicy:null,AppendFindInClauseWithoutOpenningBracketPolicy:null},ctors:{init:function(){var $t;this.NullApplyPolicy=($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text="",$t);this.AppendSpacePolicy=($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=" ",$t);this.AppendPipePolicy=($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=" | ",$t);this.AppendStringLiteralArrayPolicy=($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=' ("", "")',$t.OffsetPosition=2,$t.OffsetToken="(",$t);this.StringComparisonPolicy=($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=' "" ',$t.OffsetPosition=-2,$t);this.AppendCommaPolicy=($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=", ",$t.OffsetPosition=0,$t);this.AppendDoubleCommaPolicy=($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=", , ",$t.OffsetPosition=-2,$t);this.AppendSpaceStepBackPolicy=($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=" ",$t.OffsetPosition=-2,$t);this.AppendSpaceAfterBracketPolicy=($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=" ",$t.OffsetToken="(",$t.OffsetPosition=1,$t);this.MoveAfterTheBracketPolicy=($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text="",$t.OffsetToken=")",$t.OffsetPosition=1,$t);this.AppendAssignmentPolicy=($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=" = ",$t);this.AppendJoinClauseWithOpenningBracketPolicy=($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.OffsetPosition=-13,$t.Text=" (\r\n    \r\n) on Key1 ",$t);this.AppendJoinClauseWithoutOpenningBracketPolicy=($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.OffsetPosition=-13,$t.Text="\r\n    \r\n) on Key1 ",$t);this.AppendFindInClausePolicy=($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.OffsetPosition=-8,$t.Text=" () where ",$t);this.AppendSearchInClausePolicy=($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.OffsetPosition=-2,$t.Text=" () ",$t);this.AppendFindInClauseWithoutOpenningBracketPolicy=($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.OffsetPosition=-8,$t.Text=") where ",$t)}}},props:{Text:null,OffsetPosition:0,OffsetToken:null},ctors:{ctor:function(){this.$initialize()}}});Bridge.define("Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase",{statics:{fields:{CommonRegexOptions:0,DefaultRegexOptions:0,s_isCommandRegex:null,s_firstWordAfterPipeRegex:null},ctors:{init:function(){this.CommonRegexOptions=16;this.DefaultRegexOptions=0;this.s_isCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_firstWordAfterPipeRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*(?<FirstWord>[\\w\\-]+)\\s+",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions)}},methods:{FindRules:function(rules,command,commandContext,lastPart,keywordFromCommand){var $t,r,hasKeywordMatch;$t=Bridge.getEnumerator(rules);try{while($t.moveNext())if((r=$t.Current,r.RequiredKeywords==null||!(r.RequiredKeywords.Count>0)||(hasKeywordMatch=!1,hasKeywordMatch=r.RequiresFullCommand?System.Linq.Enumerable.from(r.RequiredKeywords,System.String).any(function(keyword){return System.String.contains(command,keyword)}):!System.String.isNullOrEmpty(keywordFromCommand)&&r.RequiredKeywords.contains(keywordFromCommand),hasKeywordMatch))&&r.IsMatch(commandContext,r.RequiresFullCommand?command:lastPart))return r}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return null},FindLastStatement:function(statements){return System.String.isNullOrEmpty(statements)?"":System.Linq.Enumerable.from(Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.ParseAsStatements(statements,59,!1),System.String).lastOrDefault(null,null)},ParseAsStatements:function(input,delimeter,trimDelimeter){var result=new(System.Collections.Generic.List$1(System.String).ctor),currentStatementStart,chars,i,ch,eofString,len;if(System.String.isNullOrEmpty(input))return result;for(currentStatementStart=0,chars=System.String.toCharArray(input,0,input.length),i=0;i<chars.length;i=i+1|0)ch=chars[System.Array.index(i,chars)],!(ch===34|ch===39)||(i=Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.SkipToBalancedChar(chars,i+1|0,ch,System.Array.init([34,39],System.Char))),eofString=i===(chars.length-1|0),(ch===delimeter||eofString)&&(len=(i-currentStatementStart|0)+1|0,trimDelimeter&&ch===delimeter&&(len=len-1|0),len>0&&result.add(input.substr(currentStatementStart,len)),currentStatementStart=i+1|0);return result},SkipToBalancedChar:function(chars,start,balancedChar,recursionChars){for(var ch,i=start;i<chars.length;i=i+1|0){if(ch=chars[System.Array.index(i,chars)],ch===balancedChar)return i;System.Array.contains(recursionChars,ch,System.Char)&&(i=Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.SkipToBalancedChar(chars,i+1|0,ch,recursionChars))}return chars.length-1|0},GetApproximateCommandLastPart:function(command,lastPart,firstWordAfterPipe){var parts=System.String.split(command,[124].map(function(i){return String.fromCharCode(i)})),last=System.Linq.Enumerable.from(parts,System.String).lastOrDefault(null,null);if(lastPart.v=last,parts.length>1&&(lastPart.v="|"+(last||"")),System.String.isNullOrEmpty(last)){firstWordAfterPipe.v="";return}firstWordAfterPipe.v=Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.GetFirstWordAfterPipe(last)},GetFirstWordAfterPipe:function(input){var match=Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.s_firstWordAfterPipeRegex.match(input);return match.getGroups().getByName("FirstWord").toString()}}},props:{Locker:null,GeneralRules:null,CommandRules:null,QueryParametersRules:null,DefaultRule:null,CommandToolTips:null,ContextConnection:null},ctors:{ctor:function(){this.$initialize();this.Locker={}}},methods:{TryMatchAnyRule:function(command,rule){var $t,$t1,analyzedCommand=this.AnalyzeCommand$1(command,null),commandContext=analyzedCommand.Context,firstWordAfterPipe={},lastPart={},isCommand,r,r1;if(Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.GetApproximateCommandLastPart(analyzedCommand.Command,lastPart,firstWordAfterPipe),isCommand=Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.s_isCommandRegex.isMatch(command),rule.v=null,isCommand){Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.PrivateTracer.Tracer.TraceVerbose("TryMatchAnyRule: start matching rules for commands rules");$t=Bridge.getEnumerator(this.CommandRules);try{while($t.moveNext())if(r=$t.Current,r.IsMatch(commandContext,r.RequiresFullCommand?command:lastPart.v)){rule.v=r;break}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}}if(rule.v==null&&(Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.PrivateTracer.Tracer.TraceVerbose("TryMatchAnyRule: start matching rules for general rules"),rule.v=Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.FindRules(this.GeneralRules,command,commandContext,lastPart.v,firstWordAfterPipe.v)),rule.v==null){Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.PrivateTracer.Tracer.TraceVerbose("TryMatchAnyRule: start matching rules for query parameters rules");$t1=Bridge.getEnumerator(this.QueryParametersRules);try{while($t1.moveNext())if(r1=$t1.Current,r1.IsMatch(commandContext,r1.RequiresFullCommand?command:lastPart.v)){rule.v=r1;break}}finally{Bridge.is($t1,System.IDisposable)&&$t1.System$IDisposable$Dispose()}}return rule.v!=null&&rule.v.IsContextual?(Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.PrivateTracer.Tracer.TraceVerbose("TryMatchAnyRule: rule {0} was found",[Bridge.box(rule.v.Kind,System.Int32)]),this.UpdateProviderAvailableEntities(command,commandContext),Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.PrivateTracer.Tracer.TraceVerbose("TryMatchAnyRule: Entities were updated",[Bridge.box(rule.v.Kind,System.Int32)])):Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.PrivateTracer.Tracer.TraceVerbose("TryMatchAnyRule: no rule was found"),rule.v!=null},TryMatchSpecificRule:function(command,commandContext,ruleKind,rule){rule.v=null;var isCommand=Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.s_isCommandRegex.isMatch(command);return isCommand&&(rule.v=System.Linq.Enumerable.from(this.CommandRules,Kusto.Data.IntelliSense.IntelliSenseRule).firstOrDefault(function(r){return r.Kind===ruleKind&&r.IsMatch(commandContext,command)},null)),rule.v==null&&(rule.v=System.Linq.Enumerable.from(this.GeneralRules,Kusto.Data.IntelliSense.IntelliSenseRule).firstOrDefault(function(r){return r.Kind===ruleKind&&r.IsMatch(commandContext,command)},null)),rule.v!=null&&rule.v.IsContextual&&this.UpdateProviderAvailableEntities(command,commandContext),rule.v!=null},SetQueryParametersRule:function(queryParameters){},Initialize:function(){this.CommandRules=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseRule).ctor);this.GeneralRules=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseRule).ctor);this.CommandToolTips=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTip).ctor);this.QueryParametersRules=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseRule).ctor)}}});Bridge.define("Kusto.Data.IntelliSense.CMRuleKind",{$kind:"enum",statics:{fields:{None:0,Start:0,YieldAdminCommandsOptions:0,YieldPipeOptions:1,YieldOperatorsAfterPipe:2,YieldShowCommandOptions:3,YieldShowAccountCommandOptions:4,YieldShowAccountsKeywordOptions:5,YieldMoveAccountCommandOptions:6,YieldMoveAccountSubscriptionCommandOptions:7,YieldMoveCommandOptions:8,YieldAlterCommandOptions:9,YieldAddCommandOptions:10,YieldDropCommandOptions:11,YieldRemoveCommandOptions:12,YieldCreateCommandOptions:13,YieldCreateExternalCommandOptions:14,YieldDeleteCommandOptions:15,YieldDetachCommandOptions:16,YieldCheckCommandOptions:17,YieldSetCommandOptions:18,YieldRegisterCommandOptions:19,YieldServiceKeywordOptions:20,YieldServiceOrClusterKeywordOptions:21,YieldStorageAccountsKeywordOptions:22,YieldIngestLogsIntoKeywordsOptions:23,YieldInServiceKeywordOptions:24,YieldShowClusterKeywordOptions:25,YieldOperationsKeywordOptions:26,YieldPcCodeKeywordOptions:27,YieldFromServiceKeywordOptions:28,YieldFromAccountKeywordOptions:29,YieldShowAuditLogCommandOptions:30,YieldShowAuditLogFromCommandOptions:31,YieldShowCmServiceCommandOptions:32,YieldShowClusterClientOptions:33,YieldShowClusterClientSubscriptionCommandOptions:34,YieldShowClusterClusterNamePrincipalCommandOptions:35,YieldShowServicesCompletionKeywordsOptions:36,YieldConfigurationPropertySetKeywordOptions:37,YieldConfigurationPropertyDropKeywordOptions:38,YieldToStringKeywordOptions:39,YieldToKeywordOptions:40,YieldConfigurationPropertyWithConsentKeywordOptions:41,YieldAccountAlterOperationsKeywordOptions:42,YieldAccountAddOperationsKeywordOptions:43,YieldAccountRemoveOperationsKeywordOptions:44,YieldAccountSetOperationsKeywordOptions:45,YieldAccountRenameOperationsKeywordOptions:46,YieldServiceAlterOperationsKeywordOptions:47,YieldMetadataKeywordOptions:48,YieldSummaryKeywordOptions:49,YieldSummaryOrMetadataKeywordOptions:50,YieldDatabaseOrAccountMetadataKeywordOptions:51,YieldAccountNames:52,YieldDmServiceAddKeywordOptions:53,YieldDmServiceDropKeywordOptions:54,YieldDmServiceAlterKeywordOptions:55,YieldDmServiceAlterSettingsOptions:56,YieldDmServiceShowKeywordOptions:57,YieldServicesNames:58,YieldServicesNamesCombinedWithOptions:59,YieldTargetServiceOptions:60,YieldWithPropertiesSuffix:61,YieldWithEventHubPropertiesSuffix:62,YieldInstallCommandOptions:63,YieldReinstallCommandOptions:64,YieldUninstallServiceCommandOptions:65,YieldUninstallCommandOptions:66,YieldMigrateServiceCommandOptions:67,YieldDatabaseMoveCommandOptions:68,YieldDatabaseMoveFromServiceCommandOptions:69,YieldSetClusterPrincipalsCommandOptions:70,YieldAddClusterPrincipalsCommandOptions:71,YieldDropClusterPrincipalsCommandOptions:72,YieldAddClusterJitPrincipalsCommandOptions:73,YieldDropClusterJitPrincipalsCommandOptions:74,YieldSetClusterPrincipalsNoneOptions:75,YieldDropAccountPrincipalsCommandOptions:76,YieldDatabaseCreateCommandOptions:77,YieldServiceCreateCommandOptions:78,YieldShowPrincipalRolesCommandOptions:79,YieldAddKeywordOptions:80,YieldAlterServiceConfigurationPropertiesOptions:81,YieldAlterServiceConfigurationCommandOptions:82,YieldMoveServiceConfigurationCommandOptions:83,YieldAddServiceServiceNameOptions:84,YieldLoadBalancerKeywordOptions:85,YieldOperationKeywordOptions:86,YieldShowSubscriptionCommandOptions:87,YieldShowServiceSecurityRulesCommandOptions:88,YieldKeysCommandOptions:89,YieldKeyTypesCommandOptions:90,YieldAlterServiceStorageAccountsCommandOptions:91,YieldCmNotifyCommandOptions:92,YieldExecuteCommandOptions:93,YieldExecuteJobCommandOptions:94,YieldGenerateCommandOptions:95,YieldPublishCommandOptions:96,YieldSkuAvailabilityPrefix:97,YieldSkuAvailabilityCommandValues:98,YieldSkuAvailabilityPropertiesSuffix:99,YieldServiceRegenerateSuffix:100,YieldVersionKeywordOptions:101,YieldExportCommandOptions:102,YieldExportPackageForOptions:103,YieldExportPackageForServiceTypeOptions:104,YieldSharedIdentity:105,YieldSetRegionVisibility:106,YieldRegisterFeature:107,YieldBillingServiceCreateResources:108,YieldPublishServiceCommandOptions:109,YieldUnPublishCommandOptions:110,YieldUnPublishServiceCommandOptions:111,YieldRotateCommandOptions:112,YieldRotateServiceCommandOptions:113},ctors:{init:function(){this.None=Kusto.Data.IntelliSense.RuleKind.None;this.Start=Kusto.Data.IntelliSense.RuleKind.Last}}}});Bridge.define("Kusto.Data.IntelliSense.CompletionOption",{props:{Kind:0,Value:null},ctors:{ctor:function(kind,value){this.$initialize();this.Kind=kind;this.Value=value}}});Bridge.define("Kusto.Data.IntelliSense.CompletionOptionCollection",{fields:{m_materializedOptions:null},props:{Kind:0,Values:null,Priority:0},ctors:{ctor:function(kind,values,priority){priority===void 0&&(priority=0);this.$initialize();this.Kind=kind;this.Values=values;this.Priority=priority}},methods:{GetCompletionOptions:function(){return this.m_materializedOptions==null&&(this.m_materializedOptions=System.Linq.Enumerable.from(this.Values,System.String).select(Bridge.fn.bind(this,$asm.$.Kusto.Data.IntelliSense.CompletionOptionCollection.f1)).ToArray(Kusto.Data.IntelliSense.CompletionOption)),this.m_materializedOptions}}});Bridge.ns("Kusto.Data.IntelliSense.CompletionOptionCollection",$asm.$);Bridge.apply($asm.$.Kusto.Data.IntelliSense.CompletionOptionCollection,{f1:function(o){return new Kusto.Data.IntelliSense.CompletionOption(this.Kind,o)}});Bridge.define("Kusto.Data.IntelliSense.ContextOperation",{$kind:"enum",statics:{fields:{None:0,Union:1,Intersect:2}}});Bridge.define("Kusto.Data.IntelliSense.IntelliSenseRule",{props:{Kind:0,RequiredKeywords:null,AfterApplyPolicies:null,BeforeApplyPolicies:null,DefaultAfterApplyPolicy:null,DefaultBeforeApplyPolicy:null},methods:{GetAfterApplyInfo:function(selectedOption){var policy={v:null};return this.AfterApplyPolicies!=null&&this.AfterApplyPolicies.tryGetValue(selectedOption,policy),policy.v||this.DefaultAfterApplyPolicy||Kusto.Data.IntelliSense.ApplyPolicy.NullApplyPolicy},GetBeforeApplyInfo:function(selectedOption){var policy={v:null};return this.BeforeApplyPolicies!=null&&this.BeforeApplyPolicies.tryGetValue(selectedOption,policy),policy.v||this.DefaultBeforeApplyPolicy||Kusto.Data.IntelliSense.ApplyPolicy.NullApplyPolicy}}});Bridge.define("Kusto.Data.IntelliSense.CslCommand",{statics:{fields:{c_tabulation:null,s_newLineRegex:null,s_removeWhiteSpacesAfterPipeRegex:null,s_joinStartRegex:null,s_joinEndRegex:null,s_makeSeriesOperatorRegex:null,s_operatorRegex:null,s_operatorsNotRequiringFullEntitiesResolve:null,s_nameOrListRegex:null,s_hasAssignmentOperationRegex:null,s_startsWithAlpha:null},ctors:{init:function(){this.c_tabulation="    ";this.s_newLineRegex=new System.Text.RegularExpressions.Regex.ctor("[\\n\\r]",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_removeWhiteSpacesAfterPipeRegex=new System.Text.RegularExpressions.Regex.ctor("^\\|\\s+",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.DefaultRegexOptions);this.s_joinStartRegex=new System.Text.RegularExpressions.Regex.ctor("(?<JoinOpPart>^\\s*\\|\\s*join\\s+(kind\\s*=\\s*\\w+\\s*)?)(?<Bracket>\\()?(?<PostJoinPart>.+$)",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_joinEndRegex=new System.Text.RegularExpressions.Regex.ctor("(?!^.*\\bmake-series\\b.*$)((?<InnerJoinPart>^.*?)(?<Bracket>\\)?)\\s*\\b(?<JoinOnPart>on\\s+.+))",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_makeSeriesOperatorRegex=new System.Text.RegularExpressions.Regex.ctor("\\bmake-series\\b",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.DefaultRegexOptions);this.s_operatorRegex=new System.Text.RegularExpressions.Regex.ctor("\\|\\s*(?<Operator>[\\w-]+)",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.DefaultRegexOptions);this.s_operatorsNotRequiringFullEntitiesResolve=$asm.$.Kusto.Data.IntelliSense.CslCommand.f1(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_nameOrListRegex="(?:\\w+)|(?:\\((\\w+)(,\\s*\\w+)*\\))";this.s_hasAssignmentOperationRegex=new System.Text.RegularExpressions.Regex.ctor("(^\\s*\\|\\s*(extend|parse|summarize|project|mvexpand|mv-expand|make-series|project-rename)\\s+"+(Kusto.Data.IntelliSense.CslCommand.s_nameOrListRegex||"")+")|(^\\s*range)",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.DefaultRegexOptions);this.s_startsWithAlpha=new System.Text.RegularExpressions.Regex.ctor("^\\s*[a-z]",1)}},methods:{MakeTrivialCommandFromText:function(text){var $t,$t1;return $t=new Kusto.Data.IntelliSense.CslCommand,$t.m_commandParts=($t1=Kusto.Data.IntelliSense.CslCommandToken,System.Linq.Enumerable.from(System.Array.init([new Kusto.Data.IntelliSense.CslCommandToken(text,0,Kusto.Data.IntelliSense.CslCommandToken.Kind.CslCommandToken)],Kusto.Data.IntelliSense.CslCommandToken),$t1).toList($t1)),$t.Text=text,$t.Length=text.length,$t.AbsolutePositionBias=0,$t.RelativeStart=0,$t.ParseMode=Kusto.Data.IntelliSense.ParseMode.CommandTokensOnly,$t.IsRunnable=!System.String.isNullOrWhiteSpace(text),$t},UnionCommands:function(commands){var $t,firstCommand,result;return System.Linq.Enumerable.from(commands,Kusto.Data.IntelliSense.CslCommand).count()<2?System.Linq.Enumerable.from(commands,Kusto.Data.IntelliSense.CslCommand).firstOrDefault(null,null):(firstCommand=System.Linq.Enumerable.from(commands,Kusto.Data.IntelliSense.CslCommand).first(),result=($t=new Kusto.Data.IntelliSense.CslCommand,$t.m_tokens=System.Linq.Enumerable.from(commands,Kusto.Data.IntelliSense.CslCommand).selectMany($asm.$.Kusto.Data.IntelliSense.CslCommand.f2).toList(Kusto.Data.IntelliSense.CslCommandToken),$t.m_commandParts=System.Linq.Enumerable.from(commands,Kusto.Data.IntelliSense.CslCommand).selectMany($asm.$.Kusto.Data.IntelliSense.CslCommand.f3).toList(Kusto.Data.IntelliSense.CslCommandToken),$t.m_commentsParts=System.Linq.Enumerable.from(commands,Kusto.Data.IntelliSense.CslCommand).selectMany($asm.$.Kusto.Data.IntelliSense.CslCommand.f4).toList(Kusto.Data.IntelliSense.CslCommandToken),$t.m_clientDirectivesParts=System.Linq.Enumerable.from(commands,Kusto.Data.IntelliSense.CslCommand).selectMany($asm.$.Kusto.Data.IntelliSense.CslCommand.f5).toList(Kusto.Data.IntelliSense.CslCommandToken),$t.m_bracketParts=System.Linq.Enumerable.from(commands,Kusto.Data.IntelliSense.CslCommand).selectMany($asm.$.Kusto.Data.IntelliSense.CslCommand.f6).toList(Kusto.Data.IntelliSense.CslCommandToken),$t.Text=Bridge.toArray(System.Linq.Enumerable.from(commands,Kusto.Data.IntelliSense.CslCommand).selectMany($asm.$.Kusto.Data.IntelliSense.CslCommand.f7)).join(""),$t.IsRunnable=System.Linq.Enumerable.from(commands,Kusto.Data.IntelliSense.CslCommand).any($asm.$.Kusto.Data.IntelliSense.CslCommand.f8),$t.RelativeStart=firstCommand.RelativeStart,$t.AbsolutePositionBias=firstCommand.AbsolutePositionBias,$t.ParseMode=firstCommand.ParseMode,$t),result.Length=result.Text.length,result)},NormalizeCommandPart:function(partValue){return partValue=partValue.trim(),Kusto.Data.IntelliSense.CslCommand.s_removeWhiteSpacesAfterPipeRegex.replace(partValue,"| ")},AppendTabulatedText:function(sb,level,text){Kusto.Data.IntelliSense.CslCommand.AppendTabulations(sb,level);sb.append(text)},AppendTabulations:function(sb,level){if(!(level<=0))for(var j=0;j<level;j=j+1|0)sb.append(Kusto.Data.IntelliSense.CslCommand.c_tabulation)},ResolveOperatorContext:function(part){return part==null?"":System.String.indexOf(part.Text," on ")>0&&!Kusto.Data.IntelliSense.CslCommand.s_makeSeriesOperatorRegex.isMatch(part.Text)?"":Kusto.Data.IntelliSense.CslCommand.s_operatorRegex.match(part.Text).getGroups().getByName("Operator").toString()},GetKnownEntities:function(rulesProvider,mapOfKnownEntities,mapOfOriginallyKnownEntities,part,commandBuilder,context,operatorContext,knownEntities,originallyKnownEntities){if((knownEntities.v=new(System.Collections.Generic.List$1(System.String).ctor),originallyKnownEntities.v=mapOfOriginallyKnownEntities.containsKey(context)?mapOfOriginallyKnownEntities.getItem(context):new(System.Collections.Generic.List$1(System.String).ctor),part==null)||Kusto.Data.IntelliSense.CslCommand.s_operatorsNotRequiringFullEntitiesResolve.contains(operatorContext))return mapOfKnownEntities.containsKey(context)&&(knownEntities.v=mapOfKnownEntities.getItem(context)),!1;var command=commandBuilder.toString();return rulesProvider.GetKnownEntities(command,context,mapOfOriginallyKnownEntities,knownEntities,originallyKnownEntities)},IsMatchingRegex:function(commandPart,opRegex){return System.String.isNullOrWhiteSpace(commandPart)?!1:opRegex.isMatch(commandPart)},StartsWithAlpha:function(text){return System.String.isNullOrWhiteSpace(text)?!1:Kusto.Data.IntelliSense.CslCommand.s_startsWithAlpha.isMatch(text)}}},fields:{m_tokens:null,m_commandParts:null,m_commentsParts:null,m_clientDirectivesParts:null,m_bracketParts:null,m_commandPartsParseStates:null},props:{CslExpressionStartPosition:{get:function(){return Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$1(Kusto.Data.IntelliSense.CslCommandToken,this.m_commandParts)?0:this.m_commandParts.getItem(0).RelativeStart}},CslExpressionLength:{get:function(){return Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$1(Kusto.Data.IntelliSense.CslCommandToken,this.m_commandParts)?0:System.Linq.Enumerable.from(this.m_commandParts,Kusto.Data.IntelliSense.CslCommandToken).last().RelativeEnd-this.m_commandParts.getItem(0).RelativeStart|0}},Tokens:{get:function(){return this.m_tokens}},CommandParts:{get:function(){return this.m_commandParts}},CommentParts:{get:function(){return this.m_commentsParts}},BracketParts:{get:function(){return this.m_bracketParts}},AllParts:{get:function(){var linqParts=0,result=null;return(Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$1(Kusto.Data.IntelliSense.CslCommandToken,this.m_commandParts)&&(linqParts=linqParts+1|0,result=this.m_commandParts),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$1(Kusto.Data.IntelliSense.CslCommandToken,this.m_commentsParts)&&(linqParts=linqParts+1|0,result=result!=null?System.Linq.Enumerable.from(result,Kusto.Data.IntelliSense.CslCommandToken).union(this.m_commentsParts):Bridge.cast(this.m_commentsParts,System.Collections.Generic.IEnumerable$1(Kusto.Data.IntelliSense.CslCommandToken))),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$1(Kusto.Data.IntelliSense.CslCommandToken,this.m_clientDirectivesParts)&&(linqParts=linqParts+1|0,result=result!=null?System.Linq.Enumerable.from(result,Kusto.Data.IntelliSense.CslCommandToken).union(this.m_clientDirectivesParts):Bridge.cast(this.m_clientDirectivesParts,System.Collections.Generic.IEnumerable$1(Kusto.Data.IntelliSense.CslCommandToken))),linqParts>1)?System.Linq.Enumerable.from(result,Kusto.Data.IntelliSense.CslCommandToken).orderBy($asm.$.Kusto.Data.IntelliSense.CslCommand.f9):result}},Text:null,RelativeStart:0,Length:0,RelativeEnd:{get:function(){return(this.RelativeStart+this.Length|0)-1|0}},AbsoluteStart:{get:function(){return this.AbsolutePositionBias+this.RelativeStart|0}},AbsoluteEnd:{get:function(){return this.AbsolutePositionBias+this.RelativeEnd|0}},AbsolutePositionBias:0,IsRunnable:!1,ParseMode:0,ContextCache:null},ctors:{ctor:function(){this.$initialize()}},methods:{FormatAsString:function(separator,traits){var $t,parts,part,partValue,wasHandled;if(Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$1(Kusto.Data.IntelliSense.CslCommandToken,this.m_commandParts))return"";parts=this.m_commandParts;System.Enum.hasFlag(traits,Bridge.box(Kusto.Data.IntelliSense.CslCommand.FormatTraits.IncludeComments,Kusto.Data.IntelliSense.CslCommand.FormatTraits,System.Enum.toStringFn(Kusto.Data.IntelliSense.CslCommand.FormatTraits)))&&Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$1(Kusto.Data.IntelliSense.CslCommandToken,this.m_commentsParts)&&(parts=System.Linq.Enumerable.from(parts,Kusto.Data.IntelliSense.CslCommandToken).union(this.m_commentsParts).union(this.m_clientDirectivesParts).orderBy($asm.$.Kusto.Data.IntelliSense.CslCommand.f10).toList(Kusto.Data.IntelliSense.CslCommandToken));var sb=new System.Text.StringBuilder,level={v:0},isFirstTime=!0;$t=Bridge.getEnumerator(parts);try{while($t.moveNext())part=$t.Current,partValue=Kusto.Data.IntelliSense.CslCommand.s_newLineRegex.replace(part.Value," "),isFirstTime||sb.append(separator),isFirstTime=!1,Kusto.Data.IntelliSense.CslCommand.AppendTabulations(sb,level.v),wasHandled=!1,!wasHandled&&System.Enum.hasFlag(traits,Bridge.box(Kusto.Data.IntelliSense.CslCommand.FormatTraits.IncludeComments,Kusto.Data.IntelliSense.CslCommand.FormatTraits,System.Enum.toStringFn(Kusto.Data.IntelliSense.CslCommand.FormatTraits)))&&(wasHandled=this.HandleCommentsAndClientDirectives(separator,sb,level,part,partValue)),!wasHandled&&System.Enum.hasFlag(traits,Bridge.box(Kusto.Data.IntelliSense.CslCommand.FormatTraits.TabulateOnFunctionBoundaries,Kusto.Data.IntelliSense.CslCommand.FormatTraits,System.Enum.toStringFn(Kusto.Data.IntelliSense.CslCommand.FormatTraits)))&&(wasHandled=this.HandleFunctions(separator,sb,level,part)),!wasHandled&&System.Enum.hasFlag(traits,Bridge.box(Kusto.Data.IntelliSense.CslCommand.FormatTraits.TabulateOnJoins,Kusto.Data.IntelliSense.CslCommand.FormatTraits,System.Enum.toStringFn(Kusto.Data.IntelliSense.CslCommand.FormatTraits)))&&(wasHandled=this.HandleJoins(separator,sb,level,part,partValue)),wasHandled||sb.append(Kusto.Data.IntelliSense.CslCommand.NormalizeCommandPart(partValue))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return sb.toString()},HandleCommentsAndClientDirectives:function(separator,sb,level,part,partValue){return Kusto.Cloud.Platform.Utils.ExtendedEnumerable.None$1(Kusto.Data.IntelliSense.CslCommandToken,System.Linq.Enumerable.from(this.m_commentsParts,Kusto.Data.IntelliSense.CslCommandToken).union(this.m_clientDirectivesParts),function(cp){return cp.AbsoluteStart===part.AbsoluteStart&&cp.AbsoluteEnd===part.AbsoluteEnd})?!1:(sb.append(partValue.trim()),!0)},HandleFunctions:function(separator,sb,level,part){var wasHandled=!1,processedStart=0,startRelativeIndex=System.String.indexOf(part.Value,String.fromCharCode(123)),startAbsoluteIndex=part.AbsoluteStart+startRelativeIndex|0,funcPrefix,endRelativeIndex,endAbsoluteIndex,boddy,funcSuffix,boddy1;return startRelativeIndex>=0&&Kusto.Cloud.Platform.Utils.ExtendedEnumerable.None$1(Kusto.Data.IntelliSense.CslCommandToken,this.m_tokens,function(t){return startAbsoluteIndex>=t.AbsoluteStart&&startAbsoluteIndex<=t.AbsoluteEnd})&&(funcPrefix=part.Value.substr(0,startRelativeIndex).trim(),funcPrefix=Kusto.Data.IntelliSense.CslCommand.s_newLineRegex.replace(funcPrefix," "),sb.append(funcPrefix),sb.append(separator),sb.append("{"),sb.append(separator),level.v=level.v+1|0,wasHandled=!0,processedStart=startRelativeIndex+1|0),endRelativeIndex=System.String.indexOf(part.Value,String.fromCharCode(125)),endAbsoluteIndex=part.AbsoluteStart+endRelativeIndex|0,endRelativeIndex>=0&&Kusto.Cloud.Platform.Utils.ExtendedEnumerable.None$1(Kusto.Data.IntelliSense.CslCommandToken,this.m_tokens,function(t){return endAbsoluteIndex>=t.AbsoluteStart&&endAbsoluteIndex<=t.AbsoluteEnd})&&startRelativeIndex<endRelativeIndex?(boddy=part.Value.substr(processedStart,endRelativeIndex-processedStart|0).trim(),funcSuffix=part.Value.substr(endRelativeIndex+1|0).trim(),funcSuffix=Kusto.Data.IntelliSense.CslCommand.s_newLineRegex.replace(funcSuffix," "),wasHandled&&Kusto.Data.IntelliSense.CslCommand.AppendTabulations(sb,level.v),sb.append(boddy),sb.append(separator),sb.append("}"),level.v=level.v-1|0,level.v<0&&(level.v=0),Kusto.Data.IntelliSense.CslCommand.AppendTabulatedText(sb,level.v,funcSuffix),wasHandled=!0):wasHandled&&(boddy1=part.Value.substr(processedStart).trim(),boddy1=Kusto.Data.IntelliSense.CslCommand.s_newLineRegex.replace(boddy1," "),Kusto.Data.IntelliSense.CslCommand.AppendTabulatedText(sb,level.v,boddy1)),wasHandled},HandleJoins:function(separator,sb,level,part,partValue){var assumeJoinStartedWithBracket=!1,wasHandled=!1,remainingText=partValue,joinStartMatch=Kusto.Data.IntelliSense.CslCommand.s_joinStartRegex.match(remainingText),relativePosition=0,joinOpPart,joinEndMatch,tabLength,bracketClosed;if(joinStartMatch.getSuccess()&&(joinOpPart=joinStartMatch.getGroups().getByName("JoinOpPart").toString(),sb.append(Kusto.Data.IntelliSense.CslCommand.NormalizeCommandPart(joinOpPart)),sb.append(separator),assumeJoinStartedWithBracket=!System.String.isNullOrEmpty(joinStartMatch.getGroups().getByName("Bracket").toString()),level.v=level.v+1|0,remainingText=joinStartMatch.getGroups().getByName("PostJoinPart").toString(),relativePosition=joinStartMatch.getGroups().getByName("PostJoinPart").getIndex(),wasHandled=!0),joinEndMatch=Kusto.Data.IntelliSense.CslCommand.s_joinEndRegex.match(remainingText),joinEndMatch.getSuccess()&&System.Linq.Enumerable.from(this.m_tokens,Kusto.Data.IntelliSense.CslCommandToken).any(function(t){return t.TokenKind===Kusto.Data.IntelliSense.CslCommandToken.Kind.SubOperatorToken&&Bridge.referenceEquals(t.Value,"on")&&t.AbsoluteStart===((joinEndMatch.getGroups().getByName("JoinOnPart").getIndex()+part.AbsoluteStart|0)+relativePosition|0)})){var joinInnerPart=Kusto.Data.IntelliSense.CslCommand.NormalizeCommandPart(joinEndMatch.getGroups().getByName("InnerJoinPart").toString()),onJoinPart=Kusto.Data.IntelliSense.CslCommand.NormalizeCommandPart(joinEndMatch.getGroups().getByName("JoinOnPart").toString()),hasBracket=!System.String.isNullOrEmpty(joinEndMatch.getGroups().getByName("Bracket").toString()),shouldCloseBracket=hasBracket||assumeJoinStartedWithBracket,openBrackets=Kusto.Cloud.Platform.Utils.ExtendedString.CountNonOverlappingSubstrings$1(joinInnerPart,"("),closeBrackets=Kusto.Cloud.Platform.Utils.ExtendedString.CountNonOverlappingSubstrings$1(joinInnerPart,")");hasBracket&&openBrackets>closeBrackets&&(shouldCloseBracket=!1,joinInnerPart=(joinInnerPart||"")+")");joinStartMatch.getSuccess()&&(assumeJoinStartedWithBracket&&(Kusto.Data.IntelliSense.CslCommand.AppendTabulatedText(sb,level.v-1|0,"("),sb.append(separator)),Kusto.Data.IntelliSense.CslCommand.AppendTabulations(sb,level.v));level.v=level.v-1|0;level.v<0&&(level.v=0);System.String.isNullOrEmpty(joinInnerPart)?(tabLength=Kusto.Data.IntelliSense.CslCommand.c_tabulation.length,sb.replace(Kusto.Data.IntelliSense.CslCommand.c_tabulation,"",sb.getLength()-tabLength|0,tabLength),bracketClosed=!1,shouldCloseBracket&&(sb.append(")"),sb.append(separator),bracketClosed=!0),bracketClosed?Kusto.Data.IntelliSense.CslCommand.AppendTabulatedText(sb,level.v,Kusto.Data.IntelliSense.CslCommand.NormalizeCommandPart(onJoinPart)):sb.append(onJoinPart)):(sb.append(joinInnerPart),sb.append(separator),shouldCloseBracket&&(Kusto.Data.IntelliSense.CslCommand.AppendTabulatedText(sb,level.v,")"),sb.append(separator)),Kusto.Data.IntelliSense.CslCommand.AppendTabulatedText(sb,level.v,Kusto.Data.IntelliSense.CslCommand.NormalizeCommandPart(onJoinPart)));wasHandled=!0}else joinStartMatch.getSuccess()&&(assumeJoinStartedWithBracket&&(Kusto.Data.IntelliSense.CslCommand.AppendTabulatedText(sb,level.v-1|0,"("),sb.append(separator)),Kusto.Data.IntelliSense.CslCommand.AppendTabulatedText(sb,level.v,Kusto.Data.IntelliSense.CslCommand.NormalizeCommandPart(remainingText)));return wasHandled},AcquireTokens:function(other){this.m_tokens=System.Linq.Enumerable.from(other.m_tokens,Kusto.Data.IntelliSense.CslCommandToken).select(Bridge.fn.bind(this,$asm.$.Kusto.Data.IntelliSense.CslCommand.f11)).toList(Kusto.Data.IntelliSense.CslCommandToken);this.m_commandParts=System.Linq.Enumerable.from(other.m_commandParts,Kusto.Data.IntelliSense.CslCommandToken).select(Bridge.fn.bind(this,$asm.$.Kusto.Data.IntelliSense.CslCommand.f11)).toList(Kusto.Data.IntelliSense.CslCommandToken);this.m_commentsParts=System.Linq.Enumerable.from(other.m_commentsParts,Kusto.Data.IntelliSense.CslCommandToken).select(Bridge.fn.bind(this,$asm.$.Kusto.Data.IntelliSense.CslCommand.f11)).toList(Kusto.Data.IntelliSense.CslCommandToken);this.m_clientDirectivesParts=System.Linq.Enumerable.from(other.m_clientDirectivesParts,Kusto.Data.IntelliSense.CslCommandToken).select(Bridge.fn.bind(this,$asm.$.Kusto.Data.IntelliSense.CslCommand.f11)).toList(Kusto.Data.IntelliSense.CslCommandToken);this.m_bracketParts=System.Linq.Enumerable.from(other.m_bracketParts,Kusto.Data.IntelliSense.CslCommandToken).select(Bridge.fn.bind(this,$asm.$.Kusto.Data.IntelliSense.CslCommand.f11)).toList(Kusto.Data.IntelliSense.CslCommandToken)},ParseTokens:function(rulesProvider,parseMode,previousCandidate){var tokens=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandToken).ctor),allowQueryParameters,indexer,recognizedTokens,commandParts,commentsParts,clientDirectivesPositions;if(System.String.isNullOrEmpty(this.Text)){this.m_tokens=tokens;return}rulesProvider!=null&&(rulesProvider.ResetState(),previousCandidate!=null&&Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$1(System.Collections.Generic.KeyValuePair$2(System.Int32,Kusto.Data.IntelliSense.KustoCommandContext),previousCandidate.ContextCache)&&(rulesProvider.ContextCache=new(System.Collections.Generic.Dictionary$2(System.Int32,Kusto.Data.IntelliSense.KustoCommandContext).$ctor1)(previousCandidate.ContextCache)));allowQueryParameters=rulesProvider!=null?rulesProvider.AllowQueryParameters:!1;indexer=new Kusto.Data.IntelliSense.CslCommandIndexer(allowQueryParameters);indexer.AntiTokenizers=new(System.Collections.Generic.HashSet$1(System.Char).$ctor1)(System.Array.init([45,95,40],System.Char));indexer.TokenStarters=System.Array.init([46],System.Char);indexer.TokenTerminators=new(System.Collections.Generic.HashSet$1(System.Char).$ctor1)(System.Array.init([40,46],System.Char));indexer.IndexText(this.Text);recognizedTokens=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).ctor);this.m_commandParts=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandToken).ctor);commandParts=indexer.GetCommandPartsPositions();this.AddCategorizedTokens(this.m_commandParts,null,commandParts,Kusto.Data.IntelliSense.CslCommandToken.Kind.CommandPartToken);this.m_commentsParts=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandToken).ctor);commentsParts=indexer.GetCommentsPositions();this.AddCategorizedTokens(this.m_commentsParts,null,commentsParts,Kusto.Data.IntelliSense.CslCommandToken.Kind.CommentToken);this.m_clientDirectivesParts=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandToken).ctor);clientDirectivesPositions=indexer.GetClientDirectivesPositions();this.AddCategorizedTokens(this.m_clientDirectivesParts,null,clientDirectivesPositions,Kusto.Data.IntelliSense.CslCommandToken.Kind.ClientDirectiveToken);this.m_bracketParts=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandToken).ctor);this.AddCategorizedTokens(this.m_bracketParts,null,indexer.GetBracketsPositions(),Kusto.Data.IntelliSense.CslCommandToken.Kind.BracketRangeToken);this.AddCategorizedTokens(tokens,recognizedTokens,commentsParts,Kusto.Data.IntelliSense.CslCommandToken.Kind.CommentToken);this.AddCategorizedTokens(tokens,recognizedTokens,clientDirectivesPositions,Kusto.Data.IntelliSense.CslCommandToken.Kind.ClientDirectiveToken);allowQueryParameters&&this.AddCategorizedTokens(tokens,recognizedTokens,indexer.GetQueryParametersPositions(),Kusto.Data.IntelliSense.CslCommandToken.Kind.QueryParametersToken);this.AddCategorizedTokens(tokens,recognizedTokens,indexer.GetStringLiteralsPositions(),Kusto.Data.IntelliSense.CslCommandToken.Kind.StringLiteralToken);this.AddCategorizedTokens(tokens,recognizedTokens,indexer.GetAllTokenPositions(Kusto.Data.IntelliSense.CslCommandParser.ControlCommandsTokens),Kusto.Data.IntelliSense.CslCommandToken.Kind.ControlCommandToken);this.AddCategorizedTokens(tokens,recognizedTokens,indexer.GetAllTokenPositions(Kusto.Data.IntelliSense.CslCommandParser.CslCommandsTokens),Kusto.Data.IntelliSense.CslCommandToken.Kind.CslCommandToken);this.AddCategorizedTokens(tokens,recognizedTokens,indexer.GetAllTokenPositions(Kusto.Data.IntelliSense.CslCommandParser.OperatorCommandTokens),Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken);this.AddCategorizedTokens(tokens,recognizedTokens,indexer.GetAllTokenPositions(Kusto.Data.IntelliSense.CslCommandParser.SubOperatorsTokens),Kusto.Data.IntelliSense.CslCommandToken.Kind.SubOperatorToken);this.AddCategorizedTokens(tokens,recognizedTokens,indexer.GetAllTokenPositions(Kusto.Data.IntelliSense.CslCommandParser.JoinKindTokens),Kusto.Data.IntelliSense.CslCommandToken.Kind.SubOperatorToken);this.AddCategorizedTokens(tokens,recognizedTokens,indexer.GetAllTokenPositions(Kusto.Data.IntelliSense.CslCommandParser.ReduceByKindTokens),Kusto.Data.IntelliSense.CslCommandToken.Kind.SubOperatorToken);this.AddCategorizedTokens(tokens,recognizedTokens,indexer.GetAllTokenPositions(Kusto.Data.IntelliSense.CslCommandParser.DataTypesTokens),Kusto.Data.IntelliSense.CslCommandToken.Kind.DataTypeToken);this.AddCategorizedTokens(tokens,recognizedTokens,indexer.GetAllTokenPositions(Kusto.Data.IntelliSense.CslCommandParser.FunctionsTokens,40),Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken);this.AddCategorizedTokens(tokens,recognizedTokens,indexer.GetAllTokenPositions(Kusto.Data.IntelliSense.CslCommandParser.PluginTokens,40),Kusto.Data.IntelliSense.CslCommandToken.Kind.PluginToken);rulesProvider!=null&&this.AddEntitiesTokens(rulesProvider,tokens,recognizedTokens,indexer,commandParts,previousCandidate);tokens.Sort$2($asm.$.Kusto.Data.IntelliSense.CslCommand.f12);this.ValidateTokensOutput(tokens,this.Text);parseMode===Kusto.Data.IntelliSense.ParseMode.TokenizeAllText&&(this.EnsureAllTextIsAnnotated(indexer,tokens,recognizedTokens),tokens.Sort$2($asm.$.Kusto.Data.IntelliSense.CslCommand.f12));this.m_tokens=tokens;rulesProvider!=null&&(this.ContextCache=rulesProvider.ContextCache)},ValidateTokensOutput:function(tokens,text){for(var t,tokenToRemove,$t,invalidTokens=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandToken).ctor),currentEnd=0,maxLen=text.length,i=0;i<System.Linq.Enumerable.from(tokens,Kusto.Data.IntelliSense.CslCommandToken).count();i=i+1|0)t=tokens.getItem(i),t.RelativeEnd<currentEnd||t.RelativeStart<currentEnd||t.RelativeEnd>maxLen?invalidTokens.add(t):currentEnd=t.RelativeEnd;$t=Bridge.getEnumerator(invalidTokens);try{while($t.moveNext())tokenToRemove=$t.Current,tokens.remove(tokenToRemove)}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}},AddEntitiesTokens:function(rulesProvider,tokens,recognizedTokens,indexer,commandParts,refernceCommand){var i,prevPart,part,command,tableContext,calculatedColumns,availableTableColumns,newCalculatedColumns,result,prevCalculatedColumns,calculatedColumnTokens;this.AddCategorizedTokens(tokens,recognizedTokens,indexer.GetAllTokenPositions(rulesProvider.TableNames),Kusto.Data.IntelliSense.CslCommandToken.Kind.TableToken);this.m_commandPartsParseStates=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommand.AddEntitiesTokensState).ctor);var commandBuilder=new System.Text.StringBuilder,letVariables=new(System.Collections.Generic.HashSet$1(System.String).$ctor1)(rulesProvider.FunctionNames),canUseReference=refernceCommand!=null,state=null,analyzedCommand=null;for(i=0;i<(System.Array.getCount(commandParts,Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition)+1|0);i=i+1|0){if(prevPart=i>0?System.Array.getItem(commandParts,i-1|0,Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition):null,part={v:i<System.Array.getCount(commandParts,Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition)?System.Array.getItem(commandParts,i,Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition):null},state=state!=null?state.Clone():new Kusto.Data.IntelliSense.CslCommand.AddEntitiesTokensState,part.v!=null&&commandBuilder.append(part.v.Text),canUseReference=!!(canUseReference&(part.v!=null&&refernceCommand!=null&&Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(Kusto.Data.IntelliSense.CslCommandToken,refernceCommand.CommandParts)&&Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$1(Kusto.Data.IntelliSense.CslCommand.AddEntitiesTokensState,refernceCommand.m_commandPartsParseStates)&&System.Linq.Enumerable.from(refernceCommand.m_commandPartsParseStates,Kusto.Data.IntelliSense.CslCommand.AddEntitiesTokensState).count()>i&&System.Linq.Enumerable.from(refernceCommand.CommandParts,Kusto.Data.IntelliSense.CslCommandToken).count()>i&&System.String.equals(part.v.Text,System.Linq.Enumerable.from(refernceCommand.CommandParts,Kusto.Data.IntelliSense.CslCommandToken).elementAt(i).Value))),canUseReference){var referencePart=System.Linq.Enumerable.from(refernceCommand.CommandParts,Kusto.Data.IntelliSense.CslCommandToken).elementAt(i),offset={v:part.v.Start-referencePart.RelativeStart|0},capturedTokens=System.Linq.Enumerable.from(refernceCommand.Tokens,Kusto.Data.IntelliSense.CslCommandToken).where(function($me,part){return function(t){return(t.TokenKind===Kusto.Data.IntelliSense.CslCommandToken.Kind.CalculatedColumnToken||t.TokenKind===Kusto.Data.IntelliSense.CslCommandToken.Kind.TableColumnToken||t.TokenKind===Kusto.Data.IntelliSense.CslCommandToken.Kind.TableToken||t.TokenKind===Kusto.Data.IntelliSense.CslCommandToken.Kind.LetVariablesToken)&&t.RelativeStart>=part.v.Start&&t.RelativeEnd<=part.v.End}}(this,part)).select(function($me,offset){return function(t){var clonedToken=Bridge.as(t.clone(),Kusto.Data.IntelliSense.CslCommandToken);return clonedToken.RelativeStart=clonedToken.RelativeStart+offset.v|0,clonedToken}}(this,offset)).ToArray(Kusto.Data.IntelliSense.CslCommandToken);tokens.AddRange(capturedTokens);recognizedTokens.AddRange(indexer.GetTokenPositionsInRange(System.Linq.Enumerable.from(capturedTokens,Kusto.Data.IntelliSense.CslCommandToken).select($asm.$.Kusto.Data.IntelliSense.CslCommand.f13),part.v.Start,part.v.End));this.AddLetStatementTokens(tokens,recognizedTokens,indexer,letVariables,part.v);state=refernceCommand.m_commandPartsParseStates.getItem(i).Clone();this.m_commandPartsParseStates.add(state);continue}if(part.v!=null&&this.AddLetStatementTokens(tokens,recognizedTokens,indexer,letVariables,part.v),analyzedCommand==null?(command=commandBuilder.toString(),analyzedCommand=rulesProvider.AnalyzeCommand$1(command,refernceCommand)):part.v!=null&&(analyzedCommand=rulesProvider.AnalyzeCommand(analyzedCommand,part.v.Text)),tableContext=analyzedCommand.Context,!tableContext.IsEmpty()){var operatorContext=Kusto.Data.IntelliSense.CslCommand.ResolveOperatorContext(part.v),knownEntities={},originallyKnownEntities={},wasFullyResolved=Kusto.Data.IntelliSense.CslCommand.GetKnownEntities(rulesProvider,state.MapOfKnownEntities,state.MapOfOriginallyKnownEntities,part.v,commandBuilder,tableContext,operatorContext,knownEntities,originallyKnownEntities);if(part.v!=null&&(rulesProvider.ResolveKnownEntitiesFromContext(tableContext),calculatedColumns=System.Linq.Enumerable.from(knownEntities.v,System.String).except(originallyKnownEntities.v),availableTableColumns=System.Linq.Enumerable.from(originallyKnownEntities.v,System.String).intersect(knownEntities.v),this.AddCategorizedTokens(tokens,recognizedTokens,indexer.GetTokenPositionsInRange(availableTableColumns,part.v.Start,part.v.End),Kusto.Data.IntelliSense.CslCommandToken.Kind.TableColumnToken),this.AddCategorizedTokens(tokens,recognizedTokens,indexer.GetTokenPositionsInRange(calculatedColumns,part.v.Start,part.v.End),Kusto.Data.IntelliSense.CslCommandToken.Kind.CalculatedColumnToken),this.AddCategorizedTokens(tokens,recognizedTokens,indexer.GetTokenPositionsInRange(rulesProvider.RemoteTableNames,part.v.Start,part.v.End),Kusto.Data.IntelliSense.CslCommandToken.Kind.TableToken)),!wasFullyResolved&&part.v!=null){newCalculatedColumns=new(System.Collections.Generic.List$1(System.String).ctor);result=rulesProvider.ResolveEntitiesFromCommand((part.v.Text||"")+" | ",newCalculatedColumns,knownEntities.v);switch(result){case Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.ReplaceEntities:knownEntities.v=newCalculatedColumns;break;case Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.None:break;case Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.AppendEntities:knownEntities.v=System.Linq.Enumerable.from(knownEntities.v,System.String).union(newCalculatedColumns).toList(System.String);break}}state.MapOfKnownEntities.setItem(tableContext,knownEntities.v);prevPart!=null&&Kusto.Data.IntelliSense.CslCommand.IsMatchingRegex(prevPart.Text,Kusto.Data.IntelliSense.CslCommand.s_hasAssignmentOperationRegex)&&state.MapOfPreviousCalculatedEntities.containsKey(tableContext)&&(prevCalculatedColumns=state.MapOfPreviousCalculatedEntities.getItem(tableContext),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$1(System.String,prevCalculatedColumns)&&(calculatedColumnTokens=indexer.GetTokenPositionsInRange(prevCalculatedColumns,prevPart.Start,prevPart.End),System.Linq.Enumerable.from(calculatedColumnTokens,Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).any()&&this.AddCategorizedTokens(tokens,recognizedTokens,calculatedColumnTokens,Kusto.Data.IntelliSense.CslCommandToken.Kind.CalculatedColumnToken)));state.MapOfPreviousCalculatedEntities.setItem(tableContext,System.Linq.Enumerable.from(knownEntities.v,System.String).except(originallyKnownEntities.v).toList(System.String));this.m_commandPartsParseStates.add(state)}}},AddLetStatementTokens:function(tokens,recognizedTokens,indexer,letVariables,part){var letVariable=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveLetVariable(part.Text);System.String.isNullOrEmpty(letVariable)||letVariables.add(letVariable);letVariables.Count>0&&this.AddCategorizedTokens(tokens,recognizedTokens,indexer.GetTokenPositionsInRange(letVariables,part.Start,part.End),Kusto.Data.IntelliSense.CslCommandToken.Kind.LetVariablesToken)},AddCategorizedTokens:function(target,recognizedTokenList,textTokens,tokenKind){recognizedTokenList!=null&&recognizedTokenList.AddRange(textTokens);target.AddRange(System.Linq.Enumerable.from(textTokens,Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).select(Bridge.fn.bind(this,function(t){var $t;return $t=new Kusto.Data.IntelliSense.CslCommandToken(t.Text,this.RelativeStart,tokenKind),$t.Length=t.Length,$t.RelativeStart=t.Start,$t})))},EnsureAllTextIsAnnotated:function(indexer,tokens,recognizedTokens){var start,tokensCount,i,token,newTokenLen,tokenText,tokenText1;if(tokens!=null){for(this.AddUnrecognizedTokens(indexer,tokens,recognizedTokens),tokens.Sort$2($asm.$.Kusto.Data.IntelliSense.CslCommand.f12),start=0,tokensCount=tokens.Count,i=0;i<tokensCount;i=i+1|0)token=tokens.getItem(i),start<token.RelativeStart&&(newTokenLen=token.RelativeStart-start|0,newTokenLen>0&&(tokenText=this.Text.substr(start,newTokenLen),this.AddPlainOrUnrecognizedTokens(tokens,start,tokenText))),start=token.RelativeEnd;start<this.Length&&(tokenText1=this.Text.substr(start,this.Length-start|0),this.AddPlainOrUnrecognizedTokens(tokens,start,tokenText1))}},AddUnrecognizedTokens:function(indexer,tokens,recognizedTokens){var $t,unrecognizedTokens=indexer.GetUnrecognizedTokenPositions(recognizedTokens),t;$t=Bridge.getEnumerator(unrecognizedTokens,Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition);try{while($t.moveNext())t=$t.Current,this.AddPlainOrUnrecognizedTokens(tokens,t.Start,t.Text)}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}},AddPlainOrUnrecognizedTokens:function(tokens,tokenStart,text){for(var prefixText,prefixToken,suffixText,suffixToken,$t,chars=System.String.toCharArray(text,0,text.length),startTextIndex=-1,endTextIndex=chars.length,i=0;i<chars.length;i=i+1|0)System.Char.isWhiteSpace(String.fromCharCode(chars[System.Array.index(i,chars)]))||(endTextIndex=i+1|0,startTextIndex=startTextIndex>=0?startTextIndex:i);startTextIndex>0?(prefixText=text.substr(0,startTextIndex),prefixToken=($t=new Kusto.Data.IntelliSense.CslCommandToken(prefixText,this.RelativeStart,Kusto.Data.IntelliSense.CslCommandToken.Kind.PlainTextToken),$t.Length=startTextIndex,$t.RelativeStart=tokenStart,$t),tokens.add(prefixToken)):startTextIndex=0;var tokenText=text.substr(startTextIndex,endTextIndex-startTextIndex|0),tokenKind=Kusto.Data.IntelliSense.CslCommand.StartsWithAlpha(tokenText)?Kusto.Data.IntelliSense.CslCommandToken.Kind.UnknownToken:Kusto.Data.IntelliSense.CslCommandToken.Kind.PlainTextToken,token=($t=new Kusto.Data.IntelliSense.CslCommandToken(tokenText,this.RelativeStart,tokenKind),$t.Length=tokenText.length,$t.RelativeStart=tokenStart+startTextIndex|0,$t);tokens.add(token);endTextIndex<chars.length&&(suffixText=text.substr(endTextIndex,chars.length-endTextIndex|0),suffixToken=($t=new Kusto.Data.IntelliSense.CslCommandToken(suffixText,this.RelativeStart,Kusto.Data.IntelliSense.CslCommandToken.Kind.PlainTextToken),$t.Length=suffixText.length,$t.RelativeStart=tokenStart+endTextIndex|0,$t),tokens.add(suffixToken))}}});Bridge.ns("Kusto.Data.IntelliSense.CslCommand",$asm.$);Bridge.apply($asm.$.Kusto.Data.IntelliSense.CslCommand,{f1:function(_o1){return _o1.add("distinct"),_o1.add("extend"),_o1.add("project"),_o1.add("project-rename"),_o1.add("mvexpand"),_o1.add("mv-expand"),_o1.add("where"),_o1.add("filter"),_o1.add("parse"),_o1.add("limit"),_o1.add("count"),_o1.add("order"),_o1.add("sort"),_o1.add("reduce"),_o1.add("take"),_o1.add("summarize"),_o1.add("top"),_o1.add("top-nested"),_o1.add("top-hitters"),_o1.add("render"),_o1.add("fork"),_o1.add("find"),_o1.add("sample"),_o1.add("sample-distinct"),_o1.add("search"),_o1.add("make-series"),_o1},f2:function(c){return c.m_tokens},f3:function(c){return c.m_commandParts},f4:function(c){return c.m_commentsParts},f5:function(c){return c.m_clientDirectivesParts},f6:function(c){return c.m_bracketParts},f7:function(c){return c.Text},f8:function(c){return c.IsRunnable},f9:function(p){return p.AbsoluteStart},f10:function(p){return p.RelativeStart},f11:function(t){var token=Bridge.as(t.clone(),Kusto.Data.IntelliSense.CslCommandToken);return token.AbsolutePositionBias=this.RelativeStart,token},f12:function(x,y){return x.CompareTo(y)},f13:function(ct){return ct.Value}});Bridge.define("Kusto.Data.IntelliSense.CslCommand.AddEntitiesTokensState",{$kind:"nested class",fields:{MapOfKnownEntities:null,MapOfPreviousCalculatedEntities:null,MapOfOriginallyKnownEntities:null},ctors:{init:function(){this.MapOfKnownEntities=new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).ctor);this.MapOfPreviousCalculatedEntities=new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).ctor);this.MapOfOriginallyKnownEntities=new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).ctor)}},methods:{Clone:function(){var $t;return $t=new Kusto.Data.IntelliSense.CslCommand.AddEntitiesTokensState,$t.MapOfKnownEntities=new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).$ctor1)(this.MapOfKnownEntities),$t.MapOfOriginallyKnownEntities=new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).$ctor1)(this.MapOfOriginallyKnownEntities),$t.MapOfPreviousCalculatedEntities=new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).$ctor1)(this.MapOfPreviousCalculatedEntities),$t}}});Bridge.define("Kusto.Data.IntelliSense.CslCommand.FormatTraits",{$kind:"nested enum",statics:{fields:{None:0,IncludeComments:1,TabulateOnJoins:2,TabulateOnFunctionBoundaries:4}},$flags:!0});Bridge.define("Kusto.Data.IntelliSense.CslCommand.PrivateTracer",{$kind:"nested class",statics:{fields:{Tracer:null},ctors:{init:function(){this.Tracer=new Kusto.Data.IntelliSense.CslCommand.PrivateTracer}}},methods:{TraceVerbose:function(format,list){list===void 0&&(list=[])}}});Bridge.define("Kusto.Data.IntelliSense.CslCommandIndexer",{statics:{fields:{MultiLineRegexOptions:0,SingleLineRegexOptions:0,s_defaultCommentRegex:null,s_defaultClientDirectivesRegex:null,s_defaultStringLiteralsRegex:null,s_defaultQueryParametersRegex:null,s_matchingBrackets:null},ctors:{init:function(){this.MultiLineRegexOptions=2;this.SingleLineRegexOptions=16;this.s_defaultCommentRegex=new System.Text.RegularExpressions.Regex.ctor("(^\\s*//.*?(\\n|$))",Kusto.Data.IntelliSense.CslCommandIndexer.MultiLineRegexOptions);this.s_defaultClientDirectivesRegex=new System.Text.RegularExpressions.Regex.ctor("(^\\s*#.*?(\\n|$))",Kusto.Data.IntelliSense.CslCommandIndexer.MultiLineRegexOptions);this.s_defaultStringLiteralsRegex=new System.Text.RegularExpressions.Regex.ctor("(@?'.*?\\'|@?\\\".*?\\\")",Kusto.Data.IntelliSense.CslCommandIndexer.MultiLineRegexOptions);this.s_defaultQueryParametersRegex=new System.Text.RegularExpressions.Regex.ctor("\\{([a-zA-Z]\\w+?)\\}",Kusto.Data.IntelliSense.CslCommandIndexer.MultiLineRegexOptions);this.s_matchingBrackets=$asm.$.Kusto.Data.IntelliSense.CslCommandIndexer.f1(new(System.Collections.Generic.Dictionary$2(System.Char,System.Char).ctor))}},methods:{AddToCollection:function(text,chars,tokenStart,scanStart,target){var $t,endOfArray={},terminators=System.Array.init([10,13],System.Char),token=($t=new Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition,$t.Start=tokenStart,$t.End=Kusto.Data.IntelliSense.CslCommandIndexer.ReadTill(chars,scanStart+1|0,terminators,null,endOfArray),$t),len;return token.End>token.Start&&(endOfArray.v&&(token.End=token.End-1|0),len=(token.End-token.Start|0)+1|0,token.Text=text.substr(token.Start,len),target.add(token)),token.End},ReadTill:function(chars,i,terminators,escaping,endOfArray){endOfArray.v=!0;for(var foundTerminators=new(System.Collections.Generic.HashSet$1(System.Char).ctor);i<chars.length;i=i+1|0){if(System.Linq.Enumerable.from(foundTerminators,System.Char).any()){if(System.Array.contains(terminators,chars[System.Array.index(i,chars)],System.Char)&&!foundTerminators.contains(chars[System.Array.index(i,chars)])){foundTerminators.add(chars[System.Array.index(i,chars)]);continue}endOfArray.v=!1;i=i-1|0;break}if(System.Array.contains(terminators,chars[System.Array.index(i,chars)],System.Char)){foundTerminators.add(chars[System.Array.index(i,chars)]);continue}escaping!=null&&System.Linq.Enumerable.from(escaping,System.Char).any(function(t){return chars[System.Array.index(i,chars)]===t})&&(i=i+1|0)}return i>chars.length?chars.length:i},ReadVerbatimTill:function(chars,i,terminators,endOfArray){endOfArray.v=!0;for(var escapeSequence=0;i<chars.length;i=i+1|0)if(System.Array.contains(terminators,chars[System.Array.index(i,chars)],System.Char)&&(escapeSequence=escapeSequence+1|0,escapeSequence%2!=0&&i<(chars.length-1|0)&&!System.Array.contains(terminators,chars[System.Array.index(i+1|0,chars)],System.Char))){endOfArray.v=!1;break}return i},CaptureTokensUsingRegex:function(text,regexList,tokenList){var $t,$t1,$t2,$t3,commentRegex,matches,m,c,token;if(!Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$1(System.Text.RegularExpressions.Regex,regexList)){$t=Bridge.getEnumerator(regexList);try{while($t.moveNext()){commentRegex=$t.Current;matches=commentRegex.matches(text);$t1=Bridge.getEnumerator(matches);try{while($t1.moveNext()){m=Bridge.cast($t1.Current,System.Text.RegularExpressions.Match);$t2=Bridge.getEnumerator(m.getCaptures());try{while($t2.moveNext())c=Bridge.cast($t2.Current,System.Text.RegularExpressions.Capture),token=($t3=new Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition,$t3.Start=c.getIndex(),$t3.End=(c.getIndex()+c.getLength()|0)-1|0,$t3.Text=c.getValue(),$t3),tokenList.add(token)}finally{Bridge.is($t2,System.IDisposable)&&$t2.System$IDisposable$Dispose()}}}finally{Bridge.is($t1,System.IDisposable)&&$t1.System$IDisposable$Dispose()}}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}}}}},fields:{m_tokensAndPositions:null,m_commentTokenPositions:null,m_clientDirectivesTokenPositions:null,m_stringLiteralsPositions:null,m_queryParametersPositions:null,m_commandPartsPositions:null,m_bracketPartsPositions:null,m_sourceText:null,m_commentRegexCollection:null,m_clientDirectivesRegexCollection:null,m_stringLiteralsRegexCollection:null,m_queryParametersRegexCollection:null},props:{AntiTokenizers:null,TokenTerminators:null,TokenStarters:null},ctors:{init:function(){this.m_tokensAndPositions=new(System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition)).ctor);this.m_commentTokenPositions=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).ctor);this.m_clientDirectivesTokenPositions=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).ctor);this.m_stringLiteralsPositions=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).ctor);this.m_queryParametersPositions=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).ctor);this.m_commandPartsPositions=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).ctor);this.m_bracketPartsPositions=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).ctor);this.m_commentRegexCollection=new(System.Collections.Generic.List$1(System.Text.RegularExpressions.Regex).ctor);this.m_clientDirectivesRegexCollection=new(System.Collections.Generic.List$1(System.Text.RegularExpressions.Regex).ctor);this.m_stringLiteralsRegexCollection=new(System.Collections.Generic.List$1(System.Text.RegularExpressions.Regex).ctor);this.m_queryParametersRegexCollection=new(System.Collections.Generic.List$1(System.Text.RegularExpressions.Regex).ctor)},ctor:function(indexQueryParameters){this.$initialize();this.m_commentRegexCollection.add(Kusto.Data.IntelliSense.CslCommandIndexer.s_defaultCommentRegex);this.m_clientDirectivesRegexCollection.add(Kusto.Data.IntelliSense.CslCommandIndexer.s_defaultClientDirectivesRegex);this.m_stringLiteralsRegexCollection.add(Kusto.Data.IntelliSense.CslCommandIndexer.s_defaultStringLiteralsRegex);indexQueryParameters&&this.m_queryParametersRegexCollection.add(Kusto.Data.IntelliSense.CslCommandIndexer.s_defaultQueryParametersRegex)}},methods:{IndexText:function(text){var $t,chars,i,len,partText,bracketItem,bracketToken,isTokenEnd;this.m_tokensAndPositions.clear();this.m_sourceText=text;chars=System.String.toCharArray(text,0,text.length);this.DetectCommentsAndStringLiterals(text);var skipRanges=this.GetTokenLookupSkipRanges(text.length),tokenLookupState=Kusto.Data.IntelliSense.CslCommandIndexer.State.LookingForTokenStart,tokenBuilder=null,tokenPosition=null,commandPartPosition=null,bracketsStack=new(System.Collections.Generic.Stack$1(System.Tuple$2(System.Char,System.Int32)).ctor);for(i=0;i<chars.length;i=i+1|0){var isInsideTokenLookupSkipRange=skipRanges[System.Array.index(i,skipRanges)],isInsideCommentRange=System.Linq.Enumerable.from(this.m_commentTokenPositions,Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).where(function(r){return i>=r.Start&&i<=r.End}).any(),c=chars[System.Array.index(i,chars)],isAfterWhiteSpace=i===0||System.Char.isWhiteSpace(String.fromCharCode(chars[System.Array.index(i-1|0,chars)])),canStartNewPart=!0;commandPartPosition!=null&&((c===124||c===59)&&!isInsideTokenLookupSkipRange||isInsideCommentRange||i===(chars.length-1|0))&&(i===(chars.length-1|0)||c===59?(commandPartPosition.End=i,canStartNewPart=!1):commandPartPosition.End=i-1|0,len=(commandPartPosition.End-commandPartPosition.Start|0)+1|0,len>1&&(partText=text.substr(commandPartPosition.Start,len),commandPartPosition.Text=partText,System.String.equals(partText,"\n")||System.String.isNullOrWhiteSpace(partText)||this.m_commandPartsPositions.add(commandPartPosition)),commandPartPosition=null);commandPartPosition==null&&!isInsideCommentRange&&canStartNewPart&&(commandPartPosition=($t=new Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition,$t.Start=i,$t.End=i,$t));isInsideTokenLookupSkipRange||System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslCommandIndexer.s_matchingBrackets.Keys,System.Char).contains(c)&&(System.Linq.Enumerable.from(bracketsStack,System.Tuple$2(System.Char,System.Int32)).any()&&bracketsStack.Peek().Item1===c?(bracketItem=bracketsStack.Pop(),bracketToken=($t=new Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition,$t.Start=bracketItem.Item2,$t.End=i,$t),bracketToken.Text=text.substr(bracketToken.Start,(bracketToken.End-bracketToken.Start|0)+1|0),this.m_bracketPartsPositions.add(bracketToken)):bracketsStack.Push({Item1:Kusto.Data.IntelliSense.CslCommandIndexer.s_matchingBrackets.getItem(c),Item2:i}));switch(tokenLookupState){case Kusto.Data.IntelliSense.CslCommandIndexer.State.LookingForTokenStart:!isInsideTokenLookupSkipRange&&(this.IsPartOfTheToken(c)&&!this.IsTokenTerminator(c)||isAfterWhiteSpace&&this.IsTokenStarter(c))&&(tokenBuilder=new System.Text.StringBuilder,tokenPosition=($t=new Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition,$t.Start=i,$t.End=i,$t),tokenBuilder.append(String.fromCharCode(c)),tokenLookupState=Kusto.Data.IntelliSense.CslCommandIndexer.State.LookingForTokenEnd);break;case Kusto.Data.IntelliSense.CslCommandIndexer.State.LookingForTokenEnd:isTokenEnd=!1;!isInsideTokenLookupSkipRange&&this.IsPartOfTheToken(c)?this.IsTokenTerminator(c)?(tokenPosition.TokenTerminator=c,isTokenEnd=!0):(tokenBuilder.append(String.fromCharCode(c)),tokenPosition.End=i):isTokenEnd=!0;(isTokenEnd||i===(chars.length-1|0))&&(tokenPosition.Text=tokenBuilder.toString(),this.AddTokenPosition(tokenPosition),tokenLookupState=Kusto.Data.IntelliSense.CslCommandIndexer.State.LookingForTokenStart);break}}},GetTokenLookupSkipRanges:function(size){var ranges=new(System.Collections.Generic.List$1(System.Tuple$2(System.Int32,System.Int32)).ctor),i;ranges.AddRange(System.Linq.Enumerable.from(this.m_stringLiteralsPositions,Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).select($asm.$.Kusto.Data.IntelliSense.CslCommandIndexer.f2));ranges.AddRange(System.Linq.Enumerable.from(this.m_commentTokenPositions,Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).select($asm.$.Kusto.Data.IntelliSense.CslCommandIndexer.f2));ranges.AddRange(System.Linq.Enumerable.from(this.m_clientDirectivesTokenPositions,Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).select($asm.$.Kusto.Data.IntelliSense.CslCommandIndexer.f2));ranges.AddRange(System.Linq.Enumerable.from(this.m_queryParametersPositions,Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).select($asm.$.Kusto.Data.IntelliSense.CslCommandIndexer.f2));ranges.Sort$2($asm.$.Kusto.Data.IntelliSense.CslCommandIndexer.f3);var rIndex=0,currentSkipRange=System.Linq.Enumerable.from(ranges,System.Tuple$2(System.Int32,System.Int32)).firstOrDefault(null,null),result=System.Array.init(size,!1,System.Boolean);for(i=0;i<size&&currentSkipRange!=null;i=i+1|0)i>=currentSkipRange.Item1&&(result[System.Array.index(i,result)]=!0),currentSkipRange.Item2===i&&(currentSkipRange=System.Linq.Enumerable.from(ranges,System.Tuple$2(System.Int32,System.Int32)).elementAtOrDefault(rIndex=rIndex+1|0,null));return result},GetCommandPartsPositions:function(){return this.m_commandPartsPositions},GetCommentsPositions:function(){return this.m_commentTokenPositions},GetClientDirectivesPositions:function(){return this.m_clientDirectivesTokenPositions},GetStringLiteralsPositions:function(){return this.m_stringLiteralsPositions},GetQueryParametersPositions:function(){return this.m_queryParametersPositions},GetBracketsPositions:function(){return this.m_bracketPartsPositions},GetUnrecognizedTokenPositions:function(recognizedTokens){return System.Linq.Enumerable.from(this.m_tokensAndPositions.Values,System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition)).selectMany($asm.$.Kusto.Data.IntelliSense.CslCommandIndexer.f4).except(recognizedTokens)},GetTokenPositionsInRange:function(searchForTokens,rangeStart,rangeEnd){var $t,result=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).ctor),token,tokensInRange;if(Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(System.String,searchForTokens))return result;$t=Bridge.getEnumerator(searchForTokens,System.String);try{while($t.moveNext())(token=$t.Current,System.String.isNullOrEmpty(token))||this.m_tokensAndPositions.containsKey(token)&&(tokensInRange=System.Linq.Enumerable.from(this.m_tokensAndPositions.getItem(token),Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).where(function(t){return t.Start>=rangeStart&&t.End<=rangeEnd}),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition,tokensInRange)&&result.AddRange(tokensInRange))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return result},GetAllTokensSortedByPosition:function(){return Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$1(System.Collections.Generic.KeyValuePair$2(System.String,System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition)),this.m_tokensAndPositions)?null:System.Linq.Enumerable.from(this.m_tokensAndPositions,System.Collections.Generic.KeyValuePair$2(System.String,System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition))).selectMany($asm.$.Kusto.Data.IntelliSense.CslCommandIndexer.f5).orderBy($asm.$.Kusto.Data.IntelliSense.CslCommandIndexer.f6)},GetAllTokenPositions:function(tokens,tokenSuffix){var $t,result,token;if(tokenSuffix===void 0&&(tokenSuffix=0),result=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).ctor),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(System.String,tokens))return result;$t=Bridge.getEnumerator(tokens,System.String);try{while($t.moveNext())token=$t.Current,this.m_tokensAndPositions.containsKey(token)&&result.AddRange(System.Linq.Enumerable.from(this.m_tokensAndPositions.getItem(token),Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).where(function(t){return t.TokenTerminator===tokenSuffix}))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return result},IsPartOfTheToken:function(c){return System.Char.isDigit(c)||System.Char.isLetter(c)||this.AntiTokenizers!=null&&this.AntiTokenizers.contains(c)},IsTokenTerminator:function(c){return this.TokenTerminators!=null&&this.TokenTerminators.contains(c)},IsTokenStarter:function(c){return this.TokenStarters!=null&&System.Array.contains(this.TokenStarters,c,System.Char)},DetectCommentsAndStringLiterals:function(text){Kusto.Data.IntelliSense.CslCommandIndexer.CaptureTokensUsingRegex(text,this.m_queryParametersRegexCollection,this.m_queryParametersPositions);Kusto.Cloud.Platform.Utils.ExtendedEnumerable.None(Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition,this.m_queryParametersPositions)?this.DetectCommentsAndStringLiterals_Simple(text):this.DetectCommentsAndStringLiterals_Complex(text)},DetectCommentsAndStringLiterals_Simple:function(text){for(var ch,chars=System.String.toCharArray(text,0,text.length),state=0,i=0;i<chars.length;i=i+1|0){ch=chars[System.Array.index(i,chars)];switch(state){case 0:ch===64?state=1:ch===39||ch===34?i=this.AddStringLiteralToken(text,chars,i,i,ch,!1):ch===47?state=2:ch===35&&(i=this.AddClientDirectiveToken(text,chars,i,i),state=0);break;case 1:(ch===39||ch===34)&&(i=this.AddStringLiteralToken(text,chars,i-1|0,i,ch,!0));state=0;break;case 2:ch===47&&(i=this.AddCommentToken(text,chars,i-1|0,i));state=0;break}}},AddCommentToken:function(text,chars,tokenStart,scanStart){return Kusto.Data.IntelliSense.CslCommandIndexer.AddToCollection(text,chars,tokenStart,scanStart,this.m_commentTokenPositions)},AddClientDirectiveToken:function(text,chars,tokenStart,scanStart){return Kusto.Data.IntelliSense.CslCommandIndexer.AddToCollection(text,chars,tokenStart,scanStart,this.m_clientDirectivesTokenPositions)},AddStringLiteralToken:function(text,chars,start,position,ch,ifVerbatim){var $t,endOfArray={},token=($t=new Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition,$t.Start=start,$t.End=ifVerbatim?Kusto.Data.IntelliSense.CslCommandIndexer.ReadVerbatimTill(chars,position+1|0,System.Array.init([ch],System.Char),endOfArray):Kusto.Data.IntelliSense.CslCommandIndexer.ReadTill(chars,position+1|0,System.Array.init([ch],System.Char),System.Array.init([92],System.Char),endOfArray),$t),len;return token.End>token.Start&&(endOfArray.v&&(token.End=token.End-1|0),len=(token.End-token.Start|0)+1|0,token.Text=text.substr(token.Start,len),this.m_stringLiteralsPositions.add(token)),token.End},DetectCommentsAndStringLiterals_Complex:function(text){var $t,i,slp,i1,slp1,i2,qpp,slp2,newSlp;for(Kusto.Data.IntelliSense.CslCommandIndexer.CaptureTokensUsingRegex(text,this.m_commentRegexCollection,this.m_commentTokenPositions),Kusto.Data.IntelliSense.CslCommandIndexer.CaptureTokensUsingRegex(text,this.m_clientDirectivesRegexCollection,this.m_clientDirectivesTokenPositions),i=this.m_queryParametersPositions.Count-1|0;i>=0;i=i-1|0)slp={v:this.m_queryParametersPositions.getItem(i)},System.Linq.Enumerable.from(this.m_commentTokenPositions,Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).where(function($me,slp){return function(comment){return comment.Start<=slp.v.Start&&comment.End>=slp.v.End}}(this,slp)).any()&&this.m_queryParametersPositions.removeAt(i);for(Kusto.Data.IntelliSense.CslCommandIndexer.CaptureTokensUsingRegex(text,this.m_stringLiteralsRegexCollection,this.m_stringLiteralsPositions),i1=this.m_stringLiteralsPositions.Count-1|0;i1>=0;i1=i1-1|0)slp1={v:this.m_stringLiteralsPositions.getItem(i1)},System.Linq.Enumerable.from(this.m_commentTokenPositions,Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).where(function($me,slp1){return function(comment){return comment.Start<=slp1.v.Start&&comment.End>=slp1.v.End}}(this,slp1)).any()&&this.m_stringLiteralsPositions.removeAt(i1);for(i2=this.m_queryParametersPositions.Count-1|0;i2>=0;i2=i2-1|0)qpp={v:this.m_queryParametersPositions.getItem(i2)},slp2=System.Linq.Enumerable.from(this.m_stringLiteralsPositions,Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).where(function($me,qpp){return function(s){return s.Start<=qpp.v.Start&&s.End>=qpp.v.End}}(this,qpp)).firstOrDefault(null,null),slp2!=null&&(newSlp=($t=new Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition,$t.Start=qpp.v.End+1|0,$t.End=slp2.End,$t.Text=slp2.Text.substr((qpp.v.End-slp2.Start|0)+1|0),$t),slp2.End=qpp.v.Start-1|0,slp2.Text=slp2.Text.substr(0,slp2.Length),this.m_stringLiteralsPositions.add(newSlp))},AddTokenPosition:function(tokenPosition){this.m_tokensAndPositions.containsKey(tokenPosition.Text)||this.m_tokensAndPositions.add(tokenPosition.Text,new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).ctor));this.m_tokensAndPositions.getItem(tokenPosition.Text).add(tokenPosition)}}});Bridge.ns("Kusto.Data.IntelliSense.CslCommandIndexer",$asm.$);Bridge.apply($asm.$.Kusto.Data.IntelliSense.CslCommandIndexer,{f1:function(_o1){return _o1.add(40,41),_o1.add(41,40),_o1.add(91,93),_o1.add(93,91),_o1.add(123,125),_o1.add(125,123),_o1},f2:function(p){return{Item1:p.Start,Item2:p.End}},f3:function(r1,r2){return Bridge.compare(r1.Item1,r2.Item1)},f4:function(t){return t},f5:function(kvp){return kvp.value},f6:function(t){return t.Start}});Bridge.define("Kusto.Data.IntelliSense.CslCommandIndexer.State",{$kind:"nested enum",statics:{fields:{LookingForTokenStart:0,LookingForTokenEnd:1,InsideComment:2,InsideStringLiteral:3}}});Bridge.define("Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition",{$kind:"nested class",props:{Text:null,Start:0,End:0,TokenTerminator:0,Length:{get:function(){return(this.End-this.Start|0)+1|0}}},ctors:{ctor:function(){this.$initialize();this.TokenTerminator=0}}});Bridge.define("Kusto.Data.IntelliSense.CslCommandParser",{statics:{fields:{ControlCommandsTokens:null,CslCommandsTokens:null,ChartRenderTypesTokens:null,ChartRenderKindTokens:null,SubOperatorsTokens:null,JoinKindTokens:null,ReduceByKindTokens:null,DataTypesTokens:null,ScalarFunctionsDateTimeTokens:null,ScalarFunctionsNoDateTimeTokens:null,SingleParameterFunctionsDateTimeTokens:null,ZeroParameterFunctionsNoDateTimeTokens:null,SingleParameterFunctionsNoDateTimeTokens:null,IntrinsicFunctionTokens:null,TwoParameterFunctionsTokens:null,ThreeParameterFunctionsTokens:null,ManyParametersFunctionsTokens:null,PromotedOperatorCommandTokens:null,ClientDirectiveTokens:null,OperatorCommandTokens:null,DataOperatorTokens:null,SummarizeAggregationSingleParameterTokens:null,SummarizeAggregationTwoParametersTokens:null,SummarizeAggregationThreeParametersTokens:null,SummarizeAggregationManyParametersTokens:null,MakeSeriesAggregationTokens:null,PluginTokens:null,DatetimeFunctionsTokens:null,ScalarFunctionsTokens:null,SingleParameterFunctionsTokens:null,SummarizeAggregationTokens:null,SummarizeAggregationAliasesTokens:null,SortedSummarizeAggregators:null,SortedMakeSeriesAggregationTokens:null,SortedDatetimeFunctions:null,SortedExtendFunctions:null,FunctionsTokens:null,SortedEvaluateFunctions:null,s_asyncSeeker:null,s_isCommentLineRegex:null},ctors:{init:function(){this.ControlCommandsTokens=System.Array.init([".add",".alter",".alter-merge",".attach",".append",".create",".create-merge",".create-set",".create-or-alter",".define",".detach",".delete",".drop",".drop-pretend",".dup-next-ingest",".dup-next-failed-ingest",".ingest",".export",".load",".move",".purge",".purge-cleanup",".remove",".replace",".save",".set",".set-or-append",".set-or-replace",".show",".rename",".run","async","data","into","ifnotexists","whatif","compressed","monitoring","metadata","folder","docstring","details","hot","records","until","as","csv","tsv","json","sql","policy","encoding","retention","merge","policies","update","ingestiontime","caching","querythrottling","sharding","callout","querylimit","restricted_view_access","ingestionbatching","query_weak_consistency","partitioning","softdelete","harddelete","rowstore","rowstores","seal","writeaheadlog","streamingingestion","rowstore_references","follower"],System.String);this.CslCommandsTokens=System.Array.init(["set","let","restrict","access","alias","pattern","declare","query_parameters"],System.String);this.ChartRenderTypesTokens=System.Linq.Enumerable.from(System.Array.init(["columnchart","barchart","piechart","timechart","anomalychart","linechart","ladderchart","pivotchart","areachart","stackedareachart","scatterchart","timepivot","timeline","card","table","list"],System.String),System.String).orderBy($asm.$.Kusto.Data.IntelliSense.CslCommandParser.f1).ToArray(System.String);this.ChartRenderKindTokens=System.Array.init(["default","stacked","stacked100","unstacked","map"],System.String);this.SubOperatorsTokens=System.Linq.Enumerable.from(System.Array.init(["like","notlike","contains","notcontains","!contains","contains_cs","!contains_cs","startswith","!startswith","has","!has","has_cs","!has_cs","hasprefix","!hasprefix","hassuffix","!hassuffix","matches","regex","in","!in","endswith","!endswith","between","!between","extent","database","diagnostics","jitmanagers","admins","basicauth","cache","capacity","cluster","continuous-export","continuous-exports","databases","extents","external","journal","memory","extentcontainers","viewers","unrestrictedviewers","tags","prettyname","blockedprincipals","failed","operations","password","principal","principals","settings","schema","table","tables","user","users","ingestors","monitors","version","roles","fabric","locks","service","services","nodes","unallocated","subscriptions","nonregistered","packages","configuration","commands","commands-and-queries","queries","query","function","functions","by","on","of","true","false","and","or","asc","desc","nulls","last","first","with","withsource","kind","flags","from","to","step","ingestion","failures","mapping","mappings","geneva","eventhub","source","sources","types","application","period","reason","title"],System.String),System.String).union(Kusto.Data.IntelliSense.CslCommandParser.ChartRenderTypesTokens).union(Kusto.Data.IntelliSense.CslCommandParser.ChartRenderKindTokens).distinct().ToArray(System.String);this.JoinKindTokens=System.Array.init(["anti","inner","innerunique","fullouter","leftanti","leftantisemi","leftouter","leftsemi","rightanti","rightantisemi","rightsemi","rightouter"],System.String);this.ReduceByKindTokens=System.Array.init(["mining"],System.String);this.DataTypesTokens=System.Array.init(["timespan","datetime","int","long","real","string","bool","double","dynamic","decimal","guid"],System.String);this.ScalarFunctionsDateTimeTokens=System.Array.init(["now","ago","datetime","ingestion_time"],System.String);this.ScalarFunctionsNoDateTimeTokens=System.Array.init(["time","timespan","dynamic","decimal"],System.String);this.SingleParameterFunctionsDateTimeTokens=System.Array.init(["todatetime","between","!between"],System.String);this.ZeroParameterFunctionsNoDateTimeTokens=System.Array.init(["row_number","extent_id","extent_tags","pi","pack_all","rowstore_ordinal_range"],System.String);this.SingleParameterFunctionsNoDateTimeTokens=System.Array.init(["strlen","tostring","toupper","tolower","typeof","reverse","parsejson","parse_json","parse_xml","parse_csv","tobool","toboolean","todynamic","toobject","toint","tolong","toguid","todouble","toreal","totimespan","tohex","todecimal","isempty","isnotempty","isnull","isnotnull","isnan","isinf","isfinite","dayofweek","dayofmonth","dayofyear","week_of_year","monthofyear","sqrt","rand","log","log10","log2","exp","exp2","exp10","abs","degrees","radians","sign","sin","cos","tan","asin","acos","atan","cot","getmonth","getyear","array_length","gettype","bag_keys","cursor_after","gamma","loggamma","dcount_hll","parse_ipv4","parse_url","parse_path","parse_version","parse_urlquery","url_encode","url_decode","binary_not","not","toscalar","materialize","series_stats","series_fit_line","series_fit_2lines","series_stats_dynamic","series_fit_line_dynamic","series_fit_2lines_dynamic","base64_encodestring","base64_decodestring","hash_sha256","ceiling","string_size","isascii","isutf8","geo_geohash_to_central_point"],System.String);this.IntrinsicFunctionTokens=System.Array.init(["cluster","database","table"],System.String);this.TwoParameterFunctionsTokens=System.Array.init(["bin","columnifexists","floor","countof","hash","round","pow","binary_and","binary_or","binary_xor","binary_shift_left","binary_shift_right","datepart","datetime_part","repeat","series_seasonal","series_outliers","array_split","series_add","series_subtract","series_multiply","series_divide","series_pearson_correlation","series_greater","series_greater_equals","series_less","series_less_equals","series_equals","series_not_equals","rank_tdigest","percentrank_tdigest","trim","trim_start","trim_end","startofday","startofweek","startofmonth","startofyear","endofday","endofweek","endofmonth","endofyear","series_fill_backward","series_fill_forward","atan2","format_datetime","format_timespan","strrep","strcat_array","parse_user_agent","strcmp","row_cumsum"],System.String);this.ThreeParameterFunctionsTokens=System.Array.init(["iff","iif","range","replace","translate","series_iir","bin_at","series_fill_const","series_decompose","series_decompose_forecast","series_decompose_anomalies","datetime_diff","datetime_add","geo_point_to_geohash","geo_point_in_polygon"],System.String);this.ManyParametersFunctionsTokens=System.Array.init(["extract","extractjson","extractall","strcat","strcat_delim","substring","indexof","split","case","coalesce","max_of","min_of","percentile_tdigest","zip","pack","pack_dictionary","pack_array","array_concat","array_slice","welch_test","row_window_session","series_fir","series_periods_detect","prev","next","tdigest_merge","hll_merge","series_fill_linear","series_periods_validate","datatable","make_datetime","make_timespan","make_string","geo_distance_2points","geo_point_in_circle"],System.String);this.PromotedOperatorCommandTokens=System.Array.init(["where","count","extend","join","limit","order","project","project-away","project-rename","project-reorder","render","sort","summarize","distinct","take","top","top-nested","top-hitters","union","mv-expand","mv-apply","reduce","evaluate","parse","parse-where","sample","sample-distinct","make-series","getschema","serialize","invoke","as"],System.String);this.ClientDirectiveTokens=System.Array.init(["connect"],System.String);this.OperatorCommandTokens=System.Linq.Enumerable.from(System.Array.init(["filter","fork","facet","range","consume","find","search","print","partition","lookup"],System.String),System.String).union(Kusto.Data.IntelliSense.CslCommandParser.PromotedOperatorCommandTokens).ToArray(System.String);this.DataOperatorTokens=System.Array.init(["datatable","externaldata"],System.String);this.SummarizeAggregationSingleParameterTokens=System.Array.init(["count","countif","dcount","dcountif","sum","min","max","avg","avgif","any","makelist","makeset","make_dictionary","stdev","stdevif","varianceif","variance","buildschema","hll","hll_merge","tdigest","tdigest_merge"],System.String);this.SummarizeAggregationTwoParametersTokens=System.Array.init(["percentile","sumif"],System.String);this.SummarizeAggregationThreeParametersTokens=System.Array.init(["percentilew"],System.String);this.SummarizeAggregationManyParametersTokens=System.Array.init(["arg_min","arg_max","percentilesw_array","percentilesw","percentiles_array","percentiles"],System.String);this.MakeSeriesAggregationTokens=System.Array.init(["count","countif","dcount","dcountif","sum","min","max","avg","any","stdev","stdevp","variance","variancep","sumif"],System.String);this.PluginTokens=System.Array.init(["autocluster","diffpatterns","basket","extractcolumns"],System.String);this.DatetimeFunctionsTokens=System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslCommandParser.ScalarFunctionsDateTimeTokens,System.String).union(Kusto.Data.IntelliSense.CslCommandParser.SingleParameterFunctionsDateTimeTokens).ToArray(System.String);this.ScalarFunctionsTokens=System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslCommandParser.ScalarFunctionsDateTimeTokens,System.String).union(Kusto.Data.IntelliSense.CslCommandParser.ScalarFunctionsNoDateTimeTokens).ToArray(System.String);this.SingleParameterFunctionsTokens=System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslCommandParser.SingleParameterFunctionsDateTimeTokens,System.String).union(Kusto.Data.IntelliSense.CslCommandParser.SingleParameterFunctionsNoDateTimeTokens).ToArray(System.String);this.SummarizeAggregationTokens=System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslCommandParser.SummarizeAggregationSingleParameterTokens,System.String).union(Kusto.Data.IntelliSense.CslCommandParser.SummarizeAggregationManyParametersTokens).union(Kusto.Data.IntelliSense.CslCommandParser.SummarizeAggregationThreeParametersTokens).union(Kusto.Data.IntelliSense.CslCommandParser.SummarizeAggregationTwoParametersTokens).ToArray(System.String);this.SummarizeAggregationAliasesTokens=System.Array.init(["argmax","argmin"],System.String);this.SortedSummarizeAggregators=System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslCommandParser.SummarizeAggregationTokens,System.String).orderBy($asm.$.Kusto.Data.IntelliSense.CslCommandParser.f2).select($asm.$.Kusto.Data.IntelliSense.CslCommandParser.f3).ToArray(System.String);this.SortedMakeSeriesAggregationTokens=System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslCommandParser.MakeSeriesAggregationTokens,System.String).orderBy($asm.$.Kusto.Data.IntelliSense.CslCommandParser.f2).select($asm.$.Kusto.Data.IntelliSense.CslCommandParser.f3).ToArray(System.String);this.SortedDatetimeFunctions=System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslCommandParser.DatetimeFunctionsTokens,System.String).orderBy($asm.$.Kusto.Data.IntelliSense.CslCommandParser.f2).select($asm.$.Kusto.Data.IntelliSense.CslCommandParser.f3).ToArray(System.String);this.SortedExtendFunctions=System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslCommandParser.ManyParametersFunctionsTokens,System.String).union(Kusto.Data.IntelliSense.CslCommandParser.ScalarFunctionsTokens).union(Kusto.Data.IntelliSense.CslCommandParser.ZeroParameterFunctionsNoDateTimeTokens).union(Kusto.Data.IntelliSense.CslCommandParser.SingleParameterFunctionsTokens).union(Kusto.Data.IntelliSense.CslCommandParser.TwoParameterFunctionsTokens).union(Kusto.Data.IntelliSense.CslCommandParser.ThreeParameterFunctionsTokens).orderBy($asm.$.Kusto.Data.IntelliSense.CslCommandParser.f2).select($asm.$.Kusto.Data.IntelliSense.CslCommandParser.f3).ToArray(System.String);this.FunctionsTokens=System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslCommandParser.ManyParametersFunctionsTokens,System.String).union(Kusto.Data.IntelliSense.CslCommandParser.ScalarFunctionsTokens).union(Kusto.Data.IntelliSense.CslCommandParser.ZeroParameterFunctionsNoDateTimeTokens).union(Kusto.Data.IntelliSense.CslCommandParser.SingleParameterFunctionsTokens).union(Kusto.Data.IntelliSense.CslCommandParser.TwoParameterFunctionsTokens).union(Kusto.Data.IntelliSense.CslCommandParser.ThreeParameterFunctionsTokens).union(Kusto.Data.IntelliSense.CslCommandParser.SummarizeAggregationTokens).union(Kusto.Data.IntelliSense.CslCommandParser.IntrinsicFunctionTokens).ToArray(System.String);this.SortedEvaluateFunctions=System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslCommandParser.PluginTokens,System.String).orderBy($asm.$.Kusto.Data.IntelliSense.CslCommandParser.f2).ToArray(System.String);this.s_asyncSeeker=new System.Text.RegularExpressions.Regex.ctor("^\\.[\\w\\-]+\\s+async",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.DefaultRegexOptions);this.s_isCommentLineRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*//",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.DefaultRegexOptions)}},methods:{IsAdminCommand$1:function(query,queryWithoutLeadingComments){return Kusto.Data.IntelliSense.CslCommandParser.IsStartingWithPrefix(query,".",queryWithoutLeadingComments)},IsAdminCommand:function(command){var commandWithoutLeadingComments={};return Kusto.Data.IntelliSense.CslCommandParser.IsAdminCommand$1(command,commandWithoutLeadingComments)},ResolveRequestApiKind:function(requestContent){var requestContentWithoutLeadingComments={},isAdminCommand=Kusto.Data.IntelliSense.CslCommandParser.IsStartingWithPrefix(requestContent,".",requestContentWithoutLeadingComments);return isAdminCommand?Kusto.Data.IntelliSense.CslCommandParser.s_asyncSeeker.isMatch(requestContentWithoutLeadingComments.v)?Kusto.Data.IntelliSense.ApiKind.AdminAsyncCommand:Kusto.Data.IntelliSense.ApiKind.AdminSyncCommand:Kusto.Data.IntelliSense.ApiKind.Query},IsStartingWithPrefix:function(query,prefix,queryWithoutLeadingComments){var lines,i,line;for(queryWithoutLeadingComments.v=query.trim(),lines=System.String.split(query,System.Array.init([13,10],System.Char).map(function(i){return String.fromCharCode(i)}),null,1),i=0;i<lines.length;i=i+1|0){if(line=lines[System.Array.index(i,lines)],System.String.startsWith(System.String.trimStart(line),prefix))return i>0&&(queryWithoutLeadingComments.v=Bridge.toArray(System.Linq.Enumerable.from(lines,System.String).skip(i)).join("\n").trim()),!0;if(!Kusto.Data.IntelliSense.CslCommandParser.s_isCommentLineRegex.isMatch(line))return i>0&&(queryWithoutLeadingComments.v=Bridge.toArray(System.Linq.Enumerable.from(lines,System.String).skip(i)).join("\n").trim()),!1}return!1},IsClientDirective:function(command,directiveWithoutLeadingComments){return Kusto.Data.IntelliSense.CslCommandParser.IsStartingWithPrefix(command,"#",directiveWithoutLeadingComments)}}},fields:{m_hashedCommands:null,m_rulesProvider:null},props:{Results:null},ctors:{ctor:function(){this.$initialize();this.Reset()}},methods:{Reset:function(){this.m_hashedCommands=new(System.Collections.Generic.Dictionary$2(System.String,Kusto.Data.IntelliSense.CslCommand).ctor);this.Results=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommand).ctor)},Parse:function(rulesProvider,text,parseMode){var results=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommand).ctor),parsedCommands,i,newCommand,wasFound,previousCandidate;if(Bridge.referenceEquals(this.m_rulesProvider,rulesProvider)||(this.Reset(),this.m_rulesProvider=rulesProvider),parsedCommands=Kusto.Data.IntelliSense.CslCommandParser.CslCommandTokenizer.GetCommands(text),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$1(Kusto.Data.IntelliSense.CslCommand,parsedCommands))for(i=0;i<parsedCommands.Count;i=i+1|0)newCommand=parsedCommands.getItem(i),newCommand.ParseMode=parseMode,wasFound=this.FetchFromCache(parseMode,newCommand),wasFound||(previousCandidate=this.Results!=null?System.Linq.Enumerable.from(this.Results,Kusto.Data.IntelliSense.CslCommand).elementAtOrDefault(i,null):null,newCommand.ParseTokens(rulesProvider,parseMode,previousCandidate)),results.add(newCommand);return this.m_hashedCommands=System.Linq.Enumerable.from(Kusto.Cloud.Platform.Utils.ExtendedEnumerable.DistinctBy(Kusto.Data.IntelliSense.CslCommand,System.String,results,$asm.$.Kusto.Data.IntelliSense.CslCommandParser.f4),Kusto.Data.IntelliSense.CslCommand).toDictionary($asm.$.Kusto.Data.IntelliSense.CslCommandParser.f4,$asm.$.Kusto.Data.IntelliSense.CslCommandParser.f5,System.String,Kusto.Data.IntelliSense.CslCommand),this.Results=results,results},FetchFromCache:function(parseMode,newCommand){var wasFound=!1,previouslyParsedCommand={};return this.m_hashedCommands.tryGetValue(newCommand.Text,previouslyParsedCommand)&&previouslyParsedCommand.v.ParseMode===parseMode&&(newCommand.AcquireTokens(previouslyParsedCommand.v),wasFound=!0),wasFound},Clone:function(){var $t,parser=new Kusto.Data.IntelliSense.CslCommandParser;return parser.m_hashedCommands=Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$1(System.Collections.Generic.KeyValuePair$2(System.String,Kusto.Data.IntelliSense.CslCommand),this.m_hashedCommands)?new(System.Collections.Generic.Dictionary$2(System.String,Kusto.Data.IntelliSense.CslCommand).$ctor1)(this.m_hashedCommands):new(System.Collections.Generic.Dictionary$2(System.String,Kusto.Data.IntelliSense.CslCommand).ctor),parser.m_rulesProvider=this.m_rulesProvider,parser.Results=Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(Kusto.Data.IntelliSense.CslCommand,this.Results)?($t=Kusto.Data.IntelliSense.CslCommand,System.Linq.Enumerable.from(this.Results,$t).toList($t)):new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommand).ctor),parser}}});Bridge.ns("Kusto.Data.IntelliSense.CslCommandParser",$asm.$);Bridge.apply($asm.$.Kusto.Data.IntelliSense.CslCommandParser,{f1:function(t){return t},f2:function(f){return f},f3:function(f){return(f||"")+"()"},f4:function(c){return c.Text},f5:function(c){return c}});Bridge.define("Kusto.Data.IntelliSense.CslCommandParser.CslCommandTokenizer",{$kind:"nested class",statics:{methods:{GetCommands:function(text){var $t,$t1,result=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommand).ctor),i,ch,commandLength;if(System.String.isNullOrEmpty(text))return result;var command=null,mode=0,endOfStream=!1,expectedNewLine=0,chars=($t=System.Char,System.Linq.Enumerable.from(text,$t).ToArray($t));for(i=0;i<chars.length;i=i+1|0){ch=chars[System.Array.index(i,chars)];endOfStream=i===(chars.length-1|0);endOfStream&&(mode===0&&(command=($t1=new Kusto.Data.IntelliSense.CslCommand,$t1.RelativeStart=i,$t1)),mode=2);switch(mode){case 0:command=($t1=new Kusto.Data.IntelliSense.CslCommand,$t1.RelativeStart=i,$t1);mode=1;break;case 1:(ch===13||ch===10)&&(expectedNewLine=ch,mode=2);break;case 2:if((ch===10||ch===13)&&chars[System.Array.index(i-1|0,chars)]===ch&&(ch=expectedNewLine),ch===expectedNewLine||endOfStream){if(command!=null){while(!endOfStream){if(chars[System.Array.index(i+1|0,chars)]===13||chars[System.Array.index(i+1|0,chars)]===10)i=i+1|0;else break;endOfStream=i===(chars.length-1|0)}commandLength=(i-command.RelativeStart|0)+1|0;command.Text=text.substr(command.RelativeStart,commandLength);command.Length=commandLength;command.IsRunnable=!System.String.isNullOrWhiteSpace(command.Text);result.add(command)}mode=0;command=null}else System.Char.isWhiteSpace(String.fromCharCode(ch))||(mode=1);break}}return result}}}});Bridge.define("Kusto.Data.IntelliSense.CslCommandToken",{inherits:[System.ICloneable],props:{AbsolutePositionBias:0,Value:null,TokenKind:0,AbsoluteStart:{get:function(){return this.RelativeStart+this.AbsolutePositionBias|0}},AbsoluteEnd:{get:function(){return this.RelativeEnd+this.AbsolutePositionBias|0}},RelativeStart:0,Length:0,RelativeEnd:{get:function(){return this.RelativeStart+this.Length|0}}},alias:["clone","System$ICloneable$clone"],ctors:{ctor:function(value,absolutePositionBias,tokenKind){this.$initialize();this.Value=value;this.TokenKind=tokenKind;this.AbsolutePositionBias=absolutePositionBias}},methods:{CompareTo:function(other){return other==null?1:this.RelativeStart===other.RelativeStart?0:this.RelativeStart<other.RelativeStart?-1:1},clone:function(){var $t;return $t=new Kusto.Data.IntelliSense.CslCommandToken(this.Value,this.AbsolutePositionBias,this.TokenKind),$t.RelativeStart=this.RelativeStart,$t.Length=this.Length,$t},equals:function(obj){var other=Bridge.as(obj,Kusto.Data.IntelliSense.CslCommandToken);return other==null?!1:Bridge.referenceEquals(this.Value,other.Value)&&this.TokenKind===other.TokenKind&&this.RelativeStart===other.RelativeStart&&this.RelativeEnd===other.RelativeEnd&&this.AbsolutePositionBias===other.AbsolutePositionBias},getHashCode:function(){return Bridge.getHashCode(this.Value)^Bridge.getHashCode(this.TokenKind)^this.RelativeStart^this.RelativeEnd^this.AbsolutePositionBias}}});Bridge.define("Kusto.Data.IntelliSense.CslCommandToken.Kind",{$kind:"nested enum",statics:{fields:{TableToken:2,TableColumnToken:4,OperatorToken:8,SubOperatorToken:16,CalculatedColumnToken:32,StringLiteralToken:64,FunctionNameToken:128,UnknownToken:256,CommentToken:512,PlainTextToken:1024,DataTypeToken:2048,ControlCommandToken:4096,CommandPartToken:8192,QueryParametersToken:16384,CslCommandToken:32768,LetVariablesToken:65536,PluginToken:131072,BracketRangeToken:262144,ClientDirectiveToken:524288,IsRecognizedEntity:536870912,IsMismatchedTokenValue:1073741824}},$flags:!0});Bridge.define("Kusto.Data.IntelliSense.CslDocumentation",{statics:{fields:{s_instance:null},props:{Instance:{get:function(){return Kusto.Data.IntelliSense.CslDocumentation.s_instance==null&&(Kusto.Data.IntelliSense.CslDocumentation.s_instance=new Kusto.Data.IntelliSense.CslDocumentation,Kusto.Data.IntelliSense.CslDocumentation.s_instance.Initialize()),Kusto.Data.IntelliSense.CslDocumentation.s_instance}}},methods:{TrimFunctionParameters:function(signature){var parenStart=System.String.indexOf(signature,String.fromCharCode(40));return parenStart>0?signature.substr(0,parenStart):signature}}},fields:{m_documentation:null},props:{Topics:{get:function(){return this.m_documentation==null?System.Linq.Enumerable.empty():System.Linq.Enumerable.from(this.m_documentation,System.Collections.Generic.KeyValuePair$2(System.Tuple$2(Kusto.Data.IntelliSense.CslCommandToken.Kind,System.String),Kusto.Data.IntelliSense.CslTopicDocumentation)).select($asm.$.Kusto.Data.IntelliSense.CslDocumentation.f1)}}},ctors:{init:function(){this.m_documentation=new(System.Collections.Generic.Dictionary$2(System.Tuple$2(Kusto.Data.IntelliSense.CslCommandToken.Kind,System.String),Kusto.Data.IntelliSense.CslTopicDocumentation).ctor)}},methods:{AddTopic:function(topic){var key={Item1:topic.TokenKind,Item2:topic.Name.toLowerCase()};this.m_documentation.setItem(key,topic)},GetTopic:function(option){if(option.Kind===Kusto.Data.IntelliSense.OptionKind.Operator)return this.GetTopic$1(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,option.Value);else if(option.Kind===Kusto.Data.IntelliSense.OptionKind.FunctionAggregation||option.Kind===Kusto.Data.IntelliSense.OptionKind.FunctionScalar)return this.GetTopic$1(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,Kusto.Data.IntelliSense.CslDocumentation.TrimFunctionParameters(option.Value));return null},GetTopic$1:function(tokenKind,name){var key={Item1:tokenKind,Item2:name.toLowerCase()},result={};return this.m_documentation.tryGetValue(key,result),result.v},GetTopicByMarkdownSource:function(markdownSource){var $t,kvp;if(System.String.isNullOrWhiteSpace(markdownSource))return null;$t=Bridge.getEnumerator(this.m_documentation);try{while($t.moveNext())if(kvp=$t.Current,Bridge.referenceEquals(kvp.value.MarkdownSource,markdownSource))return kvp.value}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return null},GetTopicByName:function(name){var $t,kvp;if(System.String.isNullOrWhiteSpace(name))return null;$t=Bridge.getEnumerator(this.m_documentation);try{while($t.moveNext())if(kvp=$t.Current,Bridge.referenceEquals(kvp.key.Item2,name))return kvp.value}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return null},equals:function(obj){if(obj==null)return!1;var other=Bridge.as(obj,Kusto.Data.IntelliSense.CslDocumentation);return other==null?!1:this.m_documentation.Count!==other.m_documentation.Count?!1:System.Linq.Enumerable.from(other.m_documentation,System.Collections.Generic.KeyValuePair$2(System.Tuple$2(Kusto.Data.IntelliSense.CslCommandToken.Kind,System.String),Kusto.Data.IntelliSense.CslTopicDocumentation)).except(this.m_documentation).any()?!1:System.Linq.Enumerable.from(this.m_documentation,System.Collections.Generic.KeyValuePair$2(System.Tuple$2(Kusto.Data.IntelliSense.CslCommandToken.Kind,System.String),Kusto.Data.IntelliSense.CslTopicDocumentation)).except(other.m_documentation).any()?!1:!0},getHashCode:function(){return Bridge.getHashCode(this.m_documentation)},Initialize:function(){System.Linq.Enumerable.from(this.m_documentation,System.Collections.Generic.KeyValuePair$2(System.Tuple$2(Kusto.Data.IntelliSense.CslCommandToken.Kind,System.String),Kusto.Data.IntelliSense.CslTopicDocumentation)).any()||(this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"abs","Calculates the absolute value of the input.","## Syntax\r\n\r\n`abs(`*x*`)`\r\n\r\n## Arguments\r\n\r\n* *x*: An integer or real number, or a timespan value.\r\n\r\n## Returns\r\n\r\n* Absolute value of x.","","https://docs.microsoft.com/en-us/azure/kusto/query/abs-function","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"acos","Returns the angle whose cosine is the specified number (the inverse operation of [`cos()`](cosfunction.md)) .","## Syntax\r\n\r\n`acos(`*x*`)`\r\n\r\n## Arguments\r\n\r\n* *x*: A real number in range [-1, 1].\r\n\r\n## Returns\r\n\r\n* The value of the arc cosine of `x`\r\n* `null` if `x` < -1 or `x` > 1","","https://docs.microsoft.com/en-us/azure/kusto/query/acosfunction","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"ago","Subtracts the given timespan from the current UTC clock time.","```\r\nago(1h)\r\nago(1d)\r\n```\r\n\r\nLike `now()`, this function can be used multiple times\r\nin a statement and the UTC clock time being referenced will be the same\r\nfor all instantiations.\r\n\r\n## Syntax\r\n\r\n`ago(`*a_timespan*`)`\r\n\r\n## Arguments\r\n\r\n* *a_timespan*: Interval to subtract from the current UTC clock time\r\n(`now()`).\r\n\r\n## Returns\r\n\r\n`now() - a_timespan`","All rows with a timestamp in the past hour:\r\n\r\n```\r\nT | where Timestamp > ago(1h)\r\n```","https://docs.microsoft.com/en-us/azure/kusto/query/agofunction","agofunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"any","Arbitrarily chooses one record for each group in a [summarize operator](summarizeoperator.md),\r\nand returns the value of one or more expressions over each such record.","## Syntax\r\n\r\n`summarize` `any` `(` (*Expr* [`,` *Expr2* ...]) | `*` `)`\r\n\r\n## Arguments\r\n\r\n* *Expr*: An expression over each record selected from the input to return.\r\n* *Expr2* .. *ExprN*: Additional expressions.\r\n\r\n## Returns\r\n\r\nThe `any` aggregation function returns the values of the expressions calculated\r\nfor each of the records, selected randomly from each group of the summarize operator.\r\n\r\nIf the `*` argument is provided, the function behaves as if the expressions are all columns\r\nof the input to the summarize operator barring the group-by columns, if any.\r\n\r\n**Remarks**\r\n\r\nThis function is useful when you want to get a sample value of one or more columns\r\nper value of the compound group key.\r\n\r\nWhen the function is provided with a single column reference, it will attempt to\r\nreturn a non-null/non-empty value, if such value is present.\r\n\r\nAs a result of the random nature of this function, using it multiple times in\r\na single application of the `summarize` operator is not equivalent to using\r\nit a single time with multiple expressions. The former may have each application\r\nselect a different record, while the latter guarantees that all values are calculated\r\nover a single record (per distinct group).","Show Random Continent:\r\n\r\n```\r\nContinents | summarize any(Continent)\r\n```\r\n\r\n![Any 1](images/aggfunction/any1.png)\r\nShow all the details for a random record:\r\n\r\n```\r\nContinents | summarize any(*)\r\n```\r\n\r\n![Any 2](images/aggfunction/any2.png)\r\nShow all the details for each random continent:\r\n\r\n```\r\nContinents | summarize any(*) by Continent\r\n```\r\n\r\n![Any 3](images/aggfunction/any3.png)","https://docs.microsoft.com/en-us/azure/kusto/query/any-aggfunction","any-aggfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"anyif",'Arbitrarily selects one record for each group in a [summarize operator](summarizeoperator.md), for which the predicate\r\nis "true". The function returns the value of an expression over each such record.','> [!NOTE]\r\n> This function is useful when you want to get a sample value of one column per value of the compound group key, subject to some predicate that is "true".\r\n> If such a value is present, the function attempts to return a non-null/non-empty value.\r\n\r\n## Syntax\r\n\r\n`summarize` `anyif` `(` *Expr*, *Predicate* `)`\r\n\r\n## Arguments\r\n\r\n* *Expr*: An expression over each record selected from the input to return.\r\n* *Predicate*: Predicate to indicate which records may be considered for evaluation.\r\n\r\n## Returns\r\n\r\nThe `anyif` aggregation function returns the value of the expression calculated\r\nfor each of the records randomly selected from each group of the summarize operator. Only records for which *Predicate* returns "true" may be selected. If the predicate doesn\'t return "true", a null value is produced.',"Show a random continent that has a population of 300 to 600 million.\r\n\r\n```\r\nContinents | summarize anyif(Continent, Population between (300000000 .. 600000000))\r\n```\r\n\r\n![Any 1](images/aggfunction/any1.png)","https://docs.microsoft.com/en-us/azure/kusto/query/anyif-aggfunction","anyif-aggfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"arg_max","Finds a row in the group that maximizes *ExprToMaximize*, and returns the value of *ExprToReturn* (or `*` to return the entire row).","* Can be used only in context of aggregation inside [summarize](summarizeoperator.md)\r\n\r\n## Syntax\r\n\r\n`summarize` [`(`*NameExprToMaximize* `,` *NameExprToReturn* [`,` ...] `)=`] `arg_max` `(`*ExprToMaximize*, `*` | *ExprToReturn*  [`,` ...]`)`\r\n\r\n## Arguments\r\n\r\n* *ExprToMaximize*: Expression that will be used for aggregation calculation. \r\n* *ExprToReturn*: Expression that will be used for returning the value when *ExprToMaximize* is\r\n  maximum. Expression to return may be a wildcard (*) to return all columns of the input table.\r\n* *NameExprToMaximize*: An optional name for the result column representing *ExprToMaximize*.\r\n* *NameExprToReturn*: Additional optional names for the result columns representing *ExprToReturn*.\r\n\r\n## Returns\r\n\r\nFinds a row in the group that maximizes *ExprToMaximize*, and \r\nreturns the value of *ExprToReturn* (or `*` to return the entire row).","See examples for [arg_min()](arg-min-aggfunction.md) aggregation function","https://docs.microsoft.com/en-us/azure/kusto/query/arg-max-aggfunction","arg-max-aggfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"arg_min","Finds a row in the group that minimizes *ExprToMinimize*, and returns the value of *ExprToReturn* (or `*` to return the entire row).","* Can be used only in context of aggregation inside [summarize](summarizeoperator.md)\r\n\r\n## Syntax\r\n\r\n`summarize` [`(`*NameExprToMinimize* `,` *NameExprToReturn* [`,` ...] `)=`] `arg_min` `(`*ExprToMinimize*, `*` | *ExprToReturn*  [`,` ...]`)`\r\n\r\n## Arguments\r\n\r\n* *ExprToMinimize*: Expression that will be used for aggregation calculation. \r\n* *ExprToReturn*: Expression that will be used for returning the value when *ExprToMinimize* is\r\n  minimum. Expression to return may be a wildcard (*) to return all columns of the input table.\r\n* *NameExprToMinimize*: An optional name for the result column representing *ExprToMinimize*.\r\n* *NameExprToReturn*: Additional optional names for the result columns representing *ExprToReturn*.\r\n\r\n## Returns\r\n\r\nFinds a row in the group that minimizes *ExprToMinimize*, and returns the value of *ExprToReturn* (or `*` to return the entire row).","Show cheapest supplier of each product:\r\n\r\n```\r\nSupplies | summarize arg_min(Price, Supplier) by Product\r\n```\r\n\r\nShow all the details, not just the supplier name:\r\n\r\n```\r\nSupplies | summarize arg_min(Price, *) by Product\r\n```\r\n\r\nFind the southernmost city in each continent, with its country:\r\n\r\n```\r\nPageViewLog \r\n| summarize (latitude, min_lat_City, min_lat_country)=arg_min(latitude, City, country) \r\n    by continent\r\n```\r\n\r\n![Arg min](images/arg-min-aggfunction/arg-min.png)","https://docs.microsoft.com/en-us/azure/kusto/query/arg-min-aggfunction","arg-min-aggfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"array_concat","Concatenates a number of dynamic arrays to a single array.","## Syntax\r\n\r\n`array_concat(`*arr1*`[`,` *arr2*, ...]`)`\r\n\r\n## Arguments\r\n\r\n* *arr1...arrN*: Input arrays to be concatenated into a dynamic array. All arguments must be dynamic arrays (see [pack_array](packarrayfunction.md)). \r\n\r\n## Returns\r\n\r\nDynamic array of arrays with arr1, arr2, ... , arrN.","```\r\nrange x from 1 to 3 step 1\r\n| extend y = x * 2\r\n| extend z = y * 2\r\n| extend a1 = pack_array(x,y,z), a2 = pack_array(x, y)\r\n| project array_concat(a1, a2)\r\n```\r\n\r\n|Column1|\r\n|---|\r\n|[1,2,4,1,2]|\r\n|[2,4,8,2,4]|\r\n|[3,6,12,3,6]|","https://docs.microsoft.com/en-us/azure/kusto/query/arrayconcatfunction","arrayconcatfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"array_iif","Element-wise iif function on dynamic arrays.","Another alias: array_iff().\r\n\r\n## Syntax\r\n\r\n`array_iif(`*ConditionArray*, *IfTrue*, *IfFalse*]`)`\r\n\r\n## Arguments\r\n\r\n* *conditionArray*: Input array of *boolean* or numeric values, must be dynamic array.\r\n* *ifTrue*: Input array of values or primitive value - the result value(s) when the corresponding value of *ConditionArray* is *true*.\r\n* *ifFalse*: Input array of values or primitive value - the result value(s) when the corresponding value of *ConditionArray* is *false*.\r\n\r\n**Notes**\r\n\r\n* The result length is the length of *conditionArray*.\r\n* Numeric condition value is treated as *condition* != *0*.\r\n* Non-numeric/null condition value will have null in the corresponding index of the result.\r\n* Missing values (in shorter length arrays) are treated as null.\r\n\r\n## Returns\r\n\r\nDynamic array of the values taken either from the *IfTrue* or *IfFalse* [array] values, according to the corresponding value of the Condition array.","```\r\nprint condition=dynamic([true,false,true]), l=dynamic([1,2,3]), r=dynamic([4,5,6]) \r\n| extend res=array_iif(condition, l, r)\r\n```\r\n\r\n|condition|l|r|res|\r\n|---|---|---|---|\r\n|[true, false, true]|[1, 2, 3]|[4, 5, 6]|[1, 5, 3]|","https://docs.microsoft.com/en-us/azure/kusto/query/arrayifffunction","arrayifffunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"array_index_of","Searches the array for the specified item, and returns its position.","## Syntax\r\n\r\n`array_index_of(`*array*,*value*`)`\r\n\r\n## Arguments\r\n\r\n* *array*: Input array to search.\r\n* *value*: Value to search for. The value should be of type long, integer, double, datetime, timespan, decimal, string, or guid.\r\n\r\n## Returns\r\n\r\nZero-based index position of lookup.\r\nReturns -1 if the value isn't found in the array.",'```\r\nprint arr=dynamic(["this", "is", "an", "example"]) \r\n| project Result=array_index_of(arr, "example")\r\n```\r\n\r\n|Result|\r\n|---|\r\n|3|\r\n\r\n## See also\r\n\r\nIf you only want to check whether a value exists in an array,\r\nbut you are not interested in its position, you can use\r\n[set_has_element(`arr`, `value`)](sethaselementfunction.md). This function will improve the readability of your query. Both functions have the same performance.',"https://docs.microsoft.com/en-us/azure/kusto/query/arrayindexoffunction","arrayindexoffunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"array_length","Calculates the number of elements in a dynamic array.","## Syntax\r\n\r\n`array_length(`*array*`)`\r\n\r\n## Arguments\r\n\r\n* *array*: A `dynamic` value.\r\n\r\n## Returns\r\n\r\nThe number of elements in *array*, or `null` if *array* is not an array.","```\r\nprint array_length(parse_json('[1, 2, 3, \"four\"]')) == 4\r\n\r\nprint array_length(parse_json('[8]')) == 1\r\n\r\nprint array_length(parse_json('[{}]')) == 1\r\n\r\nprint array_length(parse_json('[]')) == 0\r\n\r\nprint array_length(parse_json('{}')) == null\r\n\r\nprint array_length(parse_json('21')) == null\r\n```","https://docs.microsoft.com/en-us/azure/kusto/query/arraylengthfunction","arraylengthfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"array_rotate_left","Rotates values inside a `dynamic` array to the left.","## Syntax\r\n\r\n`array_rotate_left(`*arr*, *rotate_count*`)`\r\n\r\n## Arguments\r\n\r\n* *arr*: Input array to split, must be dynamic array.\r\n* *rotate_count*: Integer specifying the number of positions that array elements will be rotated to the left. If the value is negative, the elements will be rotated to the right.\r\n\r\n## Returns\r\n\r\nDynamic array containing the same amount of the elements as in original array, where each element was rotated according to *rotate_count*.\r\n\r\n## See also\r\n\r\n* For rotating array to the right, see [array_rotate_right()](array_rotate_rightfunction.md).\r\n* For shifting array to the left, see [array_shift_left()](array_shift_leftfunction.md).\r\n* For shifting array to the right, see [array_shift_right()](array_shift_rightfunction.md).","* Rotating to the left by two positions:\r\n\r\n    \r\n    ```\r\n    print arr=dynamic([1,2,3,4,5]) \r\n    | extend arr_rotated=array_rotate_left(arr, 2)\r\n    ```\r\n    \r\n    |arr|arr_rotated|\r\n    |---|---|\r\n    |[1,2,3,4,5]|[3,4,5,1,2]|\r\n\r\n* Rotating to the right by two positions by using negative rotate_count value:\r\n\r\n    \r\n    ```\r\n    print arr=dynamic([1,2,3,4,5]) \r\n    | extend arr_rotated=array_rotate_left(arr, -2)\r\n    ```\r\n    \r\n    |arr|arr_rotated|\r\n    |---|---|\r\n    |[1,2,3,4,5]|[4,5,1,2,3]|","https://docs.microsoft.com/en-us/azure/kusto/query/array_rotate_leftfunction","array_rotate_leftfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"array_rotate_right","Rotates values inside a `dynamic` array to the right.","## Syntax\r\n\r\n`array_rotate_right(`*arr*, *rotate_count*`)`\r\n\r\n## Arguments\r\n\r\n* *arr*: Input array to split, must be dynamic array.\r\n* *rotate_count*: Integer specifying the number of positions that array elements will be rotated to the right. If the value is negative, the elements will be rotated to the left.\r\n\r\n## Returns\r\n\r\nDynamic array containing the same amount of the elements as in the original array, where each element was rotated according to *rotate_count*.\r\n\r\n## See also\r\n\r\n* For rotating array to the left, see [array_rotate_left()](array_rotate_leftfunction.md).\r\n* For shifting array to the left, see [array_shift_left()](array_shift_leftfunction.md).\r\n* For shifting array to the right, see [array_shift_right()](array_shift_rightfunction.md).","* Rotating to the right by two positions:\r\n\r\n    \r\n    ```\r\n    print arr=dynamic([1,2,3,4,5]) \r\n    | extend arr_rotated=array_rotate_right(arr, 2)\r\n    ```\r\n    \r\n    |arr|arr_rotated|\r\n    |---|---|\r\n    |[1,2,3,4,5]|[4,5,1,2,3]|\r\n\r\n* Rotating to the left by two positions by using negative rotate_count value:\r\n\r\n    \r\n    ```\r\n    print arr=dynamic([1,2,3,4,5]) \r\n    | extend arr_rotated=array_rotate_right(arr, -2)\r\n    ```\r\n    \r\n    |arr|arr_rotated|\r\n    |---|---|\r\n    |[1,2,3,4,5]|[3,4,5,1,2]|","https://docs.microsoft.com/en-us/azure/kusto/query/array_rotate_rightfunction","array_rotate_rightfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"array_shift_left","Shifts the values inside a `dynamic` array to the left.","## Syntax\r\n\r\n`array_shift_left(`*`arr`*, *`shift_count`* `[,` *`fill_value`* ]`)`\r\n\r\n## Arguments\r\n\r\n* *`arr`*: Input array to split, must be dynamic array.\r\n* *`shift_count`*: Integer specifying the number of positions that array elements will be shifted to the left. If the value is negative, the elements will be shifted to the right.\r\n* *`fill_value`*: Scalar value that is used for inserting elements instead of the ones that were shifted and removed. Default: null value or empty string (depending on the *`arr`* type).\r\n\r\n## Returns\r\n\r\nDynamic array containing the same number of elements as in the original array. Each element has been shifted according to *shift_count*. New elements that are added in place of removed elements will have a value of *fill_value*.\r\n\r\n## See also\r\n\r\n* For shifting array right, see [array_shift_right()](array_shift_rightfunction.md).\r\n* For rotating array right, see [array_rotate_right()](array_rotate_rightfunction.md).\r\n* For rotating array left, see [array_rotate_left()](array_rotate_leftfunction.md).","* Shifting to the left by two positions:\r\n\r\n    \r\n    ```\r\n    print arr=dynamic([1,2,3,4,5]) \r\n    | extend arr_shift=array_shift_left(arr, 2)\r\n    ```\r\n    \r\n    |`arr`|`arr_shift`|\r\n    |---|---|\r\n    |[1,2,3,4,5]|[3,4,5,null,null]|\r\n\r\n* Shifting to the left by two positions and adding default value:\r\n\r\n    \r\n    ```\r\n    print arr=dynamic([1,2,3,4,5]) \r\n    | extend arr_shift=array_shift_left(arr, 2, -1)\r\n    ```\r\n    \r\n    |`arr`|`arr_shift`|\r\n    |---|---|\r\n    |[1,2,3,4,5]|[3,4,5,-1,-1]|\r\n\r\n\r\n* Shifting to the right by two positions by using negative *shift_count* value:\r\n\r\n    \r\n    ```\r\n    print arr=dynamic([1,2,3,4,5]) \r\n    | extend arr_shift=array_shift_left(arr, -2, -1)\r\n    ```\r\n    \r\n    |`arr`|`arr_shift`|\r\n    |---|---|\r\n    |[1,2,3,4,5]|[-1,-1,1,2,3]|","https://docs.microsoft.com/en-us/azure/kusto/query/array_shift_leftfunction","array_shift_leftfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"array_shift_right","`array_shift_right()` shifts values inside an array to the right.","## Syntax\r\n\r\n`array_shift_right(`*`arr`*, *`shift_count`* [, *`fill_value`* ]`)`\r\n\r\n## Arguments\r\n\r\n* *`arr`*: Input array to split, must be dynamic array.\r\n* *`shift_count`*: Integer specifying the number of positions that array elements will be shifted to the right. If the value is negative, the elements will be shifted to the left.\r\n* *`fill_value`*: scalar value that is used for inserting elements instead of the ones that were shifted and removed. Default: null value or empty string (depending on the *arr* type).\r\n\r\n## Returns\r\n\r\nDynamic array containing the same amount of the elements as in the original array. Each element has been shifted according to *`shift_count`*. New elements that are added instead of the removed elements will have a value of *`fill_value`*.\r\n\r\n## See also\r\n\r\n* For shifting array left, see [array_shift_left()](array_shift_leftfunction.md).\r\n* For rotating array right, see [array_rotate_right()](array_rotate_rightfunction.md).\r\n* For rotating array left, see [array_rotate_left()](array_rotate_leftfunction.md).","* Shifting to the right by two positions:\r\n\r\n    \r\n    ```\r\n    print arr=dynamic([1,2,3,4,5]) \r\n    | extend arr_shift=array_shift_right(arr, 2)\r\n    ```\r\n    \r\n    |arr|arr_shift|\r\n    |---|---|\r\n    |[1,2,3,4,5]|[null,null,1,2,3]|\r\n\r\n* Shifting to the right by two positions and adding a default value:\r\n\r\n    \r\n    ```\r\n    print arr=dynamic([1,2,3,4,5]) \r\n    | extend arr_shift=array_shift_right(arr, 2, -1)\r\n    ```\r\n    \r\n    |arr|arr_shift|\r\n    |---|---|\r\n    |[1,2,3,4,5]|[-1,-1,1,2,3]|\r\n\r\n* Shifting to the left by two positions by using a negative shift_count value:\r\n\r\n    \r\n    ```\r\n    print arr=dynamic([1,2,3,4,5]) \r\n    | extend arr_shift=array_shift_right(arr, -2, -1)\r\n    ```\r\n    \r\n    |arr|arr_shift|\r\n    |---|---|\r\n    |[1,2,3,4,5]|[3,4,5,-1,-1]|","https://docs.microsoft.com/en-us/azure/kusto/query/array_shift_rightfunction","array_shift_rightfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"array_slice","Extracts a slice of a dynamic array.","## Syntax\r\n\r\n`array_slice`(*`arr`*, *`start`*, *`end`*)\r\n\r\n## Arguments\r\n\r\n* *`arr`*: Input array to extract the slice from must be dynamic array.\r\n* *`start`*: zero-based (inclusive) start index of the slice, negative values are converted to array_length+start.\r\n* *`end`*: zero-based (inclusive) end index of the slice, negative values are converted to array_length+end.\r\n\r\nNote: out of bounds indices are ignored.\r\n\r\n## Returns\r\n\r\nDynamic array of the values in the range [`start..end`] from `arr`.","```\r\nprint arr=dynamic([1,2,3]) \r\n| extend sliced=array_slice(arr, 1, 2)\r\n```\r\n\r\n|`arr`|`sliced`|\r\n|---|---|\r\n|[1,2,3]|[2,3]|\r\n\r\n```\r\nprint arr=dynamic([1,2,3,4,5]) \r\n| extend sliced=array_slice(arr, 2, -1)\r\n```\r\n\r\n|`arr`|sliced|\r\n|---|---|\r\n|[1,2,3,4,5]|[3,4,5]|\r\n\r\n```\r\nprint arr=dynamic([1,2,3,4,5]) \r\n| extend sliced=array_slice(arr, -3, -2)\r\n```\r\n\r\n|`arr`|sliced|\r\n|---|---|\r\n|[1,2,3,4,5]|[3,4]|","https://docs.microsoft.com/en-us/azure/kusto/query/arrayslicefunction","arrayslicefunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"array_split","Splits an array to multiple arrays according to the split indices and packs the generated array in a dynamic array.","## Syntax\r\n\r\n`array_split`(*`arr`*, *`indices`*)\r\n\r\n## Arguments\r\n\r\n* *`arr`*: Input array to split, must be dynamic array.\r\n* *`indices`*: Integer or dynamic array of integers with the split indices (zero based), negative values are converted to array_length + value.\r\n\r\n## Returns\r\n\r\nDynamic array containing N+1 arrays with the values in the range `[0..i1), [i1..i2), ... [iN..array_length)` from `arr`, where N is the number of input indices and `i1...iN` are the indices.","```\r\nprint arr=dynamic([1,2,3,4,5]) \r\n| extend arr_split=array_split(arr, 2)\r\n```\r\n\r\n|`arr`|`arr_split`|\r\n|---|---|\r\n|[1,2,3,4,5]|[[1,2],[3,4,5]]|\r\n\r\n```\r\nprint arr=dynamic([1,2,3,4,5]) \r\n| extend arr_split=array_split(arr, dynamic([1,3]))\r\n```\r\n\r\n|`arr`|`arr_split`|\r\n|---|---|\r\n|[1,2,3,4,5]|[[1],[2,3],[4,5]]|","https://docs.microsoft.com/en-us/azure/kusto/query/arraysplitfunction","arraysplitfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,"as","Binds a name to the operator's input tabular expression, thus allowing the query\r\nto reference the value of the tabular expression multiple times without breaking\r\nthe query and binding a name through the [let statement](letstatement.md).","## Syntax\r\n\r\n*T* `|` `as` [`hint.materialized` `=` `true`] *Name*\r\n\r\n## Arguments\r\n\r\n* *T*: A tabular expression.\r\n* *Name*: A temporary name for the tabular expression.\r\n* `hint.materialized`: If set to `true`, the value of the tabular expression will be\r\n  materialized as if it was wrapped by a [materialize()](./materializefunction.md) function\r\n  call.\r\n\r\n> [!NOTE]\r\n> * The name given by `as` will be used in the `withsource=` column of [union](./unionoperator.md), the `source_` column of [find](./findoperator.md), and the `$table` column of [search](./searchoperator.md).\r\n> * The tabular expression named using the operator in a [join](./joinoperator.md)'s outer tabular input (`$left`) can also be used in the join's tabular inner input (`$right`).",'```\r\n// 1. In the following 2 example the union\'s generated TableName column will consist of \'T1\' and \'T2\'\r\nrange x from 1 to 10 step 1 \r\n| as T1 \r\n| union withsource=TableName T2\r\n\r\nunion withsource=TableName (range x from 1 to 10 step 1 | as T1), T2\r\n\r\n// 2. In the following example, the \'left side\' of the join will be: \r\n//      MyLogTable filtered by type == "Event" and Name == "Start"\r\n//    and the \'right side\' of the join will be: \r\n//      MyLogTable filtered by type == "Event" and Name == "Stop"\r\nMyLogTable  \r\n| where type == "Event"\r\n| as T\r\n| where Name == "Start"\r\n| join (\r\n    T\r\n    | where Name == "Stop"\r\n) on ActivityId\r\n```',"https://docs.microsoft.com/en-us/azure/kusto/query/asoperator","asoperator.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"asin","Returns the angle whose sine is the specified number (the inverse operation of [`sin()`](sinfunction.md)) .","## Syntax\r\n\r\n`asin(`*x*`)`\r\n\r\n## Arguments\r\n\r\n* *x*: A real number in range [-1, 1].\r\n\r\n## Returns\r\n\r\n* The value of the arc sine of `x`\r\n* `null` if `x` < -1 or `x` > 1","","https://docs.microsoft.com/en-us/azure/kusto/query/asinfunction","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"assert","Checks for a condition. If the condition is false, outputs error messages and fails the query.","## Syntax\r\n\r\n`assert(`*condition*`, `*message*`)`\r\n\r\n## Arguments\r\n\r\n* *condition*: The conditional expression to evaluate. If the condition is `false`, the specified message is used to report an error. If the condition is `true`, it returns `true` as an evaluation result. Condition must be evaluated to constant during the query analysis phase.\r\n* *message*: The message used if assertion is evaluated to `false`. The *message* must be a string literal.\r\n\r\n> [!NOTE]\r\n> `condition` must be evaluated to constant during the query analysis phase. In other words, it can be constructed from other expressions referencing constants, and can't be bound to row-context.\r\n\r\n## Returns\r\n\r\n* `true` - if the condition is `true`\r\n* Raises semantic error if the condition is evaluated to `false`.","The following query defines a function `checkLength()` that checks input string length, and uses `assert` to validate input length parameter (checks that it is greater than zero).\r\n\r\n```\r\nlet checkLength = (len:long, s:string)\r\n{\r\n    assert(len > 0, \"Length must be greater than zero\") and \r\n    strlen(s) > len\r\n};\r\ndatatable(input:string)\r\n[\r\n    '123',\r\n    '4567'\r\n]\r\n| where checkLength(len=long(-1), input)\r\n```\r\n\r\nRunning this query yields an error:  \r\n`assert() has failed with message: 'Length must be greater than zero'`\r\n\r\nExample of running with valid `len` input:\r\n\r\n```\r\nlet checkLength = (len:long, s:string)\r\n{\r\n    assert(len > 0, \"Length must be greater than zero\") and strlen(s) > len\r\n};\r\ndatatable(input:string)\r\n[\r\n    '123',\r\n    '4567'\r\n]\r\n| where checkLength(len=3, input)\r\n```\r\n\r\n|input|\r\n|---|\r\n|4567|","https://docs.microsoft.com/en-us/azure/kusto/query/assert-function","assert-function.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"atan","Returns the angle whose tangent is the specified number (the inverse operation of [`tan()`](tanfunction.md)) .","## Syntax\r\n\r\n`atan(`*x*`)`\r\n\r\n## Arguments\r\n\r\n* *x*: A real number.\r\n\r\n## Returns\r\n\r\n* The value of the arc tangent of `x`","","https://docs.microsoft.com/en-us/azure/kusto/query/atanfunction","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"atan2","Calculates the angle, in radians, between the positive x-axis and the ray from the origin to the point (y, x).","## Syntax\r\n\r\n`atan2(`*y*`,`*x*`)`\r\n\r\n## Arguments\r\n\r\n* *x*: X coordinate (a real number).\r\n* *y*: Y coordinate (a real number).\r\n\r\n## Returns\r\n\r\n* The angle, in radians, between the positive x-axis and the ray from the origin to the point (y, x).","```\r\nprint atan2_0 = atan2(1,1) // Pi / 4 radians (45 degrees)\r\n| extend atan2_1 = atan2(0,-1) // Pi radians (180 degrees)\r\n| extend atan2_2 = atan2(-1,0) // - Pi / 2 radians (-90 degrees)\r\n```\r\n\r\n|atan2_0|atan2_1|atan2_2|\r\n|---|---|---|\r\n|0.785398163397448|3.14159265358979|-1.5707963267949|","https://docs.microsoft.com/en-us/azure/kusto/query/atan2function","atan2function.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"avg","Calculates the average of *Expr* across the group.","* Can only be used in context of aggregation inside [summarize](summarizeoperator.md)\r\n\r\n## Syntax\r\n\r\nsummarize `avg(`*Expr*`)`\r\n\r\n## Arguments\r\n\r\n* *Expr*: Expression that will be used for aggregation calculation. Records with `null` values are ignored and not included in the calculation.\r\n\r\n## Returns\r\n\r\nThe average value of *Expr* across the group.","","https://docs.microsoft.com/en-us/azure/kusto/query/avg-aggfunction","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"avgif","Calculates the [average](avg-aggfunction.md) of *Expr* across the group for which *Predicate* evaluates to `true`.","* Can only be used in context of aggregation inside [summarize](summarizeoperator.md)\r\n\r\n## Syntax\r\n\r\nsummarize `avgif(`*Expr*`, `*Predicate*`)`\r\n\r\n## Arguments\r\n\r\n* *Expr*: Expression that will be used for aggregation calculation. Records with `null` values are ignored and not included in the calculation.\r\n* *Predicate*:  predicate that if true, the *Expr* calculated value will be added to the average.\r\n\r\n## Returns\r\n\r\nThe average value of *Expr* across the group where *Predicate* evaluates to `true`.","```\r\nrange x from 1 to 100 step 1\r\n| summarize avgif(x, x%2 == 0)\r\n```\r\n\r\n|avgif_x|\r\n|---|\r\n|51|","https://docs.microsoft.com/en-us/azure/kusto/query/avgif-aggfunction","avgif-aggfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"bag_keys","Enumerates all the root keys in a dynamic property-bag object.","## Syntax\r\n\r\n`bag_keys(`*dynamic object*`)`\r\n\r\n## Returns\r\n\r\nAn array of keys, order is undetermined.",'```\r\ndatatable(index:long, d:dynamic) [\r\n1, dynamic({\'a\':\'b\', \'c\':123}), \r\n2, dynamic({\'a\':\'b\', \'c\':{\'d\':123}}),\r\n3, dynamic({\'a\':\'b\', \'c\':[{\'d\':123}]}),\r\n4, dynamic(null),\r\n5, dynamic({}),\r\n6, dynamic(\'a\'),\r\n7, dynamic([])]\r\n| extend keys = bag_keys(d)\r\n```\r\n\r\n|index|d|keys|\r\n|---|---|---|\r\n|1|{<br>  "a": "b",<br>  "c": 123<br>}|[<br>  "a",<br>  "c"<br>]|\r\n|2|{<br>  "a": "b",<br>  "c": {<br>    "d": 123<br>  }<br>}|[<br>  "a",<br>  "c"<br>]|\r\n|3|{<br>  "a": "b",<br>  "c": [<br>    {<br>      "d": 123<br>    }<br>  ]<br>}|[<br>  "a",<br>  "c"<br>]|\r\n|4|||\r\n|5|{}|[]|\r\n|6|a||\r\n|7|[]||',"https://docs.microsoft.com/en-us/azure/kusto/query/bagkeysfunction","bagkeysfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"bag_merge","Merges `dynamic` property-bags into a `dynamic` property-bag with all properties merged.","## Syntax\r\n\r\n`bag_merge(`*bag1*`, `*bag2*`[`,` *bag3*, ...])`\r\n\r\n## Arguments\r\n\r\n* *bag1...bagN*: Input `dynamic` property-bags. The function accepts between 2 to 64 arguments.\r\n\r\n## Returns\r\n\r\nReturns a `dynamic` property-bag. Results from merging all of the input property-bag objects. If a key appears in more than one input object, an arbitrary value (out of the possible values for this key) will be chosen.","Expression:\r\n\r\n```\r\nprint result = bag_merge(\r\n   dynamic({'A1':12, 'B1':2, 'C1':3}),\r\n   dynamic({'A2':81, 'B2':82, 'A1':1}))\r\n```\r\n\r\n|result|\r\n|---|\r\n|{<br>  \"A1\": 12,<br>  \"B1\": 2,<br>  \"C1\": 3,<br>  \"A2\": 81,<br>  \"B2\": 82<br>}|","https://docs.microsoft.com/en-us/azure/kusto/query/bag-merge-function","bag-merge-function.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"bag_remove_keys","Removes keys and associated values from a `dynamic` property-bag.","## Syntax\r\n\r\n`bag_remove_keys(`*bag*`, `*keys*`)`\r\n\r\n## Arguments\r\n\r\n* *bag*: `dynamic` property-bag input.\r\n* *keys*: `dynamic` array includes keys to be removed from the input. Keys refer to the first level of the property bag.\r\nSpecifying keys on the nested levels isn't supported.\r\n\r\n## Returns\r\n\r\nReturns a `dynamic` property-bag without specified keys and their values.",'```\r\ndatatable(input:dynamic)\r\n[\r\n    dynamic({\'key1\' : 123,     \'key2\': \'abc\'}),\r\n    dynamic({\'key1\' : \'value\', \'key3\': 42.0}),\r\n]\r\n| extend result=bag_remove_keys(input, dynamic([\'key2\', \'key4\']))\r\n```\r\n\r\n|input|result|\r\n|---|---|\r\n|{<br>  "key1": 123,<br>  "key2": "abc"<br>}|{<br>  "key1": 123<br>}|\r\n|{<br>  "key1": "value",<br>  "key3": 42.0<br>}|{<br>  "key1": "value",<br>  "key3": 42.0<br>}|',"https://docs.microsoft.com/en-us/azure/kusto/query/bag-remove-keys-function","bag-remove-keys-function.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"base64_decode_toarray","Decodes a base64 string to an array of long values.","## Syntax\r\n\r\n`base64_decode_toarray(`*String*`)`\r\n\r\n## Arguments\r\n\r\n* *String*: Input string to be decoded from base64 to UTF8 string.\r\n\r\n## Returns\r\n\r\nReturns an array of long values decoded from a base64 string.\r\n\r\n* To decode base64 strings to a UTF-8 string, see [base64_decode_tostring()](base64_decode_tostringfunction.md)\r\n* To encode strings to a base64 string, see [base64_encode_tostring()](base64_encode_tostringfunction.md)","```\r\nprint Quine=base64_decode_toarray(\"S3VzdG8=\")  \r\n// 'K', 'u', 's', 't', 'o'\r\n```\r\n\r\n|Quine|\r\n|-----|\r\n|[75,117,115,116,111]|\r\n\r\nIf you try to decode a base64 string that was generated from an invalid UTF-8 encoding, \"null\" will be returned:\r\n\r\n```\r\nprint Empty=base64_decode_toarray(\"U3RyaW5n0KHR0tGA0L7Rh9C60LA=\")\r\n```\r\n\r\n|Empty|\r\n|-----|\r\n||","https://docs.microsoft.com/en-us/azure/kusto/query/base64_decode_toarrayfunction","base64_decode_toarrayfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"base64_decode_tostring","Decodes a base64 string to a UTF-8 string.","## Syntax\r\n\r\n`base64_decode_tostring(`*String*`)`\r\n\r\n## Arguments\r\n\r\n* *String*: Input string to be decoded from base64 to UTF8-8 string.\r\n\r\n## Returns\r\n\r\nReturns UTF-8 string decoded from base64 string.\r\n\r\n* To decode base64 strings to an array of long values, see [base64_decode_toarray()](base64_decode_toarrayfunction.md)\r\n* To decode strings to base64 string, see [base64_encode_tostring()](base64_encode_tostringfunction.md)",'```\r\nprint Quine=base64_decode_tostring("S3VzdG8=")\r\n```\r\n\r\n|Quine|\r\n|-----|\r\n|Kusto|\r\n\r\nTrying to decode a base64 string that was generated from invalid UTF-8 encoding will return null:\r\n\r\n```\r\nprint Empty=base64_decode_tostring("U3RyaW5n0KHR0tGA0L7Rh9C60LA=")\r\n```\r\n\r\n|Empty|\r\n|-----|\r\n||',"https://docs.microsoft.com/en-us/azure/kusto/query/base64_decode_tostringfunction","base64_decode_tostringfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"base64_encode_fromarray","Encodes a base64 string from a bytes array.","## Syntax\r\n\r\n`base64_encode_fromarray(`*BytesArray*`)`\r\n\r\n## Arguments\r\n\r\n* *BytesArray*: Input bytes array to be encoded into base64 string.\r\n\r\n## Returns\r\n\r\nReturns the base64 string encoded from the bytes array.\r\n\r\n* For decoding base64 strings to a UTF-8 string see [base64_decode_tostring()](base64_decode_tostringfunction.md)\r\n* For encoding strings to base64 string see [base64_encode_tostring()](base64_encode_tostringfunction.md)\r\n* This function is the inverse of [base64_decode_toarray()](base64_decode_toarrayfunction.md)",'```\r\nlet bytes_array = toscalar(print base64_decode_toarray("S3VzdG8="));\r\nprint decoded_base64_string = base64_encode_fromarray(bytes_array)\r\n```\r\n\r\n|decoded_base64_string|\r\n|---|\r\n|S3VzdG8=|\r\n\r\nTrying to encode a base64 string from an invalid bytes array which was generated from invalid UTF-8 encoded string will return null:\r\n\r\n```\r\nlet empty_bytes_array = toscalar(print base64_decode_toarray("U3RyaW5n0KHR0tGA0L7Rh9C60LA"));\r\nprint empty_string = base64_encode_fromarray(empty_bytes_array)\r\n```\r\n\r\n|empty_string|\r\n|---|\r\n||',"https://docs.microsoft.com/en-us/azure/kusto/query/base64_encode_fromarrayfunction","base64_encode_fromarrayfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"base64_encode_tostring","Encodes a string as base64 string.","## Syntax\r\n\r\n`base64_encode_tostring(`*String*`)`\r\n\r\n## Arguments\r\n\r\n* *String*: Input string to be encoded as base64 string.\r\n\r\n## Returns\r\n\r\nReturns the string encoded as base64 string.\r\n\r\n* To decode base64 strings to UTF-8 strings, see [base64_decode_tostring()](base64_decode_tostringfunction.md)\r\n* To decode base64 strings to an array of long values, see [base64_decode_toarray()](base64_decode_toarrayfunction.md)",'```\r\nprint Quine=base64_encode_tostring("Kusto")\r\n```\r\n\r\n|Quine   |\r\n|--------|\r\n|S3VzdG8=|',"https://docs.microsoft.com/en-us/azure/kusto/query/base64_encode_tostringfunction","base64_encode_tostringfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"beta_cdf","Returns the standard cumulative beta distribution function.","```\r\nbeta_cdf(0.2, 10.0, 50.0)\r\n```\r\n\r\nIf *probability* = `beta_cdf(`*x*,...`)`, then `beta_inv(`*probability*,...`)` = *x*.\r\n\r\nThe beta distribution is commonly used to study variation in the percentage of something across samples, such as the fraction of the day people spend watching television.\r\n\r\n## Syntax\r\n\r\n`beta_cdf(`*x*`, `*alpha*`, `*beta*`)`\r\n\r\n## Arguments\r\n\r\n* *x*: A value at which to evaluate the function.\r\n* *alpha*: A parameter of the distribution.\r\n* *beta*: A parameter of the distribution.\r\n\r\n## Returns\r\n\r\n* The [cumulative beta distribution function](https://en.wikipedia.org/wiki/Beta_distribution#Cumulative_distribution_function).\r\n\r\n**Notes**\r\n\r\nIf any argument is nonnumeric, beta_cdf() returns null value.\r\n\r\nIf x < 0 or x > 1, beta_cdf() returns NaN value.\r\n\r\nIf alpha \u2264 0 or alpha > 10000, beta_cdf() returns the NaN value.\r\n\r\nIf beta \u2264 0 or beta > 10000, beta_cdf() returns the NaN value.",'```\r\ndatatable(x:double, alpha:double, beta:double, comment:string)\r\n[\r\n    0.9, 10.0, 20.0, "Valid input",\r\n    1.5, 10.0, 20.0, "x > 1, yields NaN",\r\n    double(-10), 10.0, 20.0, "x < 0, yields NaN",\r\n    0.1, double(-1.0), 20.0, "alpha is < 0, yields NaN"\r\n]\r\n| extend b = beta_cdf(x, alpha, beta)\r\n```\r\n\r\n|x|alpha|beta|comment|b|\r\n|---|---|---|---|---|\r\n|0.9|10|20|Valid input|0.999999999999959|\r\n|1.5|10|20|x > 1, yields NaN|NaN|\r\n|-10|10|20|x < 0, yields NaN|NaN|\r\n|0.1|-1|20|alpha is < 0, yields NaN|NaN|\r\n\r\n## See also\r\n\r\n* For computing the inverse of the beta cumulative probability density function, see [beta-inv()](./beta-invfunction.md).\r\n* For computing probability density function, see [beta-pdf()](./beta-pdffunction.md).',"https://docs.microsoft.com/en-us/azure/kusto/query/beta-cdffunction","beta-cdffunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"beta_inv","Returns the inverse of the beta cumulative probability beta density function.","```\r\nbeta_inv(0.1, 10.0, 50.0)\r\n```\r\n\r\nIf *probability* = `beta_cdf(`*x*,...`)`, then `beta_inv(`*probability*,...`)` = *x*. \r\n\r\nThe beta distribution can be used in project planning to model probable completion times given an expected completion time and variability.\r\n\r\n## Syntax\r\n\r\n`beta_inv(`*probability*`, `*alpha*`, `*beta*`)`\r\n\r\n## Arguments\r\n\r\n* *probability*: A probability associated with the beta distribution.\r\n* *alpha*: A parameter of the distribution.\r\n* *beta*: A parameter of the distribution.\r\n\r\n## Returns\r\n\r\n* The inverse of the beta cumulative probability density function [beta_cdf()](./beta-cdffunction.md)\r\n\r\n**Notes**\r\n\r\nIf any argument is nonnumeric, beta_inv() returns null value.\r\n\r\nIf alpha \u2264 0 or beta \u2264 0, beta_inv() returns the null value.\r\n\r\nIf probability \u2264 0 or probability > 1, beta_inv() returns the NaN value.\r\n\r\nGiven a value for probability, beta_inv() seeks that value x such that beta_cdf(x, alpha, beta) = probability.",'```\r\ndatatable(p:double, alpha:double, beta:double, comment:string)\r\n[\r\n    0.1, 10.0, 20.0, "Valid input",\r\n    1.5, 10.0, 20.0, "p > 1, yields null",\r\n    0.1, double(-1.0), 20.0, "alpha is < 0, yields NaN"\r\n]\r\n| extend b = beta_inv(p, alpha, beta)\r\n```\r\n\r\n|p|alpha|beta|comment|b|\r\n|---|---|---|---|---|\r\n|0.1|10|20|Valid input|0.226415022388749|\r\n|1.5|10|20|p > 1, yields null||\r\n|0.1|-1|20|alpha is < 0, yields NaN|NaN|\r\n\r\n## See also\r\n\r\n* For computing cumulative beta distribution function, see [beta-cdf()](./beta-cdffunction.md).\r\n* For computing probability beta density function, see [beta-pdf()](./beta-pdffunction.md).',"https://docs.microsoft.com/en-us/azure/kusto/query/beta-invfunction","beta-invfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"beta_pdf","Returns the probability density beta function.","```\r\nbeta_pdf(0.2, 10.0, 50.0)\r\n```\r\n\r\nThe beta distribution is commonly used to study variation in the percentage of something across samples, such as the fraction of the day people spend watching television.\r\n\r\n## Syntax\r\n\r\n`beta_pdf(`*x*`, `*alpha*`, `*beta*`)`\r\n\r\n## Arguments\r\n\r\n* *x*: A value at which to evaluate the function.\r\n* *alpha*: A parameter of the distribution.\r\n* *beta*: A parameter of the distribution.\r\n\r\n## Returns\r\n\r\n* The [probability beta density function](https://en.wikipedia.org/wiki/Beta_distribution#Probability_density_function).\r\n\r\n**Notes**\r\n\r\nIf any argument is nonnumeric, beta_pdf() returns null value.\r\n\r\nIf x \u2264 0 or 1 \u2264 x, beta_pdf() returns NaN value.\r\n\r\nIf alpha \u2264 0 or beta \u2264 0, beta_pdf() returns the NaN value.",'```\r\ndatatable(x:double, alpha:double, beta:double, comment:string)\r\n[\r\n    0.5, 10.0, 20.0, "Valid input",\r\n    1.5, 10.0, 20.0, "x > 1, yields NaN",\r\n    double(-10), 10.0, 20.0, "x < 0, yields NaN",\r\n    0.1, double(-1.0), 20.0, "alpha is < 0, yields NaN"\r\n]\r\n| extend r = beta_pdf(x, alpha, beta)\r\n```\r\n\r\n|x|alpha|beta|comment|r|\r\n|---|---|---|---|---|\r\n|0.5|10|20|Valid input|0.746176019310951|\r\n|1.5|10|20|x > 1, yields NaN|NaN|\r\n|-10|10|20|x < 0, yields NaN|NaN|\r\n|0.1|-1|20|alpha is < 0, yields NaN|NaN|\r\n\r\n**References**\r\n\r\n* For computing the inverse of the beta cumulative probability density function, see [beta-inv()](./beta-invfunction.md).\r\n* For the standard cumulative beta distribution function, see [beta-cdf()](./beta-cdffunction.md).',"https://docs.microsoft.com/en-us/azure/kusto/query/beta-pdffunction","beta-pdffunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,"between","Matches the input that is inside the inclusive range.","```\r\nTable1 | where Num1 between (1 .. 10)\r\nTable1 | where Time between (datetime(2017-01-01) .. datetime(2017-01-01))\r\n```\r\n\r\n`between` can operate on any numeric, datetime, or timespan expression.\r\n\r\n## Syntax\r\n\r\n*T* `|` `where` *expr* `between` `(`*leftRange*` .. `*rightRange*`)`   \r\n\r\nIf *expr* expression is datetime - another syntactic sugar syntax is provided:\r\n\r\n*T* `|` `where` *expr* `between` `(`*leftRangeDateTime*` .. `*rightRangeTimespan*`)`   \r\n\r\n## Arguments\r\n\r\n* *T* - The tabular input whose records are to be matched.\r\n* *expr* - the expression to filter.\r\n* *leftRange* - expression of the left range (inclusive).\r\n* *rightRange* - expression of the right range (inclusive).\r\n\r\n## Returns\r\n\r\nRows in *T* for which the predicate of (*expr* >= *leftRange* and *expr* <= *rightRange*) evaluates to `true`.","**Filtering numeric values using 'between' operator**  \r\n\r\n```\r\nrange x from 1 to 100 step 1\r\n| where x between (50 .. 55)\r\n```\r\n\r\n|x|\r\n|---|\r\n|50|\r\n|51|\r\n|52|\r\n|53|\r\n|54|\r\n|55|\r\n\r\n**Filtering datetime using 'between' operator**  \r\n\r\n```\r\nStormEvents\r\n| where StartTime between (datetime(2007-07-27) .. datetime(2007-07-30))\r\n| count \r\n```\r\n\r\n|Count|\r\n|---|\r\n|476|\r\n\r\n```\r\nStormEvents\r\n| where StartTime between (datetime(2007-07-27) .. 3d)\r\n| count \r\n```\r\n\r\n|Count|\r\n|---|\r\n|476|","https://docs.microsoft.com/en-us/azure/kusto/query/betweenoperator","betweenoperator.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"bin","Rounds values down to an integer multiple of a given bin size.",'Used frequently in combination with [`summarize by ...`](./summarizeoperator.md).\r\nIf you have a scattered set of values, they will be grouped into a smaller set of specific values.\r\n\r\nNull values, a null bin size, or a negative bin size will result in null. \r\n\r\nAlias to `floor()` function.\r\n\r\n## Syntax\r\n\r\n`bin(`*value*`,`*roundTo*`)`\r\n\r\n## Arguments\r\n\r\n* *value*: A number, date, or timespan. \r\n* *roundTo*: The "bin size". A number or timespan that divides *value*. \r\n\r\n## Returns\r\n\r\nThe nearest multiple of *roundTo* below *value*.  \r\n\r\n```\r\n(toint((value/roundTo))) * roundTo`\r\n```',"Expression | Result\r\n---|---\r\n`bin(4.5, 1)` | `4.0`\r\n`bin(time(16d), 7d)` | `14d`\r\n`bin(datetime(1970-05-11 13:45:07), 1d)`|  `datetime(1970-05-11)`\r\n\r\nThe following expression calculates a histogram of durations,\r\nwith a bucket size of 1 second:\r\n\r\n```\r\nT | summarize Hits=count() by bin(Duration, 1s)\r\n```","https://docs.microsoft.com/en-us/azure/kusto/query/binfunction","binfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"bin_at",'Rounds values down to a fixed-size "bin", with control over the bin\'s starting point.\r\n(See also [`bin function`](./binfunction.md).)','## Syntax\r\n\r\n`bin_at` `(`*Expression*`,` *BinSize*`, ` *FixedPoint*`)`\r\n\r\n## Arguments\r\n\r\n* *Expression*: A scalar expression of a numeric type (including `datetime` and `timespan`)\r\n  indicating the value to round.\r\n* *BinSize*: A scalar constant of a numeric type or `timespan` (for a `datetime` or `timespan` *Expression*) indicating\r\n  the size of each bin.\r\n* *FixedPoint*: A scalar constant of the same type as *Expression* indicating\r\n  one value of *Expression* which is a "fixed point" (that is, a value `fixed_point`\r\n  for which `bin_at(fixed_point, bin_size, fixed_point) == fixed_point`.)\r\n\r\n## Returns\r\n\r\nThe nearest multiple of *BinSize* below *Expression*, shifted so that *FixedPoint*\r\nwill be translated into itself.','|Expression                                                                    |Result                           |Comments                   |\r\n|------------------------------------------------------------------------------|---------------------------------|---------------------------|\r\n|`bin_at(6.5, 2.5, 7)`                                                         |`4.5`                            ||\r\n|`bin_at(time(1h), 1d, 12h)`                                                   |`-12h`                           ||\r\n|`bin_at(datetime(2017-05-15 10:20:00.0), 1d, datetime(1970-01-01 12:00:00.0))`|`datetime(2017-05-14 12:00:00.0)`|All bins will be at noon   |\r\n|`bin_at(datetime(2017-05-17 10:20:00.0), 7d, datetime(2017-06-04 00:00:00.0))`|`datetime(2017-05-14 00:00:00.0)`|All bins will be on Sundays|\r\n\r\nIn the following example, notice that the `"fixed point"` arg is returned as one of the bins and the other bins are aligned to it based on the `bin_size`. Also note that each datetime bin represents the starting time of that bin:\r\n\r\n```\r\n\r\ndatatable(Date:datetime, Num:int)[\r\ndatetime(2018-02-24T15:14),3,\r\ndatetime(2018-02-23T16:14),4,\r\ndatetime(2018-02-26T15:14),5]\r\n| summarize sum(Num) by bin_at(Date, 1d, datetime(2018-02-24 15:14:00.0000000)) \r\n```\r\n\r\n|Date|sum_Num|\r\n|---|---|\r\n|2018-02-23 15:14:00.0000000|4|\r\n|2018-02-24 15:14:00.0000000|3|\r\n|2018-02-26 15:14:00.0000000|5|',"https://docs.microsoft.com/en-us/azure/kusto/query/binatfunction","binatfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"bin_auto",'Rounds values down to a fixed-size "bin", with control over the bin size and starting point provided by a query property.','## Syntax\r\n\r\n`bin_auto` `(` *Expression* `)`\r\n\r\n## Arguments\r\n\r\n* *Expression*: A scalar expression of a numeric type indicating the value to round.\r\n\r\n**Client Request Properties**\r\n\r\n* `query_bin_auto_size`: A numeric literal indicating the size of each bin.\r\n* `query_bin_auto_at`: A numeric literal indicating one value of *Expression* which is a "fixed point" (that is, a value `fixed_point`\r\n  for which `bin_auto(fixed_point)` == `fixed_point`.)\r\n\r\n## Returns\r\n\r\nThe nearest multiple of `query_bin_auto_at` below *Expression*, shifted so that `query_bin_auto_at`\r\nwill be translated into itself.',"```\r\nset query_bin_auto_size=1h;\r\nset query_bin_auto_at=datetime(2017-01-01 00:05);\r\nrange Timestamp from datetime(2017-01-01 00:05) to datetime(2017-01-01 02:00) step 1m\r\n| summarize count() by bin_auto(Timestamp)\r\n```\r\n\r\n|Timestamp                    | count_|\r\n|-----------------------------|-------|\r\n|2017-01-01 00:05:00.0000000  | 60    |\r\n|2017-01-01 01:05:00.0000000  | 56    |","https://docs.microsoft.com/en-us/azure/kusto/query/bin-autofunction","bin-autofunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"binary_all_and","Accumulates values using the binary `AND` operation per summarization group (or in total, if summarization is done without grouping).","* Can be used only in context of aggregation inside [summarize](summarizeoperator.md)\r\n\r\n## Syntax\r\n\r\nsummarize `binary_all_and(`*Expr*`)`\r\n\r\n## Arguments\r\n\r\n* *Expr*: long number.\r\n\r\n## Returns\r\n\r\nReturns a value that is aggregated using the binary `AND` operation over records per summarization group (or in total, if summarization is done without grouping).","Producing 'cafe-food' using binary `AND` operations:\r\n\r\n```\r\ndatatable(num:long)\r\n[\r\n  0xFFFFFFFF, \r\n  0xFFFFF00F,\r\n  0xCFFFFFFD,\r\n  0xFAFEFFFF,\r\n]\r\n| summarize result = toupper(tohex(binary_all_and(num)))\r\n```\r\n\r\n|result|\r\n|---|\r\n|CAFEF00D|","https://docs.microsoft.com/en-us/azure/kusto/query/binary-all-and-aggfunction","binary-all-and-aggfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"binary_all_or","Accumulates values using the binary `OR` operation per summarization group (or in total, if summarization is done without grouping).","* Can be used only in context of aggregation inside [summarize](summarizeoperator.md)\r\n\r\n## Syntax\r\n\r\nsummarize `binary_all_or(`*Expr*`)`\r\n\r\n## Arguments\r\n\r\n* *Expr*: long number.\r\n\r\n## Returns\r\n\r\nReturns a value that is aggregated using the binary `OR` operation over records per summarization group (or in total, if summarization is done without grouping).","Producing 'cafe-food' using binary `OR` operations:\r\n\r\n```\r\ndatatable(num:long)\r\n[\r\n  0x88888008,\r\n  0x42000000,\r\n  0x00767000,\r\n  0x00000005, \r\n]\r\n| summarize result = toupper(tohex(binary_all_or(num)))\r\n```\r\n\r\n|result|\r\n|---|\r\n|CAFEF00D|","https://docs.microsoft.com/en-us/azure/kusto/query/binary-all-or-aggfunction","binary-all-or-aggfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"binary_all_xor","Accumulates values using the binary `XOR` operation per summarization group (or in total, if summarization is done without grouping).","* Can be used only in context of aggregation inside [summarize](summarizeoperator.md)\r\n\r\n## Syntax\r\n\r\nsummarize `binary_all_xor(`*Expr*`)`\r\n\r\n## Arguments\r\n\r\n* *Expr*: long number.\r\n\r\n## Returns\r\n\r\nReturns a value that is aggregated using the binary `XOR` operation over records per summarization group (or in total, if summarization is done without grouping).","Producing 'cafe-food' using binary `XOR` operations:\r\n\r\n```\r\ndatatable(num:long)\r\n[\r\n  0x44404440,\r\n  0x1E1E1E1E,\r\n  0x90ABBA09,\r\n  0x000B105A,\r\n]\r\n| summarize result = toupper(tohex(binary_all_xor(num)))\r\n```\r\n\r\n|result|\r\n|---|\r\n|CAFEF00D|","https://docs.microsoft.com/en-us/azure/kusto/query/binary-all-xor-aggfunction","binary-all-xor-aggfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"binary_and","Returns a result of the bitwise `and` operation between two values.","```\r\nbinary_and(x,y)\t\r\n```\r\n\r\n## Syntax\r\n\r\n`binary_and(`*num1*`,` *num2* `)`\r\n\r\n## Arguments\r\n\r\n* *num1*, *num2*: long numbers.\r\n\r\n## Returns\r\n\r\nReturns logical AND operation on a pair of numbers: num1 & num2.","","https://docs.microsoft.com/en-us/azure/kusto/query/binary-andfunction","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"binary_not","Returns a bitwise negation of the input value.","```\r\nbinary_not(x)\r\n```\r\n\r\n## Syntax\r\n\r\n`binary_not(`*num1*`)`\r\n\r\n## Arguments\r\n\r\n* *num1*: numeric \r\n\r\n## Returns\r\n\r\nReturns logical NOT operation on a number: num1.","","https://docs.microsoft.com/en-us/azure/kusto/query/binary-notfunction","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"binary_or","Returns a result of the bitwise `or` operation of the two values.","```\r\nbinary_or(x,y)\r\n```\r\n\r\n## Syntax\r\n\r\n`binary_or(`*num1*`,` *num2* `)`\r\n\r\n## Arguments\r\n\r\n* *num1*, *num2*: long numbers.\r\n\r\n## Returns\r\n\r\nReturns logical OR operation on a pair of numbers: num1 | num2.","","https://docs.microsoft.com/en-us/azure/kusto/query/binary-orfunction","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"binary_shift_left","Returns binary shift left operation on a pair of numbers.","```\r\nbinary_shift_left(x,y)\t\r\n```\r\n\r\n## Syntax\r\n\r\n`binary_shift_left(`*num1*`,` *num2* `)`\r\n\r\n## Arguments\r\n\r\n* *num1*, *num2*: int numbers.\r\n\r\n## Returns\r\n\r\nReturns binary shift left operation on a pair of numbers: num1 << (num2%64).\r\nIf n is negative a NULL value is returned.","","https://docs.microsoft.com/en-us/azure/kusto/query/binary-shift-leftfunction","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"binary_shift_right","Returns binary shift right operation on a pair of numbers.","```\r\nbinary_shift_right(x,y)\t\r\n```\r\n\r\n## Syntax\r\n\r\n`binary_shift_right(`*num1*`,` *num2* `)`\r\n\r\n## Arguments\r\n\r\n* *num1*, *num2*: long numbers.\r\n\r\n## Returns\r\n\r\nReturns binary shift right operation on a pair of numbers: num1 >> (num2%64).\r\nIf n is negative a NULL value is returned.","","https://docs.microsoft.com/en-us/azure/kusto/query/binary-shift-rightfunction","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"binary_xor","Returns a result of the bitwise `xor` operation of the two values.","```\r\nbinary_xor(x,y)\r\n```\r\n\r\n## Syntax\r\n\r\n`binary_xor(`*num1*`,` *num2* `)`\r\n\r\n## Arguments\r\n\r\n* *num1*, *num2*: long numbers.\r\n\r\n## Returns\r\n\r\nReturns logical XOR operation on a pair of numbers: num1 ^ num2.","","https://docs.microsoft.com/en-us/azure/kusto/query/binary-xorfunction","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"bitset_count_ones","Returns the number of set bits in the binary representation of a number.","```\r\nbitset_count_ones(42)\r\n```\r\n\r\n## Syntax\r\n\r\n`bitset_count_ones(`*num1*``)`\r\n\r\n## Arguments\r\n\r\n* *num1*: long or integer number.\r\n\r\n## Returns\r\n\r\nReturns the number of set bits in the binary representation of a number.","```\r\n// 42 = 32+8+2 : b'00101010' == 3 bits set\r\nprint ones = bitset_count_ones(42) \r\n```\r\n\r\n|ones|\r\n|---|\r\n|3|","https://docs.microsoft.com/en-us/azure/kusto/query/bitset-count-onesfunction","bitset-count-onesfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"buildschema","Returns the minimal schema that admits all values of *DynamicExpr*.","* Can be used only in context of aggregation, inside [summarize](summarizeoperator.md)\r\n\r\n## Syntax\r\n\r\nsummarize `buildschema(`*DynamicExpr*`)`\r\n\r\n## Arguments\r\n\r\n* *DynamicExpr*: Expression that is used for the aggregation calculation. The parameter column type must be `dynamic`. \r\n\r\n## Returns\r\n\r\nThe maximum value of *`Expr`* across the group.\r\n\r\n> [!TIP] \r\n> If `buildschema(json_column)` gives a syntax error:\r\n>\r\n> > *Is your `json_column` a string rather than a dynamic object?*\r\n>\r\n> then use `buildschema(parsejson(json_column))`.",'Assume the input column has three dynamic values.\r\n\r\n||\r\n|---|\r\n|`{"x":1, "y":3.5}`|\r\n|`{"x":"somevalue", "z":[1, 2, 3]}`|\r\n|`{"y":{"w":"zzz"}, "t":["aa", "bb"], "z":["foo"]}`|\r\n||\r\n\r\nThe resulting schema would be:\r\n\r\n```\r\n{ \r\n    "x":["int", "string"],\r\n    "y":["double", {"w": "string"}],\r\n    "z":{"`indexer`": ["int", "string"]},\r\n    "t":{"`indexer`": "string"}\r\n}\r\n```\r\n\r\nThe schema tells us that:\r\n\r\n* The root object is a container with four properties named x, y, z, and t.\r\n* The property called "x" that could be of type "int" or of type "string".\r\n* The property called "y" that could be of type "double", or another container with a property called "w" of type "string".\r\n* The ``indexer`` keyword indicates that "z" and "t" are arrays.\r\n* Each item in the array "z" is of type "int" or of type "string".\r\n* "t" is an array of strings.\r\n* Every property is implicitly optional, and any array may be empty.\r\n\r\n\r\n### Schema model\r\n\r\nThe syntax of the returned schema is:\r\n\r\n```output\r\nContainer ::= \'{\' Named-type* \'}\';\r\nNamed-type ::= (name | \'"`indexer`"\') \':\' Type;\r\nType ::= Primitive-type | Union-type | Container;\r\nUnion-type ::= \'[\' Type* \']\';\r\nPrimitive-type ::= "int" | "string" | ...;\r\n```\r\n\r\nThe values are equivalent to a subset of the TypeScript type annotations, encoded as a Kusto dynamic value. \r\nIn Typescript, the example schema would be:\r\n\r\n```typescript\r\nvar someobject: \r\n{\r\n    x?: (number | string),\r\n    y?: (number | { w?: string}),\r\n    z?: { [n:number] : (int | string)},\r\n    t?: { [n:number]: string }\r\n}\r\n```',"https://docs.microsoft.com/en-us/azure/kusto/query/buildschema-aggfunction","buildschema-aggfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"case","Evaluates a list of predicates and returns the first result expression whose predicate is satisfied.","If neither of the predicates return `true`, the result of the last expression (the `else`) is returned.\r\nAll odd arguments (count starts at 1) must be expressions that evaluate to a  `boolean` value.\r\nAll even arguments (the `then`s) and the last argument (the `else`) must be of the same type.\r\n\r\n## Syntax\r\n\r\n`case(`*predicate_1*`,` *then_1*,\r\n       *predicate_2*`,` *then_2*,\r\n       *predicate_3*`,` *then_3*,\r\n       *else*`)`\r\n\r\n## Arguments\r\n\r\n* *predicate_i*: An expression that evaluates to a `boolean` value.\r\n* *then_i*: An expression that gets evaluated and its value is returned from the function if *predicate_i* is the first predicate that evaluates to `true`.\r\n* *else*: An expression that gets evaluated and its value is returned from the function if neither of the *predicate_i* evaluate to `true`.\r\n\r\n## Returns\r\n\r\nThe value of the first *then_i* whose *predicate_i* evaluates to `true`, or the value of *else* if neither of the predicates are satisfied.",'```\r\nrange Size from 1 to 15 step 2\r\n| extend bucket = case(Size <= 3, "Small", \r\n                       Size <= 10, "Medium", \r\n                       "Large")\r\n```\r\n\r\n|Size|bucket|\r\n|---|---|\r\n|1|Small|\r\n|3|Small|\r\n|5|Medium|\r\n|7|Medium|\r\n|9|Medium|\r\n|11|Large|\r\n|13|Large|\r\n|15|Large|',"https://docs.microsoft.com/en-us/azure/kusto/query/casefunction","casefunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"ceiling","Calculates the smallest integer greater than, or equal to, the specified numeric expression.","## Syntax\r\n\r\n`ceiling(`*x*`)`\r\n\r\n## Arguments\r\n\r\n* *x*: A real number.\r\n\r\n## Returns\r\n\r\n* The smallest integer greater than, or equal to, the specified numeric expression.","```\r\nprint c1 = ceiling(-1.1), c2 = ceiling(0), c3 = ceiling(0.9)\r\n```\r\n\r\n|c1|c2|c3|\r\n|---|---|---|\r\n|-1|0|1|","https://docs.microsoft.com/en-us/azure/kusto/query/ceilingfunction","ceilingfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"cluster","Changes the reference of the query to a remote cluster.","```\r\ncluster('help').database('Sample').SomeTable\r\n```\r\n\r\n## Syntax\r\n\r\n`cluster(`*stringConstant*`)`\r\n\r\n## Arguments\r\n\r\n* *stringConstant*: Name of the cluster that is referenced. Cluster name can be either \r\na fully qualified DNS name, or a string that will be suffixed with `.kusto.windows.net`. Argument has to be _constant_ prior to the query's execution,\r\ni.e. cannot come from sub-query evaluation.\r\n\r\n**Notes**\r\n\r\n* For accessing database within the same cluster - use [database()](databasefunction.md) function.\r\n* More information about cross-cluster and cross-database queries available [here](cross-cluster-or-database-queries.md)","### Use cluster() to access remote cluster \r\n\r\nThe next query can be run on any of the Kusto clusters.\r\n\r\n```\r\ncluster('help').database('Samples').StormEvents | count\r\n\r\ncluster('help.kusto.windows.net').database('Samples').StormEvents | count  \r\n```\r\n\r\n|Count|\r\n|---|\r\n|59066|\r\n\r\n### Use cluster() inside let statements \r\n\r\nThe same query as above can be rewritten to use inline function (let statement) that \r\nreceives a parameter `clusterName` - which is passed into the cluster() function.\r\n\r\n```\r\nlet foo = (clusterName:string)\r\n{\r\n    cluster(clusterName).database('Samples').StormEvents | count\r\n};\r\nfoo('help')\r\n```\r\n\r\n|Count|\r\n|---|\r\n|59066|\r\n\r\n### Use cluster() inside Functions \r\n\r\nThe same query as above can be rewritten to be used in a function that \r\nreceives a parameter `clusterName` - which is passed into the cluster() function.\r\n\r\n```\r\n.create function foo(clusterName:string)\r\n{\r\n    cluster(clusterName).database('Samples').StormEvents | count\r\n};\r\n```\r\n\r\n**Note:** such functions can be used only locally and not in the cross-cluster query.","https://docs.microsoft.com/en-us/azure/kusto/query/clusterfunction","clusterfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"coalesce","Evaluates a list of expressions and returns the first non-null (or non-empty for string) expression.",'```\r\ncoalesce(tolong("not a number"), tolong("42"), 33) == 42\r\n```\r\n\r\n## Syntax\r\n\r\n`coalesce(`*expr_1*`, `*expr_2*`,` ...)\r\n\r\n## Arguments\r\n\r\n* *expr_i*: A scalar expression, to be evaluated.\r\n\r\n- All arguments must be of the same type.\r\n- Maximum of 64 arguments is supported.\r\n\r\n\r\n## Returns\r\n\r\nThe value of the first *expr_i* whose value is not null (or not-empty for string expressions).','```\r\nprint result=coalesce(tolong("not a number"), tolong("42"), 33)\r\n```\r\n\r\n|result|\r\n|---|\r\n|42|',"https://docs.microsoft.com/en-us/azure/kusto/query/coalescefunction","coalescefunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,"consume","Consumes the tabular data stream handed to the operator.","The `consume` operator is mostly used for triggering the query side-effect without actually returning\r\nthe results back to the caller.\r\n\r\n```\r\nT | consume\r\n```\r\n\r\n## Syntax\r\n\r\n`consume` [`decodeblocks` `=` *DecodeBlocks*]\r\n\r\n## Arguments\r\n\r\n* *DecodeBlocks*: A constant Boolean value. If set to `true`, or if the request\r\n  property `perftrace` is set to `true`, the `consume` operator will not just\r\n  enumerate the records at its input, but actually force each value in those\r\n  records to be decompressed and decoded.\r\n\r\nThe `consume` operator can be used for estimating the\r\ncost of a query without actually delivering the results back to the client.\r\n(The estimation is not exact for a variety of reasons; for example, `consume`\r\nis calculated distributively, so `T | consume` will not transmit the table's\r\ndata between the nodes of the cluster.)\r\n\r\n<!--\r\n* *WithStats*: A constant Boolean value. If set to `true` (or if the global\r\n  property `perftrace` is set), the operator will return a single\r\n  row with a single column called `Stats` of type `dynamic` holding the statistics\r\n  of the data source fed to the `consume` operator.\r\n-->","","https://docs.microsoft.com/en-us/azure/kusto/query/consumeoperator","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"cos","Returns the cosine function.","## Syntax\r\n\r\n`cos(`*x*`)`\r\n\r\n## Arguments\r\n\r\n* *x*: A real number.\r\n\r\n## Returns\r\n\r\n* The result of `cos(x)`","","https://docs.microsoft.com/en-us/azure/kusto/query/cosfunction","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"cot","Calculates the trigonometric cotangent of the specified angle, in radians.","## Syntax\r\n\r\n`cot(`*x*`)`\r\n\r\n## Arguments\r\n\r\n* *x*: A real number.\r\n\r\n## Returns\r\n\r\n* The cotangent function value for `x`","","https://docs.microsoft.com/en-us/azure/kusto/query/cotfunction","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"count","Returns a count of the records per summarization group (or in total, if summarization is done without grouping).","* Can be used only in context of aggregation inside [summarize](summarizeoperator.md)\r\n* Use the [countif](countif-aggfunction.md) aggregation function\r\n  to count only records for which some predicate returns `true`.\r\n\r\n## Syntax\r\n\r\nsummarize `count()`\r\n\r\n## Returns\r\n\r\nReturns a count of the records per summarization group (or in total, if summarization is done without grouping).",'Counting events in states starting with letter `W`:\r\n\r\n```\r\nStormEvents\r\n| where State startswith "W"\r\n| summarize Count=count() by State\r\n```\r\n\r\n|State|Count|\r\n|---|---|\r\n|WEST VIRGINIA|757|\r\n|WYOMING|396|\r\n|WASHINGTON|261|\r\n|WISCONSIN|1850|',"https://docs.microsoft.com/en-us/azure/kusto/query/count-aggfunction","count-aggfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,"count","Returns the number of records in the input record set.","## Syntax\r\n\r\n`T | count`\r\n\r\n## Arguments\r\n\r\n*T*: The tabular data whose records are to be counted.\r\n\r\n## Returns\r\n\r\nThis function returns a table with a single record and column of type\r\n`long`. The value of the only cell is the number of records in *T*.","```\r\nStormEvents | count\r\n```","https://docs.microsoft.com/en-us/azure/kusto/query/countoperator","countoperator.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"countif","Returns a count of rows for which *Predicate* evaluates to `true`. Can only be used only in context of aggregation inside [summarize](summarizeoperator.md).","## Syntax\r\n\r\nsummarize `countif(`*Predicate*`)`\r\n\r\n## Arguments\r\n\r\n*Predicate*: Expression that will be used for aggregation calculation. *Predicate* can be any scalar expression with return type of bool (evaluating to true/false).\r\n\r\n## Returns\r\n\r\nReturns a count of rows for which *Predicate* evaluates to `true`.",'```\r\nlet T = datatable(name:string, day_of_birth:long)\r\n[\r\n   "John", 9,\r\n   "Paul", 18,\r\n   "George", 25,\r\n   "Ringo", 7\r\n];\r\nT\r\n| summarize countif(strlen(name) > 4)\r\n```\r\n\r\n|countif_|\r\n|----|\r\n|2|\r\n\r\n## See also\r\n\r\n[count()](count-aggfunction.md) function, which counts rows without predicate expression.',"https://docs.microsoft.com/en-us/azure/kusto/query/countif-aggfunction","countif-aggfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"countof","Counts occurrences of a substring in a string. Plain string matches may overlap; regex matches do not.",'```\r\ncountof("The cat sat on the mat", "at") == 3\r\ncountof("The cat sat on the mat", @"\\b.at\\b", "regex") == 3\r\n```\r\n\r\n## Syntax\r\n\r\n`countof(`*text*`,` *search* [`,` *kind*]`)`\r\n\r\n## Arguments\r\n\r\n* *text*: A string.\r\n* *search*: The plain string or [regular expression](./re2.md) to match inside *text*.\r\n* *kind*: `"normal"|"regex"` Default `normal`. \r\n\r\n## Returns\r\n\r\nThe number of times that the search string can be matched in the container. Plain string matches may overlap; regex matches do not.','|Function call|Result|\r\n|---|---\r\n|`countof("aaa", "a")`| 3 \r\n|`countof("aaaa", "aa")`| 3 (not 2!)\r\n|`countof("ababa", "ab", "normal")`| 2\r\n|`countof("ababa", "aba")`| 2\r\n|`countof("ababa", "aba", "regex")`| 1\r\n|`countof("abcabc", "a.c", "regex")`| 2',"https://docs.microsoft.com/en-us/azure/kusto/query/countoffunction","countoffunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"current_cluster_endpoint","Returns the network endpoint (DNS name) of the current cluster being queried.","## Syntax\r\n\r\n`current_cluster_endpoint()`\r\n\r\n## Returns\r\n\r\nThe network endpoint (DNS name) of the current cluster being queried,\r\nas a value of type `string`.",'```\r\nprint strcat("This query executed on: ", current_cluster_endpoint())\r\n```',"https://docs.microsoft.com/en-us/azure/kusto/query/current-cluster-endpoint-function","current-cluster-endpoint-function.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"current_database","Returns the name of the database in scope (database that all query\r\nentities are resolved against if no other database is specified).","## Syntax\r\n\r\n`current_database()`\r\n\r\n## Returns\r\n\r\nThe name of the database in scope as a value of type `string`.",'```\r\nprint strcat("Database in scope: ", current_database())\r\n```',"https://docs.microsoft.com/en-us/azure/kusto/query/current-database-function","current-database-function.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"current_principal","Returns the current principal name that runs the query.","## Syntax\r\n\r\n`current_principal()`\r\n\r\n## Returns\r\n\r\nThe current principal fully qualified name (FQN) as a `string`.  \r\nThe string format is:  \r\n*PrinciplaType*`=`*PrincipalId*`;`*TenantId*","```\r\nprint fqn=current_principal()\r\n```\r\n\r\n|fqn|\r\n|---|\r\n|aaduser=346e950e-4a62-42bf-96f5-4cf4eac3f11e;72f988bf-86f1-41af-91ab-2d7cd011db47|","https://docs.microsoft.com/en-us/azure/kusto/query/current-principalfunction","current-principalfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"current_principal_details","Returns details of the principal running the query.","## Syntax\r\n\r\n`current_principal_details()`\r\n\r\n## Returns\r\n\r\nThe details of the current principal as a `dynamic`.",'```\r\nprint d=current_principal_details()\r\n```\r\n\r\n|d|\r\n|---|\r\n|{<br>  "UserPrincipalName": "user@fabrikam.com",<br>  "IdentityProvider": "https://sts.windows.net",<br>  "Authority": "72f988bf-86f1-41af-91ab-2d7cd011db47",<br>  "Mfa": "True",<br>  "Type": "AadUser",<br>  "DisplayName": "James Smith (upn: user@fabrikam.com)",<br>  "ObjectId": "346e950e-4a62-42bf-96f5-4cf4eac3f11e",<br>  "FQN": null,<br>  "Notes": null<br>}|',"https://docs.microsoft.com/en-us/azure/kusto/query/current-principal-detailsfunction","current-principal-detailsfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"current_principal_is_member_of","Checks group membership or principal identity of the current principal running the query.","```\r\nprint current_principal_is_member_of(\r\n    'aaduser=user1@fabrikam.com', \r\n    'aadgroup=group1@fabrikam.com',\r\n    'aadapp=66ad1332-3a94-4a69-9fa2-17732f093664;72f988bf-86f1-41af-91ab-2d7cd011db47'\r\n    )\r\n```\r\n\r\n## Syntax\r\n\r\n`current_principal_is_member_of`(`*list of string literals*`)\r\n\r\n## Arguments\r\n\r\n* *list of expressions* - a comma-separated list of string literals, where each literal is a principal fully qualified name (FQN) string formed as:  \r\n*PrinciplaType*`=`*PrincipalId*`;`*TenantId*\r\n\r\n| PrincipalType   | FQN Prefix  |\r\n|-----------------|-------------|\r\n| AAD User        | `aaduser=`  |\r\n| AAD Group       | `aadgroup=` |\r\n| AAD Application | `aadapp=`   |\r\n\r\n## Returns\r\n\r\nThe function returns:\r\n\r\n* `true`: if the current principal running the query was successfully matched for at least one input argument.\r\n* `false`: if the current principal running the query was not member of any `aadgroup=` FQN arguments and was not equal to any of the `aaduser=` or `aadapp=` FQN arguments.\r\n* `(null)`: if the current principal running the query was not member of any `aadgroup=` FQN arguments and was not equal to any of the `aaduser=` or `aadapp=` FQN arguments, and at least one FQN argument wasn't successfully resolved (wasn't  pressed in Azure AD). \r\n\r\n> [!NOTE]\r\n> Because the function returns a tri-state value (`true`, `false`,  and `null`), it's important to rely only on positive return values to confirm successful membership. In other words, the following expressions are NOT the same:\r\n> \r\n> * `where current_principal_is_member_of('non-existing-group')`\r\n> * `where current_principal_is_member_of('non-existing-group') != false`","```\r\nprint result=current_principal_is_member_of(\r\n    'aaduser=user1@fabrikam.com', \r\n    'aadgroup=group1@fabrikam.com',\r\n    'aadapp=66ad1332-3a94-4a69-9fa2-17732f093664;72f988bf-86f1-41af-91ab-2d7cd011db47'\r\n    )\r\n```\r\n\r\n| result |\r\n|--------|\r\n| (null) |\r\n\r\nUsing dynamic array instead of multiple arguments:\r\n\r\n```\r\nprint result=current_principal_is_member_of(\r\n    dynamic([\r\n    'aaduser=user1@fabrikam.com', \r\n    'aadgroup=group1@fabrikam.com',\r\n    'aadapp=66ad1332-3a94-4a69-9fa2-17732f093664;72f988bf-86f1-41af-91ab-2d7cd011db47'\r\n    ]))\r\n```\r\n\r\n| result |\r\n|--------|\r\n| (null) |","https://docs.microsoft.com/en-us/azure/kusto/query/current-principal-ismemberoffunction","current-principal-ismemberoffunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"cursor_after","A predicate over the records of a table to compare their ingestion time\r\nagainst a database cursor.","## Syntax\r\n\r\n`cursor_after` `(` *RHS* `)`\r\n\r\n## Arguments\r\n\r\n* *RHS*: Either an empty string literal, or a valid database cursor value.\r\n\r\n## Returns\r\n\r\nA scalar value of type `bool` that indicates whether the record was ingested\r\nafter the database cursor *RHS* (`true`) or not (`false`).\r\n\r\n**Notes**\r\n\r\nSee [database cursors](../management/databasecursor.md) for additional\r\ndetails on database cursors.\r\n\r\nThis function can only be invoked on records of a table which has the\r\n[IngestionTime policy](../management/ingestiontimepolicy.md) enabled.","","https://docs.microsoft.com/en-us/azure/kusto/query/cursorafterfunction","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"cursor_before_or_at","A predicate over the records of a table to compare their ingestion time\r\nagainst a database cursor.","## Syntax\r\n\r\n`cursor_before_or_at` `(` *RHS* `)`\r\n\r\n## Arguments\r\n\r\n* *RHS*: Either an empty string literal, or a valid database cursor value.\r\n\r\n## Returns\r\n\r\nA scalar value of type `bool` that indicates whether the record was ingested\r\nbefore or at the database cursor *RHS* (`true`) or not (`false`).\r\n\r\n**Notes**\r\n\r\nSee [database cursors](../management/databasecursor.md) for additional\r\ndetails on database cursors.\r\n\r\nThis function can only be invoked on records of a table which has the\r\n[IngestionTime policy](../management/ingestiontimepolicy.md) enabled.","","https://docs.microsoft.com/en-us/azure/kusto/query/cursorbeforeoratfunction","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"database","Changes the reference of the query to a specific database within the cluster scope.","```\r\ndatabase('Sample').StormEvents\r\ncluster('help').database('Sample').StormEvents\r\n```\r\n\r\n> [!NOTE]\r\n> * For more information, see [cross-database and cross-cluster queries](cross-cluster-or-database-queries.md).\r\n> * For accessing remote cluster and remote database, see [cluster()](clusterfunction.md) scope function.\r\n\r\n## Syntax\r\n\r\n`database(`*stringConstant*`)`\r\n\r\n## Arguments\r\n\r\n* *stringConstant*: Name of the database that is referenced. Database identified can be either `DatabaseName` or `PrettyName`. Argument has to be _constant_ prior of query execution, i.e. cannot come from sub-query evaluation.","### Use database() to access table of other database\r\n\r\n```\r\ndatabase('Samples').StormEvents | count\r\n```\r\n\r\n|Count|\r\n|---|\r\n|59066|\r\n\r\n### Use database() inside let statements \r\n\r\nThe same query as above can be rewritten to use inline function (let statement) that \r\nreceives a parameter `dbName` - which is passed into the database() function.\r\n\r\n```\r\nlet foo = (dbName:string)\r\n{\r\n    database(dbName).StormEvents | count\r\n};\r\nfoo('help')\r\n```\r\n\r\n|Count|\r\n|---|\r\n|59066|\r\n\r\n### Use database() inside functions \r\n\r\nThe same query as above can be rewritten to be used in a function that \r\nreceives a parameter `dbName` - which is passed into the database() function.\r\n\r\n```\r\n.create function foo(dbName:string)\r\n{\r\n    database(dbName).StormEvents | count\r\n};\r\n```\r\n\r\n> [!NOTE]\r\n> Such functions can be used only locally and not in the cross-cluster query.","https://docs.microsoft.com/en-us/azure/kusto/query/databasefunction","databasefunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,"datatable","Returns a table whose schema and values are defined in the query itself.","> [!NOTE]\r\n> This operator doesn't have a pipeline input.\r\n\r\n## Syntax\r\n\r\n`datatable` `(` *ColumnName* `:` *ColumnType* [`,` ...] `)` `[` *ScalarValue* [`,` *ScalarValue* ...] `]`\r\n\r\n## Arguments\r\n\r\n* *ColumnName*, *ColumnType*: These arguments define the schema of the table. The arguments use the same syntax as used when defining a table.\r\n  For more information, see [.create table](../management/create-table-command.md)).\r\n* *ScalarValue*: A constant scalar value to insert into the table. The number of values\r\n  must be an integer multiple of the columns in the table. The *n*'th value\r\n  must have a type that corresponds to column *n* % *NumColumns*.\r\n\r\n\r\n## Returns\r\n\r\nThis operator returns a data table of the given schema and data.",'```\r\ndatatable (Date:datetime, Event:string)\r\n    [datetime(1910-06-11), "Born",\r\n     datetime(1930-01-01), "Enters Ecole Navale",\r\n     datetime(1953-01-01), "Published first book",\r\n     datetime(1997-06-25), "Died"]\r\n| where strlen(Event) > 4\r\n```',"https://docs.microsoft.com/en-us/azure/kusto/query/datatableoperator","datatableoperator.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"datetime_add","Calculates a new [datetime](./scalar-data-types/datetime.md) from a specified datepart multiplied by a specified amount, added to a specified [datetime](./scalar-data-types/datetime.md).","## Syntax\r\n\r\n`datetime_add(`*period*`,`*amount*`,`*datetime*`)`\r\n\r\n## Arguments\r\n\r\n* `period`: [string](./scalar-data-types/string.md). \r\n* `amount`: [integer](./scalar-data-types/int.md).\r\n* `datetime`: [datetime](./scalar-data-types/datetime.md) value.\r\n\r\nPossible values of *period*: \r\n\r\n- Year\r\n- Quarter\r\n- Month\r\n- Week\r\n- Day\r\n- Hour\r\n- Minute\r\n- Second\r\n- Millisecond\r\n- Microsecond\r\n- Nanosecond\r\n\r\n## Returns\r\n\r\nA date after a certain time/date interval has been added.","```\r\nprint  year = datetime_add('year',1,make_datetime(2017,1,1)),\r\nquarter = datetime_add('quarter',1,make_datetime(2017,1,1)),\r\nmonth = datetime_add('month',1,make_datetime(2017,1,1)),\r\nweek = datetime_add('week',1,make_datetime(2017,1,1)),\r\nday = datetime_add('day',1,make_datetime(2017,1,1)),\r\nhour = datetime_add('hour',1,make_datetime(2017,1,1)),\r\nminute = datetime_add('minute',1,make_datetime(2017,1,1)),\r\nsecond = datetime_add('second',1,make_datetime(2017,1,1))\r\n\r\n```\r\n\r\n|year|quarter|month|week|day|hour|minute|second|\r\n|---|---|---|---|---|---|---|---|\r\n|2018-01-01 00:00:00.0000000|2017-04-01 00:00:00.0000000|2017-02-01 00:00:00.0000000|2017-01-08 00:00:00.0000000|2017-01-02 00:00:00.0000000|2017-01-01 01:00:00.0000000|2017-01-01 00:01:00.0000000|2017-01-01 00:00:01.0000000|","https://docs.microsoft.com/en-us/azure/kusto/query/datetime-addfunction","datetime-addfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"datetime_diff","Calculates calendarian difference between two [datetime](./scalar-data-types/datetime.md) values.","## Syntax\r\n\r\n`datetime_diff(`*period*`,`*datetime_1*`,`*datetime_2*`)`\r\n\r\n## Arguments\r\n\r\n* `period`: `string`. \r\n* `datetime_1`: [datetime](./scalar-data-types/datetime.md) value.\r\n* `datetime_2`: [datetime](./scalar-data-types/datetime.md) value.\r\n\r\nPossible values of *period*: \r\n\r\n- Year\r\n- Quarter\r\n- Month\r\n- Week\r\n- Day\r\n- Hour\r\n- Minute\r\n- Second\r\n- Millisecond\r\n- Microsecond\r\n- Nanosecond\r\n\r\n## Returns\r\n\r\nAn integer, which represents amount of `periods` in the result of subtraction (`datetime_1` - `datetime_2`).","```\r\nprint\r\nyear = datetime_diff('year',datetime(2017-01-01),datetime(2000-12-31)),\r\nquarter = datetime_diff('quarter',datetime(2017-07-01),datetime(2017-03-30)),\r\nmonth = datetime_diff('month',datetime(2017-01-01),datetime(2015-12-30)),\r\nweek = datetime_diff('week',datetime(2017-10-29 00:00),datetime(2017-09-30 23:59)),\r\nday = datetime_diff('day',datetime(2017-10-29 00:00),datetime(2017-09-30 23:59)),\r\nhour = datetime_diff('hour',datetime(2017-10-31 01:00),datetime(2017-10-30 23:59)),\r\nminute = datetime_diff('minute',datetime(2017-10-30 23:05:01),datetime(2017-10-30 23:00:59)),\r\nsecond = datetime_diff('second',datetime(2017-10-30 23:00:10.100),datetime(2017-10-30 23:00:00.900)),\r\nmillisecond = datetime_diff('millisecond',datetime(2017-10-30 23:00:00.200100),datetime(2017-10-30 23:00:00.100900)),\r\nmicrosecond = datetime_diff('microsecond',datetime(2017-10-30 23:00:00.1009001),datetime(2017-10-30 23:00:00.1008009)),\r\nnanosecond = datetime_diff('nanosecond',datetime(2017-10-30 23:00:00.0000000),datetime(2017-10-30 23:00:00.0000007))\r\n```\r\n\r\n|year|quarter|month|week|day|hour|minute|second|millisecond|microsecond|nanosecond|\r\n|---|---|---|---|---|---|---|---|---|---|---|\r\n|17|2|13|5|29|2|5|10|100|100|-700|","https://docs.microsoft.com/en-us/azure/kusto/query/datetime-difffunction","datetime-difffunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"datetime_part","Extracts the requested date part as an integer value.",'```\r\ndatetime_part("Day",datetime(2015-12-14))\r\n```\r\n\r\n## Syntax\r\n\r\n`datetime_part(`*part*`,`*datetime*`)`\r\n\r\n## Arguments\r\n\r\n* `date`: `datetime`\r\n* `part`: `string`\r\n\r\nPossible values of `part`: \r\n\r\n* Year\r\n* Quarter\r\n* Month\r\n* week_of_year\r\n* Day\r\n* DayOfYear\r\n* Hour\r\n* Minute\r\n* Second\r\n* Millisecond\r\n* Microsecond\r\n* Nanosecond\r\n\r\n## Returns\r\n\r\nAn integer representing the extracted part.\r\n\r\n> [!NOTE]\r\n> `week_of_year` returns an integer which represents the week number. The week number is calculated from the first week of a year, which is the one that includes the first Thursday.','```\r\nlet dt = datetime(2017-10-30 01:02:03.7654321); \r\nprint \r\nyear = datetime_part("year", dt),\r\nquarter = datetime_part("quarter", dt),\r\nmonth = datetime_part("month", dt),\r\nweekOfYear = datetime_part("week_of_year", dt),\r\nday = datetime_part("day", dt),\r\ndayOfYear = datetime_part("dayOfYear", dt),\r\nhour = datetime_part("hour", dt),\r\nminute = datetime_part("minute", dt),\r\nsecond = datetime_part("second", dt),\r\nmillisecond = datetime_part("millisecond", dt),\r\nmicrosecond = datetime_part("microsecond", dt),\r\nnanosecond = datetime_part("nanosecond", dt)\r\n\r\n```\r\n\r\n|year|quarter|month|weekOfYear|day|dayOfYear|hour|minute|second|millisecond|microsecond|nanosecond|\r\n|---|---|---|---|---|---|---|---|---|---|---|---|\r\n|2017|4|10|44|30|303|1|2|3|765|765432|765432100|\r\n\r\n> [!NOTE]\r\n> `weekofyear` is an obsolete variant of `week_of_year` part. `weekofyear` was not ISO 8601 compliant; the first week of a year was defined as the week with the year\'s first Wednesday in it.\r\n> `week_of_year` is ISO 8601 compliant; the first week of a year is defined as the week with the year\'s first Thursday in it. [For more information](https://en.wikipedia.org/wiki/ISO_8601#Week_dates).',"https://docs.microsoft.com/en-us/azure/kusto/query/datetime-partfunction","datetime-partfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"dayofmonth","Returns the integer number representing the day number of the given month","```\r\ndayofmonth(datetime(2015-12-14)) == 14\r\n```\r\n\r\n## Syntax\r\n\r\n`dayofmonth(`*a_date*`)`\r\n\r\n## Arguments\r\n\r\n* `a_date`: A `datetime`.\r\n\r\n## Returns\r\n\r\n`day number` of the given month.","","https://docs.microsoft.com/en-us/azure/kusto/query/dayofmonthfunction","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"dayofweek","Returns the integer number of days since the preceding Sunday, as a `timespan`.","```\r\ndayofweek(datetime(2015-12-14)) == 1d  // Monday\r\n```\r\n\r\n## Syntax\r\n\r\n`dayofweek(`*a_date*`)`\r\n\r\n## Arguments\r\n\r\n* `a_date`: A `datetime`.\r\n\r\n## Returns\r\n\r\nThe `timespan` since midnight at the beginning of the preceding Sunday, rounded down to an integer number of days.","```\r\ndayofweek(datetime(1947-11-30 10:00:05))  // time(0.00:00:00), indicating Sunday\r\ndayofweek(datetime(1970-05-11))           // time(1.00:00:00), indicating Monday\r\n```","https://docs.microsoft.com/en-us/azure/kusto/query/dayofweekfunction","dayofweekfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"dayofyear","Returns the integer number represents the day number of the given year.","```\r\ndayofyear(datetime(2015-12-14))\r\n```\r\n\r\n## Syntax\r\n\r\n`dayofweek(`*a_date*`)`\r\n\r\n## Arguments\r\n\r\n* `a_date`: A `datetime`.\r\n\r\n## Returns\r\n\r\n`day number` of the given year.","","https://docs.microsoft.com/en-us/azure/kusto/query/dayofyearfunction","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"dcount","Returns an estimate for the number of distinct values that are taken by a scalar expression in the summary group.","> [!NOTE]\r\n> The `dcount()` aggregation function is primarily useful for estimating the cardinality of huge sets. It trades performance for accuracy, and may return a result that varies between executions. The order of inputs may have an effect on its output.\r\n\r\n## Syntax\r\n\r\n... `|` `summarize` `dcount` `(`*`Expr`*[, *`Accuracy`*]`)` ...\r\n\r\n## Arguments\r\n\r\n* *Expr*: A scalar expression whose distinct values are to be counted.\r\n* *Accuracy*: An optional `int` literal that defines the requested estimation accuracy. See below for supported values. If unspecified, the default value\r\n  `1` is used.\r\n\r\n## Returns\r\n\r\nReturns an estimate of the number of distinct values of *`Expr`* in the group.",'```\r\nPageViewLog | summarize countries=dcount(country) by continent\r\n```\r\n\r\n![D count](images/dcount-aggfunction/dcount.png)\r\nGet an exact count of distinct values of `V` grouped by `G`.\r\n\r\n```\r\nT | summarize by V, G | summarize count() by G\r\n```\r\n\r\nThis calculation requires a great amount of internal memory, since distinct values of `V` are multiplied by the number of distinct values of `G`.\r\nIt may result in memory errors or large execution times. \r\n`dcount()`provides a fast and reliable alternative:\r\n\r\n```\r\nT | summarize dcount(B) by G | count\r\n```\r\n\r\n## Estimation accuracy\r\n\r\nThe `dcount()` aggregate function uses a variant of the [HyperLogLog (HLL) algorithm](https://en.wikipedia.org/wiki/HyperLogLog),\r\nwhich does a stochastic estimation of set cardinality. The algorithm provides a "knob" that can be used to balance accuracy and execution time per memory size:\r\n\r\n|Accuracy|Error (%)|Entry count   |\r\n|--------|---------|--------------|\r\n|       0|      1.6|2<sup>12<\/sup>|\r\n|       1|      0.8|2<sup>14<\/sup>|\r\n|       2|      0.4|2<sup>16<\/sup>|\r\n|       3|     0.28|2<sup>17<\/sup>|\r\n|       4|      0.2|2<sup>18<\/sup>|\r\n\r\n> [!NOTE]\r\n> The "entry count" column is the number of 1-byte counters in the HLL implementation.\r\n\r\nThe algorithm includes some provisions for doing a perfect count (zero error), if the set cardinality is small enough:\r\n\r\n* When the accuracy level is `1`, 1000 values are returned\r\n* When the accuracy level is `2`, 8000 values are returned\r\n\r\n\r\nThe error bound is probabilistic, not a theoretical bound. The value is the standard deviation of error distribution (the sigma), and 99.7% of the estimations will have a relative error of under 3 x sigma.\r\n\r\nThe following image shows the probability distribution function of the relative\r\nestimation error, in percentages, for all supported accuracy settings:\r\n\r\n![hll error distribution](images/dcount-aggfunction/hll-error-distribution.png)',"https://docs.microsoft.com/en-us/azure/kusto/query/dcount-aggfunction","dcount-aggfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"dcount_hll","Calculates the dcount from hll results (that were generated by [hll](hll-aggfunction.md) or [hll_merge](hll-merge-aggfunction.md)).","Read about the [underlying algorithm (*H*yper*L*og*L*og) and estimation accuracy](dcount-aggfunction.md#estimation-accuracy).\r\n\r\n## Syntax\r\n\r\n`dcount_hll(`*Expr*`)`\r\n\r\n## Arguments\r\n\r\n* *Expr*: Expression that was generated by [hll](hll-aggfunction.md) or [hll-merge](hll-merge-aggfunction.md)\r\n\r\n## Returns\r\n\r\nThe distinct count of each value in *Expr*","```\r\nStormEvents\r\n| summarize hllRes = hll(DamageProperty) by bin(StartTime,10m)\r\n| summarize hllMerged = hll_merge(hllRes)\r\n| project dcount_hll(hllMerged)\r\n```\r\n\r\n|dcount_hll_hllMerged|\r\n|---|\r\n|315|","https://docs.microsoft.com/en-us/azure/kusto/query/dcount-hllfunction","dcount-hllfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"dcountif","Returns an estimate of the number of distinct values of *Expr* of rows for which *Predicate* evaluates to `true`.","* Can be used only in context of aggregation inside [summarize](summarizeoperator.md).\r\n\r\nRead about the [estimation accuracy](dcount-aggfunction.md#estimation-accuracy).\r\n\r\n## Syntax\r\n\r\nsummarize `dcountif(`*Expr*, *Predicate*, [`,` *Accuracy*]`)`\r\n\r\n## Arguments\r\n\r\n* *Expr*: Expression that will be used for aggregation calculation.\r\n* *Predicate*: Expression that will be used to filter rows.\r\n* *Accuracy*, if specified, controls the balance between speed and accuracy.\r\n    * `0` = the least accurate and fastest calculation. 1.6% error\r\n    * `1` = the default, which balances accuracy and calculation time; about 0.8% error.\r\n    * `2` = accurate and slow calculation; about 0.4% error.\r\n    * `3` = extra accurate and slow calculation; about 0.28% error.\r\n    * `4` = super accurate and slowest calculation; about 0.2% error.\r\n\t\r\n\r\n## Returns\r\n\r\nReturns an estimate of the number of distinct values of *Expr*  of rows for which *Predicate* evaluates to `true` in the group.",'```\r\nPageViewLog | summarize countries=dcountif(country, country startswith "United") by continent\r\n```\r\n\r\n**Tip: Offset error**\r\n\r\n`dcountif()` might result in a one-off error in the edge cases where all rows\r\npass, or none of the rows pass, the `Predicate` expression',"https://docs.microsoft.com/en-us/azure/kusto/query/dcountif-aggfunction","dcountif-aggfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"degrees","Converts angle value in radians into value in degrees, using formula `degrees = (180 / PI ) * angle_in_radians`","## Syntax\r\n\r\n`degrees(`*a*`)`\r\n\r\n## Arguments\r\n\r\n* *a*: Angle in radians (a real number).\r\n\r\n## Returns\r\n\r\n* The corresponding angle in degrees for an angle specified in radians.","```\r\nprint degrees0 = degrees(pi()/4), degrees1 = degrees(pi()*1.5), degrees2 = degrees(0)\r\n\r\n```\r\n\r\n|degrees0|degrees1|degrees2|\r\n|---|---|---|\r\n|45|270|0|","https://docs.microsoft.com/en-us/azure/kusto/query/degreesfunction","degreesfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,"distinct","Produces a table with the distinct combination of the provided columns of the input table.","```\r\nT | distinct Column1, Column2\r\n```\r\n\r\nProduces a table with the distinct combination of all columns in the input table.\r\n\r\n```\r\nT | distinct *\r\n```","Shows the distinct combination of fruit and price.\r\n\r\n```\r\nTable | distinct fruit, price\r\n```\r\n\r\n![Distinct](images/distinctoperator/distinct.PNG)\r\n**Notes**\r\n\r\n* Unlike `summarize by ...`, the `distinct` operator supports providing an asterisk (`*`) as the group key, making it easier to use for wide tables.\r\n* If the group by keys are of high cardinalities, using `summarize by ...` with the [shuffle strategy](shufflequery.md) could be useful.","https://docs.microsoft.com/en-us/azure/kusto/query/distinctoperator","distinctoperator.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"dynamic_to_json","Converts `dynamic` input to a string representation.\r\nIf the input is a property bag, the output string prints its content sorted by the keys, recursively. Otherwise, the output is similar to the `tostring` function output.","## Syntax\r\n\r\n`dynamic_to_json(Expr)`\r\n\r\n## Arguments\r\n\r\n* *Expr*: `dynamic` input. The function accepts one argument.\r\n\r\n## Returns\r\n\r\nReturns a string representation of the `dynamic` input. If the input is a property bag, the output string prints its content sorted by the keys, recursively.",'Expression:\r\n\r\n```\r\n  let bag1 = dynamic_to_json(dynamic({ \'Y10\':dynamic({ }), \'X8\': dynamic({ \'c3\':1, \'d8\':5, \'a4\':6 }),\'D1\':114, \'A1\':12, \'B1\':2, \'C1\':3, \'A14\':[15, 13, 18]}));\r\n  print bag1\r\n```\r\n\r\nResult:\r\n\r\n```\r\n"{\r\n  ""A1"": 12,\r\n  ""A14"": [\r\n    15,\r\n    13,\r\n    18\r\n  ],\r\n  ""B1"": 2,\r\n  ""C1"": 3,\r\n  ""D1"": 114,\r\n  ""X8"": {\r\n    ""c3"": 1,\r\n    ""d8"": 5,\r\n    ""a4"": 6\r\n  },\r\n  ""Y10"": {}\r\n}"\r\n```\r\n\r\nExpression:\r\n\r\n```\r\n let bag2 = dynamic_to_json(dynamic({ \'X8\': dynamic({ \'a4\':6, \'c3\':1, \'d8\':5}), \'A14\':[15, 13, 18], \'C1\':3, \'B1\':2, \'Y10\': dynamic({ }), \'A1\':12, \'D1\':114}));\r\n print bag2\r\n```\r\n\r\nResult:\r\n\r\n```\r\n{\r\n  "A1": 12,\r\n  "A14": [\r\n    15,\r\n    13,\r\n    18\r\n  ],\r\n  "B1": 2,\r\n  "C1": 3,\r\n  "D1": 114,\r\n  "X8": {\r\n    "a4": 6,\r\n    "c3": 1,\r\n    "d8": 5\r\n  },\r\n  "Y10": {}\r\n}\r\n```',"https://docs.microsoft.com/en-us/azure/kusto/query/dynamic-to-json-function","dynamic-to-json-function.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"endofday","Returns the end of the day containing the date, shifted by an offset, if provided.","## Syntax\r\n\r\n`endofday(`*date* [`,`*offset*]`)`\r\n\r\n## Arguments\r\n\r\n* `date`: The input date.\r\n* `offset`: An optional number of offset days from the input date (integer, default - 0).\r\n\r\n## Returns\r\n\r\nA datetime representing the end of the day for the given *date* value, with the offset, if specified.","```\r\n  range offset from -1 to 1 step 1\r\n | project dayEnd = endofday(datetime(2017-01-01 10:10:17), offset) \r\n```\r\n\r\n|dayEnd|\r\n|---|\r\n|2016-12-31 23:59:59.9999999|\r\n|2017-01-01 23:59:59.9999999|\r\n|2017-01-02 23:59:59.9999999|","https://docs.microsoft.com/en-us/azure/kusto/query/endofdayfunction","endofdayfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"endofmonth","Returns the end of the month containing the date, shifted by an offset, if provided.","## Syntax\r\n\r\n`endofmonth(`*date* [`,`*offset*]`)`\r\n\r\n## Arguments\r\n\r\n* `date`: The input date.\r\n* `offset`: An optional number of offset months from the input date (integer, default - 0).\r\n\r\n## Returns\r\n\r\nA datetime representing the end of the month for the given *date* value, with the offset, if specified.","```\r\n  range offset from -1 to 1 step 1\r\n | project monthEnd = endofmonth(datetime(2017-01-01 10:10:17), offset) \r\n```\r\n\r\n|monthEnd|\r\n|---|\r\n|2016-12-31 23:59:59.9999999|\r\n|2017-01-31 23:59:59.9999999|\r\n|2017-02-28 23:59:59.9999999|","https://docs.microsoft.com/en-us/azure/kusto/query/endofmonthfunction","endofmonthfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"endofweek","Returns the end of the week containing the date, shifted by an offset, if provided.","Last day of the week is considered to be a Saturday.\r\n\r\n## Syntax\r\n\r\n`endofweek(`*date* [`,`*offset*]`)`\r\n\r\n## Arguments\r\n\r\n* `date`: The input date.\r\n* `offset`: An optional number of offset weeks from the input date (integer, default - 0).\r\n\r\n## Returns\r\n\r\nA datetime representing the end of the week for the given *date* value, with the offset, if specified.","```\r\n  range offset from -1 to 1 step 1\r\n | project weekEnd = endofweek(datetime(2017-01-01 10:10:17), offset)  \r\n\r\n```\r\n\r\n|weekEnd|\r\n|---|\r\n|2016-12-31 23:59:59.9999999|\r\n|2017-01-07 23:59:59.9999999|\r\n|2017-01-14 23:59:59.9999999|","https://docs.microsoft.com/en-us/azure/kusto/query/endofweekfunction","endofweekfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"endofyear","Returns the end of the year containing the date, shifted by an offset, if provided.","## Syntax\r\n\r\n`endofyear(`*date* [`,`*offset*]`)`\r\n\r\n## Arguments\r\n\r\n* `date`: The input date.\r\n* `offset`: An optional number of offset years from the input date (integer, default - 0).\r\n\r\n## Returns\r\n\r\nA datetime representing the end of the year for the given *date* value, with the offset, if specified.","```\r\n  range offset from -1 to 1 step 1\r\n | project yearEnd = endofyear(datetime(2017-01-01 10:10:17), offset) \r\n```\r\n\r\n|yearEnd|\r\n|---|\r\n|2016-12-31 23:59:59.9999999|\r\n|2017-12-31 23:59:59.9999999|\r\n|2018-12-31 23:59:59.9999999|","https://docs.microsoft.com/en-us/azure/kusto/query/endofyearfunction","endofyearfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"estimate_data_size","Returns an estimated data size in bytes of the selected columns of the tabular expression.","```\r\nestimate_data_size(*)\r\nestimate_data_size(Col1, Col2, Col3)\r\n```\r\n\r\n## Syntax\r\n\r\n`estimate_data_size(*)`\r\n\r\n`estimate_data_size(`*col1*`, `*col2*`, `...`)`\r\n\r\n## Arguments\r\n\r\n* *col1*, *col2*: Selection of column references in the source tabular expression that are used for data size estimation. To include all columns, use `*` (asterisk) syntax.\r\n\r\n## Returns\r\n\r\n* The estimated data size  in bytes of the record size. Estimation is based on data types and values lengths.","Calculating total data size using `estimated_data_size()`:\r\n\r\n```\r\nrange x from 1 to 10 step 1                    // x (long) is 8 \r\n| extend Text = '1234567890'                   // Text length is 10  \r\n| summarize Total=sum(estimate_data_size(*))   // (8+10)x10 = 180\r\n```\r\n\r\n|Total|\r\n|---|\r\n|180|","https://docs.microsoft.com/en-us/azure/kusto/query/estimate-data-sizefunction","estimate-data-sizefunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,"evaluate","Invokes a service-side query extension (plugin).","The `evaluate` operator is a tabular operator that provides the ability to\r\ninvoke query language extensions known as **plugins**. Plugins can be enabled\r\nor disabled (unlike other language constructs, which are always available),\r\nand aren't \"bound\" by the relational nature of the language (for example, they may\r\nnot have a predefined, statically determined, output schema).\r\n\r\n> [!NOTE]\r\n> * Syntactically, `evaluate` behaves similarly to the [invoke operator](./invokeoperator.md), which invokes tabular functions.\r\n> * Plugins provided through the evaluate operator aren't bound by the regular rules of query execution or argument evaluation.\r\n> * Specific plugins may have specific restrictions. For example, plugins whose output schema depends on the data (for example, [bag_unpack plugin](./bag-unpackplugin.md) and [pivot plugin](./pivotplugin.md)) can't be used when performing cross-cluster queries.\r\n\r\n## Syntax \r\n\r\n[*T* `|`] `evaluate` [ *evaluateParameters* ] *PluginName* `(` [*PluginArg1* [`,` *PluginArg2*]... `)`\r\n\r\n## Arguments\r\n\r\n* *T* is an optional tabular input to the plugin. (Some plugins don't take\r\n  any input, and act as a tabular data source.)\r\n* *PluginName* is the mandatory name of the plugin being invoked.\r\n* *PluginArg1*, ... are the optional arguments to the plugin.\r\n* *evaluateParameters*: Zero or more (space-separated) parameters in the form of\r\n  *Name* `=` *Value* that control the behavior of the evaluate operation and execution plan. Each plugin may decide differently how to handle each parameter. Refer to each plugin's documentation for specific behavior.  \r\n\r\n## Parameters\r\n\r\nThe following parameters are supported: \r\n\r\n|Name                |Values                           |Description                                |\r\n  |--------------------|---------------------------------|-------------------------------------------|\r\n  |`hint.distribution` |`single`, `per_node`, `per_shard`| [Distribution hints](#distribution-hints) |\r\n  |`hint.pass_filters` |`true`, `false`| Allow `evaluate` operator to passthrough any matching filters before the plugin. Filter is considered as 'matched' if it refers to a column existing before the `evaluate` operator. Default: `false` |\r\n  |`hint.pass_filters_column` |*column_name*| Allow plugin operator to passthrough filters referring to *column_name* before the plugin. Parameter can be used multiple times with different column names. |\r\n\r\n## Distribution hints\r\n\r\nDistribution hints specify how the plugin execution will be distributed across multiple cluster nodes. Each plugin may implement a different support for the distribution. The plugin's documentation specifies the distribution options supported by the plugin.\r\n\r\nPossible values:\r\n\r\n* `single`: A single instance of the plugin will run over the entire query data.\r\n* `per_node`: If the query before the plugin call is distributed across nodes, then an instance of the plugin will run on each node over the data that it contains.\r\n* `per_shard`: If the data before the plugin call is distributed across shards, then an instance of the plugin will run over each shard of the data.","","https://docs.microsoft.com/en-us/azure/kusto/query/evaluateoperator","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"exp","The base-e exponential function of x, which is e raised to the power x: e^x.","## Syntax\r\n\r\n`exp(`*x*`)`\r\n\r\n## Arguments\r\n\r\n* *x*: A real number, value of the exponent.\r\n\r\n## Returns\r\n\r\n* Exponential value of x.\r\n* For natural (base-e) logarithms, see [log()](log-function.md).\r\n* For exponential functions of base-2 and base-10 logarithms, see [exp2()](exp2-function.md), [exp10()](exp10-function.md)","","https://docs.microsoft.com/en-us/azure/kusto/query/exp-function","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"exp10","The base-10 exponential function of x, which is 10 raised to the power x: 10^x.","## Syntax\r\n\r\n`exp10(`*x*`)`\r\n\r\n## Arguments\r\n\r\n* *x*: A real number, value of the exponent.\r\n\r\n## Returns\r\n\r\n* Exponential value of x.\r\n* For natural (base-10) logarithms, see [log10()](log10-function.md).\r\n* For exponential functions of base-e and base-2 logarithms, see [exp()](exp-function.md), [exp2()](exp2-function.md)","","https://docs.microsoft.com/en-us/azure/kusto/query/exp10-function","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"exp2","The base-2 exponential function of x, which is 2 raised to the power x: 2^x.","## Syntax\r\n\r\n`exp2(`*x*`)`\r\n\r\n## Arguments\r\n\r\n* *x*: A real number, value of the exponent.\r\n\r\n## Returns\r\n\r\n* Exponential value of x.\r\n* For natural (base-2) logarithms, see [log2()](log2-function.md).\r\n* For exponential functions of base-e and base-10 logarithms, see [exp()](exp-function.md), [exp10()](exp10-function.md)","","https://docs.microsoft.com/en-us/azure/kusto/query/exp2-function","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,"extend","Create calculated columns and append them to the result set.","```\r\nT | extend duration = endTime - startTime\r\n```\r\n\r\n## Syntax\r\n\r\n*T* `| extend` [*ColumnName* | `(`*ColumnName*[`,` ...]`)` `=`] *Expression* [`,` ...]\r\n\r\n## Arguments\r\n\r\n* *T*: The input tabular result set.\r\n* *ColumnName:* Optional. The name of the column to add or update. If omitted, the name will be generated. If *Expression* returns more than one column, a list of column names can be specified in parentheses. In this case *Expression*'s output columns will be given the specified names, dropping the rest of the output columns, if there are any. If a list of the column names is not specified, all *Expression*'s output columns with generated names will be added to the output.\r\n* *Expression:* A calculation over the columns of the input.\r\n\r\n## Returns\r\n\r\nA copy of the input tabular result set, such that:\r\n\r\n1. Column names noted by `extend` that already exist in the input are removed\r\n   and appended as their new calculated values.\r\n2. Column names noted by `extend` that do not exist in the input are appended\r\n   as their new calculated values.\r\n\r\n**Tips**\r\n\r\n* The `extend` operator adds a new column to the input result set, which does\r\n  **not** have an index. In most cases, if the new column is set to be exactly\r\n  the same as an existing table column that has an index, Kusto can automatically\r\n  use the existing index. However, in some complex scenarios this propagation is\r\n  not done. In such cases, if the goal is to rename a column,\r\n  use the [`project-rename` operator](projectrenameoperator.md) instead.",'```\r\nLogs\r\n| extend\r\n    Duration = CreatedOn - CompletedOn\r\n    , Age = now() - CreatedOn\r\n    , IsSevere = Level == "Critical" or Level == "Error"\r\n```\r\n\r\nYou can use the [series_stats](series-statsfunction.md) function to return multiple columns.',"https://docs.microsoft.com/en-us/azure/kusto/query/extendoperator","extendoperator.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"extent_id",'Returns a unique identifier that identifies the data shard ("extent") that the current record resides in.',"Applying this function to calculated data that isn't attached to a data shard returns an empty guid (all zeros).\r\n\r\n## Syntax\r\n\r\n`extent_id()`\r\n\r\n## Returns\r\n\r\nA value of type `guid` that identifies the current record's data shard,\r\nor an empty guid (all zeros).","The following example shows how to get a list of all the data shards\r\nthat have records from an hour ago with a specific value for the\r\ncolumn `ActivityId`. It demonstrates that some query operators (here,\r\nthe `where` operator, and also `extend` and `project`)\r\npreserve the information about the data shard hosting the record.\r\n\r\n```\r\nT\r\n| where Timestamp > ago(1h)\r\n| where ActivityId == 'dd0595d4-183e-494e-b88e-54c52fe90e5a'\r\n| extend eid=extent_id()\r\n| summarize by eid\r\n```","https://docs.microsoft.com/en-us/azure/kusto/query/extentidfunction","extentidfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"extent_tags",'Returns a dynamic array with the [tags](../management/extents-overview.md#extent-tagging) of the data shard ("extent") that the current record resides in.',"Applying this function to calculated data which is not attached to a data shard returns an empty value.\r\n\r\n## Syntax\r\n\r\n`extent_tags()`\r\n\r\n## Returns\r\n\r\nA value of type `dynamic` that is an array holding the current record's extent tags,\r\nor an empty value.","The following example shows how to get a list the tags of all the data shards\r\nthat have records from an hour ago with a specific value for the\r\ncolumn `ActivityId`. It demonstrates that some query operators (here,\r\nthe `where` operator, but this is also true for `extend` and `project`)\r\npreserve the information about the data shard hosting the record.\r\n\r\n```\r\nT\r\n| where Timestamp > ago(1h)\r\n| where ActivityId == 'dd0595d4-183e-494e-b88e-54c52fe90e5a'\r\n| extend tags = extent_tags()\r\n| summarize by tostring(tags)\r\n```\r\n\r\nThe following example shows how to obtain a count of all records from the \r\nlast hour, which are stored in extents which are tagged with the tag `MyTag`\r\n(and potentially other tags), but not tagged with the tag `drop-by:MyOtherTag`.\r\n\r\n```\r\nT\r\n| where Timestamp > ago(1h)\r\n| extend Tags = extent_tags()\r\n| where Tags has_cs 'MyTag' and Tags !has_cs 'drop-by:MyOtherTag'\r\n| count\r\n```","https://docs.microsoft.com/en-us/azure/kusto/query/extenttagsfunction","extenttagsfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"external_table","References an [external table](schema-entities/externaltables.md) by name.","```\r\nexternal_table('StormEvent')\r\n```\r\n\r\n> [!NOTE]\r\n> * The `external_table` function has similar restrictions as the [table](tablefunction.md) function.\r\n> * Standard [query limits](../concepts/querylimits.md) apply to external table queries as well.\r\n\r\n## Syntax\r\n\r\n`external_table` `(` *TableName* [`,` *MappingName* ] `)`\r\n\r\n## Arguments\r\n\r\n* *TableName*: The name of the external table being queried.\r\n  Must be a string literal referencing an external table of kind\r\n  `blob`, `adl` or `sql`.\r\n* *MappingName*: An optional name of the mapping object that maps the\r\n  fields in the actual (external) data shards to the columns output\r\n  by this function.\r\n\r\n## Next steps\r\n\r\n* [External table general control commands](../management/externaltables.md)\r\n* [Create and alter external tables in Azure Storage or Azure Data Lake](../management/external-tables-azurestorage-azuredatalake.md)\r\n* [Create and alter external SQL tables](../management/external-sql-tables.md)","","https://docs.microsoft.com/en-us/azure/kusto/query/externaltablefunction","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,"externaldata","The `externaldata` operator returns a table whose schema is defined in the query itself, and whose data is read from an external storage artifact, such as a blob in \r\nAzure Blob Storage or a file in Azure Data Lake Storage.","## Syntax\r\n\r\n`externaldata` `(` *ColumnName* `:` *ColumnType* [`,` ...] `)`   \r\n`[` *StorageConnectionString* [`,` ...] `]`   \r\n[`with` `(` *PropertyName* `=` *PropertyValue* [`,` ...] `)`]\r\n\r\n## Arguments\r\n\r\n* *ColumnName*, *ColumnType*: The arguments define the schema of the table.\r\n  The syntax is the same as the syntax used when defining a table in [.create table](../management/create-table-command.md).\r\n* *StorageConnectionString*: [Storage connection strings](../api/connection-strings/storage.md) that describe the storage artifacts holding the data to return.\r\n* *PropertyName*, *PropertyValue*, ...: Additional properties that describe how to interpret\r\n  the data retrieved from storage, as listed under [ingestion properties](../../ingestion-properties.md).\r\n\r\nCurrently supported properties are:\r\n\r\n| Property         | Type     | Description       |\r\n|------------------|----------|-------------------|\r\n| `format`         | `string` | Data format. If not specified, an attempt is made to detect the data format from file extension (defaults to `CSV`). Any of the [ingestion data formats](../../ingestion-supported-formats.md) are supported. |\r\n| `ignoreFirstRecord` | `bool` | If set to true, indicates that the first record in every file is ignored. This property is useful when querying CSV files with headers. |\r\n| `ingestionMapping` | `string` | A string value that indicates how to map data from the source file to the actual columns in the operator result set. See [data mappings](../management/mappings.md). |\r\n\r\n> [!NOTE]\r\n> * This operator doesn't accept any pipeline input.\r\n> * Standard [query limits](../concepts/querylimits.md) apply to external data queries as well.\r\n\r\n## Returns\r\n\r\nThe `externaldata` operator returns a data table of the given schema whose data was parsed from the specified storage artifact, indicated by the storage connection string.",'**Fetch a list of user IDs stored in Azure Blob Storage**\r\n\r\nThe following example shows how to find all records in a table whose `UserID` column falls into a known set of IDs, held (one per line) in an external storage file. Since the data format isn\'t specified, the detected data format is `TXT`.\r\n\r\n```\r\nUsers\r\n| where UserID in ((externaldata (UserID:string) [\r\n    @"https://storageaccount.blob.core.windows.net/storagecontainer/users.txt" \r\n      h@"?...SAS..." // Secret token needed to access the blob\r\n    ]))\r\n| ...\r\n```\r\n\r\n**Query multiple data files**\r\n\r\nThe following example queries multiple data files stored in external storage.\r\n\r\n```\r\nexternaldata(Timestamp:datetime, ProductId:string, ProductDescription:string)\r\n[\r\n  h@"https://mycompanystorage.blob.core.windows.net/archivedproducts/2019/01/01/part-00000-7e967c99-cf2b-4dbb-8c53-ce388389470d.csv.gz?...SAS...",\r\n  h@"https://mycompanystorage.blob.core.windows.net/archivedproducts/2019/01/02/part-00000-ba356fa4-f85f-430a-8b5a-afd64f128ca4.csv.gz?...SAS...",\r\n  h@"https://mycompanystorage.blob.core.windows.net/archivedproducts/2019/01/03/part-00000-acb644dc-2fc6-467c-ab80-d1590b23fc31.csv.gz?...SAS..."\r\n]\r\nwith(format="csv")\r\n| summarize count() by ProductId\r\n```\r\n\r\nThe above example can be thought of as a quick way to query multiple data files without defining an [external table](schema-entities/externaltables.md).\r\n\r\n> [!NOTE]\r\n> Data partitioning isn\'t recognized by the `externaldata` operator.\r\n\r\n**Query hierarchical data formats**\r\n\r\nTo query hierarchical data format, such as `JSON`, `Parquet`, `Avro`, or `ORC`, `ingestionMapping` must be specified in the operator properties. \r\nIn this example, there\'s a JSON file stored in Azure Blob Storage with the following contents:\r\n\r\n```JSON\r\n{\r\n  "timestamp": "2019-01-01 10:00:00.238521",   \r\n  "data": {    \r\n    "tenant": "e1ef54a6-c6f2-4389-836e-d289b37bcfe0",   \r\n    "method": "RefreshTableMetadata"   \r\n  }   \r\n}   \r\n{\r\n  "timestamp": "2019-01-01 10:00:01.845423",   \r\n  "data": {   \r\n    "tenant": "9b49d0d7-b3e6-4467-bb35-fa420a25d324",   \r\n    "method": "GetFileList"   \r\n  }   \r\n}\r\n...\r\n```\r\n\r\nTo query this file using the `externaldata` operator, a data mapping must be specified. The mapping dictates how to map JSON fields to the operator result set columns:\r\n\r\n```\r\nexternaldata(Timestamp: datetime, TenantId: guid, MethodName: string)\r\n[ \r\n   h@\'https://mycompanystorage.blob.core.windows.net/events/2020/09/01/part-0000046c049c1-86e2-4e74-8583-506bda10cca8.json?...SAS...\'\r\n]\r\nwith(format=\'multijson\', ingestionMapping=\'[{"Column":"Timestamp","Properties":{"Path":"$.time"}},{"Column":"TenantId","Properties":{"Path":"$.data.tenant"}},{"Column":"MethodName","Properties":{"Path":"$.data.method"}}]\')\r\n```\r\n\r\nThe `MultiJSON` format is used here because single JSON records are spanned into multiple lines.\r\n\r\nFor more info on mapping syntax, see [data mappings](../management/mappings.md).',"https://docs.microsoft.com/en-us/azure/kusto/query/externaldata-operator","externaldata-operator.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"extract","Get a match for a [regular expression](./re2.md) from a text string.",'Optionally, convert the extracted substring to the indicated type.\r\n\r\n```\r\nextract("x=([0-9.]+)", 1, "hello x=45.6|wo") == "45.6"\r\n```\r\n\r\n## Syntax\r\n\r\n`extract(`*regex*`,` *captureGroup*`,` *text* [`,` *typeLiteral*]`)`\r\n\r\n## Arguments\r\n\r\n* *regex*: A [regular expression](./re2.md).\r\n* *captureGroup*: A positive `int` constant indicating the\r\ncapture group to extract. 0 stands for the entire match, 1 for the value matched by the first \'(\'parenthesis\')\' in the regular expression, 2 or more for subsequent parentheses.\r\n* *text*: A `string` to search.\r\n* *typeLiteral*: An optional type literal (e.g., `typeof(long)`). If provided, the extracted substring is converted to this type. \r\n\r\n## Returns\r\n\r\nIf *regex* finds a match in *text*: the substring matched against the indicated capture group *captureGroup*, optionally converted to *typeLiteral*.\r\n\r\nIf there\'s no match, or the type conversion fails: `null`.','The example string `Trace` is searched for a definition for `Duration`. \r\nThe match is converted to `real`, then multiplied it by a time constant (`1s`) so that `Duration` is of type `timespan`. In this example, it is equal to 123.45 seconds:\r\n\r\n```\r\n...\r\n| extend Trace="A=1, B=2, Duration=123.45, ..."\r\n| extend Duration = extract("Duration=([0-9.]+)", 1, Trace, typeof(real)) * time(1s) \r\n```\r\n\r\nThis example is equivalent to `substring(Text, 2, 4)`:\r\n\r\n```\r\nextract("^.{2,2}(.{4,4})", 1, Text)\r\n```',"https://docs.microsoft.com/en-us/azure/kusto/query/extractfunction","extractfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"extract_all","Get all matches for a [regular expression](./re2.md) from a text string.\r\nOptionally, retrieve a subset of matching groups.",'```\r\nprint extract_all(@"(\\d+)", "a set of numbers: 123, 567 and 789") // results with the dynamic array ["123", "567", "789"]\r\n```\r\n\r\n## Syntax\r\n\r\n`extract_all(`*regex*`,` [*captureGroups*`,`] *text*`)`\r\n\r\n## Arguments\r\n\r\n|Argument        |Description                                  |Required or Optional  |\r\n|----------------|---------------------------------------------|----------------------|\r\n|regex           | A [regular expression](./re2.md). The expression must have at least one capturing group, and less than or equal to 16 capturing groups                                                         |Required              |\r\n|captureGroups   |A dynamic array constant that indicates the capture group to extract. Valid values are from 1 to the number of capturing groups in the regular expression. Named capture groups are allowed as well (See [Examples](#examples))|Optional         |\r\n|text            |A `string` to search                         |Required              |\r\n\r\n## Returns\r\n\r\n* If *regex* finds a match in *text*: Returns dynamic array including all matches against the indicated capture groups *captureGroups*, or all of capturing groups in the *regex*.\r\n* If number of *captureGroups* is 1: The returned array has a single dimension of matched values.\r\n* If number of *captureGroups* is more than 1: The returned array is a two-dimensional collection of multi-value matches per *captureGroups* selection, or all capture groups present in the *regex* if *captureGroups* is omitted.\r\n* If there\'s no match: `null`.','### Extract a single capture group\r\n\r\nReturns hex-byte representation (two hex-digits) of the GUID.\r\n\r\n```\r\nprint Id="82b8be2d-dfa7-4bd1-8f63-24ad26d31449"\r\n| extend guid_bytes = extract_all(@"([\\da-f]{2})", Id) \r\n```\r\n\r\n|ID|guid_bytes|\r\n|---|---|\r\n|82b8be2d-dfa7-4bd1-8f63-24ad26d31449|["82","b8","be","2d","df","a7","4b","d1","8f","63","24","ad","26","d3","14","49"]|\r\n\r\n### Extract several capture groups \r\n\r\nUses a regular expression with three capturing groups to split each GUID part into first letter, last letter, and whatever is in the middle.\r\n\r\n```\r\nprint Id="82b8be2d-dfa7-4bd1-8f63-24ad26d31449"\r\n| extend guid_bytes = extract_all(@"(\\w)(\\w+)(\\w)", Id)\r\n```\r\n\r\n|ID|guid_bytes|\r\n|---|---|\r\n|82b8be2d-dfa7-4bd1-8f63-24ad26d31449|[["8","2b8be2","d"],["d","fa","7"],["4","bd","1"],["8","f6","3"],["2","4ad26d3144","9"]]|\r\n\r\n### Extract a subset of capture groups\r\n\r\nShows how to select a subset of capturing groups. \r\nThe regular expression matches the first letter, last letter, and all the rest. \r\nThe *captureGroups* parameter is used to select only the first and the last parts.\r\n\r\n```\r\nprint Id="82b8be2d-dfa7-4bd1-8f63-24ad26d31449"\r\n| extend guid_bytes = extract_all(@"(\\w)(\\w+)(\\w)", dynamic([1,3]), Id) \r\n```\r\n\r\n|ID|guid_bytes|\r\n|---|---|\r\n|82b8be2d-dfa7-4bd1-8f63-24ad26d31449|[["8","d"],["d","7"],["4","1"],["8","3"],["2","9"]]|\r\n\r\n### Using named capture groups\r\n\r\nYou can use named capture groups of RE2 in extract_all().\r\nThe *captureGroups* uses both capture group indexes and named capture group reference to fetch matching values.\r\n\r\n```\r\nprint Id="82b8be2d-dfa7-4bd1-8f63-24ad26d31449"\r\n| extend guid_bytes = extract_all(@"(?P<first>\\w)(?P<middle>\\w+)(?P<last>\\w)", dynamic([\'first\',2,\'last\']), Id) \r\n```\r\n\r\n|ID|guid_bytes|\r\n|---|---|\r\n|82b8be2d-dfa7-4bd1-8f63-24ad26d31449|[["8","2b8be2","d"],["d","fa","7"],["4","bd","1"],["8","f6","3"],["2","4ad26d3144","9"]]|',"https://docs.microsoft.com/en-us/azure/kusto/query/extractallfunction","extractallfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"extractjson","Get a specified element out of a JSON text using a path expression.",'Optionally convert the extracted string to a specific type.\r\n\r\n```\r\nextractjson("$.hosts[1].AvailableMB", EventText, typeof(int))\r\n```\r\n\r\n## Syntax\r\n\r\n`extractjson(`*jsonPath*`,` *dataSource*`)` \r\n\r\n## Arguments\r\n\r\n* *jsonPath*: JsonPath string that defines an accessor into the JSON document.\r\n* *dataSource*:  A JSON document.\r\n\r\n## Returns\r\n\r\nThis function performs a JsonPath query into dataSource which contains a valid JSON string, optionally converting that value to another type depending on the third argument.',"The `[`bracket`]` notatation and dot (`.`) notation are equivalent:\r\n\r\n```\r\nT \r\n| extend AvailableMB = extractjson(\"$.hosts[1].AvailableMB\", EventText, typeof(int)) \r\n\r\nT\r\n| extend AvailableMD = extractjson(\"$['hosts'][1]['AvailableMB']\", EventText, typeof(int)) \r\n```\r\n\r\n### JSON Path expressions\r\n\r\n|Path expression|Description|\r\n|---|---|\r\n|`$`|Root object|\r\n|`@`|Current object|\r\n|`.` or `[ ]` | Child|\r\n|`[ ]`|Array subscript|\r\n\r\n*(We don't currently implement wildcards, recursion, union, or slices.)*\r\n\r\n**Performance tips**\r\n\r\n* Apply where-clauses before using `extractjson()`\r\n* Consider using a regular expression match with [extract](extractfunction.md) instead. This can run very much faster, and is effective if the JSON is produced from a template.\r\n* Use `parse_json()` if you need to extract more than one value from the JSON.\r\n* Consider having the JSON parsed at ingestion by declaring the type of the column to be dynamic.","https://docs.microsoft.com/en-us/azure/kusto/query/extractjsonfunction","extractjsonfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,"facet","Returns a set of tables, one for each specified column.\r\nEach table specifies the list of values taken by its column.\r\nAn additional table can be created by using the `with` clause.","## Syntax\r\n\r\n*T* `| facet by` *ColumnName* [`, ` ...] [`with (` *filterPipe* `)`\r\n\r\n## Arguments\r\n\r\n* *ColumnName:* The name of column in the input, to be summarized as an output table.\r\n* *filterPipe:* A query expression applied to the input table to produce one of the outputs.\r\n\r\n## Returns\r\n\r\nMultiple tables: one for the `with` clause, and one for each column.","```\r\nMyTable \r\n| facet by city, eventType \r\n    with (where timestamp > ago(7d) | take 1000)\r\n```","https://docs.microsoft.com/en-us/azure/kusto/query/facetoperator","facetoperator.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,"find","Finds rows that match a predicate across a set of tables.","The scope of the `find` can also be cross-database or cross-cluster.\r\n\r\n```\r\nfind in (Table1, Table2, Table3) where Fruit==\"apple\"\r\nfind in (database('*').*) where Fruit == \"apple\"\r\nfind in (cluster('cluster_name').database('MyDB*'.*)) where Fruit == \"apple\"\r\n```\r\n\r\n## Syntax\r\n\r\n* `find` [`withsource`=*ColumnName*] [`in` `(`*Table* [`,` *Table*, ...]`)`] `where` *Predicate* [`project-smart` | `project` *ColumnName* [`:`*ColumnType*] [`,` *ColumnName*[`:`*ColumnType*], ...][`,` `pack(*)`]] \r\n* `find` *Predicate* [`project-smart` | `project` *ColumnName*[`:`*ColumnType*] [`,` *ColumnName*[`:`*ColumnType*], ...] [`, pack(*)`]] \r\n\r\n## Arguments\r\n\r\n* `withsource=`*ColumnName*: Optional. By default, the output will include a column called *source_* whose values indicate which source table has contributed each row. If specified, *ColumnName* will be used instead of *source_*.\r\nAfter wildcard matching, if the query references tables from more than one database (including the default database), the value of this column will have a table name qualified with the database. Similarly *cluster* and *database* qualifications will be present in the value if more than one cluster is referenced.\r\n* *Predicate*: A `boolean` [expression](./scalar-data-types/bool.md) over the columns of the input tables *Table* [`,` *Table*, ...]. It's evaluated for each row in each input table. For more information, see  [predicate-syntax details](./findoperator.md#predicate-syntax).\r\n* `Table`: Optional. By default, *find* will look in all the tables in the current database, for:\r\n    *  The name of a table, such as `Events`\r\n    *  A query expression, such as `(Events | where id==42)`\r\n    *  A set of tables specified with a wildcard. For example, `E*` would form the union of all the tables in the database whose names begin with `E`.\r\n* `project-smart` | `project`: If not specified, `project-smart` will be used by default. For more information, see [output-schema details](./findoperator.md#output-schema).\r\n\r\n\r\n## Returns\r\n\r\nTransformation of rows in *Table* [`,` *Table*, ...] for which *Predicate* is `true`. The rows are transformed according to the [output schema](#output-schema).\r\n\r\n## Output schema\r\n\r\n**source_ column**\r\n\r\nThe find operator output will always include a *source_* column with the source table name. The column can be renamed using the `withsource` parameter.\r\n\r\n**results columns**\r\n\r\nSource tables that don't contain any column used by the predicate evaluation, will be filtered out.\r\n\r\nWhen using `project-smart`, the columns that will appear in the output will be:\r\n\r\n* Columns that appear explicitly in the predicate.\r\n* Columns that are common to all the filtered tables.\r\n\r\nThe rest of the columns will be packed into a property bag and will appear in an additional `pack_` column.\r\nA column that is referenced explicitly by the predicate and appears in multiple tables with multiple types, will have a different column in the result schema for each such type. Each of the column names will be constructed from the original column name and type, separated by an underscore.\r\n\r\nWhen using `project` *ColumnName*[`:`*ColumnType*] [`,` *ColumnName*[`:`*ColumnType*], ...][`,` `pack(*)`]:\r\n\r\n* The result table will include the columns specified in the list. If a source table doesn't contain a certain column, the values in the corresponding rows will be null.\r\n* When specifying a *ColumnType* with a *ColumnName*, this column in the \"result\" will have the given type, and the values will be cast to that type if needed. The casting won't have an effect on the column type when evaluating the *Predicate*.\r\n* When `pack(*)` is used, the rest of the columns will be packed into a property bag and will appear in an additional `pack_` column.\r\n\r\n**pack_ column**\r\n\r\nThis column will contain a property bag with the data from all the columns that doesn't appear in the output schema. The source column name will serve as the property name and the column value will serve as the property value.\r\n\r\n## Predicate syntax\r\n\r\nThe *find* operator supports an alternative syntax for the `* has` term, and using just *term*, will search a term across all input columns.\r\n\r\nFor a summary of some filtering functions, see [where operator](./whereoperator.md).\r\n\r\n## Notes\r\n\r\n* If the `project` clause references a column that appears in multiple tables and has multiple types, a type must follow this column reference in the project clause\r\n* If a column appears in multiple tables and has multiple types and `project-smart` is in use, there will be a corresponding column for each type in the `find`'s result, as described in [union](./unionoperator.md)\r\n* When using *project-smart*, changes in the predicate, in the source tables set, or in the tables schema, may result in a change to the output schema. If a constant result schema is needed, use *project* instead\r\n* `find` scope can't include [functions](../management/functions.md). To include a function in the find scope, define a [let statement](./letstatement.md) with [view keyword](./letstatement.md).\r\n\r\n## Performance tips\r\n\r\n* Use [tables](../management/tables.md) as opposed to [tabular expressions](./tabularexpressionstatements.md).\r\nIf tabular expression, the find operator falls back to a `union` query that can result in degraded performance.\r\n* If a column that appears in multiple tables and has multiple types, is part of the project clause, prefer adding a *ColumnType* to the project clause over modifying the table before passing it to `find`.\r\n* Add time-based filters to the predicate. Use a datetime column value or [ingestion_time()](./ingestiontimefunction.md).\r\n* Search in specific columns rather than a full text search.\r\n* It's better not to reference columns that appear in multiple tables and have multiple types. If the predicate is valid when resolving such columns type for more than one type, the query will fall back to union.\r\nFor example, see [examples of cases where find will act as a union](./findoperator.md#examples-of-cases-where-find-will-act-as-union).",'### Term lookup across all tables in current database\r\n\r\nThe query finds all rows from all tables in the current database in which any column includes the word `Kusto`.\r\nThe resulting records are transformed according to the [output schema](#output-schema).\r\n\r\n```\r\nfind "Kusto"\r\n```\r\n\r\n## Term lookup across all tables matching a name pattern in the current database\r\n\r\nThe query finds all rows from all tables in the current database whose name starts with `K`, and in which any column includes the word `Kusto`.\r\nThe resulting records are transformed according to the [output schema](#output-schema).\r\n\r\n```\r\nfind in (K*) where * has "Kusto"\r\n```\r\n\r\n### Term lookup across all tables in all databases in the cluster\r\n\r\nThe query finds all rows from all tables in all databases in which any column includes the word `Kusto`.\r\nThis query is a [cross-database](./cross-cluster-or-database-queries.md) query.\r\nThe resulting records are transformed according to the [output schema](#output-schema).\r\n\r\n```\r\nfind in (database(\'*\').*) "Kusto"\r\n```\r\n\r\n### Term lookup across all tables and databases matching a name pattern in the cluster\r\n\r\nThe query finds all rows from all tables whose name starts with `K` in all databases whose name start with `B` and in which any column includes the word `Kusto`.\r\nThe resulting records are transformed according to the [output schema](#output-schema).\r\n\r\n```\r\nfind in (database("B*").K*) where * has "Kusto"\r\n```\r\n\r\n### Term lookup in several clusters\r\n\r\nThe query finds all rows from all tables whose name starts with `K` in all databases whose name start with `B` and in which any column includes the word `Kusto`.\r\nThe resulting records are transformed according to the [output schema](#output-schema).\r\n\r\n```\r\nfind in (cluster("cluster1").database("B*").K*, cluster("cluster2").database("C*".*))\r\nwhere * has "Kusto"\r\n```\r\n\r\n## Examples of `find` output results  \r\n\r\nThe following examples show how `find` can be used over two tables: *EventsTable1* and *EventsTable2*.\r\nAssume we have the next content of these two tables:\r\n\r\n### EventsTable1\r\n\r\n|Session_Id|Level|EventText|Version\r\n|---|---|---|---|\r\n|acbd207d-51aa-4df7-bfa7-be70eb68f04e|Information|Some Text1|v1.0.0\r\n|acbd207d-51aa-4df7-bfa7-be70eb68f04e|Error|Some Text2|v1.0.0\r\n|28b8e46e-3c31-43cf-83cb-48921c3986fc|Error|Some Text3|v1.0.1\r\n|8f057b11-3281-45c3-a856-05ebb18a3c59|Information|Some Text4|v1.1.0\r\n\r\n### EventsTable2\r\n\r\n|Session_Id|Level|EventText|EventName\r\n|---|---|---|---|\r\n|f7d5f95f-f580-4ea6-830b-5776c8d64fdd|Information|Some Other Text1|Event1\r\n|acbd207d-51aa-4df7-bfa7-be70eb68f04e|Information|Some Other Text2|Event2\r\n|acbd207d-51aa-4df7-bfa7-be70eb68f04e|Error|Some Other Text3|Event3\r\n|15eaeab5-8576-4b58-8fc6-478f75d8fee4|Error|Some Other Text4|Event4\r\n\r\n### Search in common columns, project common and uncommon columns, and pack the rest  \r\n\r\n```\r\nfind in (EventsTable1, EventsTable2) \r\n     where Session_Id == \'acbd207d-51aa-4df7-bfa7-be70eb68f04e\' and Level == \'Error\' \r\n     project EventText, Version, EventName, pack(*)\r\n```\r\n\r\n|source_|EventText|Version|EventName|pack_\r\n|---|---|---|---|---|\r\n|EventsTable1|Some Text2|v1.0.0||{"Session_Id":"acbd207d-51aa-4df7-bfa7-be70eb68f04e", "Level":"Error"}\r\n|EventsTable2|Some Other Text3||Event3|{"Session_Id":"acbd207d-51aa-4df7-bfa7-be70eb68f04e", "Level":"Error"}\r\n\r\n### Search in common and uncommon columns\r\n\r\n```\r\nfind Version == \'v1.0.0\' or EventName == \'Event1\' project Session_Id, EventText, Version, EventName\r\n```\r\n\r\n|source_|Session_Id|EventText|Version|EventName|\r\n|---|---|---|---|---|\r\n|EventsTable1|acbd207d-51aa-4df7-bfa7-be70eb68f04e|Some Text1|v1.0.0\r\n|EventsTable1|acbd207d-51aa-4df7-bfa7-be70eb68f04e|Some Text2|v1.0.0\r\n|EventsTable2|f7d5f95f-f580-4ea6-830b-5776c8d64fdd|Some Other Text1||Event1\r\n\r\nNote: in practice, *EventsTable1* rows will be filtered with ```Version == \'v1.0.0\'``` predicate and *EventsTable2* rows will be filtered with ```EventName == \'Event1\'``` predicate.\r\n\r\n### Use abbreviated notation to search across all tables in the current database\r\n\r\n```\r\nfind Session_Id == \'acbd207d-51aa-4df7-bfa7-be70eb68f04e\'\r\n```\r\n\r\n|source_|Session_Id|Level|EventText|pack_|\r\n|---|---|---|---|---|\r\n|EventsTable1|acbd207d-51aa-4df7-bfa7-be70eb68f04e|Information|Some Text1|{"Version":"v1.0.0"}\r\n|EventsTable1|acbd207d-51aa-4df7-bfa7-be70eb68f04e|Error|Some Text2|{"Version":"v1.0.0"}\r\n|EventsTable2|acbd207d-51aa-4df7-bfa7-be70eb68f04e|Information|Some Other Text2|{"EventName":"Event2"}\r\n|EventsTable2|acbd207d-51aa-4df7-bfa7-be70eb68f04e|Error|Some Other Text3|{"EventName":"Event3"}\r\n\r\n### Return the results from each row as a property bag\r\n\r\n```\r\nfind Session_Id == \'acbd207d-51aa-4df7-bfa7-be70eb68f04e\' project pack(*)\r\n```\r\n\r\n|source_|pack_|\r\n|---|---|\r\n|EventsTable1|{"Session_Id":"acbd207d-51aa-4df7-bfa7-be70eb68f04e", "Level":"Information", "EventText":"Some Text1", "Version":"v1.0.0"}\r\n|EventsTable1|{"Session_Id":"acbd207d-51aa-4df7-bfa7-be70eb68f04e", "Level":"Error", "EventText":"Some Text2", "Version":"v1.0.0"}\r\n|EventsTable2|{"Session_Id":"acbd207d-51aa-4df7-bfa7-be70eb68f04e", "Level":"Information", "EventText":"Some Other Text2", "EventName":"Event2"}\r\n|EventsTable2|{"Session_Id":"acbd207d-51aa-4df7-bfa7-be70eb68f04e", "Level":"Error", "EventText":"Some Other Text3", "EventName":"Event3"}\r\n\r\n## Examples of cases where `find` will act as `union`\r\n\r\n### Using a non-tabular expression as find operand\r\n\r\n```\r\nlet PartialEventsTable1 = view() { EventsTable1 | where Level == \'Error\' };\r\nfind in (PartialEventsTable1, EventsTable2) \r\n     where Session_Id == \'acbd207d-51aa-4df7-bfa7-be70eb68f04e\'\r\n```\r\n\r\n### Referencing a column that appears in multiple tables and has multiple types\r\n\r\nAssume we\'ve created two tables by running: \r\n\r\n```\r\n.create tables \r\n  Table1 (Level:string, Timestamp:datetime, ProcessId:string),\r\n  Table2 (Level:string, Timestamp:datetime, ProcessId:int64)\r\n```\r\n\r\n* The following query will be executed as `union`.\r\n\r\n\r\n\r\n```\r\nfind in (Table1, Table2) where ProcessId == 1001\r\n```\r\n\r\nThe output result schema will be *(Level:string, Timestamp, ProcessId_string, ProcessId_int)*.\r\n\r\n* The following query will also be executed as `union`, but will produce a different result schema.\r\n\r\n\r\n\r\n```\r\nfind in (Table1, Table2) where ProcessId == 1001 project Level, Timestamp, ProcessId:string \r\n```\r\n\r\nThe output result schema will be *(Level:string, Timestamp, ProcessId_string)*',"https://docs.microsoft.com/en-us/azure/kusto/query/findoperator","findoperator.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"floor","An alias for [`bin()`](binfunction.md).","","","https://docs.microsoft.com/en-us/azure/kusto/query/floorfunction","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,"fork","Runs multiple consumer operators in parallel.","## Syntax\r\n\r\n*T* `|` `fork` [*name*`=`]`(`*subquery*`)` [*name*`=`]`(`*subquery*`)` ...\r\n\r\n## Arguments\r\n\r\n* *subquery* is a downstream pipeline of query operators\r\n* *name* is a temporary name for the subquery result table\r\n\r\n## Returns\r\n\r\nMultiple result tables, one for each of the subqueries.\r\n\r\n**Supported Operators**\r\n\r\n[`as`](asoperator.md), [`count`](countoperator.md), [`extend`](extendoperator.md), [`parse`](parseoperator.md), [`where`](whereoperator.md), [`take`](takeoperator.md), [`project`](projectoperator.md), [`project-away`](projectawayoperator.md), [`summarize`](summarizeoperator.md), [`top`](topoperator.md), [`top-nested`](topnestedoperator.md), [`sort`](sortoperator.md), [`mv-expand`](mvexpandoperator.md), [`reduce`](reduceoperator.md)\r\n\r\n**Notes**\r\n\r\n* [`materialize`](materializefunction.md) function can be used as a replacement for using [`join`](joinoperator.md) or [`union`](unionoperator.md) on fork legs.\r\nThe input stream will be cached by materialize and then the cached expression can be used in join/union legs.\r\n* A name, given by the `name` argument or by using [`as`](asoperator.md) operator will be used as the to name the result tab in [`Kusto.Explorer`](../tools/kusto-explorer.md) tool.\r\n* Avoid using `fork` with a single subquery.\r\n* Prefer using [batch](batches.md) with [`materialize`](materializefunction.md) of tabular expression statements over `fork` operator.",'```\r\nKustoLogs\r\n| where Timestamp > ago(1h)\r\n| fork\r\n    ( where Level == "Error" | project EventText | limit 100 )\r\n    ( project Timestamp, EventText | top 1000 by Timestamp desc)\r\n    ( summarize min(Timestamp), max(Timestamp) by ActivityID )\r\n \r\n// In the following examples the result tables will be named: Errors, EventsTexts and TimeRangePerActivityID\r\nKustoLogs\r\n| where Timestamp > ago(1h)\r\n| fork\r\n    ( where Level == "Error" | project EventText | limit 100 | as Errors )\r\n    ( project Timestamp, EventText | top 1000 by Timestamp desc | as EventsTexts )\r\n    ( summarize min(Timestamp), max(Timestamp) by ActivityID | as TimeRangePerActivityID )\r\n    \r\n KustoLogs\r\n| where Timestamp > ago(1h)\r\n| fork\r\n    Errors = ( where Level == "Error" | project EventText | limit 100 )\r\n    EventsTexts = ( project Timestamp, EventText | top 1000 by Timestamp desc )\r\n    TimeRangePerActivityID = ( summarize min(Timestamp), max(Timestamp) by ActivityID )\r\n```',"https://docs.microsoft.com/en-us/azure/kusto/query/forkoperator","forkoperator.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"format_bytes","Formats a number as a string representing data size in bytes.","```\r\nformat_bytes(1024) == '1 KB'\"\r\n```\r\n\r\n## Syntax\r\n\r\n`format_bytes(`*value* [`,` *precision* [`,` *units*]]`)`\r\n\r\n## Arguments\r\n\r\n* `value`: a number to be formatted as data size in bytes.\r\n* `precision`: (optional) Number of digits the value will be rounded to. (default value is 0).\r\n* `units`: (optional) Units of the target data size the string formatting will use (`Bytes`, `KB`, `MB`, `GB`, `TB`, `PB`). If parameter is empty - the units will be auto-selected based on input value.\r\n\r\n## Returns\r\n\r\nThe string with the format result.",'```\r\nprint \r\nv1 = format_bytes(564),\r\nv2 = format_bytes(10332, 1),\r\nv3 = format_bytes(20010332),\r\nv4 = format_bytes(20010332, 2),\r\nv5 = format_bytes(20010332, 0, "KB")\r\n```\r\n\r\n|v1|v2|v3|v4|v5|\r\n|---|---|---|---|---|\r\n|564 Bytes|10.1 KB|19 MB|19.08 MB|19541 KB|',"https://docs.microsoft.com/en-us/azure/kusto/query/format-bytesfunction","format-bytesfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"format_datetime","Formats a datetime according to the provided format.","```\r\nformat_datetime(datetime(2015-12-14 02:03:04.12345), 'y-M-d h:m:s.fffffff') == \"15-12-14 2:3:4.1234500\"\r\n```\r\n\r\n## Syntax\r\n\r\n`format_datetime(`*datetime* `,` *format*`)`\r\n\r\n## Arguments\r\n\r\n* `datetime`: value of a type `datetime`.\r\n* `format`: format specifier string, consisting of one or more [format elements](#supported-formats).\r\n\r\n## Returns\r\n\r\nThe string with the format result.\r\n\r\n## Supported formats\r\n\r\n|Format specifier\t|Description\t|Examples\r\n|---|---|---\r\n|`d`\t|The day of the month, from 1 through 31. |\t2009-06-01T13:45:30 -> 1, 2009-06-15T13:45:30 -> 15\r\n|`dd`\t|The day of the month, from 01 through 31.|\t2009-06-01T13:45:30 -> 01, 2009-06-15T13:45:30 -> 15\r\n|`f`\t|The tenths of a second in a date and time value. |2009-06-15T13:45:30.6170000 -> 6, 2009-06-15T13:45:30.05 -> 0\r\n|`ff`\t|The hundredths of a second in a date and time value. |2009-06-15T13:45:30.6170000 -> 61, 2009-06-15T13:45:30.0050000 -> 00\r\n|`fff`\t|The milliseconds in a date and time value. |6/15/2009 13:45:30.617 -> 617, 6/15/2009 13:45:30.0005 -> 000\r\n|`ffff`\t|The ten thousandths of a second in a date and time value. |2009-06-15T13:45:30.6175000 -> 6175, 2009-06-15T13:45:30.0000500 -> 0000\r\n|`fffff`\t|The hundred thousandths of a second in a date and time value. |2009-06-15T13:45:30.6175400 -> 61754, 2009-06-15T13:45:30.000005 -> 00000\r\n|`ffffff`\t|The millionths of a second in a date and time value. |2009-06-15T13:45:30.6175420 -> 617542, 2009-06-15T13:45:30.0000005 -> 000000\r\n|`fffffff`\t|The ten millionths of a second in a date and time value. |2009-06-15T13:45:30.6175425 -> 6175425, 2009-06-15T13:45:30.0001150 -> 0001150\r\n|`F`\t|If non-zero, the tenths of a second in a date and time value. |2009-06-15T13:45:30.6170000 -> 6, 2009-06-15T13:45:30.0500000 -> (no output)\r\n|`FF`\t|If non-zero, the hundredths of a second in a date and time value. |2009-06-15T13:45:30.6170000 -> 61, 2009-06-15T13:45:30.0050000 -> (no output)\r\n|`FFF`\t|If non-zero, the milliseconds in a date and time value. |2009-06-15T13:45:30.6170000 -> 617, 2009-06-15T13:45:30.0005000 -> (no output)\r\n|`FFFF`\t|If non-zero, the ten thousandths of a second in a date and time value. |2009-06-15T13:45:30.5275000 -> 5275, 2009-06-15T13:45:30.0000500 -> (no output)\r\n|`FFFFF`\t|If non-zero, the hundred thousandths of a second in a date and time value. |2009-06-15T13:45:30.6175400 -> 61754, 2009-06-15T13:45:30.0000050 -> (no output)\r\n|`FFFFFF`\t|If non-zero, the millionths of a second in a date and time value. |2009-06-15T13:45:30.6175420 -> 617542, 2009-06-15T13:45:30.0000005 -> (no output)\r\n|`FFFFFFF`\t|If non-zero, the ten millionths of a second in a date and time value. |2009-06-15T13:45:30.6175425 -> 6175425, 2009-06-15T13:45:30.0001150 -> 000115\r\n|`h`\t|The hour, using a 12-hour clock from 1 to 12. |2009-06-15T01:45:30 -> 1, 2009-06-15T13:45:30 -> 1\r\n|`hh`\t|The hour, using a 12-hour clock from 01 to 12. |2009-06-15T01:45:30 -> 01, 2009-06-15T13:45:30 -> 01\r\n|`H`\t|The hour, using a 24-hour clock from 0 to 23. |2009-06-15T01:45:30 -> 1, 2009-06-15T13:45:30 -> 13\r\n|`HH`\t|The hour, using a 24-hour clock from 00 to 23. |2009-06-15T01:45:30 -> 01, 2009-06-15T13:45:30 -> 13\r\n|`m`\t|The minute, from 0 through 59. |2009-06-15T01:09:30 -> 9, 2009-06-15T13:29:30 -> 29\r\n|`mm`\t|The minute, from 00 through 59. |2009-06-15T01:09:30 -> 09, 2009-06-15T01:45:30 -> 45\r\n|`M`\t|The month, from 1 through 12. |2009-06-15T13:45:30 -> 6\r\n|`MM`\t|The month, from 01 through 12.|2009-06-15T13:45:30 -> 06\r\n|`s`\t|The second, from 0 through 59. |2009-06-15T13:45:09 -> 9\r\n|`ss`\t|The second, from 00 through 59. |2009-06-15T13:45:09 -> 09\r\n|`y`\t|The year, from 0 to 99. |0001-01-01T00:00:00 -> 1, 0900-01-01T00:00:00 -> 0, 1900-01-01T00:00:00 -> 0, 2009-06-15T13:45:30 -> 9, 2019-06-15T13:45:30 -> 19\r\n|`yy`\t|The year, from 00 to 99. |\t0001-01-01T00:00:00 -> 01, 0900-01-01T00:00:00 -> 00, 1900-01-01T00:00:00 -> 00, 2019-06-15T13:45:30 -> 19\r\n|`yyyy`\t|The year as a four-digit number. |\t0001-01-01T00:00:00 -> 0001, 0900-01-01T00:00:00 -> 0900, 1900-01-01T00:00:00 -> 1900, 2009-06-15T13:45:30 -> 2009\r\n|`tt`\t|AM / PM hours |2009-06-15T13:45:09 -> PM\r\n\r\n**Supported delimeters**\r\n\r\nFormat specifier can include following delimeters characters:\r\n\r\n|Delimeter|Comment|\r\n|---------|-------|\r\n|`' '`| Space|\r\n|`'/'`||\r\n|`'-'`|Dash|\r\n|`':'`||\r\n|`','`||\r\n|`'.'`||\r\n|`'_'`||\r\n|`'['`||\r\n|`']'`||","```\r\nlet dt = datetime(2017-01-29 09:00:05);\r\nprint \r\nv1=format_datetime(dt,'yy-MM-dd [HH:mm:ss]'), \r\nv2=format_datetime(dt, 'yyyy-M-dd [H:mm:ss]'),\r\nv3=format_datetime(dt, 'yy-MM-dd [hh:mm:ss tt]')\r\n```\r\n\r\n|v1|v2|v3|\r\n|---|---|---|\r\n|17-01-29 [09:00:05]|2017-1-29 [9:00:05]|17-01-29 [09:00:05 AM]|","https://docs.microsoft.com/en-us/azure/kusto/query/format-datetimefunction","format-datetimefunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"format_ipv4","Parses input with a netmask and returns string representing IPv4 address.","```\r\nprint format_ipv4('192.168.1.255', 24) == '192.168.1.0'\r\nprint format_ipv4(3232236031, 24) == '192.168.1.0'\r\n```\r\n\r\n## Syntax\r\n\r\n`format_ipv4(`*Expr* [`,` *PrefixMask*`])`\r\n\r\n## Arguments\r\n\r\n* *`Expr`*: A string or number representation of the IPv4 address.\r\n* *`PrefixMask`*: (Optional) An integer from 0 to 32 representing the number of most-significant bits that are taken into account. If argument isn't specified, all bit-masks are used (32).\r\n\r\n## Returns\r\n\r\nIf conversion is successful, the result will be a string representing IPv4 address.\r\nIf conversion isn't successful, the result will be an empty string.\r\n\r\n## See also\r\n\r\n- [format_ipv4_mask()](format-ipv4-mask-function.md): For IPv4 address formatting including CIDR notation.\r\n- [IPv4 and IPv6 functions](scalarfunctions.md#ipv4ipv6-functions)","```\r\ndatatable(address:string, mask:long)\r\n[\r\n '192.168.1.1', 24,          \r\n '192.168.1.1', 32,          \r\n '192.168.1.1/24', 32,       \r\n '192.168.1.1/24', long(-1), \r\n]\r\n| extend result = format_ipv4(address, mask), \r\n         result_mask = format_ipv4_mask(address, mask)\r\n```\r\n\r\n|address|mask|result|result_mask|\r\n|---|---|---|---|\r\n|192.168.1.1|24|192.168.1.0|192.168.1.0/24|\r\n|192.168.1.1|32|192.168.1.1|192.168.1.1/32|\r\n|192.168.1.1/24|32|192.168.1.0|192.168.1.0/24|\r\n|192.168.1.1/24|-1|||","https://docs.microsoft.com/en-us/azure/kusto/query/format-ipv4-function","format-ipv4-function.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"format_ipv4_mask","Parses input with a netmask and returns string representing IPv4 address as CIDR notation.","```\r\nprint format_ipv4_mask('192.168.1.255', 24) == '192.168.1.0/24'\r\nprint format_ipv4_mask(3232236031, 24) == '192.168.1.0/24'\r\n```\r\n\r\n## Syntax\r\n\r\n`format_ipv4_mask(`*Expr* [`,` *PrefixMask*`])`\r\n\r\n## Arguments\r\n\r\n* *`Expr`*: A string or number representation of the IPv4 address as CIDR notation.\r\n* *`PrefixMask`*: (Optional) An integer from 0 to 32 representing the number of most-significant bits that are taken into account. If argument isn't specified, all bit-masks are used (32).\r\n\r\n## Returns\r\n\r\nIf conversion is successful, the result will be a string representing IPv4 address as CIDR notation.\r\nIf conversion isn't successful, the result will be an empty string.\r\n\r\n## See also\r\n\r\n- [format_ipv4()](format-ipv4-function.md): For IPv4 address formatting without CIDR notation.\r\n- [IPv4 and IPv6 functions](scalarfunctions.md#ipv4ipv6-functions)","```\r\ndatatable(address:string, mask:long)\r\n[\r\n '192.168.1.1', 24,          \r\n '192.168.1.1', 32,          \r\n '192.168.1.1/24', 32,       \r\n '192.168.1.1/24', long(-1), \r\n]\r\n| extend result = format_ipv4(address, mask), \r\n         result_mask = format_ipv4_mask(address, mask)\r\n```\r\n\r\n|address|mask|result|result_mask|\r\n|---|---|---|---|\r\n|192.168.1.1|24|192.168.1.0|192.168.1.0/24|\r\n|192.168.1.1|32|192.168.1.1|192.168.1.1/32|\r\n|192.168.1.1/24|32|192.168.1.0|192.168.1.0/24|\r\n|192.168.1.1/24|-1|||","https://docs.microsoft.com/en-us/azure/kusto/query/format-ipv4-mask-function","format-ipv4-mask-function.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"format_timespan","Formats a timespan according to the provided format.","```\r\nformat_timespan(time(14.02:03:04.12345), 'h:m:s.fffffff') == \"2:3:4.1234500\"\r\n```\r\n\r\n## Syntax\r\n\r\n`format_timespan(`*timespan* `,` *format*`)`\r\n\r\n## Arguments\r\n\r\n* `timespan`: value of a type `timespan`.\r\n* `format`: format specifier string, consisting of one or more [format elements](#supported-formats).\r\n\r\n## Returns\r\n\r\nThe string with the format result.\r\n\r\n## Supported formats\r\n\r\n|Format specifier\t|Description\t|Examples\r\n|---|---|---\r\n|`d`-`dddddddd`\t|The number of whole days in the time interval. Padded with zeros if needed.|\t15.13:45:30: d -> 15, dd -> 15, ddd -> 015\r\n|`f`\t|The tenths of a second in the time interval. |15.13:45:30.6170000 -> 6, 15.13:45:30.05 -> 0\r\n|`ff`\t|The hundredths of a second in the time interval. |15.13:45:30.6170000 -> 61, 15.13:45:30.0050000 -> 00\r\n|`fff`\t|The milliseconds in the time interval. |6/15/2009 13:45:30.617 -> 617, 6/15/2009 13:45:30.0005 -> 000\r\n|`ffff`\t|The ten thousandths of a second in the time interval. |15.13:45:30.6175000 -> 6175, 15.13:45:30.0000500 -> 0000\r\n|`fffff`\t|The hundred thousandths of a second in the time interval. |15.13:45:30.6175400 -> 61754, 15.13:45:30.000005 -> 00000\r\n|`ffffff`\t|The millionths of a second in the time interval. |15.13:45:30.6175420 -> 617542, 15.13:45:30.0000005 -> 000000\r\n|`fffffff`\t|The ten millionths of a second in the time interval. |15.13:45:30.6175425 -> 6175425, 15.13:45:30.0001150 -> 0001150\r\n|`F`\t|If non-zero, the tenths of a second in the time interval. |15.13:45:30.6170000 -> 6, 15.13:45:30.0500000 -> (no output)\r\n|`FF`\t|If non-zero, the hundredths of a second in the time interval. |15.13:45:30.6170000 -> 61, 15.13:45:30.0050000 -> (no output)\r\n|`FFF`\t|If non-zero, the milliseconds in the time interval. |15.13:45:30.6170000 -> 617, 15.13:45:30.0005000 -> (no output)\r\n|`FFFF`\t|If non-zero, the ten thousandths of a second in the time interval. |15.13:45:30.5275000 -> 5275, 15.13:45:30.0000500 -> (no output)\r\n|`FFFFF`\t|If non-zero, the hundred thousandths of a second in the time interval. |15.13:45:30.6175400 -> 61754, 15.13:45:30.0000050 -> (no output)\r\n|`FFFFFF`\t|If non-zero, the millionths of a second in the time interval. |15.13:45:30.6175420 -> 617542, 15.13:45:30.0000005 -> (no output)\r\n|`FFFFFFF`\t|If non-zero, the ten millionths of a second in the time interval. |15.13:45:30.6175425 -> 6175425, 15.13:45:30.0001150 -> 000115\r\n|`h`\t|The number of whole hours in the time interval that are not counted as part of days. Single-digit hours do not have a leading zero. |15.01:45:30 -> 1, 15.13:45:30 -> 1\r\n|`hh`\t|The number of whole hours in the time interval that are not counted as part of days. Single-digit hours have a leading zero. |15.01:45:30 -> 01, 15.13:45:30 -> 01\r\n|`H`\t|The hour, using a 24-hour clock from 0 to 23. |15.01:45:30 -> 1, 15.13:45:30 -> 13\r\n|`HH`\t|The hour, using a 24-hour clock from 00 to 23. |15.01:45:30 -> 01, 15.13:45:30 -> 13\r\n|`m`\t|The number of whole minutes in the time interval that are not included as part of hours or days. Single-digit minutes do not have a leading zero. |15.01:09:30 -> 9, 15.13:29:30 -> 29\r\n|`mm`\t|The number of whole minutes in the time interval that are not included as part of hours or days. Single-digit minutes have a leading zero. |15.01:09:30 -> 09, 15.01:45:30 -> 45\r\n|`s`\t|The number of whole seconds in the time interval that are not included as part of hours, days, or minutes. Single-digit seconds do not have a leading zero. |15.13:45:09 -> 9\r\n|`ss`\t|The number of whole seconds in the time interval that are not included as part of hours, days, or minutes. Single-digit seconds have a leading zero. |15.13:45:09 -> 09\r\n\r\n**Supported delimeters**\r\n\r\nFormat specifier can include following delimeters characters:\r\n\r\n|Delimeter|Comment|\r\n|---------|-------|\r\n|`' '`| Space|\r\n|`'/'`||\r\n|`'-'`|Dash|\r\n|`':'`||\r\n|`','`||\r\n|`'.'`||\r\n|`'_'`||\r\n|`'['`||\r\n|`']'`||","```\r\nlet t = time(29.09:00:05.12345);\r\nprint \r\nv1=format_timespan(t, 'dd.hh:mm:ss:FF'),\r\nv2=format_timespan(t, 'ddd.h:mm:ss [fffffff]')\r\n```\r\n\r\n|v1|v2|\r\n|---|---|\r\n|29.09:00:05:12|029.9:00:05 [1234500]|","https://docs.microsoft.com/en-us/azure/kusto/query/format-timespanfunction","format-timespanfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"gamma","Computes [gamma function](https://en.wikipedia.org/wiki/Gamma_function)","## Syntax\r\n\r\n`gamma(`*x*`)`\r\n\r\n## Arguments\r\n\r\n* *x*: Parameter for the gamma function\r\n\r\n## Returns\r\n\r\n* Gamma function of x.\r\n* For computing log-gamma function, see [loggamma()](loggammafunction.md).","","https://docs.microsoft.com/en-us/azure/kusto/query/gammafunction","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"geo_distance_2points","Calculates the shortest distance between two geospatial coordinates on Earth.","## Syntax\r\n\r\n`geo_distance_2points(`*p1_longitude*`, `*p1_latitude*`, `*p2_longitude*`, `*p2_latitude*`)`\r\n\r\n## Arguments\r\n\r\n* *p1_longitude*: First geospatial coordinate, longitude value in degrees. Valid value is a real number and in the range [-180, +180].\r\n* *p1_latitude*: First geospatial coordinate, latitude value in degrees. Valid value is a real number and in the range [-90, +90].\r\n* *p2_longitude*: Second geospatial coordinate, longitude value in degrees. Valid value is a real number and in the range [-180, +180].\r\n* *p2_latitude*: Second geospatial coordinate, latitude value in degrees. Valid value is a real number and in the range [-90, +90].\r\n\r\n## Returns\r\n\r\nThe shortest distance, in meters, between two geographic locations on Earth. If the coordinates are invalid, the query will produce a null result.\r\n\r\n> [!NOTE]\r\n> * The geospatial coordinates are interpreted as represented by the [WGS-84](https://earth-info.nga.mil/GandG/update/index.php?action=home) coordinate reference system.\r\n> * The [geodetic datum](https://en.wikipedia.org/wiki/Geodetic_datum) used to measure distance on Earth is a sphere.",'The following example finds the shortest distance between Seattle and Los Angeles.\r\n\r\n![Distance between Seattle and Los Angeles](images/geo-distance-2points-function/distance_2points_seattle_los_angeles.png)\r\n\r\n```\r\nprint distance_in_meters = geo_distance_2points(-122.407628, 47.578557, -118.275287, 34.019056)\r\n```\r\n\r\n| distance_in_meters |\r\n|--------------------|\r\n| 1546754.35197381   |\r\n\r\nHere is an approximation of shortest path from Seattle to London. The line consists of coordinates along the LineString and within 500 meters from it.\r\n\r\n![Seattle to London LineString](images/geo-distance-2points-function/line_seattle_london.png)\r\n\r\n```\r\nrange i from 1 to 1000000 step 1\r\n| project lng = rand() * real(-122), lat = rand() * 90\r\n| where lng between(real(-122) .. 0) and lat between(47 .. 90)\r\n| where geo_distance_point_to_line(lng,lat,dynamic({"type":"LineString","coordinates":[[-122,47],[0,51]]})) < 500\r\n| render scatterchart with (kind=map) // map rendering available in Kusto Explorer desktop\r\n```\r\n\r\nThe following example finds all rows in which the shortest distance between two coordinates is between 1 and 11 meters.\r\n\r\n```\r\nStormEvents\r\n| extend distance_1_to_11m = geo_distance_2points(BeginLon, BeginLat, EndLon, EndLat)\r\n| where distance_1_to_11m between (1 .. 11)\r\n| project distance_1_to_11m\r\n```\r\n\r\n| distance_1_to_11m |\r\n|-------------------|\r\n| 10.5723100154958  |\r\n| 7.92153588248414  |\r\n\r\nThe following example returns a null result because of the invalid coordinate input.\r\n\r\n```\r\nprint distance = geo_distance_2points(300,1,1,1)\r\n```\r\n\r\n| distance |\r\n|----------|\r\n|          |',"https://docs.microsoft.com/en-us/azure/kusto/query/geo-distance-2points-function","geo-distance-2points-function.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"geo_distance_point_to_line","Calculates the shortest distance between a coordinate and a line or multiline on Earth.",'## Syntax\r\n\r\n`geo_distance_point_to_line(`*longitude*`, `*latitude*`, `*lineString*`)`\r\n\r\n## Arguments\r\n\r\n* *longitude*: Geospatial coordinate longitude value in degrees. Valid value is a real number and in the range [-180, +180].\r\n* *latitude*: Geospatial coordinate latitude value in degrees. Valid value is a real number and in the range [-90, +90].\r\n* *lineString*: Line or multiline in the [GeoJSON format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type.\r\n\r\n## Returns\r\n\r\nThe shortest distance, in meters, between a coordinate and a line on Earth. If the coordinate or lineString are invalid, the query will produce a null result.\r\n\r\n> [!NOTE]\r\n> * The geospatial coordinates are interpreted as represented by the [WGS-84](https://earth-info.nga.mil/GandG/update/index.php?action=home) coordinate reference system.\r\n> * The [geodetic datum](https://en.wikipedia.org/wiki/Geodetic_datum) used to measure distance on Earth is a sphere. Line edges are [geodesics](https://en.wikipedia.org/wiki/Geodesic) on the sphere.\r\n> * If input line edges are straight cartesian lines, consider using [geo_line_densify()](geo-line-densify-function.md) in order to convert planar edges to geodesics.\r\n\r\n**LineString definition and constraints**\r\n\r\ndynamic({"type": "LineString","coordinates": [ [lng_1,lat_1], [lng_2,lat_2] ,..., [lng_N,lat_N] ]})\r\n\r\ndynamic({"type": "MultiLineString","coordinates": [ [ line_1, line_2 ,..., line_N ] ]})\r\n\r\n* LineString coordinates array must contain at least two entries.\r\n* Coordinates [longitude,latitude] must be valid where longitude is a real number in the range [-180, +180] and latitude is a real number in the range [-90, +90].\r\n* Edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\r\n\r\n> [!TIP]\r\n> For better performance, use literal lines.','The following example finds the shortest distance between North Las Vegas Airport and a nearby road.\r\n\r\n![Distance between North Las Vegas Airport and road](images/geo-distance-point-to-line-function/distance-point-to-line.png)\r\n\r\n```\r\nprint distance_in_meters = geo_distance_point_to_line(-115.199625, 36.210419, dynamic({ "type":"LineString","coordinates":[[-115.115385,36.229195],[-115.136995,36.200366],[-115.140252,36.192470],[-115.143558,36.188523],[-115.144076,36.181954],[-115.154662,36.174483],[-115.166431,36.176388],[-115.183289,36.175007],[-115.192612,36.176736],[-115.202485,36.173439],[-115.225355,36.174365]]}))\r\n```\r\n\r\n| distance_in_meters |\r\n|--------------------|\r\n| 3797.88887253334   |\r\n\r\nStorm events in south coast US. The events are filtered by a maximum distance of 5 km from the defined shore line.\r\n\r\n![Storm events in the US south coast](images/geo-distance-point-to-line-function/us-south-coast-storm-events.png)\r\n\r\n```\r\nlet southCoast = dynamic({"type":"LineString","coordinates":[[-97.18505859374999,25.997549919572112],[-97.58056640625,26.96124577052697],[-97.119140625,27.955591004642553],[-94.04296874999999,29.726222319395504],[-92.98828125,29.82158272057499],[-89.18701171875,29.11377539511439],[-89.384765625,30.315987718557867],[-87.5830078125,30.221101852485987],[-86.484375,30.4297295750316],[-85.1220703125,29.6880527498568],[-84.00146484374999,30.14512718337613],[-82.6611328125,28.806173508854776],[-82.81494140625,28.033197847676377],[-82.177734375,26.52956523826758],[-80.9912109375,25.20494115356912]]});\r\nStormEvents\r\n| project BeginLon, BeginLat, EventType\r\n| where geo_distance_point_to_line(BeginLon, BeginLat, southCoast) < 5000\r\n| render scatterchart with (kind=map) // map rendering available in Kusto Explorer desktop\r\n```\r\n\r\nNY taxi pickups. Pickups are filtered by maximum distance of 0.1 meters from the defined multiline.\r\n\r\n![NYC taxi pickups on Madison Ave](images/geo-distance-point-to-line-function/madison-ave-road.png)\r\n\r\n```\r\nlet MadisonAve = dynamic({"type":"MultiLineString","coordinates":[[[-73.9879823,40.7408625],[-73.9876492,40.7413345],[-73.9874982,40.7415046],[-73.9870343,40.7421446],[-73.9865812,40.7427655],[-73.9861292,40.7433756],[-73.9856813,40.7439956],[-73.9854932,40.7442606],[-73.9852232,40.7446216],[-73.9847903,40.7452305],[-73.9846232,40.7454536],[-73.9844803,40.7456606],[-73.9843413,40.7458585],[-73.9839533,40.7463955],[-73.9839002,40.7464696],[-73.9837683,40.7466566],[-73.9834342,40.7471015],[-73.9833833,40.7471746],[-73.9829712,40.7477686],[-73.9824752,40.7484255],[-73.9820262,40.7490436],[-73.9815623,40.7496566],[-73.9811212,40.7502796],[-73.9809762,40.7504976],[-73.9806982,40.7509255],[-73.9802752,40.7515216],[-73.9798033,40.7521795],[-73.9795863,40.7524656],[-73.9793082,40.7528316],[-73.9787872,40.7534725],[-73.9783433,40.7540976],[-73.9778912,40.7547256],[-73.9774213,40.7553365],[-73.9769402,40.7559816],[-73.9764622,40.7565766],[-73.9760073,40.7572036],[-73.9755592,40.7578366],[-73.9751013,40.7584665],[-73.9746532,40.7590866],[-73.9741902,40.7597326],[-73.9737632,40.7603566],[-73.9733032,40.7609866],[-73.9728472,40.7616205],[-73.9723422,40.7622826],[-73.9718672,40.7629556],[-73.9714042,40.7635726],[-73.9709362,40.7642185],[-73.9705282,40.7647636],[-73.9704903,40.7648196],[-73.9703342,40.7650355],[-73.9701562,40.7652826],[-73.9700322,40.7654535],[-73.9695742,40.7660886],[-73.9691232,40.7667166],[-73.9686672,40.7673375],[-73.9682142,40.7679605],[-73.9677482,40.7685786],[-73.9672883,40.7692076],[-73.9668412,40.7698296],[-73.9663882,40.7704605],[-73.9659222,40.7710936],[-73.9654262,40.7717756],[-73.9649292,40.7724595],[-73.9644662,40.7730955],[-73.9640012,40.7737285],[-73.9635382,40.7743615],[-73.9630692,40.7749936],[-73.9626122,40.7756275],[-73.9621172,40.7763106],[-73.9616111,40.7769896],[-73.9611552,40.7776245],[-73.9606891,40.7782625],[-73.9602212,40.7788866],[-73.9597532,40.7795236],[-73.9595842,40.7797445],[-73.9592942,40.7801635],[-73.9591122,40.7804105],[-73.9587982,40.7808305],[-73.9582992,40.7815116],[-73.9578452,40.7821455],[-73.9573802,40.7827706],[-73.9569262,40.7833965],[-73.9564802,40.7840315],[-73.9560102,40.7846486],[-73.9555601,40.7852755],[-73.9551221,40.7859005],[-73.9546752,40.7865426],[-73.9542571,40.7871505],[-73.9541771,40.7872335],[-73.9540892,40.7873366],[-73.9536971,40.7879115],[-73.9532792,40.7884706],[-73.9532142,40.7885205],[-73.9531522,40.7885826],[-73.9527382,40.7891785],[-73.9523081,40.7897545],[-73.9518332,40.7904115],[-73.9513721,40.7910435],[-73.9509082,40.7916695],[-73.9504602,40.7922995],[-73.9499882,40.7929195],[-73.9495051,40.7936045],[-73.9490071,40.7942835],[-73.9485542,40.7949065],[-73.9480832,40.7955345],[-73.9476372,40.7961425],[-73.9471772,40.7967915],[-73.9466841,40.7974475],[-73.9453432,40.7992905],[-73.9448332,40.7999835],[-73.9443442,40.8006565],[-73.9438862,40.8012945],[-73.9434262,40.8019196],[-73.9431412,40.8023325],[-73.9429842,40.8025585],[-73.9425691,40.8031855],[-73.9424401,40.8033609],[-73.9422987,40.8035533],[-73.9422013,40.8036857],[-73.9421022,40.8038205],[-73.9420024,40.8039552],[-73.9416372,40.8044485],[-73.9411562,40.8050725],[-73.9406471,40.8057176],[-73.9401481,40.8064135],[-73.9397022,40.8070255],[-73.9394081,40.8074155],[-73.9392351,40.8076495],[-73.9387842,40.8082715],[-73.9384681,40.8087086],[-73.9383211,40.8089025],[-73.9378792,40.8095215],[-73.9374011,40.8101795],[-73.936405,40.8115707],[-73.9362328,40.8118098]],[[-73.9362328,40.8118098],[-73.9362432,40.8118567],[-73.9361239,40.8120222],[-73.9360302,40.8120805]],[[-73.9362328,40.8118098],[-73.9361571,40.8118294],[-73.9360443,40.8119993],[-73.9360302,40.8120805]],[[-73.9360302,40.8120805],[-73.9359423,40.8121378],[-73.9358551,40.8122385],[-73.9352181,40.8130815],[-73.9348702,40.8135515],[-73.9347541,40.8137145],[-73.9346332,40.8138615],[-73.9345542,40.8139595],[-73.9344981,40.8139945],[-73.9344571,40.8140165],[-73.9343962,40.8140445],[-73.9343642,40.8140585],[-73.9343081,40.8140725],[-73.9341971,40.8140895],[-73.9341041,40.8141005],[-73.9340022,40.8140965],[-73.9338442,40.8141005],[-73.9333712,40.8140895],[-73.9325541,40.8140755],[-73.9324561,40.8140705],[-73.9324022,40.8140695]],[[-73.9360302,40.8120805],[-73.93605,40.8121667],[-73.9359632,40.8122805],[-73.9353631,40.8130795],[-73.9351482,40.8133625],[-73.9350072,40.8135415],[-73.9347441,40.8139168],[-73.9346611,40.8140125],[-73.9346101,40.8140515],[-73.9345401,40.8140965],[-73.9344381,40.8141385],[-73.9343451,40.8141555],[-73.9342991,40.8141675],[-73.9341552,40.8141985],[-73.9338601,40.8141885],[-73.9333991,40.8141815],[-73.9323981,40.8141665]]]});\r\nnyc_taxi\r\n| project pickup_longitude, pickup_latitude\r\n| where geo_distance_point_to_line(pickup_longitude, pickup_latitude, MadisonAve) <= 0.1\r\n| take 100\r\n| render scatterchart with (kind=map) // map rendering available in Kusto Explorer desktop\r\n```\r\n\r\nThe following example will return a null result because of the invalid LineString input.\r\n\r\n```\r\nprint distance_in_meters = geo_distance_point_to_line(1,1, dynamic({ "type":"LineString"}))\r\n```\r\n\r\n| distance_in_meters |\r\n|--------------------|\r\n|                    |\r\n\r\nThe following example will return a null result because of the invalid coordinate input.\r\n\r\n```\r\nprint distance_in_meters = geo_distance_point_to_line(300, 3, dynamic({ "type":"LineString","coordinates":[[1,1],[2,2]]}))\r\n```\r\n\r\n| distance_in_meters |\r\n|--------------------|\r\n|                    |',"https://docs.microsoft.com/en-us/azure/kusto/query/geo-distance-point-to-line-function","geo-distance-point-to-line-function.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"geo_geohash_to_central_point","Calculates the geospatial coordinates that represent the center of a geohash rectangular area.","Read more about [`geohash`](https://en.wikipedia.org/wiki/Geohash).  \r\n\r\n## Syntax\r\n\r\n`geo_geohash_to_central_point(`*geohash*`)`\r\n\r\n## Arguments\r\n\r\n*geohash*: Geohash string value as it was calculated by [geo_point_to_geohash()](geo-point-to-geohash-function.md). The geohash string can be 1 to 18 characters.\r\n\r\n## Returns\r\n\r\nThe geospatial coordinate values in [GeoJSON Format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type. If the geohash is invalid, the query will produce a null result.\r\n\r\n> [!NOTE]\r\n> The GeoJSON format specifies longitude first and latitude second.",'```\r\nprint point = geo_geohash_to_central_point("sunny")\r\n| extend coordinates = point.coordinates\r\n| extend longitude = coordinates[0], latitude = coordinates[1]\r\n```\r\n\r\n|point|coordinates|longitude|latitude|\r\n|---|---|---|---|\r\n|{<br>  "type": "Point",<br>  "coordinates": [<br>    42.47314453125,<br>    23.70849609375<br>  ]<br>}|[<br>  42.47314453125,<br>  23.70849609375<br>]|42.47314453125|23.70849609375|\r\n\r\nThe following example returns a null result because of the invalid geohash input.\r\n\r\n```\r\nprint geohash = geo_geohash_to_central_point("a")\r\n```\r\n\r\n|geohash|\r\n|---|\r\n||\r\n\r\n## Example: Creating location deep-links for Bing Maps\r\n\r\nYou can use the geohash value to create a deep-link URL to Bing Maps by pointing to the geohash center point:\r\n\r\n```\r\n// Use string concatenation to create Bing Map deep-link URL from a geo-point\r\nlet point_to_map_url = (_point:dynamic, _title:string) \r\n{\r\n    strcat(\'https://www.bing.com/maps?sp=point.\', _point.coordinates[1] ,\'_\', _point.coordinates[0], \'_\', url_encode(_title)) \r\n};\r\n// Convert geohash to center point, and then use \'point_to_map_url\' to create Bing Map deep-link\r\nlet geohash_to_map_url = (_geohash:string, _title:string)\r\n{\r\n    point_to_map_url(geo_geohash_to_central_point(_geohash), _title)\r\n};\r\nprint geohash = \'sv8wzvy7\'\r\n| extend url = geohash_to_map_url(geohash, "You are here")\r\n```\r\n\r\n|geohash|url|\r\n|---|---|\r\n|sv8wzvy7|[https://www.bing.com/maps?sp=point.32.15620994567871_34.80245590209961_You+are+here](https://www.bing.com/maps?sp=point.32.15620994567871_34.80245590209961_You+are+here)|',"https://docs.microsoft.com/en-us/azure/kusto/query/geo-geohash-to-central-point-function","geo-geohash-to-central-point-function.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"geo_line_densify","Converts planar line or multiline edges to geodesics by adding intermediate points.",'## Syntax\r\n\r\n`geo_line_densify(`*lineString*`, `*tolerance*`)`\r\n\r\n## Arguments\r\n\r\n* *lineString*: Line or multiline in the [GeoJSON format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type.\r\n* *tolerance*: An optional numeric that defines maximum distance in meters between the original planar edge and the converted geodesic edge chain. Supported values are in the range [0.1, 10000]. If unspecified, the default value `10` is used.\r\n\r\n## Returns\r\n\r\nDensified line in the [GeoJSON format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type. If either the line or tolerance is invalid, the query will produce a null result.\r\n\r\n> [!NOTE]\r\n> * The geospatial coordinates are interpreted as represented by the [WGS-84](https://earth-info.nga.mil/GandG/update/index.php?action=home) coordinate reference system.\r\n\r\n**LineString definition**\r\n\r\ndynamic({"type": "LineString","coordinates": [ [lng_1,lat_1], [lng_2,lat_2] ,..., [lng_N,lat_N] ]})\r\n\r\ndynamic({"type": "MultiLineString","coordinates": [ [ line_1, line_2 ,..., line_N ] ]})\r\n\r\n* LineString coordinates array must contain at least two entries.\r\n* The coordinates [longitude,latitude] must be valid. The longitude must be a real number in the range [-180, +180] and the latitude must be a real number in the range [-90, +90].\r\n* The edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\r\n\r\n**Constraints**\r\n\r\n* The maximum number of points in the densified line is limited to 10485760.\r\n* Storing lines in [dynamic](./scalar-data-types/dynamic.md) format has size limits.\r\n\r\n**Motivation**\r\n\r\n* [GeoJSON format](https://tools.ietf.org/html/rfc7946) defines an edge between two points as a straight cartesian line.\r\n* The decision to use geodesic or planar edges might depend on the dataset and is especially relevant in long edges.','The following example densifies a road in Manhattan island. The edge is short and the distance between the planar edge and its geodesic counterpart is less than the distance specified by tolerance. As such, the result remains unchanged.\r\n\r\n```\r\nprint densified_line = tostring(geo_line_densify(dynamic({"type":"LineString","coordinates":[[-73.949247, 40.796860],[-73.973017, 40.764323]]})))\r\n```\r\n\r\n|densified_line|\r\n|---|\r\n|{"type":"LineString","coordinates":[[-73.949247, 40.796860], [-73.973017, 40.764323]]}|\r\n\r\nThe following example densifies an edge of ~130km length\r\n\r\n```\r\nprint densified_line = tostring(geo_line_densify(dynamic({"type":"LineString","coordinates":[[50, 50], [51, 51]]})))\r\n```\r\n\r\n|densified_line|\r\n|---|\r\n|{"type":"LineString","coordinates":[[50,50],[50.125,50.125],[50.25,50.25],[50.375,50.375],[50.5,50.5],[50.625,50.625],[50.75,50.75],[50.875,50.875],[51,51]]}|\r\n\r\nThe following example returns a null result because of the invalid coordinate input.\r\n\r\n```\r\nprint densified_line = geo_line_densify(dynamic({"type":"LineString","coordinates":[[300,1],[1,1]]}))\r\n```\r\n\r\n|densified_line|\r\n|---|\r\n||\r\n\r\nThe following example returns a null result because of the invalid tolerance input.\r\n\r\n```\r\nprint densified_line = geo_line_densify(dynamic({"type":"LineString","coordinates":[[1,1],[2,2]]}), 0)\r\n```\r\n\r\n|densified_line|\r\n|---|\r\n||',"https://docs.microsoft.com/en-us/azure/kusto/query/geo-line-densify-function","geo-line-densify-function.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"geo_point_in_circle","Calculates whether the geospatial coordinates are inside a circle on Earth.","## Syntax\r\n\r\n`geo_point_in_circle(`*p_longitude*`, `*p_latitude*`, `*pc_longitude*`, `*pc_latitude*`, `*c_radius*`)`\r\n\r\n## Arguments\r\n\r\n* *p_longitude*: Geospatial coordinate longitude value in degrees. Valid value is a real number and in the range [-180, +180].\r\n* *p_latitude*: Geospatial coordinate latitude value in degrees. Valid value is a real number and in the range [-90, +90].\r\n* *pc_longitude*: Circle center geospatial coordinate longitude value in degrees. Valid value is a real number and in the range [-180, +180].\r\n* *pc_latitude*: circle center geospatial coordinate latitude value in degrees. Valid value is a real number and in the range [-90, +90].\r\n* *c_radius*: Circle radius in meters. Valid value must be positive.\r\n\r\n## Returns\r\n\r\nIndicates whether the geospatial coordinates are inside a circle. If the coordinates or circle is invalid, the query will produce a null result.\r\n\r\n> [!NOTE]\r\n>* The geospatial coordinates are interpreted as represented by the [WGS-84](https://earth-info.nga.mil/GandG/update/index.php?action=home) coordinate reference system.\r\n>* The [geodetic datum](https://en.wikipedia.org/wiki/Geodetic_datum) used to measure distance on Earth is a sphere.\r\n>* A circle is a spherical cap on Earth. The radius of the cap is measured along the surface of the sphere.","The following query finds all the places in the area defined by the following circle: Radius of 18 km, center at [-122.317404, 47.609119] coordinates.\r\n\r\n![Places near Seattle](images/geo-point-in-circle-function/circle-seattle.png)\r\n\r\n```\r\ndatatable(longitude:real, latitude:real, place:string)\r\n[\r\n    real(-122.317404), 47.609119, 'Seattle',                   // In circle \r\n    real(-123.497688), 47.458098, 'Olympic National Forest',   // In exterior of circle  \r\n    real(-122.201741), 47.677084, 'Kirkland',                  // In circle\r\n    real(-122.443663), 47.247092, 'Tacoma',                    // In exterior of circle\r\n    real(-122.121975), 47.671345, 'Redmond',                   // In circle\r\n]\r\n| where geo_point_in_circle(longitude, latitude, -122.317404, 47.609119, 18000)\r\n| project place\r\n```\r\n\r\n|place|\r\n|---|\r\n|Seattle|\r\n|Kirkland|\r\n|Redmond|\r\n\r\nStorm events in Orlando. The events are filtered by 100 km within Orlando coordinates, and aggregated by event type and hash.\r\n\r\n![Storm events in Orlando](images/geo-point-in-circle-function/orlando-storm-events.png)\r\n\r\n```\r\nStormEvents\r\n| project BeginLon, BeginLat, EventType\r\n| where geo_point_in_circle(BeginLon, BeginLat, real(-81.3891), 28.5346, 1000 * 100)\r\n| summarize count() by EventType, hash = geo_point_to_s2cell(BeginLon, BeginLat)\r\n| project geo_s2cell_to_central_point(hash), EventType, count_\r\n| render piechart with (kind=map) // map rendering available in Kusto Explorer desktop\r\n```\r\n\r\nThe following example shows NY Taxi pickups within 10 meters of a particular location. Relevant pickups are aggregated by hash.\r\n\r\n![NY Taxi nearby Pickups](images/geo-point-in-circle-function/circle-junction.png)\r\n\r\n```\r\nnyc_taxi\r\n| project pickup_longitude, pickup_latitude\r\n| where geo_point_in_circle( pickup_longitude, pickup_latitude, real(-73.9928), 40.7429, 10)\r\n| summarize by hash = geo_point_to_s2cell(pickup_longitude, pickup_latitude, 22)\r\n| project geo_s2cell_to_central_point(hash)\r\n| render scatterchart with (kind = map) // map rendering available in Kusto Explorer desktop\r\n```\r\n\r\nThe following example will return true.\r\n\r\n```\r\nprint in_circle = geo_point_in_circle(-122.143564, 47.535677, -122.100896, 47.527351, 3500)\r\n```\r\n\r\n|in_circle|\r\n|---|\r\n|1|\r\n\r\nThe following example will return false.\r\n\r\n```\r\nprint in_circle = geo_point_in_circle(-122.137575, 47.630683, -122.100896, 47.527351, 3500)\r\n```\r\n\r\n|in_circle|\r\n|---|\r\n|0|\r\n\r\nThe following example will return a null result because of the invalid coordinate input.\r\n\r\n```\r\nprint in_circle = geo_point_in_circle(200, 1, 1, 1, 1)\r\n```\r\n\r\n|in_circle|\r\n|---|\r\n||\r\n\r\nThe following example will return a  null result because of the invalid circle radius input.\r\n\r\n```\r\nprint in_circle = geo_point_in_circle(1, 1, 1, 1, -1)\r\n```\r\n\r\n|in_circle|\r\n|---|\r\n||","https://docs.microsoft.com/en-us/azure/kusto/query/geo-point-in-circle-function","geo-point-in-circle-function.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"geo_point_in_polygon","Calculates whether the geospatial coordinates are inside a polygon or a multipolygon on Earth.",'## Syntax\r\n\r\n`geo_point_in_polygon(`*longitude*`, `*latitude*`, `*polygon*`)`\r\n\r\n## Arguments\r\n\r\n* *longitude*: Geospatial coordinate, longitude value in degrees. Valid value is a real number and in the range [-180, +180].\r\n* *latitude*: Geospatial coordinate, latitude value in degrees. Valid value is a real number and in the range [-90, +90].\r\n* *polygon*: Polygon or multipolygon in the [GeoJSON format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type.\r\n\r\n## Returns\r\n\r\nIndicates whether the geospatial coordinates are inside a polygon. If the coordinates or polygon is invalid, the query will produce a null result. \r\n\r\n> [!NOTE]\r\n> * The geospatial coordinates are interpreted as represented by the [WGS-84](https://earth-info.nga.mil/GandG/update/index.php?action=home) coordinate reference system.\r\n> * The [geodetic datum](https://en.wikipedia.org/wiki/Geodetic_datum) used for measurements on Earth is a sphere. Polygon edges are [geodesics](https://en.wikipedia.org/wiki/Geodesic) on the sphere.\r\n> * If input polygon edges are straight cartesian lines, consider using [geo_polygon_densify()](geo-polygon-densify-function.md) to convert planar edges to geodesics.\r\n\r\n**Polygon definition and constraints**\r\n\r\ndynamic({"type": "Polygon","coordinates": [ LinearRingShell, LinearRingHole_1 ,..., LinearRingHole_N ]})\r\n\r\ndynamic({"type": "MultiPolygon","coordinates": [[ LinearRingShell, LinearRingHole_1 ,..., LinearRingHole_N ] ,..., [LinearRingShell, LinearRingHole_1 ,..., LinearRingHole_M]]})\r\n\r\n* LinearRingShell is required and defined as a `counterclockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be only one shell.\r\n* LinearRingHole is optional and defined as a `clockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be any number of interior rings and holes.\r\n* LinearRing vertices must be distinct with at least three coordinates. The first coordinate must be equal to the last. At least four entries are required.\r\n* Coordinates [longitude,latitude] must be valid. Longitude must be a real number in the range [-180, +180] and latitude must be a real number in the range [-90, +90].\r\n* LinearRingShell encloses at most half of the sphere. LinearRing divides the sphere into two regions. The smaller of the two regions will be chosen.\r\n* LinearRing edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\r\n* LinearRings must not cross and must not share edges. LinearRings may share vertices.\r\n* Polygon doesn\'t necessarily contain its vertices. Point containment in polygon is defined so that if the Earth is subdivided into polygons, every point is contained by exactly one polygon.\r\n\r\n> [!TIP]\r\n> * Using literal polygons may result in better performance.\r\n> * If you want to know if any of the polygons contains a point, try the following steps: Fold the collection of polygons into one multipolygon. Then query this multipolygon. This may improve performance. See the example below.','Manhattan island without Central Park.\r\n\r\n![Manhattan with a hole](images/geo-point-in-polygon-function/polygon-manhattan-with-hole.png)\r\n\r\n```\r\ndatatable(longitude:real, latitude:real, description:string)\r\n[\r\n    real(-73.985654), 40.748487, \'Empire State Building\',           // In Polygon \r\n    real(-73.963249), 40.779525, \'The Metropolitan Museum of Art\',  // In exterior of polygon\r\n    real(-73.874367), 40.777356, \'LaGuardia Airport\',               // In exterior of polygon\r\n]\r\n| where geo_point_in_polygon(longitude, latitude, dynamic({"type":"Polygon","coordinates":[[[-73.92597198486328,40.87821814104651],[-73.94691467285156,40.85069618625578],[-73.94691467285156,40.841865966890786],[-74.01008605957031,40.7519385984599],[-74.01866912841797,40.704586878965245],[-74.01214599609375,40.699901911003046],[-73.99772644042969,40.70875101828792],[-73.97747039794922,40.71083299030839],[-73.97026062011719,40.7290474687069],[-73.97506713867186,40.734510840309376],[-73.970947265625,40.74543623770158],[-73.94210815429688,40.77586181063573],[-73.9434814453125,40.78080140115127],[-73.92974853515625,40.79691751000055],[-73.93077850341797,40.804454347291006],[-73.93489837646484,40.80965166748853],[-73.93524169921875,40.837190668541105],[-73.92288208007812,40.85770758108904],[-73.9101791381836,40.871728144624974],[-73.92597198486328,40.87821814104651]],[[-73.95824432373047,40.80071852197889],[-73.98206233978271,40.76815921628347],[-73.97309303283691,40.76422632379533],[-73.94914627075195,40.796949998204596],[-73.95824432373047,40.80071852197889]]]}))\r\n```\r\n\r\n|longitude|latitude|description|\r\n|---|---|---|\r\n|-73.985654|40.748487|Empire State Building|\r\n\r\nSearch for coordinates in multipolygon.\r\n\r\n![Manhattan with a hole](images/geo-point-in-polygon-function/multipolygon-manhattan.png)\r\n\r\n```\r\nlet multipolygon = dynamic({"type":"MultiPolygon","coordinates":[[[[-73.991460000000131,40.731738000000206],[-73.992854491775518,40.730082566051351],[-73.996772,40.725432000000154],[-73.997634685522883,40.725786309886963],[-74.002855946639244,40.728346630056791],[-74.001413,40.731065000000207],[-73.996796995070824,40.73736378205173],[-73.991724524037934,40.735245208931886],[-73.990703782359589,40.734781896080477],[-73.991460000000131,40.731738000000206]]],[[[-73.958357552055688,40.800369095633819],[-73.98143901556422,40.768762584141953],[-73.981548752788598,40.7685590292784],[-73.981565335901905,40.768307084720796],[-73.981754418060945,40.768399727738668],[-73.982038573548124,40.768387823012056],[-73.982268248204349,40.768298621883247],[-73.982384797518051,40.768097213086911],[-73.982320919746599,40.767894461792181],[-73.982155532845766,40.767756204474757],[-73.98238873834039,40.767411004834273],[-73.993650353659021,40.772145571634361],[-73.99415893763998,40.772493009137818],[-73.993831082030937,40.772931787850908],[-73.993891252437052,40.772955194876722],[-73.993962585514595,40.772944653908901],[-73.99401262480508,40.772882846631894],[-73.994122058082397,40.77292405902601],[-73.994136652588594,40.772901870174394],[-73.994301342391154,40.772970028663913],[-73.994281535134448,40.77299380206933],[-73.994376552751078,40.77303955110149],[-73.994294029824005,40.773156243992048],[-73.995023275860802,40.773481196576356],[-73.99508939189289,40.773388475039134],[-73.995013963716758,40.773358035426909],[-73.995050284699261,40.773297153189958],[-73.996240651898916,40.773789791397689],[-73.996195837470992,40.773852356184044],[-73.996098807369748,40.773951805299085],[-73.996179459973888,40.773986954351571],[-73.996095245226442,40.774086186437756],[-73.995572265161172,40.773870731394297],[-73.994017424135961,40.77321375261053],[-73.993935876811335,40.773179512586211],[-73.993861942928888,40.773269531698837],[-73.993822393527211,40.773381758622882],[-73.993767019318497,40.773483981224835],[-73.993698463744295,40.773562141052594],[-73.993358326468751,40.773926888327956],[-73.992622663865575,40.774974056037109],[-73.992577842766124,40.774956016359418],[-73.992527743951555,40.775002110439829],[-73.992469745815342,40.775024159551755],[-73.992403837191887,40.775018140390664],[-73.99226708903538,40.775116033858794],[-73.99217809026365,40.775279293897171],[-73.992059084937338,40.775497598192516],[-73.992125372394938,40.775509075053385],[-73.992226867797001,40.775482211026116],[-73.992329346608813,40.775468900958522],[-73.992361756801131,40.775501899766638],[-73.992386042960277,40.775557180424634],[-73.992087684712729,40.775983970821372],[-73.990927174149746,40.777566878763238],[-73.99039616003671,40.777585065679204],[-73.989461267506471,40.778875124584417],[-73.989175778438053,40.779287524015778],[-73.988868617400072,40.779692922911607],[-73.988871874499793,40.779713738253008],[-73.989219022880576,40.779697895209402],[-73.98927785904425,40.779723439271038],[-73.989409054180143,40.779737706471963],[-73.989498614927044,40.779725044389757],[-73.989596493388234,40.779698146683387],[-73.989679812902509,40.779677568658038],[-73.989752702937935,40.779671244211556],[-73.989842247806507,40.779680752670664],[-73.990040102120489,40.779707677698219],[-73.990137977524839,40.779699769704784],[-73.99033584033225,40.779661794394983],[-73.990430598697046,40.779664973055503],[-73.990622199396725,40.779676064914298],[-73.990745069505479,40.779671328184051],[-73.990872114282197,40.779646007643876],[-73.990961672224358,40.779639683751753],[-73.991057472829539,40.779652352625774],[-73.991157429497036,40.779669775606465],[-73.991242817404469,40.779671367084504],[-73.991255318289745,40.779650782516491],[-73.991294887120119,40.779630209208889],[-73.991321967649895,40.779631796041372],[-73.991359455569423,40.779585883337383],[-73.991551059227476,40.779574821437407],[-73.99141982585985,40.779755280287233],[-73.988886144117032,40.779878898532999],[-73.988939656706265,40.779956178440393],[-73.988926103530844,40.780059292013632],[-73.988911680264692,40.780096037146606],[-73.988919261468567,40.780226094343945],[-73.988381050202634,40.780981074045783],[-73.988232413846987,40.781233144215555],[-73.988210420831663,40.781225482542055],[-73.988140000000143,40.781409000000224],[-73.988041288067166,40.781585961353777],[-73.98810029382463,40.781602878305286],[-73.988076449145055,40.781650935001608],[-73.988018059972219,40.781634188810422],[-73.987960792842145,40.781770987031535],[-73.985465811970457,40.785360700575431],[-73.986172704965611,40.786068452258647],[-73.986455862401996,40.785919219081421],[-73.987072345615601,40.785189638820121],[-73.98711901394276,40.785210319004058],[-73.986497781023601,40.785951202887254],[-73.986164628806279,40.786121882448327],[-73.986128422486075,40.786239001331111],[-73.986071135219746,40.786240706026611],[-73.986027274789123,40.786228964236727],[-73.986097637849426,40.78605822569795],[-73.985429321269592,40.785413942184597],[-73.985081137732209,40.785921935110366],[-73.985198833254501,40.785966552197777],[-73.985170502389906,40.78601333415817],[-73.985216218673656,40.786030501816427],[-73.98525509797993,40.785976205511588],[-73.98524273937646,40.785972572653328],[-73.98524962933017,40.785963139855845],[-73.985281779186749,40.785978620950075],[-73.985240032884533,40.786035858136792],[-73.985683885242182,40.786222123919686],[-73.985717529004575,40.786175994668795],[-73.985765660297687,40.786196274858618],[-73.985682871922691,40.786309786213067],[-73.985636270930442,40.786290150649279],[-73.985670722564691,40.786242911993817],[-73.98520511880038,40.786047669212785],[-73.985211035607492,40.786039554883686],[-73.985162639946992,40.786020999769754],[-73.985131636312062,40.786060297019972],[-73.985016964065125,40.78601423719563],[-73.984655078830457,40.786534741807841],[-73.985743787901043,40.786570082854738],[-73.98589227228328,40.786426529019593],[-73.985942854994988,40.786452847880334],[-73.985949561556794,40.78648711396653],[-73.985812373526713,40.786616865357047],[-73.985135209703174,40.78658761889551],[-73.984619428584324,40.786586016349787],[-73.981952458164173,40.790393724337193],[-73.972823037363767,40.803428052816756],[-73.971036786332192,40.805918478839672],[-73.966701,40.804169000000186],[-73.959647,40.801156000000113],[-73.958508540159471,40.800682279767472],[-73.95853274080838,40.800491362464697],[-73.958357552055688,40.800369095633819]]],[[[-73.943592454622546,40.782747908206574],[-73.943648235390199,40.782656161333449],[-73.943870759887162,40.781273026571704],[-73.94345932494096,40.780048275653243],[-73.943213862652243,40.779317588660199],[-73.943004239504688,40.779639495474292],[-73.942716005450905,40.779544169476175],[-73.942712374762181,40.779214856940001],[-73.942535563208608,40.779090956062532],[-73.942893408188027,40.778614093246276],[-73.942438481745029,40.777315235766039],[-73.942244919522594,40.777104088947254],[-73.942074188038887,40.776917846977142],[-73.942002667222781,40.776185317382648],[-73.942620205199006,40.775180871576474],[-73.94285645694552,40.774796600349191],[-73.94293043781397,40.774676268036011],[-73.945870899588215,40.771692257932997],[-73.946618690150586,40.77093339256956],[-73.948664164778933,40.768857624399587],[-73.950069793030679,40.767025088383498],[-73.954418260786071,40.762184104951245],[-73.95650786241211,40.760285256574043],[-73.958787773424007,40.758213471309809],[-73.973015157270069,40.764278692864671],[-73.955760332998182,40.787906554459667],[-73.944023,40.782960000000301],[-73.943592454622546,40.782747908206574]]]]});\r\nlet coordinates = \r\n    datatable(longitude:real, latitude:real, description:string)\r\n    [\r\n        real(-73.9741), 40.7914, \'Upper West Side\',    // In MultiPolygon\r\n        real(-73.9950), 40.7340, \'Greenwich Village\',  // In MultiPolygon\r\n        real(-73.8743), 40.7773, \'LaGuardia Airport\',  // In exterior of MultiPolygon\r\n    ];\r\ncoordinates\r\n| where geo_point_in_polygon(longitude, latitude, multipolygon)\r\n```\r\n\r\n|longitude|latitude|description|\r\n|---|---|---|\r\n|-73.9741|40.7914|Upper West Side|\r\n|-73.995|40.734|Greenwich Village|\r\n\r\nStorm events in California. The events are filtered by a California state polygon and aggregated by event type and hash.\r\n\r\n![Storm events in California](images/geo-point-in-polygon-function/california-storm-events.png)\r\n\r\n```\r\nlet california = dynamic({"type":"Polygon","coordinates":[[[-123.233256,42.006186],[-122.378853,42.011663],[-121.037003,41.995232],[-120.001861,41.995232],[-119.996384,40.264519],[-120.001861,38.999346],[-118.71478,38.101128],[-117.498899,37.21934],[-116.540435,36.501861],[-115.85034,35.970598],[-114.634459,35.00118],[-114.634459,34.87521],[-114.470151,34.710902],[-114.333228,34.448009],[-114.136058,34.305608],[-114.256551,34.174162],[-114.415382,34.108438],[-114.535874,33.933176],[-114.497536,33.697668],[-114.524921,33.54979],[-114.727567,33.40739],[-114.661844,33.034958],[-114.524921,33.029481],[-114.470151,32.843265],[-114.524921,32.755634],[-114.72209,32.717295],[-116.04751,32.624187],[-117.126467,32.536556],[-117.24696,32.668003],[-117.252437,32.876127],[-117.329114,33.122589],[-117.471515,33.297851],[-117.7837,33.538836],[-118.183517,33.763391],[-118.260194,33.703145],[-118.413548,33.741483],[-118.391641,33.840068],[-118.566903,34.042715],[-118.802411,33.998899],[-119.218659,34.146777],[-119.278905,34.26727],[-119.558229,34.415147],[-119.875891,34.40967],[-120.138784,34.475393],[-120.472878,34.448009],[-120.64814,34.579455],[-120.609801,34.858779],[-120.670048,34.902595],[-120.631709,35.099764],[-120.894602,35.247642],[-120.905556,35.450289],[-121.004141,35.461243],[-121.168449,35.636505],[-121.283465,35.674843],[-121.332757,35.784382],[-121.716143,36.195153],[-121.896882,36.315645],[-121.935221,36.638785],[-121.858544,36.6114],[-121.787344,36.803093],[-121.929744,36.978355],[-122.105006,36.956447],[-122.335038,37.115279],[-122.417192,37.241248],[-122.400761,37.361741],[-122.515777,37.520572],[-122.515777,37.783465],[-122.329561,37.783465],[-122.406238,38.15042],[-122.488392,38.112082],[-122.504823,37.931343],[-122.701993,37.893004],[-122.937501,38.029928],[-122.97584,38.265436],[-123.129194,38.451652],[-123.331841,38.566668],[-123.44138,38.698114],[-123.737134,38.95553],[-123.687842,39.032208],[-123.824765,39.366301],[-123.764519,39.552517],[-123.85215,39.831841],[-124.109566,40.105688],[-124.361506,40.259042],[-124.410798,40.439781],[-124.158859,40.877937],[-124.109566,41.025814],[-124.158859,41.14083],[-124.065751,41.442061],[-124.147905,41.715908],[-124.257444,41.781632],[-124.213628,42.000709],[-123.233256,42.006186]]]});\r\nStormEvents\r\n| project BeginLon, BeginLat, EventType\r\n| where geo_point_in_polygon(BeginLon, BeginLat, california)\r\n| summarize count() by EventType, hash = geo_point_to_s2cell(BeginLon, BeginLat, 7)\r\n| project geo_s2cell_to_central_point(hash), EventType, count_\r\n| render piechart with (kind=map) // map rendering available in Kusto Explorer desktop\r\n```\r\n\r\nThe following example shows how to classify coordinates to polygons using the [partition](./partitionoperator.md) operator.\r\n\r\n```\r\nlet Polygons = datatable(description:string, polygon:dynamic)\r\n    [  \r\n      "New York city area", dynamic({"type":"Polygon","coordinates":[[[-73.85009765625,40.85744791303121],[-74.16046142578125,40.84290487729676],[-74.190673828125,40.59935608796518],[-73.83087158203125,40.61812224225511],[-73.85009765625,40.85744791303121]]]}),\r\n      "Seattle area",       dynamic({"type":"Polygon","coordinates":[[[-122.200927734375,47.68573021131587],[-122.4591064453125,47.68573021131587],[-122.4755859375,47.468949677672484],[-122.17620849609374,47.47266286861342],[-122.200927734375,47.68573021131587]]]}),\r\n      "Las Vegas",          dynamic({"type":"Polygon","coordinates":[[[-114.9,36.36],[-115.4498291015625,36.33282808737917],[-115.4498291015625,35.84453450421662],[-114.949951171875,35.902399875143615],[-114.9,36.36]]]}),\r\n    ];\r\nlet Locations = datatable(longitude:real, latitude:real)\r\n    [\r\n      real(-73.95),  real(40.75), // Somewhere in New York\r\n      real(-122.3),  real(47.6),  // Somewhere in Seattle\r\n      real(-115.18), real(36.16)  // Somewhere in Las Vegas\r\n    ];\r\nPolygons\r\n| project polygonPartition = tostring(pack("description", description, "polygon", polygon))\r\n| partition hint.materialized=true by polygonPartition\r\n{   \r\n     Locations\r\n     | extend description = todynamic(toscalar(polygonPartition)).description\r\n     | extend polygon = todynamic(toscalar(polygonPartition)).polygon\r\n     | where geo_point_in_polygon(longitude, latitude, polygon)\r\n     | project-away polygon\r\n}\r\n```\r\n\r\n|longitude|latitude|description|\r\n|---|---|---|\r\n|-73.95|40.75|New York city area|\r\n|-122.3|47.6|Seattle area|\r\n|-115.18|36.16|Las Vegas|\r\n\r\nSee also [geo_polygon_to_s2cells()](geo-polygon-to-s2cells-function.md).\r\n\r\nFolding several polygons into one multipolygon and querying it.\r\n\r\n```\r\nlet Polygons = \r\n    datatable(polygon:dynamic)\r\n    [\r\n        dynamic({"type":"Polygon","coordinates":[[[-73.991460000000131,40.731738000000206],[-73.992854491775518,40.730082566051351],[-73.996772,40.725432000000154],[-73.997634685522883,40.725786309886963],[-74.002855946639244,40.728346630056791],[-74.001413,40.731065000000207],[-73.996796995070824,40.73736378205173],[-73.991724524037934,40.735245208931886],[-73.990703782359589,40.734781896080477],[-73.991460000000131,40.731738000000206]]]}),\r\n        dynamic({"type":"Polygon","coordinates":[[[-73.958357552055688,40.800369095633819],[-73.98143901556422,40.768762584141953],[-73.981548752788598,40.7685590292784],[-73.981565335901905,40.768307084720796],[-73.981754418060945,40.768399727738668],[-73.982038573548124,40.768387823012056],[-73.982268248204349,40.768298621883247],[-73.982384797518051,40.768097213086911],[-73.982320919746599,40.767894461792181],[-73.982155532845766,40.767756204474757],[-73.98238873834039,40.767411004834273],[-73.993650353659021,40.772145571634361],[-73.99415893763998,40.772493009137818],[-73.993831082030937,40.772931787850908],[-73.993891252437052,40.772955194876722],[-73.993962585514595,40.772944653908901],[-73.99401262480508,40.772882846631894],[-73.994122058082397,40.77292405902601],[-73.994136652588594,40.772901870174394],[-73.994301342391154,40.772970028663913],[-73.994281535134448,40.77299380206933],[-73.994376552751078,40.77303955110149],[-73.994294029824005,40.773156243992048],[-73.995023275860802,40.773481196576356],[-73.99508939189289,40.773388475039134],[-73.995013963716758,40.773358035426909],[-73.995050284699261,40.773297153189958],[-73.996240651898916,40.773789791397689],[-73.996195837470992,40.773852356184044],[-73.996098807369748,40.773951805299085],[-73.996179459973888,40.773986954351571],[-73.996095245226442,40.774086186437756],[-73.995572265161172,40.773870731394297],[-73.994017424135961,40.77321375261053],[-73.993935876811335,40.773179512586211],[-73.993861942928888,40.773269531698837],[-73.993822393527211,40.773381758622882],[-73.993767019318497,40.773483981224835],[-73.993698463744295,40.773562141052594],[-73.993358326468751,40.773926888327956],[-73.992622663865575,40.774974056037109],[-73.992577842766124,40.774956016359418],[-73.992527743951555,40.775002110439829],[-73.992469745815342,40.775024159551755],[-73.992403837191887,40.775018140390664],[-73.99226708903538,40.775116033858794],[-73.99217809026365,40.775279293897171],[-73.992059084937338,40.775497598192516],[-73.992125372394938,40.775509075053385],[-73.992226867797001,40.775482211026116],[-73.992329346608813,40.775468900958522],[-73.992361756801131,40.775501899766638],[-73.992386042960277,40.775557180424634],[-73.992087684712729,40.775983970821372],[-73.990927174149746,40.777566878763238],[-73.99039616003671,40.777585065679204],[-73.989461267506471,40.778875124584417],[-73.989175778438053,40.779287524015778],[-73.988868617400072,40.779692922911607],[-73.988871874499793,40.779713738253008],[-73.989219022880576,40.779697895209402],[-73.98927785904425,40.779723439271038],[-73.989409054180143,40.779737706471963],[-73.989498614927044,40.779725044389757],[-73.989596493388234,40.779698146683387],[-73.989679812902509,40.779677568658038],[-73.989752702937935,40.779671244211556],[-73.989842247806507,40.779680752670664],[-73.990040102120489,40.779707677698219],[-73.990137977524839,40.779699769704784],[-73.99033584033225,40.779661794394983],[-73.990430598697046,40.779664973055503],[-73.990622199396725,40.779676064914298],[-73.990745069505479,40.779671328184051],[-73.990872114282197,40.779646007643876],[-73.990961672224358,40.779639683751753],[-73.991057472829539,40.779652352625774],[-73.991157429497036,40.779669775606465],[-73.991242817404469,40.779671367084504],[-73.991255318289745,40.779650782516491],[-73.991294887120119,40.779630209208889],[-73.991321967649895,40.779631796041372],[-73.991359455569423,40.779585883337383],[-73.991551059227476,40.779574821437407],[-73.99141982585985,40.779755280287233],[-73.988886144117032,40.779878898532999],[-73.988939656706265,40.779956178440393],[-73.988926103530844,40.780059292013632],[-73.988911680264692,40.780096037146606],[-73.988919261468567,40.780226094343945],[-73.988381050202634,40.780981074045783],[-73.988232413846987,40.781233144215555],[-73.988210420831663,40.781225482542055],[-73.988140000000143,40.781409000000224],[-73.988041288067166,40.781585961353777],[-73.98810029382463,40.781602878305286],[-73.988076449145055,40.781650935001608],[-73.988018059972219,40.781634188810422],[-73.987960792842145,40.781770987031535],[-73.985465811970457,40.785360700575431],[-73.986172704965611,40.786068452258647],[-73.986455862401996,40.785919219081421],[-73.987072345615601,40.785189638820121],[-73.98711901394276,40.785210319004058],[-73.986497781023601,40.785951202887254],[-73.986164628806279,40.786121882448327],[-73.986128422486075,40.786239001331111],[-73.986071135219746,40.786240706026611],[-73.986027274789123,40.786228964236727],[-73.986097637849426,40.78605822569795],[-73.985429321269592,40.785413942184597],[-73.985081137732209,40.785921935110366],[-73.985198833254501,40.785966552197777],[-73.985170502389906,40.78601333415817],[-73.985216218673656,40.786030501816427],[-73.98525509797993,40.785976205511588],[-73.98524273937646,40.785972572653328],[-73.98524962933017,40.785963139855845],[-73.985281779186749,40.785978620950075],[-73.985240032884533,40.786035858136792],[-73.985683885242182,40.786222123919686],[-73.985717529004575,40.786175994668795],[-73.985765660297687,40.786196274858618],[-73.985682871922691,40.786309786213067],[-73.985636270930442,40.786290150649279],[-73.985670722564691,40.786242911993817],[-73.98520511880038,40.786047669212785],[-73.985211035607492,40.786039554883686],[-73.985162639946992,40.786020999769754],[-73.985131636312062,40.786060297019972],[-73.985016964065125,40.78601423719563],[-73.984655078830457,40.786534741807841],[-73.985743787901043,40.786570082854738],[-73.98589227228328,40.786426529019593],[-73.985942854994988,40.786452847880334],[-73.985949561556794,40.78648711396653],[-73.985812373526713,40.786616865357047],[-73.985135209703174,40.78658761889551],[-73.984619428584324,40.786586016349787],[-73.981952458164173,40.790393724337193],[-73.972823037363767,40.803428052816756],[-73.971036786332192,40.805918478839672],[-73.966701,40.804169000000186],[-73.959647,40.801156000000113],[-73.958508540159471,40.800682279767472],[-73.95853274080838,40.800491362464697],[-73.958357552055688,40.800369095633819]]]}),\r\n        dynamic({"type":"Polygon","coordinates":[[[-73.943592454622546,40.782747908206574],[-73.943648235390199,40.782656161333449],[-73.943870759887162,40.781273026571704],[-73.94345932494096,40.780048275653243],[-73.943213862652243,40.779317588660199],[-73.943004239504688,40.779639495474292],[-73.942716005450905,40.779544169476175],[-73.942712374762181,40.779214856940001],[-73.942535563208608,40.779090956062532],[-73.942893408188027,40.778614093246276],[-73.942438481745029,40.777315235766039],[-73.942244919522594,40.777104088947254],[-73.942074188038887,40.776917846977142],[-73.942002667222781,40.776185317382648],[-73.942620205199006,40.775180871576474],[-73.94285645694552,40.774796600349191],[-73.94293043781397,40.774676268036011],[-73.945870899588215,40.771692257932997],[-73.946618690150586,40.77093339256956],[-73.948664164778933,40.768857624399587],[-73.950069793030679,40.767025088383498],[-73.954418260786071,40.762184104951245],[-73.95650786241211,40.760285256574043],[-73.958787773424007,40.758213471309809],[-73.973015157270069,40.764278692864671],[-73.955760332998182,40.787906554459667],[-73.944023,40.782960000000301],[-73.943592454622546,40.782747908206574]]]}),\r\n    ];\r\nlet Coordinates = \r\n    datatable(longitude:real, latitude:real, description:string)\r\n    [\r\n        real(-73.9741), 40.7914, \'Upper West Side\',\r\n        real(-73.9950), 40.7340, \'Greenwich Village\',\r\n        real(-73.8743), 40.7773, \'LaGuardia Airport\',\r\n    ];\r\nlet multipolygon = toscalar(\r\n    Polygons\r\n    | project individual_polygon = pack_array(polygon.coordinates)\r\n    | summarize multipolygon_coordinates = make_list(individual_polygon)\r\n    | project multipolygon = pack("type","MultiPolygon", "coordinates", multipolygon_coordinates));\r\nCoordinates\r\n| where geo_point_in_polygon(longitude, latitude, multipolygon)\r\n```\r\n\r\n|longitude|latitude|description|\r\n|---|---|---|\r\n|-73.9741|40.7914|Upper West Side|\r\n|-73.995|40.734|Greenwich Village|\r\n\r\nThe following example will return a null result because of the invalid coordinate input.\r\n\r\n```\r\nprint in_polygon = geo_point_in_polygon(200,1,dynamic({"type": "Polygon","coordinates": [[[0,0],[10,10],[10,1],[0,0]]]}))\r\n```\r\n\r\n| in_polygon |\r\n|------------|\r\n|            |\r\n\r\nThe following example will return a null result because of the invalid polygon input.\r\n\r\n```\r\nprint in_polygon = geo_point_in_polygon(1,1,dynamic({"type": "Polygon","coordinates": [[[0,0],[10,10],[10,10],[0,0]]]}))\r\n```\r\n\r\n| in_polygon |\r\n|------------|\r\n|            |',"https://docs.microsoft.com/en-us/azure/kusto/query/geo-point-in-polygon-function","geo-point-in-polygon-function.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"geo_point_to_geohash","Calculates the geohash string value for a geographic location.","Read more about [geohash](https://en.wikipedia.org/wiki/Geohash).  \r\n\r\n## Syntax\r\n\r\n`geo_point_to_geohash(`*longitude*`, `*latitude*`, `[*accuracy*]`)`\r\n\r\n## Arguments\r\n\r\n* *longitude*: Longitude value of a geographic location. Longitude x will be considered valid if x is a real number and is in the range [-180, +180]. \r\n* *latitude*: Latitude value of a geographic location. Latitude y will be considered valid if y is a real number and y is in the range [-90, +90]. \r\n* *accuracy*: An optional `int` that defines the requested accuracy. Supported values are in the range [1,18]. If unspecified, the default value `5` is used.\r\n\r\n## Returns\r\n\r\nThe geohash string value of a given geographic location with requested accuracy length. If the coordinate or accuracy is invalid, the query will produce an empty result.\r\n\r\n> [!NOTE]\r\n>\r\n> * Geohash can be a useful geospatial clustering tool.\r\n> * Geohash has 18 accuracy levels with area coverage ranging from 25 Million km\u00b2 at the highest level 1 to 0.6 \u03bc\u00b2 at the lowest level 18.\r\n> * Common prefixes of geohash indicate proximity of points to each other. The longer a shared prefix is, the closer the two places are. Accuracy value translates to geohash length.\r\n> * Geohash is a rectangular area on a plane surface.\r\n> * Invoking the [geo_geohash_to_central_point()](geo-geohash-to-central-point-function.md) function on a geohash string that was calculated on longitude x and latitude y won't necessarily return x and y.\r\n> * Due to the geohash definition, it's possible that two geographic locations are very close to each other but have different geohash codes.\r\n\r\n**Geohash rectangular area coverage per accuracy value:**\r\n\r\n| Accuracy | Width     | Height    |\r\n|----------|-----------|-----------|\r\n| 1        | 5000 km   | 5000 km   |\r\n| 2        | 1250 km   | 625 km    |\r\n| 3        | 156.25 km | 156.25 km |\r\n| 4        | 39.06 km  | 19.53 km  |\r\n| 5        | 4.88 km   | 4.88 km   |\r\n| 6        | 1.22 km   | 0.61 km   |\r\n| 7        | 152.59 m  | 152.59 m  |\r\n| 8        | 38.15 m   | 19.07 m   |\r\n| 9        | 4.77 m    | 4.77 m    |\r\n| 10       | 1.19 m    | 0.59 m    |\r\n| 11       | 149.01 mm | 149.01 mm |\r\n| 12       | 37.25 mm  | 18.63 mm  |\r\n| 13       | 4.66 mm   | 4.66 mm   |\r\n| 14       | 1.16 mm   | 0.58 mm   |\r\n| 15       | 145.52 \u03bc  | 145.52 \u03bc  |\r\n| 16       | 36.28 \u03bc   | 18.19 \u03bc   |\r\n| 17       | 4.55 \u03bc    | 4.55 \u03bc    |\r\n| 18       | 1.14 \u03bc    | 0.57 \u03bc    |\r\n\r\nSee also [geo_point_to_s2cell()](geo-point-to-s2cell-function.md).",'US storm events aggregated by geohash.\r\n\r\n![US geohash](images/geo-point-to-geohash-function/geohash.png)\r\n\r\n```\r\nStormEvents\r\n| project BeginLon, BeginLat\r\n| summarize by hash=geo_point_to_geohash(BeginLon, BeginLat, 3)\r\n| project geo_geohash_to_central_point(hash)\r\n| render scatterchart with (kind=map) // map rendering available in Kusto Explorer desktop\r\n```\r\n\r\n```\r\nprint geohash = geo_point_to_geohash(139.806115, 35.554128, 12)  \r\n```\r\n\r\n| geohash      |\r\n|--------------|\r\n| xn76m27ty9g4 |\r\n\r\n```\r\nprint geohash = geo_point_to_geohash(-80.195829, 25.802215, 8)\r\n```\r\n\r\n|geohash|\r\n|---|\r\n|dhwfz15h|\r\n\r\nThe following example finds groups of coordinates. Every pair of coordinates in the group resides in a rectangular area of 4.88 km by 4.88 km.\r\n\r\n```\r\ndatatable(location_id:string, longitude:real, latitude:real)\r\n[\r\n  "A", double(-122.303404), 47.570482,\r\n  "B", double(-122.304745), 47.567052,\r\n  "C", double(-122.278156), 47.566936,\r\n]\r\n| summarize count = count(),                                          // items per group count\r\n            locations = make_list(location_id)                        // items in the group\r\n            by geohash = geo_point_to_geohash(longitude, latitude)    // geohash of the group\r\n```\r\n\r\n| geohash | count | locations  |\r\n|---------|-------|------------|\r\n| c23n8   | 2     | ["A", "B"] |\r\n| c23n9   | 1     | ["C"]      |\r\n\r\nThe following example produces an empty result because of the invalid coordinate input.\r\n\r\n```\r\nprint geohash = geo_point_to_geohash(200,1,8)\r\n```\r\n\r\n| geohash |\r\n|---------|\r\n|         |\r\n\r\nThe following example produces an empty result because of the invalid accuracy input.\r\n\r\n```\r\nprint geohash = geo_point_to_geohash(1,1,int(null))\r\n```\r\n\r\n| geohash |\r\n|---------|\r\n|         |',"https://docs.microsoft.com/en-us/azure/kusto/query/geo-point-to-geohash-function","geo-point-to-geohash-function.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"geo_point_to_s2cell","Calculates the S2 cell token string value for a geographic location.","Read more about [S2 cell hierarchy](https://s2geometry.io/devguide/s2cell_hierarchy).\r\n\r\n## Syntax\r\n\r\n`geo_point_to_s2cell(`*longitude*`, `*latitude*`, `*level*`)`\r\n\r\n## Arguments\r\n\r\n* *longitude*: Longitude value of a geographic location. Longitude *x* will be considered valid if *x* is a real number and *x* is in the range [-180, +180]. \r\n* *latitude*: Latitude value of a geographic location. Latitude y will be considered valid if y is a real number and y in the range [-90, +90]. \r\n* *level*: An optional `int` that defines the requested cell level. Supported values are in the range [0, 30]. If unspecified, the default value `11` is used.\r\n\r\n## Returns\r\n\r\nThe S2 cell token string value of a given geographic location. If the coordinates or levels are invalid, the query will produce an empty result.\r\n\r\n> [!NOTE]\r\n>\r\n> * S2 cell can be a useful geospatial clustering tool.\r\n> * S2 cell has 31 levels of hierarchy with area coverage ranging from 85,011,012.19km\u00b2 at the highest level 0 to 00.44cm\u00b2 at the lowest level 30.\r\n> * S2 cell preserves the cell center well during level increase from 0 to 30.\r\n> * S2 cell is a cell on a spherical surface and its edges are geodesics.\r\n> * Invoking the [geo_s2cell_to_central_point()](geo-s2cell-to-central-point-function.md) function on an S2 cell token string that was calculated on longitude x and latitude y won't necessarily return x and y.\r\n> * It's possible that two geographic locations are very close to each other but have different S2 cell tokens.\r\n\r\n**S2 cell approximate area coverage per level value**\r\n\r\nFor every level, the size of the S2 cell is similar but not exactly equal. Nearby cell sizes tend to be more equal.\r\n\r\n|Level|Minimum random cell edge length (UK)|Maximum random cell edge length (US)|\r\n|--|--|--|\r\n|0|7842 km|7842 km|\r\n|1|3921 km|5004 km|\r\n|2|1825 km|2489 km|\r\n|3|840 km|1310 km|\r\n|4|432 km|636 km|\r\n|5|210 km|315 km|\r\n|6|108 km|156 km|\r\n|7|54 km|78 km|\r\n|8|27 km|39 km|\r\n|9|14 km|20 km|\r\n|10|7 km|10 km|\r\n|11|3 km|5 km|\r\n|12|1699 m|2 km|\r\n|13|850 m|1225 m|\r\n|14|425 m|613 m|\r\n|15|212 m|306 m|\r\n|16|106 m|153 m|\r\n|17|53 m|77 m|\r\n|18|27 m|38 m|\r\n|19|13 m|19 m|\r\n|20|7 m|10 m|\r\n|21|3 m|5 m|\r\n|22|166 cm|2 m|\r\n|23|83 cm|120 cm|\r\n|24|41 cm|60 cm|\r\n|25|21 cm|30 cm|\r\n|26|10 cm|15 cm|\r\n|27|5 cm|7 cm|\r\n|28|2 cm|4 cm|\r\n|29|12 mm|18 mm|\r\n|30|6 mm|9 mm|\r\n\r\nThe table source can be found [in this S2 cell statistical resource](https://s2geometry.io/resources/s2cell_statistics).\r\n\r\nSee also [geo_point_to_geohash()](geo-point-to-geohash-function.md).",'US storm events aggregated by s2cell.\r\n\r\n![US s2cell](images/geo-point-to-s2cell-function/s2cell.png)\r\n\r\n```\r\nStormEvents\r\n| project BeginLon, BeginLat\r\n| summarize by hash=geo_point_to_s2cell(BeginLon, BeginLat, 5)\r\n| project geo_s2cell_to_central_point(hash)\r\n| render scatterchart with (kind=map) // map rendering available in Kusto Explorer desktop\r\n```\r\n\r\n```\r\nprint s2cell = geo_point_to_s2cell(-80.195829, 25.802215, 8)\r\n```\r\n\r\n| s2cell |\r\n|--------|\r\n| 88d9b  |\r\n\r\nThe following example finds groups of coordinates. Every pair of coordinates in the group resides in the S2 cell with a maximum area of 1632.45 km\u00b2.\r\n\r\n```\r\ndatatable(location_id:string, longitude:real, latitude:real)\r\n[\r\n  "A", 10.1234, 53,\r\n  "B", 10.3579, 53,\r\n  "C", 10.6842, 53,\r\n]\r\n| summarize count = count(),                                        // items per group count\r\n            locations = make_list(location_id)                      // items in the group\r\n            by s2cell = geo_point_to_s2cell(longitude, latitude, 8) // s2 cell of the group\r\n```\r\n\r\n| s2cell | count | locations |\r\n|--------|-------|-----------|\r\n| 47b1d  | 2     | ["A","B"] |\r\n| 47ae3  | 1     | ["C"]     |\r\n\r\nThe following example produces an empty result because of the invalid coordinate input.\r\n\r\n```\r\nprint s2cell = geo_point_to_s2cell(300,1,8)\r\n```\r\n\r\n| s2cell |\r\n|--------|\r\n|        |\r\n\r\nThe following example produces an empty result because of the invalid level input.\r\n\r\n```\r\nprint s2cell = geo_point_to_s2cell(1,1,35)\r\n```\r\n\r\n| s2cell |\r\n|--------|\r\n|        |\r\n\r\nThe following example produces an empty result because of the invalid level input.\r\n\r\n```\r\nprint s2cell = geo_point_to_s2cell(1,1,int(null))\r\n```\r\n\r\n| s2cell |\r\n|--------|\r\n|        |',"https://docs.microsoft.com/en-us/azure/kusto/query/geo-point-to-s2cell-function","geo-point-to-s2cell-function.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"geo_polygon_densify","Converts polygon or multipolygon planar edges to geodesics by adding intermediate points.",'## Syntax\r\n\r\n`geo_polygon_densify(`*polygon*`, `*tolerance*`)`\r\n\r\n## Arguments\r\n\r\n* *polygon*: Polygon or multipolygon in the [GeoJSON format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type.\r\n* *tolerance*: An optional numeric that defines maximum distance in meters between the original planar edge and the converted geodesic edge chain. Supported values are in the range [0.1, 10000]. If unspecified, the default value `10` is used.\r\n\r\n## Returns\r\n\r\nDensified polygon in the [GeoJSON format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type. If either the polygon or tolerance is invalid, the query will produce a null result.\r\n\r\n> [!NOTE]\r\n> * The geospatial coordinates are interpreted as represented by the [WGS-84](https://earth-info.nga.mil/GandG/update/index.php?action=home) coordinate reference system.\r\n> * The polygon must be correctly defined, but the function does not check polygon validity.\r\n\r\n**Polygon definition**\r\n\r\ndynamic({"type": "Polygon","coordinates": [ LinearRingShell, LinearRingHole_1 ,..., LinearRingHole_N ]})\r\n\r\ndynamic({"type": "MultiPolygon","coordinates": [[ LinearRingShell, LinearRingHole_1 ,..., LinearRingHole_N ] ,..., [LinearRingShell, LinearRingHole_1 ,..., LinearRingHole_M]]})\r\n\r\n* LinearRingShell is required and defined as a `counterclockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be only one shell.\r\n* LinearRingHole is optional and defined as a `clockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be any number of interior rings and holes.\r\n* LinearRing vertices must be distinct with at least three coordinates. The first coordinate must be equal to the last. At least four entries are required.\r\n* Coordinates [longitude,latitude] must be valid. Longitude must be a real number in the range [-180, +180] and latitude must be a real number in the range [-90, +90].\r\n* LinearRingShell encloses at most half of the sphere. LinearRing divides the sphere into two regions. The smaller of the two regions will be chosen.\r\n* LinearRing edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\r\n\r\n**Constraints**\r\n\r\n* The maximum number of points in the densified polygon is limited to 10485760.\r\n* Storing polygons in [dynamic](./scalar-data-types/dynamic.md) format has size limits.\r\n* Densifying a valid polygon may invalidate it. The algorithm adds points in a non-uniform manner and as such may cause edges to intertwine with each other.\r\n\r\n**Motivation**\r\n\r\n* [GeoJSON format](https://tools.ietf.org/html/rfc7946) defines an edge between two points as a straight cartesian line.\r\n* The decision to use geodesic or planar edges might depend on the dataset and is especially relevant in long edges.','The following example densifies Manhattan Central Park polygon. The edges are short and the distance between planar edges and their geodesic counterparts is less than the distance specified by tolerance. As such, the result remains unchanged.\r\n\r\n```\r\nprint densified_polygon = tostring(geo_polygon_densify(dynamic({"type":"Polygon","coordinates":[[[-73.958244,40.800719],[-73.949146,40.79695],[-73.973093,40.764226],[-73.982062,40.768159],[-73.958244,40.800719]]]})))\r\n```\r\n\r\n|densified_polygon|\r\n|---|\r\n|{"type":"Polygon","coordinates":[[[-73.958244,40.800719],[-73.949146,40.79695],[-73.973093,40.764226],[-73.982062,40.768159],[-73.958244,40.800719]]]}|\r\n\r\nThe following example densifies two edges of the polygon. Densified edges length is ~110 km\r\n\r\n```\r\nprint densified_polygon = tostring(geo_polygon_densify(dynamic({"type":"Polygon","coordinates":[[[10,10],[11,10],[11,11],[10,11],[10,10]]]})))\r\n```\r\n\r\n|densified_polygon|\r\n|---|\r\n|{"type":"Polygon","coordinates":[[[10,10],[10.25,10],[10.5,10],[10.75,10],[11,10],[11,11],[10.75,11],[10.5,11],[10.25,11],[10,11],[10,10]]]}|\r\n\r\nThe following example returns a null result because of the invalid coordinate input.\r\n\r\n```\r\nprint densified_polygon = geo_polygon_densify(dynamic({"type":"Polygon","coordinates":[[[10,900],[11,10],[11,11],[10,11],[10,10]]]}))\r\n```\r\n\r\n|densified_polygon|\r\n|---|\r\n||\r\n\r\nThe following example returns a null result because of the invalid tolerance input.\r\n\r\n```\r\nprint densified_polygon = geo_polygon_densify(dynamic({"type":"Polygon","coordinates":[[[10,10],[11,10],[11,11],[10,11],[10,10]]]}), 0)\r\n```\r\n\r\n|densified_polygon|\r\n|---|\r\n||',"https://docs.microsoft.com/en-us/azure/kusto/query/geo-polygon-densify-function","geo-polygon-densify-function.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"geo_polygon_to_s2cells","Calculates S2 cell tokens that cover a polygon or multipolygon on Earth. This function is a useful geospatial join tool.",'Read more about [S2 cell hierarchy](https://s2geometry.io/devguide/s2cell_hierarchy).\r\n\r\n## Syntax\r\n\r\n`geo_polygon_to_s2cells(`*polygon*`, `*level*`)`\r\n\r\n## Arguments\r\n\r\n* *polygon*: Polygon or multiPolygon in the [GeoJSON format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type. \r\n* *level*: An optional `int` that defines the requested cell level. Supported values are in the range [0, 30]. If unspecified, the default value `11` is used.\r\n\r\n## Returns\r\n\r\nArray of S2 cell token strings that cover a polygon or multipolygon. If either the polygon or level is invalid, or the cell count exceeds the limit, the query will produce a null result.\r\n\r\n> [!NOTE]\r\n>\r\n> * Covering the polygon with S2 cell tokens can be useful in matching coordinates to polygons that might include these coordinates and matching polygons to polygons.\r\n> * The polygon covering tokens are of the same S2 cell level.\r\n> * The maximum count of tokens per polygon is 65536.\r\n> * The [geodetic datum](https://en.wikipedia.org/wiki/Geodetic_datum) used for measurements on Earth is a sphere. Polygon edges are [Geodesics](https://en.wikipedia.org/wiki/Geodesic) on the sphere.\r\n> * If input polygon edges are straight cartesian lines, consider using [geo_polygon_densify()](geo-polygon-densify-function.md) in order to convert planar edges to geodesics.\r\n\r\n**Motivation for covering polygons with S2 cell tokens**\r\n\r\nWithout this function, here is one approach we could take in order to classify coordinates into polygons containing these coordinates.\r\n\r\n```\r\nlet Polygons = \r\n    datatable(description:string, polygon:dynamic)\r\n    [  \r\n      "New York",  dynamic({"type":"Polygon","coordinates":[[[-73.85009765625,40.85744791303121],[-74.16046142578125,40.84290487729676],[-74.190673828125,40.59935608796518],[-73.83087158203125,40.61812224225511],[-73.85009765625,40.85744791303121]]]}),\r\n      "Seattle",   dynamic({"type":"Polygon","coordinates":[[[-122.200927734375,47.68573021131587],[-122.4591064453125,47.68573021131587],[-122.4755859375,47.468949677672484],[-122.17620849609374,47.47266286861342],[-122.200927734375,47.68573021131587]]]}),\r\n      "Las Vegas", dynamic({"type":"Polygon","coordinates":[[[-114.9,36.36],[-115.4498291015625,36.33282808737917],[-115.4498291015625,35.84453450421662],[-114.949951171875,35.902399875143615],[-114.9,36.36]]]}),\r\n    ];\r\nlet Coordinates = \r\n    datatable(longitude:real, latitude:real)\r\n    [\r\n      real(-73.95),  real(40.75), // New York\r\n      real(-122.3),  real(47.6),  // Seattle\r\n      real(-115.18), real(36.16)  // Las Vegas\r\n    ];\r\nPolygons | extend dummy=1\r\n| join kind=inner (Coordinates | extend dummy=1) on dummy\r\n| where geo_point_in_polygon(longitude, latitude, polygon)\r\n| project longitude, latitude, description\r\n```\r\n\r\n|longitude|latitude|description|\r\n|---|---|---|\r\n|-73.95|40.75|New York city|\r\n|-122.3|47.6|Seattle|\r\n|-115.18|36.16|Las Vegas|\r\n\r\nWhile this method works in some cases, it is inefficient. This method does a cross-join, meaning that it tries to match every polygon to every point. This process consumes a large amount of memory and compute resources.\r\nInstead, we would like to match every polygon to a point with a high probability of containment success, and filter out other points.\r\n\r\nThis match can be achieved by the following process:\r\n\r\n1. Converting polygons to S2 cells of level k,\r\n1. Converting points to the same S2 cells level k, \r\n1. Joining on S2 cells,\r\n1. Filtering by [geo_point_in_polygon()](geo-point-in-polygon-function.md).\r\n\r\n**Choosing the S2 cell level**\r\n\r\n* Ideally we would want to cover every polygon with one or just a few unique cells such that no two polygons share the same cell.\r\n* If the polygons are close to each other, choose the [S2 cell level](geo-point-to-s2cell-function.md) such that its cell edge will be smaller (4, 8, 12 times smaller) than the edge of the average polygon.\r\n* If the polygons are far from each other, choose the [S2 cell level](geo-point-to-s2cell-function.md) such that its cell edge will be similar to the edge of the average polygon.\r\n* In practice, covering a polygon with more than 10000 cells might not yield good performance.\r\n* Sample use cases:\r\n   - S2 cell level 5 might prove to be good for covering countries.\r\n   - S2 cell level 16 can cover dense and relatively small Manhattan (New York) neighborhoods.\r\n   - S2 cell level 11 can be used for covering suburbs of Australia.\r\n* Query run time and memory consumption might differ because of different S2 cell level values.\r\n\r\n> [!WARNING]\r\n> Covering a large-area polygon with small-area cells can lead to a huge amount of covering cells. As a result, the query might return null.','The following example classifies coordinates into polygons.\r\n\r\n```\r\nlet Polygons = \r\n    datatable(description:string, polygon:dynamic)\r\n    [\r\n        \'Greenwich Village\', dynamic({"type":"Polygon","coordinates":[[[-73.991460000000131,40.731738000000206],[-73.992854491775518,40.730082566051351],[-73.996772,40.725432000000154],[-73.997634685522883,40.725786309886963],[-74.002855946639244,40.728346630056791],[-74.001413,40.731065000000207],[-73.996796995070824,40.73736378205173],[-73.991724524037934,40.735245208931886],[-73.990703782359589,40.734781896080477],[-73.991460000000131,40.731738000000206]]]}),\r\n        \'Upper West Side\',   dynamic({"type":"Polygon","coordinates":[[[-73.958357552055688,40.800369095633819],[-73.98143901556422,40.768762584141953],[-73.981548752788598,40.7685590292784],[-73.981565335901905,40.768307084720796],[-73.981754418060945,40.768399727738668],[-73.982038573548124,40.768387823012056],[-73.982268248204349,40.768298621883247],[-73.982384797518051,40.768097213086911],[-73.982320919746599,40.767894461792181],[-73.982155532845766,40.767756204474757],[-73.98238873834039,40.767411004834273],[-73.993650353659021,40.772145571634361],[-73.99415893763998,40.772493009137818],[-73.993831082030937,40.772931787850908],[-73.993891252437052,40.772955194876722],[-73.993962585514595,40.772944653908901],[-73.99401262480508,40.772882846631894],[-73.994122058082397,40.77292405902601],[-73.994136652588594,40.772901870174394],[-73.994301342391154,40.772970028663913],[-73.994281535134448,40.77299380206933],[-73.994376552751078,40.77303955110149],[-73.994294029824005,40.773156243992048],[-73.995023275860802,40.773481196576356],[-73.99508939189289,40.773388475039134],[-73.995013963716758,40.773358035426909],[-73.995050284699261,40.773297153189958],[-73.996240651898916,40.773789791397689],[-73.996195837470992,40.773852356184044],[-73.996098807369748,40.773951805299085],[-73.996179459973888,40.773986954351571],[-73.996095245226442,40.774086186437756],[-73.995572265161172,40.773870731394297],[-73.994017424135961,40.77321375261053],[-73.993935876811335,40.773179512586211],[-73.993861942928888,40.773269531698837],[-73.993822393527211,40.773381758622882],[-73.993767019318497,40.773483981224835],[-73.993698463744295,40.773562141052594],[-73.993358326468751,40.773926888327956],[-73.992622663865575,40.774974056037109],[-73.992577842766124,40.774956016359418],[-73.992527743951555,40.775002110439829],[-73.992469745815342,40.775024159551755],[-73.992403837191887,40.775018140390664],[-73.99226708903538,40.775116033858794],[-73.99217809026365,40.775279293897171],[-73.992059084937338,40.775497598192516],[-73.992125372394938,40.775509075053385],[-73.992226867797001,40.775482211026116],[-73.992329346608813,40.775468900958522],[-73.992361756801131,40.775501899766638],[-73.992386042960277,40.775557180424634],[-73.992087684712729,40.775983970821372],[-73.990927174149746,40.777566878763238],[-73.99039616003671,40.777585065679204],[-73.989461267506471,40.778875124584417],[-73.989175778438053,40.779287524015778],[-73.988868617400072,40.779692922911607],[-73.988871874499793,40.779713738253008],[-73.989219022880576,40.779697895209402],[-73.98927785904425,40.779723439271038],[-73.989409054180143,40.779737706471963],[-73.989498614927044,40.779725044389757],[-73.989596493388234,40.779698146683387],[-73.989679812902509,40.779677568658038],[-73.989752702937935,40.779671244211556],[-73.989842247806507,40.779680752670664],[-73.990040102120489,40.779707677698219],[-73.990137977524839,40.779699769704784],[-73.99033584033225,40.779661794394983],[-73.990430598697046,40.779664973055503],[-73.990622199396725,40.779676064914298],[-73.990745069505479,40.779671328184051],[-73.990872114282197,40.779646007643876],[-73.990961672224358,40.779639683751753],[-73.991057472829539,40.779652352625774],[-73.991157429497036,40.779669775606465],[-73.991242817404469,40.779671367084504],[-73.991255318289745,40.779650782516491],[-73.991294887120119,40.779630209208889],[-73.991321967649895,40.779631796041372],[-73.991359455569423,40.779585883337383],[-73.991551059227476,40.779574821437407],[-73.99141982585985,40.779755280287233],[-73.988886144117032,40.779878898532999],[-73.988939656706265,40.779956178440393],[-73.988926103530844,40.780059292013632],[-73.988911680264692,40.780096037146606],[-73.988919261468567,40.780226094343945],[-73.988381050202634,40.780981074045783],[-73.988232413846987,40.781233144215555],[-73.988210420831663,40.781225482542055],[-73.988140000000143,40.781409000000224],[-73.988041288067166,40.781585961353777],[-73.98810029382463,40.781602878305286],[-73.988076449145055,40.781650935001608],[-73.988018059972219,40.781634188810422],[-73.987960792842145,40.781770987031535],[-73.985465811970457,40.785360700575431],[-73.986172704965611,40.786068452258647],[-73.986455862401996,40.785919219081421],[-73.987072345615601,40.785189638820121],[-73.98711901394276,40.785210319004058],[-73.986497781023601,40.785951202887254],[-73.986164628806279,40.786121882448327],[-73.986128422486075,40.786239001331111],[-73.986071135219746,40.786240706026611],[-73.986027274789123,40.786228964236727],[-73.986097637849426,40.78605822569795],[-73.985429321269592,40.785413942184597],[-73.985081137732209,40.785921935110366],[-73.985198833254501,40.785966552197777],[-73.985170502389906,40.78601333415817],[-73.985216218673656,40.786030501816427],[-73.98525509797993,40.785976205511588],[-73.98524273937646,40.785972572653328],[-73.98524962933017,40.785963139855845],[-73.985281779186749,40.785978620950075],[-73.985240032884533,40.786035858136792],[-73.985683885242182,40.786222123919686],[-73.985717529004575,40.786175994668795],[-73.985765660297687,40.786196274858618],[-73.985682871922691,40.786309786213067],[-73.985636270930442,40.786290150649279],[-73.985670722564691,40.786242911993817],[-73.98520511880038,40.786047669212785],[-73.985211035607492,40.786039554883686],[-73.985162639946992,40.786020999769754],[-73.985131636312062,40.786060297019972],[-73.985016964065125,40.78601423719563],[-73.984655078830457,40.786534741807841],[-73.985743787901043,40.786570082854738],[-73.98589227228328,40.786426529019593],[-73.985942854994988,40.786452847880334],[-73.985949561556794,40.78648711396653],[-73.985812373526713,40.786616865357047],[-73.985135209703174,40.78658761889551],[-73.984619428584324,40.786586016349787],[-73.981952458164173,40.790393724337193],[-73.972823037363767,40.803428052816756],[-73.971036786332192,40.805918478839672],[-73.966701,40.804169000000186],[-73.959647,40.801156000000113],[-73.958508540159471,40.800682279767472],[-73.95853274080838,40.800491362464697],[-73.958357552055688,40.800369095633819]]]}),\r\n        \'Upper East Side\',   dynamic({"type":"Polygon","coordinates":[[[-73.943592454622546,40.782747908206574],[-73.943648235390199,40.782656161333449],[-73.943870759887162,40.781273026571704],[-73.94345932494096,40.780048275653243],[-73.943213862652243,40.779317588660199],[-73.943004239504688,40.779639495474292],[-73.942716005450905,40.779544169476175],[-73.942712374762181,40.779214856940001],[-73.942535563208608,40.779090956062532],[-73.942893408188027,40.778614093246276],[-73.942438481745029,40.777315235766039],[-73.942244919522594,40.777104088947254],[-73.942074188038887,40.776917846977142],[-73.942002667222781,40.776185317382648],[-73.942620205199006,40.775180871576474],[-73.94285645694552,40.774796600349191],[-73.94293043781397,40.774676268036011],[-73.945870899588215,40.771692257932997],[-73.946618690150586,40.77093339256956],[-73.948664164778933,40.768857624399587],[-73.950069793030679,40.767025088383498],[-73.954418260786071,40.762184104951245],[-73.95650786241211,40.760285256574043],[-73.958787773424007,40.758213471309809],[-73.973015157270069,40.764278692864671],[-73.955760332998182,40.787906554459667],[-73.944023,40.782960000000301],[-73.943592454622546,40.782747908206574]]]}),\r\n    ];\r\nlet Coordinates = \r\n    datatable(longitude:real, latitude:real)\r\n    [\r\n        real(-73.9741), 40.7914, // Upper West Side\r\n        real(-73.9950), 40.7340, // Greenwich Village\r\n        real(-73.9584), 40.7688, // Upper East Side\r\n    ];\r\nlet Level = 16;\r\nPolygons\r\n| extend covering = geo_polygon_to_s2cells(polygon, Level) // cover every polygon with s2 cell token array\r\n| mv-expand covering to typeof(string)                     // expand cells array such that every row will have one cell mapped to its polygon\r\n| join kind=inner hint.strategy=broadcast                  // assume that Polygons count is small (In some specific case)\r\n(\r\n    Coordinates\r\n    | extend covering = geo_point_to_s2cell(longitude, latitude, Level) // cover point with cell\r\n) on covering // join on the cell, this filters out rows of point and polygons where the point definitely does not belong to the polygon\r\n| where geo_point_in_polygon(longitude, latitude, polygon)\r\n| project longitude, latitude, description\r\n```\r\n\r\n|longitude|latitude|description|\r\n|---|---|---|\r\n|-73.9741|40.7914|Upper West Side|\r\n|-73.995|40.734|Greenwich Village|\r\n|-73.9584|40.7688|Upper East Side|\r\n\r\nCount of cells that will be needed in order to cover some polygon with S2 cells of level 5.\r\n\r\n```\r\nlet polygon = dynamic({"type":"Polygon","coordinates":[[[0,0],[0,50],[100,50],[0,0]]]});\r\nprint s2_cell_token_count = array_length(geo_polygon_to_s2cells(polygon, 5));\r\n```\r\n\r\n|s2_cell_token_count|\r\n|---|\r\n|286|\r\n\r\nCovering a large-area polygon with small-area cells returns null.\r\n\r\n```\r\nlet polygon = dynamic({"type":"Polygon","coordinates":[[[0,0],[0,50],[100,50],[0,0]]]});\r\nprint geo_polygon_to_s2cells(polygon, 30);\r\n```\r\n\r\n|print_0|\r\n|---|\r\n||\r\n\r\nCovering a large-area polygon with small-area cells returns null.\r\n\r\n```\r\nlet polygon = dynamic({"type":"Polygon","coordinates":[[[0,0],[0,50],[100,50],[0,0]]]});\r\nprint isnull(geo_polygon_to_s2cells(polygon, 30));\r\n```\r\n\r\n|print_0|\r\n|---|\r\n|1|',"https://docs.microsoft.com/en-us/azure/kusto/query/geo-polygon-to-s2cells-function","geo-polygon-to-s2cells-function.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"geo_s2cell_to_central_point","Calculates the geospatial coordinates that represent the center of an S2 cell.","Read more about [S2 cell hierarchy](https://s2geometry.io/devguide/s2cell_hierarchy).\r\n\r\n## Syntax\r\n\r\n`geo_s2cell_to_central_point(`*s2cell*`)`\r\n\r\n## Arguments\r\n\r\n*s2cell*: S2 cell token string value as it was calculated by [geo_point_to_s2cell()](geo-point-to-s2cell-function.md). The S2 cell token maximum string length is 16 characters.\r\n\r\n## Returns\r\n\r\nThe geospatial coordinate values in [GeoJSON Format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type. If the S2 cell token is invalid, the query will produce a null result.\r\n\r\n> [!NOTE]\r\n> The GeoJSON format specifies longitude first and latitude second.",'```\r\nprint point = geo_s2cell_to_central_point("1234567")\r\n| extend coordinates = point.coordinates\r\n| extend longitude = coordinates[0], latitude = coordinates[1]\r\n```\r\n\r\n|point|coordinates|longitude|latitude|\r\n|---|---|---|---|\r\n|{<br>  "type": "Point",<br>  "coordinates": [<br>    9.86830731850408,<br>    27.468392925827604<br>  ]<br>}|[<br>  9.86830731850408,<br>  27.468392925827604<br>]|9.86830731850408|27.4683929258276|\r\n\r\nThe following example returns a null result because of the invalid S2 cell token input.\r\n\r\n```\r\nprint point = geo_s2cell_to_central_point("a")\r\n```\r\n\r\n|point|\r\n|---|\r\n||',"https://docs.microsoft.com/en-us/azure/kusto/query/geo-s2cell-to-central-point-function","geo-s2cell-to-central-point-function.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"getmonth","Get the month number (1-12) from a datetime.","Another alias: monthoyear()","```\r\nprint month = getmonth(datetime(2015-10-12))\r\n```","https://docs.microsoft.com/en-us/azure/kusto/query/getmonthfunction","getmonthfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,"getschema","Produce a table that represents a tabular schema of the input.","```\r\nT | summarize MyCount=count() by Country | getschema \r\n```\r\n\r\n## Syntax\r\n\r\n*T* `| ` `getschema`","```\r\nStormEvents\r\n| top 10 by Timestamp\r\n| getschema\r\n```\r\n\r\n|ColumnName|ColumnOrdinal|DataType|ColumnType|\r\n|---|---|---|---|\r\n|Timestamp|0|System.DateTime|datetime|\r\n|Language|1|System.String|string|\r\n|Page|2|System.String|string|\r\n|Views|3|System.Int64|long\r\n|BytesDelivered|4|System.Int64|long","https://docs.microsoft.com/en-us/azure/kusto/query/getschemaoperator","getschemaoperator.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"gettype","Returns the runtime type of its single argument.","The runtime type may be different than the nominal (static) type for expressions\r\nwhose nominal type is `dynamic`; in such cases `gettype()` can be useful to reveal\r\nthet type of the actual value (how the value is encoded in memory).\r\n\r\n## Syntax\r\n\r\n`gettype(`*Expr*`)`\r\n\r\n## Returns\r\n\r\nA string representing the runtime type of its single argument.","|Expression                          |Returns      |\r\n|------------------------------------|-------------|\r\n|`gettype(\"a\")`                      |`string`     |\r\n|`gettype(111)`                      |`long`       |\r\n|`gettype(1==1)`                     |`bool`       |\r\n|`gettype(now())`                    |`datetime`   |\r\n|`gettype(1s)`                       |`timespan`   |\r\n|`gettype(parse_json('1'))`           |`int`        |\r\n|`gettype(parse_json(' \"abc\" '))`     |`string`     |\r\n|`gettype(parse_json(' {\"abc\":1} '))` |`dictionary` | \r\n|`gettype(parse_json(' [1, 2, 3] '))` |`array`      |\r\n|`gettype(123.45)`                   |`real`       |\r\n|`gettype(guid(12e8b78d-55b4-46ae-b068-26d7a0080254))`|`guid`| \r\n|`gettype(parse_json(''))`            |`null`|","https://docs.microsoft.com/en-us/azure/kusto/query/gettypefunction","gettypefunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"getyear","Returns the year part of the `datetime` argument.","","```\r\nT\r\n| extend year = getyear(datetime(2015-10-12))\r\n// year == 2015\r\n```","https://docs.microsoft.com/en-us/azure/kusto/query/getyearfunction","getyearfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,"has_any","`has_any` operator filters based on the provided set of values.","```\r\nTable1 | where col has_any ('value1', 'value2')\r\n```\r\n\r\n## Syntax\r\n\r\n*T* `|` `where` *col* `has_any` `(`*list of scalar expressions*`)`   \r\n*T* `|` `where` *col* `has_any` `(`*tabular expression*`)`   \r\n\r\n## Arguments\r\n\r\n* *T* - Tabular input whose records are to be filtered.\r\n* *col* - Column to filter.\r\n* *list of expressions* - Comma separated list of tabular, scalar, or literal expressions  \r\n* *tabular expression* - Tabular expression that has a set of values (if expression has multiple columns, the first column is used)\r\n\r\n## Returns\r\n\r\nRows in *T* for which the predicate is `true`\r\n\r\n**Notes**\r\n\r\n* The expression list can produce up to `10,000` values.    \r\n* For tabular expressions, the first column of the result set is selected.   \r\n\r\n**Examples:**  \r\n\r\n**A simple usage of `has_any` operator:**  \r\n\r\n```\r\nStormEvents \r\n| where State has_any (\"CAROLINA\", \"DAKOTA\", \"NEW\") \r\n| summarize count() by State\r\n```\r\n\r\n|State|count_|\r\n|---|---|\r\n|NEW YORK|1750|\r\n|NORTH CAROLINA|1721|\r\n|SOUTH DAKOTA|1567|\r\n|NEW JERSEY|1044|\r\n|SOUTH CAROLINA|915|\r\n|NORTH DAKOTA|905|\r\n|NEW MEXICO|527|\r\n|NEW HAMPSHIRE|394|\r\n\r\n**Using dynamic array:**\r\n\r\n```\r\nlet states = dynamic(['south', 'north']);\r\nStormEvents \r\n| where State has_any (states)\r\n| summarize count() by State\r\n```\r\n\r\n|State|count_|\r\n|---|---|\r\n|NORTH CAROLINA|1721|\r\n|SOUTH DAKOTA|1567|\r\n|SOUTH CAROLINA|915|\r\n|NORTH DAKOTA|905|\r\n|ATLANTIC SOUTH|193|\r\n|ATLANTIC NORTH|188|","","https://docs.microsoft.com/en-us/azure/kusto/query/has-anyoperator","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"hash","Returns a hash value for the input value.","## Syntax\r\n\r\n`hash(`*source* [`,` *mod*]`)`\r\n\r\n## Arguments\r\n\r\n* *source*: The value to be hashed.\r\n* *mod*: An optional module value to be applied to the hash result, so that\r\n  the output value is between `0` and *mod* - 1\r\n\r\n## Returns\r\n\r\nThe hash value of the given scalar, modulo the given mod value (if specified).\r\n\r\n> [!WARNING]\r\n> The algorithm used to calculate the hash is xxhash.\r\n> This algorithm might change in the future, and the only guarantee is that\r\n> within a single query all invocations of this method use the same algorithm.\r\n> Consequently, you are advised not to store the results of `hash()` in a\r\n> table. If persisting hash values is required, use\r\n> [hash_sha256()](./sha256hashfunction.md) or [hash_md5()](./md5hashfunction.md) instead. Note that these functions are more complex to calculate than `hash()`).",'```\r\nhash("World")                   // 1846988464401551951\r\nhash("World", 100)              // 51 (1846988464401551951 % 100)\r\nhash(datetime("2015-01-01"))    // 1380966698541616202\r\n```\r\n\r\nThe following example uses the hash function to run a query on 10% of the data,\r\nIt is helpful to use the hash function for sampling the data when assuming the value is uniformly distributed (In this example StartTime value)\r\n\r\n```\r\nStormEvents \r\n| where hash(StartTime, 10) == 0\r\n| summarize StormCount = count(), TypeOfStorms = dcount(EventType) by State \r\n| top 5 by StormCount desc\r\n```',"https://docs.microsoft.com/en-us/azure/kusto/query/hashfunction","hashfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"hash_combine","Combines hash values of two or more hashes.","## Syntax\r\n\r\n`hash_combine(`*h1* `,` *h2* [`,` *h3* ...]`)`\r\n\r\n## Arguments\r\n\r\n* *h1*: Long value representing the first hash value.\r\n* *h2*: Long value representing the second hash value.\r\n* *hN*: Long value representing Nth hash value.\r\n\r\n## Returns\r\n\r\nThe combined hash value of the given scalars.",'```\r\nprint value1 = "Hello", value2 = "World"\r\n| extend h1 = hash(value1), h2=hash(value2)\r\n| extend combined = hash_combine(h1, h2)\r\n```\r\n\r\n|value1|value2|h1|h2|combined|\r\n|---|---|---|---|---|\r\n|Hello|World|753694413698530628|1846988464401551951|-1440138333540407281|',"https://docs.microsoft.com/en-us/azure/kusto/query/hash_combinefunction","hash_combinefunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"hash_many","Returns a combined hash value of multiple values.","## Syntax\r\n\r\n`hash_many(`*s1* `,` *s2* [`,` *s3* ...]`)`\r\n\r\n## Arguments\r\n\r\n* *s1*, *s2*, ..., *sN*: input values that will be hashed together.\r\n\r\n## Returns\r\n\r\nThe combined hash value of the given scalars.",'```\r\nprint value1 = "Hello", value2 = "World"\r\n| extend combined = hash_many(value1, value2)\r\n```\r\n\r\n|value1|value2|combined|\r\n|---|---|---|\r\n|Hello|World|-1440138333540407281|',"https://docs.microsoft.com/en-us/azure/kusto/query/hash_manyfunction","hash_manyfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"hash_md5","Returns an MD5 hash value for the input value.",'## Syntax\r\n\r\n`hash_md5(`*source*`)`\r\n\r\n## Arguments\r\n\r\n* *source*: The value to be hashed.\r\n\r\n## Returns\r\n\r\nThe MD5 hash value of the given scalar, encoded as a hex string (a string\r\nof characters, each two of which represent a single Hex number between 0\r\nand 255).\r\n\r\n> [!WARNING]\r\n> The algorithm used by this function (MD5) is guaranteed\r\n> to not be modified in the future, but is very complex to calculate. Users that\r\n> need a "lightweight" hash function for the duration of a single query are advised\r\n> to use the function [hash()](./hashfunction.md) instead.','```\r\nprint \r\nh1=hash_md5("World"),\r\nh2=hash_md5(datetime(2020-01-01))\r\n```\r\n\r\n|h1|h2|\r\n|---|---|\r\n|f5a7924e621e84c9280a9a27e1bcb7f6|786c530672d1f8db31fee25ea8a9390b|\r\n\r\nThe following example uses the `hash_md5()` function to aggregate StormEvents based on State\'s MD5 hash value. \r\n\r\n```\r\nStormEvents\r\n| summarize StormCount = count() by State, StateHash=hash_md5(State)\r\n| top 5 by StormCount\r\n```\r\n\r\n|State|StateHash|StormCount|\r\n|---|---|---|\r\n|TEXAS|3b00dbe6e07e7485a1c12d36c8e9910a|4701|\r\n|KANSAS|e1338d0ac8be43846cf9ae967bd02e7f|3166|\r\n|IOWA|6d4a7c02942f093576149db764d4e2d2|2337|\r\n|ILLINOIS|8c00d9e0b3fcd55aed5657e42cc40cf1|2022|\r\n|MISSOURI|2d82f0c963c0763012b2539d469e5008|2016|',"https://docs.microsoft.com/en-us/azure/kusto/query/md5hashfunction","md5hashfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"hash_sha256","Returns a sha256 hash value for the input value.",'## Syntax\r\n\r\n`hash_sha256(`*source*`)`\r\n\r\n## Arguments\r\n\r\n* *source*: The value to be hashed.\r\n\r\n## Returns\r\n\r\nThe sha256 hash value of the given scalar, encoded as a hex string (a string\r\nof characters, each two of which represent a single Hex number between 0\r\nand 255).\r\n\r\n> [!WARNING]\r\n> The algorithm used by this function (SHA256) is guaranteed\r\n> to not be modified in the future, but is very complex to calculate. Users that\r\n> need a "lightweight" hash function for the duration of a single query are advised\r\n> to use the function [hash()](./hashfunction.md) instead.','```\r\nprint \r\nh1=hash_sha256("World"),\r\nh2=hash_sha256(datetime(2020-01-01))\r\n```\r\n\r\n|h1|h2|\r\n|---|---|\r\n|78ae647dc5544d227130a0682a51e30bc7777fbb6d8a8f17007463a3ecd1d524|ba666752dc1a20eb750b0eb64e780cc4c968bc9fb8813461c1d7e750f302d71d|\r\n\r\nThe following example uses the `hash_sha256()` function to aggregate StormEvents based on State\'s SHA256 hash value. \r\n\r\n```\r\nStormEvents \r\n| summarize StormCount = count() by State, StateHash=hash_sha256(State)\r\n| top 5 by StormCount desc\r\n```\r\n\r\n|State|StateHash|StormCount|\r\n|---|---|---|\r\n|TEXAS|9087f20f23f91b5a77e8406846117049029e6798ebbd0d38aea68da73a00ca37|4701|\r\n|KANSAS|c80e328393541a3181b258cdb4da4d00587c5045e8cf3bb6c8fdb7016b69cc2e|3166|\r\n|IOWA|f85893dca466f779410f65cd904fdc4622de49e119ad4e7c7e4a291ceed1820b|2337|\r\n|ILLINOIS|ae3eeabfd7eba3d9a4ccbfed6a9b8cff269dc43255906476282e0184cf81b7fd|2022|\r\n|MISSOURI|d15dfc28abc3ee73b7d1f664a35980167ca96f6f90e034db2a6525c0b8ba61b1|2016|',"https://docs.microsoft.com/en-us/azure/kusto/query/sha256hashfunction","sha256hashfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"hll","Calculates the Intermediate results of [`dcount`](dcount-aggfunction.md) across the group, only in context of aggregation inside [summarize](summarizeoperator.md).","Read about the [underlying algorithm (*H*yper*L*og*L*og) and the estimation accuracy](dcount-aggfunction.md#estimation-accuracy).\r\n\r\n## Syntax\r\n\r\n`summarize hll(`*`Expr`* `[,` *`Accuracy`*`])`\r\n\r\n## Arguments\r\n\r\n* *`Expr`*: Expression that will be used for aggregation calculation. \r\n* *`Accuracy`*, if specified, controls the balance between speed and accuracy.\r\n  |Accuracy Value |Accuracy  |Speed  |Error  |\r\n  |---------|---------|---------|---------|\r\n  |`0` | lowest | fastest | 1.6% |\r\n  |`1` | default  | balanced | 0.8% |\r\n  |`2` | high | slow | 0.4%  |\r\n  |`3` | high | slow | 0.28% |\r\n  |`4` | extra high | slowest | 0.2% |\r\n\t\r\n\r\n## Returns\r\n\r\nThe Intermediate results of distinct count of *`Expr`* across the group.\r\n\r\n**Tips**\r\n\r\n1. You may use the aggregation function [`hll_merge`](hll-merge-aggfunction.md) to merge more than one `hll` intermediate results (it works on `hll` output only).\r\n1. You may use the function [`dcount_hll`](dcount-hllfunction.md), which will calculate the `dcount` from `hll` / `hll_merge` aggregation functions.","```\r\nStormEvents\r\n| summarize hll(DamageProperty) by bin(StartTime,10m)\r\n\r\n```\r\n\r\n|StartTime|`hll_DamageProperty`|\r\n|---|---|\r\n|2007-09-18 20:00:00.0000000|[[1024,14],[-5473486921211236216,-6230876016761372746,3953448761157777955,4246796580750024372],[]]|\r\n|2007-09-20 21:50:00.0000000|[[1024,14],[4835649640695509390],[]]|\r\n|2007-09-29 08:10:00.0000000|[[1024,14],[4246796580750024372],[]]|\r\n|2007-12-30 16:00:00.0000000|[[1024,14],[4246796580750024372,-8936707700542868125],[]]|","https://docs.microsoft.com/en-us/azure/kusto/query/hll-aggfunction","hll-aggfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"hll_merge","Merges `hll` results (scalar version of the aggregate version [`hll_merge()`](hll-merge-aggfunction.md)).","Read about the [underlying algorithm (*H*yper*L*og*L*og) and estimation accuracy](dcount-aggfunction.md#estimation-accuracy).\r\n\r\n## Syntax\r\n\r\n`hll_merge(` *Expr1*`,` *Expr2*`, ...)`\r\n\r\n## Arguments\r\n\r\n* Columns that have `hll` values to be merged.\r\n\r\n## Returns\r\n\r\nThe result for merging the columns `*Exrp1*`, `*Expr2*`, ... `*ExprN*` to one `hll` value.","```\r\nrange x from 1 to 10 step 1 \r\n| extend y = x + 10\r\n| summarize hll_x = hll(x), hll_y = hll(y)\r\n| project merged = hll_merge(hll_x, hll_y)\r\n| project dcount_hll(merged)\r\n```\r\n\r\n|`dcount_hll_merged`|\r\n|---|\r\n|20|","https://docs.microsoft.com/en-us/azure/kusto/query/hllmergefunction","hllmergefunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"hourofday","Returns the integer number representing the hour number of the given date","```\r\nhourofday(datetime(2015-12-14 18:54)) == 18\r\n```\r\n\r\n## Syntax\r\n\r\n`hourofday(`*a_date*`)`\r\n\r\n## Arguments\r\n\r\n* `a_date`: A `datetime`.\r\n\r\n## Returns\r\n\r\n`hour number` of the day (0-23).","","https://docs.microsoft.com/en-us/azure/kusto/query/hourofdayfunction","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"iff","Evaluates the first argument (the predicate), and returns the value of either the second or third arguments, depending on whether the predicate evaluated to `true` (second) or `false` (third).","The second and third arguments must be of the same type.\r\n\r\n## Syntax\r\n\r\n`iff(`*predicate*`,` *ifTrue*`,` *ifFalse*`)`\r\n\r\n## Arguments\r\n\r\n* *predicate*: An expression that evaluates to a `boolean` value.\r\n* *ifTrue*: An expression that gets evaluated and its value returned from the function if *predicate* evaluates to `true`.\r\n* *ifFalse*: An expression that gets evaluated and its value returned from the function if *predicate* evaluates to `false`.\r\n\r\n## Returns\r\n\r\nThis function returns the value of *ifTrue* if *predicate* evaluates to `true`,\r\nor the value of *ifFalse* otherwise.",'```\r\nT \r\n| extend day = iff(floor(Timestamp, 1d)==floor(now(), 1d), "today", "anotherday")\r\n```',"https://docs.microsoft.com/en-us/azure/kusto/query/ifffunction","ifffunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"iif","Evaluates the first argument (the predicate), and returns the value of either the second or third arguments, depending on whether the predicate evaluated to `true` (second) or `false` (third).","The second and third arguments must be of the same type.\r\n\r\n## Syntax\r\n\r\n`iif(`*predicate*`,` *ifTrue*`,` *ifFalse*`)`\r\n\r\n## Arguments\r\n\r\n* *predicate*: An expression that evaluates to a `boolean` value.\r\n* *ifTrue*: An expression that gets evaluated and its value returned from the function if *predicate* evaluates to `true`.\r\n* *ifFalse*: An expression that gets evaluated and its value returned from the function if *predicate* evaluates to `false`.\r\n\r\n## Returns\r\n\r\nThis function returns the value of *ifTrue* if *predicate* evaluates to `true`,\r\nor the value of *ifFalse* otherwise.",'```\r\nT \r\n| extend day = iif(floor(Timestamp, 1d)==floor(now(), 1d), "today", "anotherday")\r\n```\r\n\r\nAn alias for [`iff()`](ifffunction.md).',"https://docs.microsoft.com/en-us/azure/kusto/query/iiffunction","iiffunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,"in","Filters a record set based on the provided set of values.","```\r\nTable1 | where col in ('value1', 'value2')\r\n```\r\n\r\n> [!NOTE]\r\n> * Adding '~' to the operator makes values' search case-insensitive: `x in~ (expression)` or `x !in~ (expression)`.\r\n> * In tabular expressions, the first column of the result set is selected.\r\n> * The expression list can produce up to `1,000,000` values.\r\n> * Nested arrays are flattened into a single list of values. For example, `x in (dynamic([1,[2,3]]))` becomes `x in (1,2,3)`.\r\n\r\n## Syntax\r\n\r\n### Case-sensitive syntax\r\n\r\n*T* `|` `where` *col* `in` `(`*list of scalar expressions*`)`   \r\n*T* `|` `where` *col* `in` `(`*tabular expression*`)`   \r\n\r\n*T* `|` `where` *col* `!in` `(`*list of scalar expressions*`)`  \r\n*T* `|` `where` *col* `!in` `(`*tabular expression*`)`   \r\n\r\n### Case insensitive syntax\r\n\r\n*T* `|` `where` *col* `in~` `(`*list of scalar expressions*`)`   \r\n*T* `|` `where` *col* `in~` `(`*tabular expression*`)`   \r\n\r\n*T* `|` `where` *col* `!in~` `(`*list of scalar expressions*`)`  \r\n*T* `|` `where` *col* `!in~` `(`*tabular expression*`)`   \r\n\r\n## Arguments\r\n\r\n* *T* - The tabular input whose records are to be filtered.\r\n* *col* - The column to filter.\r\n* *list of expressions* - A comma-separated list of tabular, scalar, or literal expressions.\r\n* *tabular expression* - A tabular expression that has a set of values. If the expression has multiple columns, the first column is used.\r\n\r\n## Returns\r\n\r\nRows in *T* for which the predicate is `true`.",'### Use \'in\' operator\r\n\r\n```\r\nStormEvents \r\n| where State in ("FLORIDA", "GEORGIA", "NEW YORK") \r\n| count\r\n```\r\n\r\n|Count|\r\n|---|\r\n|4775|  \r\n\r\n### Use \'in~\' operator  \r\n\r\n```\r\nStormEvents \r\n| where State in~ ("Florida", "Georgia", "New York") \r\n| count\r\n```\r\n\r\n|Count|\r\n|---|\r\n|4775|  \r\n\r\n### Use \'!in\' operator\r\n\r\n```\r\nStormEvents \r\n| where State !in ("FLORIDA", "GEORGIA", "NEW YORK") \r\n| count\r\n```\r\n\r\n|Count|\r\n|---|\r\n|54291|  \r\n\r\n### Use dynamic array\r\n\r\n```\r\nlet states = dynamic([\'FLORIDA\', \'ATLANTIC SOUTH\', \'GEORGIA\']);\r\nStormEvents \r\n| where State in (states)\r\n| count\r\n```\r\n\r\n|Count|\r\n|---|\r\n|3218|\r\n\r\n### Subquery\r\n\r\n```\r\n// Using subquery\r\nlet Top_5_States = \r\nStormEvents\r\n| summarize count() by State\r\n| top 5 by count_; \r\nStormEvents \r\n| where State in (Top_5_States) \r\n| count\r\n```\r\n\r\nThe same query can be written as:\r\n\r\n```\r\n// Inline subquery \r\nStormEvents \r\n| where State in (\r\n    ( StormEvents\r\n    | summarize count() by State\r\n    | top 5 by count_ )\r\n) \r\n| count\r\n```\r\n\r\n|Count|\r\n|---|\r\n|14242|  \r\n\r\n### Top with other example\r\n\r\n```\r\nlet Lightning_By_State = materialize(StormEvents | summarize lightning_events = countif(EventType == \'Lightning\') by State);\r\nlet Top_5_States = Lightning_By_State | top 5 by lightning_events | project State; \r\nLightning_By_State\r\n| extend State = iif(State in (Top_5_States), State, "Other")\r\n| summarize sum(lightning_events) by State \r\n```\r\n\r\n| State     | sum_lightning_events |\r\n|-----------|----------------------|\r\n| ALABAMA   | 29                   |\r\n| WISCONSIN | 31                   |\r\n| TEXAS     | 55                   |\r\n| FLORIDA   | 85                   |\r\n| GEORGIA   | 106                  |\r\n| Other     | 415                  |\r\n\r\n### Use a static list returned by a function\r\n\r\n```\r\nStormEvents | where State in (InterestingStates()) | count\r\n\r\n```\r\n\r\n|Count|\r\n|---|\r\n|4775|  \r\n\r\nThe function definition.\r\n\r\n```\r\n.show function InterestingStates\r\n```\r\n\r\n|Name|Parameters|Body|Folder|DocString|\r\n|---|---|---|---|---|\r\n|InterestingStates|()|{ dynamic(["WASHINGTON", "FLORIDA", "GEORGIA", "NEW YORK"]) }',"https://docs.microsoft.com/en-us/azure/kusto/query/inoperator","inoperator.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"indexof","Reports the zero-based index of the first occurrence of a specified string within the input string.","If lookup or input string isn't of *string* type, the function forcibly casts the value to *string*.\r\n\r\nFor more information, see [`indexof_regex()`](indexofregexfunction.md).\r\n\r\n## Syntax\r\n\r\n`indexof(`*source*`,`*lookup*`[,`*start_index*`[,`*length*`[,`*occurrence*`]]])`\r\n\r\n## Arguments\r\n\r\n* *source*: Input string.  \r\n* *lookup*: String to look up.\r\n* *start_index*: Search start position. Optional.\r\n* *length*: Number of character positions to examine. A value of -1 means unlimited length. Optional.\r\n* *occurrence*: The number of the occurrence. Default 1. Optional.\r\n\r\n## Returns\r\n\r\nZero-based index position of *lookup*.\r\n\r\nReturns -1 if the string isn't found in the input.\r\n\r\nIf irrelevant (less than 0) *start_index*, *occurrence*, or (less than -1) *length* parameter - returns *null*.",'```\r\nprint\r\n idx1 = indexof("abcdefg","cde")    // lookup found in input string\r\n , idx2 = indexof("abcdefg","cde",1,4) // lookup found in researched range \r\n , idx3 = indexof("abcdefg","cde",1,2) // search starts from index 1, but stops after 2 chars, so full lookup can\'t be found\r\n , idx4 = indexof("abcdefg","cde",3,4) // search starts after occurrence of lookup\r\n , idx5 = indexof("abcdefg","cde",-1)  // invalid input\r\n , idx6 = indexof(1234567,5,1,4)       // two first parameters were forcibly casted to strings "12345" and "5"\r\n , idx7 = indexof("abcdefg","cde",2,-1)  // lookup found in input string\r\n , idx8 = indexof("abcdefgabcdefg", "cde", 1, 10, 2)   // lookup found in input range\r\n , idx9 = indexof("abcdefgabcdefg", "cde", 1, -1, 3)   // the third occurrence of lookup is not in researched range\r\n```\r\n\r\n|idx1|idx2|idx3|idx4|idx5|idx6|idx7|idx8|idx9|\r\n|----|----|----|----|----|----|----|----|----|\r\n|2   |2   |-1  |-1  |    |4   |2   |9   |-1  |',"https://docs.microsoft.com/en-us/azure/kusto/query/indexoffunction","indexoffunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"indexof_regex","Function reports the zero-based index of the first occurrence of a specified string within the input string. Plain string matches don't overlap.","See [`indexof()`](indexoffunction.md).\r\n\r\n## Syntax\r\n\r\n`indexof_regex(`*source*`,`*lookup*`[,`*start_index*`[,`*length*`[,`*occurrence*`]]])`\r\n\r\n## Arguments\r\n\r\n|Arguments     | Description                                     |Required or Optional|\r\n|--------------|-------------------------------------------------|--------------------|\r\n|source        | Input string                                    |Required            |\r\n|lookup        | String to seek                                  |Required            |\r\n|start_index   | Search start position                           |Optional            |\r\n|length        | Number of character positions to examine. -1 defines an unlimited length |Optional            |\r\n|occurrence    | Find the index of the N-th appearance of the pattern. \r\n                 Default is 1, the index of the first occurrence |Optional            |\r\n\r\n## Returns\r\n\r\nZero-based index position of *lookup*.\r\n\r\n* Returns -1 if the string isn't found in the input.\r\n* Returns *null* if:\r\n     * start_index is less than 0.\r\n     * occurrence is less than 0.\r\n     * length parameter is less than -1.",'```\r\nprint\r\n idx1 = indexof_regex("abcabc", "a.c") // lookup found in input string\r\n , idx2 = indexof_regex("abcabcdefg", "a.c", 0, 9, 2)  // lookup found in input string\r\n , idx3 = indexof_regex("abcabc", "a.c", 1, -1, 2)  // there is no second occurrence in the search range\r\n , idx4 = indexof_regex("ababaa", "a.a", 0, -1, 2)  // Plain string matches do not overlap so full lookup can\'t be found\r\n , idx5 = indexof_regex("abcabc", "a|ab", -1)  // invalid input\r\n```\r\n\r\n|idx1|idx2|idx3|idx4|idx5|\r\n|----|----|----|----|----|\r\n|0   |3   |-1  |-1  |    |',"https://docs.microsoft.com/en-us/azure/kusto/query/indexofregexfunction","indexofregexfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"ingestion_time","Returns the approximate time at which the current record was ingested.","This function must be used in the context of a table of ingested data for which the [IngestionTime policy](../management/ingestiontimepolicy.md) was enabled when the data was ingested. Otherwise, this function produces null values.\r\n\r\n> [!NOTE]\r\n> The value returned by this function is only approximate, as the ingestion process may take several minutes to complete and multiple ingestion activities may take place concurrently. To process all records of a table with exactly-once guarantees, use [database cursors](../management/databasecursor.md).\r\n\r\n## Syntax\r\n\r\n`ingestion_time()`\r\n\r\n## Returns\r\n\r\nA `datetime` value specifying the approximate time of ingestion into a table.","```\r\nT\r\n| extend ingestionTime = ingestion_time() | top 10 by ingestionTime\r\n```","https://docs.microsoft.com/en-us/azure/kusto/query/ingestiontimefunction","ingestiontimefunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,"invoke","Invokes lambda that receives the source of `invoke` as tabular parameter argument.","```\r\nT | invoke foo(param1, param2)\r\n```\r\n\r\n> [!NOTE]\r\n> See [let statements](./letstatement.md) for more details on how to declare lambda expressions that can accept tabular arguments.\r\n\r\n## Syntax\r\n\r\n`T | invoke` *function*`(`[*param1*`,` *param2*]`)`\r\n\r\n## Arguments\r\n\r\n* *T*: The tabular source.\r\n* *function*: The name of the lambda expression or function name to be evaluated.\r\n* *param1*, *param2* ... : additional lambda arguments.\r\n\r\n## Returns\r\n\r\nReturns the result of the evaluated expression.","The following example shows how to use `invoke` operator to call lambda expression:\r\n\r\n```\r\n// clipped_average(): calculates percentiles limits, and then makes another \r\n//                    pass over the data to calculate average with values inside the percentiles\r\nlet clipped_average = (T:(x: long), lowPercentile:double, upPercentile:double)\r\n{\r\n   let high = toscalar(T | summarize percentiles(x, upPercentile));\r\n   let low = toscalar(T | summarize percentiles(x, lowPercentile));\r\n   T \r\n   | where x > low and x < high\r\n   | summarize avg(x) \r\n};\r\nrange x from 1 to 100 step 1\r\n| invoke clipped_average(5, 99)\r\n```\r\n\r\n|avg_x|\r\n|---|\r\n|52|","https://docs.microsoft.com/en-us/azure/kusto/query/invokeoperator","invokeoperator.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"ipv4_compare","Compares two IPv4 strings. The two IPv4 strings are parsed and compared while accounting for the combined IP-prefix mask calculated from argument prefixes, and the optional `PrefixMask` argument.","```\r\nipv4_compare(\"127.0.0.1\", \"127.0.0.1\") == 0\r\nipv4_compare('192.168.1.1', '192.168.1.255') < 0\r\nipv4_compare('192.168.1.1/24', '192.168.1.255/24') == 0\r\nipv4_compare('192.168.1.1', '192.168.1.255', 24) == 0\r\n```\r\n\r\n## Syntax\r\n\r\n`ipv4_compare(`*Expr1*`, `*Expr2*`[ ,`*PrefixMask*`])`\r\n\r\n## Arguments\r\n\r\n* *Expr1*, *Expr2*: A string expression representing an IPv4 address. IPv4 strings can be masked using [IP-prefix notation](#ip-prefix-notation).\r\n* *PrefixMask*: An integer from 0 to 32 representing the number of most-significant bits that are taken into account.\r\n\r\n## IP-prefix notation\r\n\r\nIP addresses can be defined with `IP-prefix notation` using a slash (`/`) character.\r\nThe IP address to the LEFT of the slash (`/`) is the base IP address. The number (1 to 32) to the RIGHT of the slash (`/`) is the number of contiguous 1 bit in the netmask. \r\n\r\nFor example, 192.168.2.0/24 will have an associated net/subnetmask containing 24 contiguous bits or 255.255.255.0 in dotted decimal format.\r\n\r\n## Returns\r\n\r\n* `0`: If the long representation of the first IPv4 string argument is equal to the second IPv4 string argument\r\n* `1`: If the long representation of the first IPv4 string argument is greater than the second IPv4 string argument\r\n* `-1`: If the long representation of the first IPv4 string argument is less than the second IPv4 string argument\r\n* `null`: If conversion for one of the two IPv4 strings wasn't successful.\r\n\r\n## Examples: IPv4 comparison equality cases\r\n\r\n### Compare IPs using the IP-prefix notation specified inside the IPv4 strings\r\n\r\n```\r\ndatatable(ip1_string:string, ip2_string:string)\r\n[\r\n '192.168.1.0',    '192.168.1.0',       // Equal IPs\r\n '192.168.1.1/24', '192.168.1.255',     // 24 bit IP-prefix is used for comparison\r\n '192.168.1.1',    '192.168.1.255/24',  // 24 bit IP-prefix is used for comparison\r\n '192.168.1.1/30', '192.168.1.255/24',  // 24 bit IP-prefix is used for comparison\r\n]\r\n| extend result = ipv4_compare(ip1_string, ip2_string)\r\n```\r\n\r\n|ip1_string|ip2_string|result|\r\n|---|---|---|\r\n|192.168.1.0|192.168.1.0|0|\r\n|192.168.1.1/24|192.168.1.255|0|\r\n|192.168.1.1|192.168.1.255/24|0|\r\n|192.168.1.1/30|192.168.1.255/24|0|\r\n\r\n### Compare IPs using IP-prefix notation specified inside the IPv4 strings and as additional argument of the `ipv4_compare()` function\r\n\r\n```\r\ndatatable(ip1_string:string, ip2_string:string, prefix:long)\r\n[\r\n '192.168.1.1',    '192.168.1.0',   31, // 31 bit IP-prefix is used for comparison\r\n '192.168.1.1/24', '192.168.1.255', 31, // 24 bit IP-prefix is used for comparison\r\n '192.168.1.1',    '192.168.1.255', 24, // 24 bit IP-prefix is used for comparison\r\n]\r\n| extend result = ipv4_compare(ip1_string, ip2_string, prefix)\r\n```\r\n\r\n|ip1_string|ip2_string|prefix|result|\r\n|---|---|---|---|\r\n|192.168.1.1|192.168.1.0|31|0|\r\n|192.168.1.1/24|192.168.1.255|31|0|\r\n|192.168.1.1|192.168.1.255|24|0|","","https://docs.microsoft.com/en-us/azure/kusto/query/ipv4-comparefunction","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"ipv4_is_match","Matches two IPv4 strings. The two IPv4 strings are parsed and compared while accounting for the combined IP-prefix mask calculated from argument prefixes, and the optional `PrefixMask` argument.","```\r\nipv4_is_match(\"127.0.0.1\", \"127.0.0.1\") == true\r\nipv4_is_match('192.168.1.1', '192.168.1.255') == false\r\nipv4_is_match('192.168.1.1/24', '192.168.1.255/24') == true\r\nipv4_is_match('192.168.1.1', '192.168.1.255', 24) == true\r\n```\r\n\r\n## Syntax\r\n\r\n`ipv4_is_match(`*Expr1*`, `*Expr2*`[ ,`*PrefixMask*`])`\r\n\r\n## Arguments\r\n\r\n* *Expr1*, *Expr2*: A string expression representing an IPv4 address. IPv4 strings can be masked using [IP-prefix notation](#ip-prefix-notation).\r\n* *PrefixMask*: An integer from 0 to 32 representing the number of most-significant bits that are taken into account.\r\n\r\n## IP-prefix notation\r\n\r\nIP addresses can be defined with `IP-prefix notation` using a slash (`/`) character. The IP address to the LEFT of the slash (`/`) is the base IP address. The number (1 to 32) to the RIGHT of the slash (`/`) is the number of contiguous 1 bit in the netmask. \r\n\r\nFor example, 192.168.2.0/24 will have an associated net/subnetmask containing 24 contiguous bits or 255.255.255.0 in dotted decimal format.\r\n\r\n## Returns\r\n\r\n* `true`: If the long representation of the first IPv4 string argument is equal to the second IPv4 string argument.\r\n*  `false`: Otherwise.\r\n* `null`: If conversion for one of the two IPv4 strings wasn't successful.","### IPv4 comparison equality - IP-prefix notation specified inside the IPv4 strings\r\n\r\n```\r\ndatatable(ip1_string:string, ip2_string:string)\r\n[\r\n '192.168.1.0',    '192.168.1.0',       // Equal IPs\r\n '192.168.1.1/24', '192.168.1.255',     // 24 bit IP-prefix is used for comparison\r\n '192.168.1.1',    '192.168.1.255/24',  // 24 bit IP-prefix is used for comparison\r\n '192.168.1.1/30', '192.168.1.255/24',  // 24 bit IP-prefix is used for comparison\r\n]\r\n| extend result = ipv4_is_match(ip1_string, ip2_string)\r\n```\r\n\r\n|ip1_string|ip2_string|result|\r\n|---|---|---|\r\n|192.168.1.0|192.168.1.0|1|\r\n|192.168.1.1/24|192.168.1.255|1|\r\n|192.168.1.1|192.168.1.255/24|1|\r\n|192.168.1.1/30|192.168.1.255/24|1|\r\n\r\n### IPv4 comparison equality - IP-prefix notation specified inside the IPv4 strings and an additional argument of the `ipv4_is_match()` function\r\n\r\n```\r\ndatatable(ip1_string:string, ip2_string:string, prefix:long)\r\n[\r\n '192.168.1.1',    '192.168.1.0',   31, // 31 bit IP-prefix is used for comparison\r\n '192.168.1.1/24', '192.168.1.255', 31, // 24 bit IP-prefix is used for comparison\r\n '192.168.1.1',    '192.168.1.255', 24, // 24 bit IP-prefix is used for comparison\r\n]\r\n| extend result = ipv4_is_match(ip1_string, ip2_string, prefix)\r\n```\r\n\r\n|ip1_string|ip2_string|prefix|result|\r\n|---|---|---|---|\r\n|192.168.1.1|192.168.1.0|31|1|\r\n|192.168.1.1/24|192.168.1.255|31|1|\r\n|192.168.1.1|192.168.1.255|24|1|","https://docs.microsoft.com/en-us/azure/kusto/query/ipv4-is-matchfunction","ipv4-is-matchfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"ipv6_compare","Compares two IPv6 or IPv4 network address strings. The two IPv6 strings are parsed and compared while accounting for the combined IP-prefix mask calculated from argument prefixes, and the optional `PrefixMask` argument.","```\r\nipv6_compare('::ffff:7f00:1', '127.0.0.1') == 0\r\nipv6_compare('fe80::85d:e82c:9446:7994', 'fe80::85d:e82c:9446:7995')  < 0\r\nipv6_compare('192.168.1.1/24', '192.168.1.255/24') == 0\r\nipv6_compare('fe80::85d:e82c:9446:7994/127', 'fe80::85d:e82c:9446:7995/127') == 0\r\nipv6_compare('fe80::85d:e82c:9446:7994', 'fe80::85d:e82c:9446:7995', 127) == 0\r\n```\r\n\r\n> [!Note]\r\n> The function can accept and compare arguments representing both IPv6 and IPv4 network addresses. However, if the caller knows that arguments are in IPv4 format, use [ipv4_is_compare()](./ipv4-comparefunction.md) function. This function will result in better runtime performance.\r\n\r\n## Syntax\r\n\r\n`ipv6_compare(`*Expr1*`, `*Expr2*`[ ,`*PrefixMask*`])`\r\n\r\n## Arguments\r\n\r\n* *Expr1*, *Expr2*: A string expression representing an IPv6 or IPv4 address. IPv6 and IPv4 strings can be masked using IP-prefix notation (see note).\r\n* *PrefixMask*: An integer from 0 to 128 representing the number of most significant bits that are taken into account.\r\n\r\n## IP-prefix notation\r\n\r\nIt's common practice to define IP addresses with `IP-prefix notation` using a slash (`/`) character.\r\nThe IP address to the LEFT of the slash (`/`) is the base IP address, and the number (1 to 127) to the RIGHT of the slash (`/`) is the number of contiguous 1 bits in the netmask. \r\n\r\nFor example, fe80::85d:e82c:9446:7994/120 will have an associated net/subnetmask containing 120 contiguous bits.\r\n\r\n## Returns\r\n\r\n* `0`: If the long representation of the first IPv6 string argument is equal to the second IPv6 string argument.\r\n* `1`: If the long representation of the first IPv6 string argument is greater than the second IPv6 string argument.\r\n* `-1`: If the long representation of the first IPv6 string argument is less than the second IPv6 string argument.\r\n* `null`: If conversion for one of the two IPv6 strings wasn't successful.\r\n\r\n## Examples: IPv6/IPv4 comparison equality cases\r\n\r\n### Compare IPs using the IP-prefix notation specified inside the IPv6/IPv4 strings\r\n\r\n```\r\ndatatable(ip1_string:string, ip2_string:string)\r\n[\r\n // IPv4 are compared as IPv6 addresses\r\n '192.168.1.1',    '192.168.1.1',       // Equal IPs\r\n '192.168.1.1/24', '192.168.1.255',     // 24 bit IP4-prefix is used for comparison\r\n '192.168.1.1',    '192.168.1.255/24',  // 24 bit IP4-prefix is used for comparison\r\n '192.168.1.1/30', '192.168.1.255/24',  // 24 bit IP4-prefix is used for comparison\r\n  // IPv6 cases\r\n 'fe80::85d:e82c:9446:7994', 'fe80::85d:e82c:9446:7994',         // Equal IPs\r\n 'fe80::85d:e82c:9446:7994/120', 'fe80::85d:e82c:9446:7998',     // 120 bit IP6-prefix is used for comparison\r\n 'fe80::85d:e82c:9446:7994', 'fe80::85d:e82c:9446:7998/120',     // 120 bit IP6-prefix is used for comparison\r\n 'fe80::85d:e82c:9446:7994/120', 'fe80::85d:e82c:9446:7998/120', // 120 bit IP6-prefix is used for comparison\r\n // Mixed case of IPv4 and IPv6\r\n '192.168.1.1',      '::ffff:c0a8:0101', // Equal IPs\r\n '192.168.1.1/24',   '::ffff:c0a8:01ff', // 24 bit IP-prefix is used for comparison\r\n '::ffff:c0a8:0101', '192.168.1.255/24', // 24 bit IP-prefix is used for comparison\r\n '::192.168.1.1/30', '192.168.1.255/24', // 24 bit IP-prefix is used for comparison\r\n]\r\n| extend result = ipv6_compare(ip1_string, ip2_string)\r\n```\r\n\r\n|ip1_string|ip2_string|result|\r\n|---|---|---|\r\n|192.168.1.1|192.168.1.1|0|\r\n|192.168.1.1/24|192.168.1.255|0|\r\n|192.168.1.1|192.168.1.255/24|0|\r\n|192.168.1.1/30|192.168.1.255/24|0|\r\n|fe80::85d:e82c:9446:7994|fe80::85d:e82c:9446:7994|0|\r\n|fe80::85d:e82c:9446:7994/120|fe80::85d:e82c:9446:7998|0|\r\n|fe80::85d:e82c:9446:7994|fe80::85d:e82c:9446:7998/120|0|\r\n|fe80::85d:e82c:9446:7994/120|fe80::85d:e82c:9446:7998/120|0|\r\n|192.168.1.1|::ffff:c0a8:0101|0|\r\n|192.168.1.1/24|::ffff:c0a8:01ff|0|\r\n|::ffff:c0a8:0101|192.168.1.255/24|0|\r\n|::192.168.1.1/30|192.168.1.255/24|0|\r\n\r\n### Compare IPs using IP-prefix notation specified inside the IPv6/IPv4 strings and as additional argument of the `ipv6_compare()` function\r\n\r\n```\r\ndatatable(ip1_string:string, ip2_string:string, prefix:long)\r\n[\r\n // IPv4 are compared as IPv6 addresses \r\n '192.168.1.1',    '192.168.1.0',   31, // 31 bit IP4-prefix is used for comparison\r\n '192.168.1.1/24', '192.168.1.255', 31, // 24 bit IP4-prefix is used for comparison\r\n '192.168.1.1',    '192.168.1.255', 24, // 24 bit IP4-prefix is used for comparison\r\n   // IPv6 cases\r\n 'fe80::85d:e82c:9446:7994', 'fe80::85d:e82c:9446:7995',     127, // 127 bit IP6-prefix is used for comparison\r\n 'fe80::85d:e82c:9446:7994/127', 'fe80::85d:e82c:9446:7998', 120, // 120 bit IP6-prefix is used for comparison\r\n 'fe80::85d:e82c:9446:7994/120', 'fe80::85d:e82c:9446:7998', 127, // 120 bit IP6-prefix is used for comparison\r\n // Mixed case of IPv4 and IPv6\r\n '192.168.1.1/24',   '::ffff:c0a8:01ff', 127, // 127 bit IP6-prefix is used for comparison\r\n '::ffff:c0a8:0101', '192.168.1.255',    120, // 120 bit IP6-prefix is used for comparison\r\n '::192.168.1.1/30', '192.168.1.255/24', 127, // 120 bit IP6-prefix is used for comparison\r\n]\r\n| extend result = ipv6_compare(ip1_string, ip2_string, prefix)\r\n```\r\n\r\n|ip1_string|ip2_string|prefix|result|\r\n|---|---|---|---|\r\n|192.168.1.1|192.168.1.0|31|0|\r\n|192.168.1.1/24|192.168.1.255|31|0|\r\n|192.168.1.1|192.168.1.255|24|0|\r\n|fe80::85d:e82c:9446:7994|fe80::85d:e82c:9446:7995|127|0|\r\n|fe80::85d:e82c:9446:7994/127|fe80::85d:e82c:9446:7998|120|0|\r\n|fe80::85d:e82c:9446:7994/120|fe80::85d:e82c:9446:7998|127|0|\r\n|192.168.1.1/24|::ffff:c0a8:01ff|127|0|\r\n|::ffff:c0a8:0101|192.168.1.255|120|0|\r\n|::192.168.1.1/30|192.168.1.255/24|127|0|","","https://docs.microsoft.com/en-us/azure/kusto/query/ipv6-comparefunction","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"ipv6_is_match","Matches two IPv6 or IPv4 network address strings. The two IPv6/IPv4 strings are parsed and compared while accounting for the combined IP-prefix mask calculated from argument prefixes, and the optional `PrefixMask` argument.","```\r\nipv6_is_match('::ffff:7f00:1', '127.0.0.1') == true\r\nipv6_is_match('fe80::85d:e82c:9446:7994', 'fe80::85d:e82c:9446:7995') == false\r\nipv6_is_match('192.168.1.1/24', '192.168.1.255/24') == true\r\nipv6_is_match('fe80::85d:e82c:9446:7994/127', 'fe80::85d:e82c:9446:7995/127') == true\r\nipv6_is_match('fe80::85d:e82c:9446:7994', 'fe80::85d:e82c:9446:7995', 127) == true\r\n```\r\n\r\n> [!NOTE]\r\n> The function can accept and compare arguments representing both IPv6 and IPv4 network addresses. If the caller knows that arguments are in IPv4 format, use the [ipv4_is_match()](./ipv4-is-matchfunction.md) function. This function will result in better runtime performance.\r\n\r\n## Syntax\r\n\r\n`ipv6_is_match(`*Expr1*`, `*Expr2*`[ ,`*PrefixMask*`])`\r\n\r\n## Arguments\r\n\r\n* *Expr1*, *Expr2*: A string expression representing an IPv6 or IPv4 address. IPv6 and IPv4 strings can be masked using [IP-prefix notation](#ip-prefix-notation).\r\n* *PrefixMask*: An integer from 0 to 128 representing the number of most-significant bits that are taken into account.\r\n\r\n## IP-prefix notation\r\n\r\nIP addresses can be defined with `IP-prefix notation` using a slash (`/`) character.\r\nThe IP address to the LEFT of the slash (`/`) is the base IP address. The number (1 to 127) to the RIGHT of the slash (`/`) is the number of contiguous 1 bit in the netmask. \r\n\r\nFor example, fe80::85d:e82c:9446:7994/120 will have an associated net/subnetmask containing 120 contiguous bits.\r\n\r\n## Returns\r\n\r\n* `true`: If the long representation of the first IPv6/IPv4 string argument is equal to the second IPv6/IPv4 string argument.\r\n* `false`: Otherwise.\r\n* `null`: If conversion for one of the two IPv6/IPv4 strings wasn't successful.","### IPv6/IPv4 comparison equality case - IP-prefix notation specified inside the IPv6/IPv4 strings\r\n\r\n```\r\ndatatable(ip1_string:string, ip2_string:string)\r\n[\r\n // IPv4 are compared as IPv6 addresses\r\n '192.168.1.1',    '192.168.1.1',       // Equal IPs\r\n '192.168.1.1/24', '192.168.1.255',     // 24 bit IP4-prefix is used for comparison\r\n '192.168.1.1',    '192.168.1.255/24',  // 24 bit IP4-prefix is used for comparison\r\n '192.168.1.1/30', '192.168.1.255/24',  // 24 bit IP4-prefix is used for comparison\r\n  // IPv6 cases\r\n 'fe80::85d:e82c:9446:7994', 'fe80::85d:e82c:9446:7994',         // Equal IPs\r\n 'fe80::85d:e82c:9446:7994/120', 'fe80::85d:e82c:9446:7998',     // 120 bit IP6-prefix is used for comparison\r\n 'fe80::85d:e82c:9446:7994', 'fe80::85d:e82c:9446:7998/120',     // 120 bit IP6-prefix is used for comparison\r\n 'fe80::85d:e82c:9446:7994/120', 'fe80::85d:e82c:9446:7998/120', // 120 bit IP6-prefix is used for comparison\r\n // Mixed case of IPv4 and IPv6\r\n '192.168.1.1',      '::ffff:c0a8:0101', // Equal IPs\r\n '192.168.1.1/24',   '::ffff:c0a8:01ff', // 24 bit IP-prefix is used for comparison\r\n '::ffff:c0a8:0101', '192.168.1.255/24', // 24 bit IP-prefix is used for comparison\r\n '::192.168.1.1/30', '192.168.1.255/24', // 24 bit IP-prefix is used for comparison\r\n]\r\n| extend result = ipv6_is_match(ip1_string, ip2_string)\r\n```\r\n\r\n|ip1_string|ip2_string|result|\r\n|---|---|---|\r\n|192.168.1.1|192.168.1.1|1|\r\n|192.168.1.1/24|192.168.1.255|1|\r\n|192.168.1.1|192.168.1.255/24|1|\r\n|192.168.1.1/30|192.168.1.255/24|1|\r\n|fe80::85d:e82c:9446:7994|fe80::85d:e82c:9446:7994|1|\r\n|fe80::85d:e82c:9446:7994/120|fe80::85d:e82c:9446:7998|1|\r\n|fe80::85d:e82c:9446:7994|fe80::85d:e82c:9446:7998/120|1|\r\n|fe80::85d:e82c:9446:7994/120|fe80::85d:e82c:9446:7998/120|1|\r\n|192.168.1.1|::ffff:c0a8:0101|1|\r\n|192.168.1.1/24|::ffff:c0a8:01ff|1|\r\n|::ffff:c0a8:0101|192.168.1.255/24|1|\r\n|::192.168.1.1/30|192.168.1.255/24|1|\r\n\r\n### IPv6/IPv4 comparison equality case- IP-prefix notation specified inside the IPv6/IPv4 strings and as additional argument of the `ipv6_is_match()` function\r\n\r\n```\r\ndatatable(ip1_string:string, ip2_string:string, prefix:long)\r\n[\r\n // IPv4 are compared as IPv6 addresses \r\n '192.168.1.1',    '192.168.1.0',   31, // 31 bit IP4-prefix is used for comparison\r\n '192.168.1.1/24', '192.168.1.255', 31, // 24 bit IP4-prefix is used for comparison\r\n '192.168.1.1',    '192.168.1.255', 24, // 24 bit IP4-prefix is used for comparison\r\n   // IPv6 cases\r\n 'fe80::85d:e82c:9446:7994', 'fe80::85d:e82c:9446:7995',     127, // 127 bit IP6-prefix is used for comparison\r\n 'fe80::85d:e82c:9446:7994/127', 'fe80::85d:e82c:9446:7998', 120, // 120 bit IP6-prefix is used for comparison\r\n 'fe80::85d:e82c:9446:7994/120', 'fe80::85d:e82c:9446:7998', 127, // 120 bit IP6-prefix is used for comparison\r\n // Mixed case of IPv4 and IPv6\r\n '192.168.1.1/24',   '::ffff:c0a8:01ff', 127, // 127 bit IP6-prefix is used for comparison\r\n '::ffff:c0a8:0101', '192.168.1.255',    120, // 120 bit IP6-prefix is used for comparison\r\n '::192.168.1.1/30', '192.168.1.255/24', 127, // 120 bit IP6-prefix is used for comparison\r\n]\r\n| extend result = ipv6_is_match(ip1_string, ip2_string, prefix)\r\n```\r\n\r\n|ip1_string|ip2_string|prefix|result|\r\n|---|---|---|---|\r\n|192.168.1.1|192.168.1.0|31|1|\r\n|192.168.1.1/24|192.168.1.255|31|1|\r\n|192.168.1.1|192.168.1.255|24|1|\r\n|fe80::85d:e82c:9446:7994|fe80::85d:e82c:9446:7995|127|1|\r\n|fe80::85d:e82c:9446:7994/127|fe80::85d:e82c:9446:7998|120|1|\r\n|fe80::85d:e82c:9446:7994/120|fe80::85d:e82c:9446:7998|127|1|\r\n|192.168.1.1/24|::ffff:c0a8:01ff|127|1|\r\n|::ffff:c0a8:0101|192.168.1.255|120|1|\r\n|::192.168.1.1/30|192.168.1.255/24|127|1|","https://docs.microsoft.com/en-us/azure/kusto/query/ipv6-is-matchfunction","ipv6-is-matchfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"isempty","Returns `true` if the argument is an empty string or is null.",'```\r\nisempty("") == true\r\n```\r\n\r\n## Syntax\r\n\r\n`isempty(`[*value*]`)`\r\n\r\n## Returns\r\n\r\nIndicates whether the argument is an empty string or isnull.\r\n\r\n|x|isempty(x)\r\n|---|---\r\n| "" | true\r\n|"x" | false\r\n|parsejson("")|true\r\n|parsejson("[]")|false\r\n|parsejson("{}")|false',"```\r\nT\r\n| where isempty(fieldName)\r\n| count\r\n```","https://docs.microsoft.com/en-us/azure/kusto/query/isemptyfunction","isemptyfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"isfinite","Returns whether input is a finite value (is neither infinite nor NaN).","## Syntax\r\n\r\n`isfinite(`*x*`)`\r\n\r\n## Arguments\r\n\r\n* *x*: A real number.\r\n\r\n## Returns\r\n\r\nA non-zero value (true) if x is finite; and zero (false) otherwise.\r\n\r\n## See also\r\n\r\n* For checking if value is null, see [isnull()](isnullfunction.md).\r\n* For checking if value is infinite, see [isinf()](isinffunction.md).\r\n* For checking if value is NaN (Not-a-Number), see [isnan()](isnanfunction.md).","```\r\nrange x from -1 to 1 step 1\r\n| extend y = 0.0\r\n| extend div = 1.0*x/y\r\n| extend isfinite=isfinite(div)\r\n```\r\n\r\n|x|y|div|isfinite|\r\n|---|---|---|---|\r\n|-1|0|-\u221e|0|\r\n|0|0|NaN|0|\r\n|1|0|\u221e|0|","https://docs.microsoft.com/en-us/azure/kusto/query/isfinitefunction","isfinitefunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"isinf","Returns whether input is an infinite (positive or negative) value.","## Syntax\r\n\r\n`isinf(`*x*`)`\r\n\r\n## Arguments\r\n\r\n* *x*: A real number.\r\n\r\n## Returns\r\n\r\nA non-zero value (true) if x is a positive or negative infinite; and zero (false) otherwise.\r\n\r\n## See also\r\n\r\n* For checking if value is null, see [isnull()](isnullfunction.md).\r\n* For checking if value is finite, see [isfinite()](isfinitefunction.md).\r\n* For checking if value is NaN (Not-a-Number), see [isnan()](isnanfunction.md).","```\r\nrange x from -1 to 1 step 1\r\n| extend y = 0.0\r\n| extend div = 1.0*x/y\r\n| extend isinf=isinf(div)\r\n```\r\n\r\n|x|y|div|isinf|\r\n|---|---|---|---|\r\n|-1|0|-\u221e|1|\r\n|0|0|NaN|0|\r\n|1|0|\u221e|1|","https://docs.microsoft.com/en-us/azure/kusto/query/isinffunction","isinffunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"isnan","Returns whether input is Not-a-Number (NaN) value.","## Syntax\r\n\r\n`isnan(`*x*`)`\r\n\r\n## Arguments\r\n\r\n* *x*: A real number.\r\n\r\n## Returns\r\n\r\nA non-zero value (true) if x is NaN; and zero (false) otherwise.\r\n\r\n## See also\r\n\r\n* For checking if value is null, see [isnull()](isnullfunction.md).\r\n* For checking if value is finite, see [isfinite()](isfinitefunction.md).\r\n* For checking if value is infinite, see [isinf()](isinffunction.md).","```\r\nrange x from -1 to 1 step 1\r\n| extend y = (-1*x) \r\n| extend div = 1.0*x/y\r\n| extend isnan=isnan(div)\r\n```\r\n\r\n|x|y|div|isnan|\r\n|---|---|---|---|\r\n|-1|1|-1|0|\r\n|0|0|NaN|1|\r\n|1|-1|-1|0|","https://docs.microsoft.com/en-us/azure/kusto/query/isnanfunction","isnanfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"isnotempty","Returns `true` if the argument isn't an empty string, and it isn't null.",'```\r\nisnotempty("") == false\r\n```\r\n\r\n## Syntax\r\n\r\n`isnotempty(`[*value*]`)`\r\n\r\n`notempty(`[*value*]`)` -- alias of `isnotempty`',"```\r\nT\r\n| where isnotempty(fieldName)\r\n| count\r\n```","https://docs.microsoft.com/en-us/azure/kusto/query/isnotemptyfunction","isnotemptyfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"isnotnull","Returns `true` if the argument is not null.","## Syntax\r\n\r\n`isnotnull(`[*value*]`)`\r\n\r\n`notnull(`[*value*]`)` - alias for `isnotnull`","```\r\nT | where isnotnull(PossiblyNull) | count\r\n```\r\n\r\nNotice that there are other ways of achieving this effect:\r\n\r\n```\r\nT | summarize count(PossiblyNull)\r\n```","https://docs.microsoft.com/en-us/azure/kusto/query/isnotnullfunction","isnotnullfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"isnull","Evaluates its sole argument and returns a `bool` value indicating if the argument evaluates to a null value.",'```\r\nisnull(parse_json("")) == true\r\n```\r\n\r\n## Syntax\r\n\r\n`isnull(`*Expr*`)`\r\n\r\n## Returns\r\n\r\nTrue or false, depending on whether or not the value is null.\r\n\r\n**Notes**\r\n\r\n* `string` values cannot be null. Use [isempty](./isemptyfunction.md)\r\n  to determine if a value of type `string` is empty or not.\r\n\r\n|x                |`isnull(x)`|\r\n|-----------------|-----------|\r\n|`""`             |`false`    |\r\n|`"x"`            |`false`    |\r\n|`parse_json("")`  |`true`     |\r\n|`parse_json("[]")`|`false`    |\r\n|`parse_json("{}")`|`false`    |',"```\r\nT | where isnull(PossiblyNull) | count\r\n```","https://docs.microsoft.com/en-us/azure/kusto/query/isnullfunction","isnullfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,"join","Merge the rows of two tables to form a new table by matching values of the specified columns from each table.","```\r\nTable1 | join (Table2) on CommonColumn, $left.Col1 == $right.Col2\r\n```\r\n\r\n## Syntax\r\n\r\n*LeftTable* `|` `join` [*JoinParameters*] `(` *RightTable* `)` `on` *Attributes*\r\n\r\n## Arguments\r\n\r\n* *LeftTable*: The **left** table or tabular expression, sometimes called **outer** table, whose rows are to be merged. Denoted as `$left`.\r\n* *RightTable*: The **right** table or tabular expression, sometimes called **inner** table, whose rows are to be merged. Denoted as `$right`.\r\n* *Attributes*: One or more comma-separated **rules** that describe how rows from\r\n  *LeftTable* are matched to rows from *RightTable*. Multiple rules are evaluated using the `and` logical operator.\r\n  A **rule** can be one of:\r\n  |Rule kind        |Syntax          |Predicate    |\r\n  |-----------------|--------------|-------------------------|\r\n  |Equality by name |*ColumnName*    |`where` *LeftTable*.*ColumnName* `==` *RightTable*.*ColumnName*|\r\n  |Equality by value|`$left.`*LeftColumn* `==` `$right.`*RightColumn*|`where` `$left.`*LeftColumn* `==` `$right.`*RightColumn*       |\r\n    > [!NOTE]\r\n    > For 'equality by value', the column names *must* be qualified with the applicable owner table denoted by `$left` and `$right` notations.\r\n* *JoinParameters*: Zero or more space-separated parameters in the form of\r\n  *Name* `=` *Value* that control the behavior of the row-match operation and execution plan. The following parameters are supported:\r\n\r\n    |Parameters name           |Values                                        |Description                                  |\r\n    |---------------|----------------------------------------------|---------------------------------------------|\r\n    |`kind`         |Join flavors|See [Join Flavors](#join-flavors)|                                             |\r\n    |`hint.remote`  |`auto`, `left`, `local`, `right`              |See [Cross-Cluster Join](joincrosscluster.md)|\r\n    |`hint.strategy`|Execution hints                               |See [Join hints](#join-hints)                |\r\n\r\n\r\n> [!WARNING]\r\n> If `kind` isn't specified, the default join flavor is `innerunique`. This is different than some other analytics products that have `inner` as the default flavor.  See [join-flavors](#join-flavors) to understand the differences and make sure  the query yields the intended results.\r\n\r\n## Returns\r\n\r\n**The output schema depends on the join flavor:**\r\n\r\n| Join flavor | Output schema |\r\n|---|---|\r\n|`kind=leftanti`, `kind=leftsemi`| The result table contains columns from the left side only.|\r\n| `kind=rightanti`, `kind=rightsemi` | The result table contains columns from the right side only.|\r\n|  `kind=innerunique`, `kind=inner`, `kind=leftouter`, `kind=rightouter`, `kind=fullouter` |  A column for every column in each of the two tables, including the matching keys. The columns of the right side will be automatically renamed if there are name clashes. |\r\n\r\n**Output records depend on the join flavor:**\r\n\r\n> [!NOTE]\r\n   > If there are several rows with the same values for those fields, you'll get rows for all the combinations.\r\n   > A match is a row selected from one table that has the same value for all the `on` fields as a row in the other table.\r\n\r\n| Join flavor | Output records |\r\n|---|---|\r\n|`kind=leftanti`, `kind=leftantisemi`| Returns all the records from the left side that don't have matches from the right|\r\n| `kind=rightanti`, `kind=rightantisemi`| Returns all the records from the right side that don't have matches from the left.|\r\n| `kind` unspecified, `kind=innerunique`| Only one row from the left side is matched for each value of the `on` key. The output contains a row for each match of this row with rows from the right.|\r\n| `kind=leftsemi`| Returns all the records from the left side that have matches from the right. |\r\n| `kind=rightsemi`| Returns all the records from the right side that have matches from the left. |\r\n|`kind=inner`| Contains a row in the output for every combination of matching rows from left and right. |\r\n| `kind=leftouter` (or `kind=rightouter` or `kind=fullouter`)| Contains a row for every row on the left and right, even if it has no match. The unmatched output cells contain nulls. |\r\n\r\n> [!TIP]\r\n> For best performance, if one table is always smaller than the other, use it as the left (piped) side of the join.","Get extended activities from a `login` that some entries mark as the start and end of an activity.\r\n\r\n```\r\nlet Events = MyLogTable | where type==\"Event\" ;\r\nEvents\r\n| where Name == \"Start\"\r\n| project Name, City, ActivityId, StartTime=timestamp\r\n| join (Events\r\n    | where Name == \"Stop\"\r\n        | project StopTime=timestamp, ActivityId)\r\n    on ActivityId\r\n| project City, ActivityId, StartTime, StopTime, Duration = StopTime - StartTime\r\n```\r\n\r\n```\r\nlet Events = MyLogTable | where type==\"Event\" ;\r\nEvents\r\n| where Name == \"Start\"\r\n| project Name, City, ActivityIdLeft = ActivityId, StartTime=timestamp\r\n| join (Events\r\n        | where Name == \"Stop\"\r\n        | project StopTime=timestamp, ActivityIdRight = ActivityId)\r\n    on $left.ActivityIdLeft == $right.ActivityIdRight\r\n| project City, ActivityId, StartTime, StopTime, Duration = StopTime - StartTime\r\n```\r\n\r\n## Join flavors\r\n\r\nThe exact flavor of the join operator is specified with the *kind* keyword. The following flavors of the join operator are supported:\r\n\r\n|Join kind/flavor|Description|\r\n|--|--|\r\n|[`innerunique`](#default-join-flavor) (or empty as default)|Inner join with left side deduplication|\r\n|[`inner`](#inner-join-flavor)|Standard inner join|\r\n|[`leftouter`](#left-outer-join-flavor)|Left outer join|\r\n|[`rightouter`](#right-outer-join-flavor)|Right outer join|\r\n|[`fullouter`](#full-outer-join-flavor)|Full outer join|\r\n|[`leftanti`](#left-anti-join-flavor), [`anti`](#left-anti-join-flavor), or [`leftantisemi`](#left-anti-join-flavor)|Left anti join|\r\n|[`rightanti`](#right-anti-join-flavor) or [`rightantisemi`](#right-anti-join-flavor)|Right anti join|\r\n|[`leftsemi`](#left-semi-join-flavor)|Left semi join|\r\n|[`rightsemi`](#right-semi-join-flavor)|Right semi join|\r\n\r\n### Default join flavor\r\n\r\nThe default join flavor is an inner join with left side deduplication. Default join implementation is useful in typical log/trace analysis scenarios where you want to correlate two events, each matching some filtering criterion, under the same correlation ID. You want to get back all appearances of the phenomenon, and ignore multiple appearances of the contributing trace records.\r\n\r\n``` \r\nX | join Y on Key\r\n \r\nX | join kind=innerunique Y on Key\r\n```\r\n\r\nThe following two sample tables are used to explain the operation of the join.\r\n\r\n**Table X**\r\n\r\n|Key |Value1\r\n|---|---\r\n|a |1\r\n|b |2\r\n|b |3\r\n|c |4\r\n\r\n**Table Y**\r\n\r\n|Key |Value2\r\n|---|---\r\n|b |10\r\n|c |20\r\n|c |30\r\n|d |40\r\n\r\nThe default join does an inner join after deduplicating the left side on the join key (deduplication keeps the first record).\r\n\r\nGiven this statement: `X | join Y on Key`\r\n\r\nthe effective left side of the join, table X after deduplication, would be:\r\n\r\n|Key |Value1\r\n|---|---\r\n|a |1\r\n|b |2\r\n|c |4\r\n\r\nand the result of the join would be:\r\n\r\n```\r\nlet X = datatable(Key:string, Value1:long)\r\n[\r\n    'a',1,\r\n    'b',2,\r\n    'b',3,\r\n    'c',4\r\n];\r\nlet Y = datatable(Key:string, Value2:long)\r\n[\r\n    'b',10,\r\n    'c',20,\r\n    'c',30,\r\n    'd',40\r\n];\r\nX | join Y on Key\r\n```\r\n\r\n|Key|Value1|Key1|Value2|\r\n|---|---|---|---|\r\n|b|2|b|10|\r\n|c|4|c|20|\r\n|c|4|c|30|\r\n\r\n> [!NOTE]\r\n> The keys 'a' and 'd' don't appear in the output, since there were no matching keys on both left and right sides.\r\n\r\n### Inner-join flavor\r\n\r\nThe inner-join function is like the standard inner-join from the SQL world. An output record is produced whenever a record on the left side has the same join key as the record on the right side.\r\n\r\n```\r\nlet X = datatable(Key:string, Value1:long)\r\n[\r\n    'a',1,\r\n    'b',2,\r\n    'b',3,\r\n    'c',4\r\n];\r\nlet Y = datatable(Key:string, Value2:long)\r\n[\r\n    'b',10,\r\n    'c',20,\r\n    'c',30,\r\n    'd',40\r\n];\r\nX | join kind=inner Y on Key\r\n```\r\n\r\n|Key|Value1|Key1|Value2|\r\n|---|---|---|---|\r\n|b|3|b|10|\r\n|b|2|b|10|\r\n|c|4|c|20|\r\n|c|4|c|30|\r\n\r\n> [!NOTE]\r\n> * (b,10) from the right side, was joined twice: with both (b,2) and (b,3) on the left.\r\n> * (c,4) on the left side, was joined twice: with both (c,20) and (c,30) on the right.\r\n\r\n### Innerunique-join flavor\r\n\r\nUse **innerunique-join flavor** to deduplicate keys from the left side. The result will be a row in the output from every combination of deduplicated left keys and right keys.\r\n\r\n> [!NOTE]\r\n> **innerunique flavor** may yield two possible outputs and both are correct.\r\n    In the first output, the join operator randomly selected the first key that appears in t1, with the value \"val1.1\" and matched it with t2 keys.\r\n    In the second output, the join operator randomly selected the second key that appears in t1, with the value \"val1.2\" and matched it with t2 keys.\r\n\r\n```\r\nlet t1 = datatable(key:long, value:string)  \r\n[\r\n1, \"val1.1\",  \r\n1, \"val1.2\"  \r\n];\r\nlet t2 = datatable(key:long, value:string)  \r\n[  \r\n1, \"val1.3\",\r\n1, \"val1.4\"  \r\n];\r\nt1\r\n| join kind = innerunique\r\n    t2\r\non key\r\n```\r\n\r\n|key|value|key1|value1|\r\n|---|---|---|---|\r\n|1|val1.1|1|val1.3|\r\n|1|val1.1|1|val1.4|\r\n\r\n```\r\nlet t1 = datatable(key:long, value:string)  \r\n[\r\n1, \"val1.1\",  \r\n1, \"val1.2\"  \r\n];\r\nlet t2 = datatable(key:long, value:string)  \r\n[  \r\n1, \"val1.3\", \r\n1, \"val1.4\"  \r\n];\r\nt1\r\n| join kind = innerunique\r\n    t2\r\non key\r\n```\r\n\r\n|key|value|key1|value1|\r\n|---|---|---|---|\r\n|1|val1.2|1|val1.3|\r\n|1|val1.2|1|val1.4|\r\n\r\n* Kusto is optimized to push filters that come after the `join`, towards the appropriate join side, left or right, when possible.\r\n\r\n* Sometimes, the flavor used is **innerunique** and the filter is propagated to the left side of the join. The flavor will be automatically propagated and the keys that apply to that filter will always appear in the output.\r\n    \r\n* Use the example above and add a filter `where value == \"val1.2\" `. It will always give the second result and will never give the first result for the datasets:\r\n\r\n\r\n\r\n```\r\nlet t1 = datatable(key:long, value:string)  \r\n[\r\n1, \"val1.1\",  \r\n1, \"val1.2\"  \r\n];\r\nlet t2 = datatable(key:long, value:string)  \r\n[  \r\n1, \"val1.3\", \r\n1, \"val1.4\"  \r\n];\r\nt1\r\n| join kind = innerunique\r\n    t2\r\non key\r\n| where value == \"val1.2\"\r\n```\r\n\r\n|key|value|key1|value1|\r\n|---|---|---|---|\r\n|1|val1.2|1|val1.3|\r\n|1|val1.2|1|val1.4|\r\n\r\n### Left outer-join flavor\r\n\r\nThe result of a left outer-join for tables X and Y always contains all records of the left table (X), even if the join condition doesn't find any matching record in the right table (Y).\r\n\r\n```\r\nlet X = datatable(Key:string, Value1:long)\r\n[\r\n    'a',1,\r\n    'b',2,\r\n    'b',3,\r\n    'c',4\r\n];\r\nlet Y = datatable(Key:string, Value2:long)\r\n[\r\n    'b',10,\r\n    'c',20,\r\n    'c',30,\r\n    'd',40\r\n];\r\nX | join kind=leftouter Y on Key\r\n```\r\n\r\n|Key|Value1|Key1|Value2|\r\n|---|---|---|---|\r\n|b|3|b|10|\r\n|b|2|b|10|\r\n|c|4|c|20|\r\n|c|4|c|30|\r\n|a|1|||\r\n\r\n### Right outer-join flavor\r\n\r\nThe right outer-join flavor resembles the left outer-join, but the treatment of the tables is reversed.\r\n\r\n```\r\nlet X = datatable(Key:string, Value1:long)\r\n[\r\n    'a',1,\r\n    'b',2,\r\n    'b',3,\r\n    'c',4\r\n];\r\nlet Y = datatable(Key:string, Value2:long)\r\n[\r\n    'b',10,\r\n    'c',20,\r\n    'c',30,\r\n    'd',40\r\n];\r\nX | join kind=rightouter Y on Key\r\n```\r\n\r\n|Key|Value1|Key1|Value2|\r\n|---|---|---|---|\r\n|b|3|b|10|\r\n|b|2|b|10|\r\n|c|4|c|20|\r\n|c|4|c|30|\r\n|||d|40|\r\n\r\n### Full outer-join flavor\r\n\r\nA full outer-join combines the effect of applying both left and right outer-joins. Whenever records in the joined tables don't match, the result set will have `null` values for every column of the table that lacks a matching row. For those records that do match, a single row will be produced in the result set, containing fields populated from both tables.\r\n\r\n```\r\nlet X = datatable(Key:string, Value1:long)\r\n[\r\n    'a',1,\r\n    'b',2,\r\n    'b',3,\r\n    'c',4\r\n];\r\nlet Y = datatable(Key:string, Value2:long)\r\n[\r\n    'b',10,\r\n    'c',20,\r\n    'c',30,\r\n    'd',40\r\n];\r\nX | join kind=fullouter Y on Key\r\n```\r\n\r\n|Key|Value1|Key1|Value2|\r\n|---|---|---|---|\r\n|b|3|b|10|\r\n|b|2|b|10|\r\n|c|4|c|20|\r\n|c|4|c|30|\r\n|||d|40|\r\n|a|1|||\r\n\r\n### Left anti-join flavor\r\n\r\nLeft anti-join returns all records from the left side that don't match any record from the right side.\r\n\r\n```\r\nlet X = datatable(Key:string, Value1:long)\r\n[\r\n    'a',1,\r\n    'b',2,\r\n    'b',3,\r\n    'c',4\r\n];\r\nlet Y = datatable(Key:string, Value2:long)\r\n[\r\n    'b',10,\r\n    'c',20,\r\n    'c',30,\r\n    'd',40\r\n];\r\nX | join kind=leftanti Y on Key\r\n```\r\n\r\n|Key|Value1|\r\n|---|---|\r\n|a|1|\r\n\r\n> [!NOTE]\r\n> Anti-join models the \"NOT IN\" query.\r\n\r\n### Right anti-join flavor\r\n\r\nRight anti-join returns all records from the right side that don't match any record from the left side.\r\n\r\n```\r\nlet X = datatable(Key:string, Value1:long)\r\n[\r\n    'a',1,\r\n    'b',2,\r\n    'b',3,\r\n    'c',4\r\n];\r\nlet Y = datatable(Key:string, Value2:long)\r\n[\r\n    'b',10,\r\n    'c',20,\r\n    'c',30,\r\n    'd',40\r\n];\r\nX | join kind=rightanti Y on Key\r\n```\r\n\r\n|Key|Value2|\r\n|---|---|\r\n|d|40|\r\n\r\n> [!NOTE]\r\n> Anti-join models the \"NOT IN\" query.\r\n\r\n### Left semi-join flavor\r\n\r\nLeft semi-join returns all records from the left side that match a record from the right side. Only columns from the left side are returned.\r\n\r\n```\r\nlet X = datatable(Key:string, Value1:long)\r\n[\r\n    'a',1,\r\n    'b',2,\r\n    'b',3,\r\n    'c',4\r\n];\r\nlet Y = datatable(Key:string, Value2:long)\r\n[\r\n    'b',10,\r\n    'c',20,\r\n    'c',30,\r\n    'd',40\r\n];\r\nX | join kind=leftsemi Y on Key\r\n```\r\n\r\n|Key|Value1|\r\n|---|---|\r\n|b|3|\r\n|b|2|\r\n|c|4|\r\n\r\n### Right semi-join flavor\r\n\r\nRight semi-join returns all records from the right side that match a record from the left side. Only columns from the right side are returned.\r\n\r\n```\r\nlet X = datatable(Key:string, Value1:long)\r\n[\r\n    'a',1,\r\n    'b',2,\r\n    'b',3,\r\n    'c',4\r\n];\r\nlet Y = datatable(Key:string, Value2:long)\r\n[\r\n    'b',10,\r\n    'c',20,\r\n    'c',30,\r\n    'd',40\r\n];\r\nX | join kind=rightsemi Y on Key\r\n```\r\n\r\n|Key|Value2|\r\n|---|---|\r\n|b|10|\r\n|c|20|\r\n|c|30|\r\n\r\n### Cross-join\r\n\r\nKusto doesn't natively provide a cross-join flavor. You can't mark the operator with the `kind=cross`.\r\nTo simulate, use a dummy key.\r\n\r\n`X | extend dummy=1 | join kind=inner (Y | extend dummy=1) on dummy`\r\n\r\n## Join hints\r\n\r\nThe `join` operator supports a number of hints that control the way a query runs.\r\nThese hints don't change the semantic of `join`, but may affect its performance.\r\n\r\nJoin hints are explained in the following articles:\r\n\r\n* `hint.shufflekey=<key>` and `hint.strategy=shuffle` - [shuffle query](shufflequery.md)\r\n* `hint.strategy=broadcast` - [broadcast join](broadcastjoin.md)\r\n* `hint.remote=<strategy>` - [cross-cluster join](joincrosscluster.md)","https://docs.microsoft.com/en-us/azure/kusto/query/joinoperator","joinoperator.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,"limit","Return up to the specified number of rows.","```\r\nT | limit 5\r\n```\r\n\r\n**Alias**\r\n\r\n[take operator](takeoperator.md)","","https://docs.microsoft.com/en-us/azure/kusto/query/limitoperator","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"log","`log()` returns the natural logarithm function.","## Syntax\r\n\r\n`log(`*x*`)`\r\n\r\n## Arguments\r\n\r\n* *x*: A real number > 0.\r\n\r\n## Returns\r\n\r\n* The natural logarithm is the base-e logarithm: the inverse of the natural exponential function (exp).\r\n* `null` if the argument is negative or null or can't be converted to a `real` value. \r\n\r\n## See also\r\n\r\n* For common (base-10) logarithms, see [log10()](log10-function.md).\r\n* For base-2 logarithms, see [log2()](log2-function.md)","","https://docs.microsoft.com/en-us/azure/kusto/query/log-function","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"log10","`log10()` returns the common (base-10) logarithm function.","## Syntax\r\n\r\n`log10(`*x*`)`\r\n\r\n## Arguments\r\n\r\n* *x*: A real number > 0.\r\n\r\n## Returns\r\n\r\n* The common logarithm is the base-10 logarithm: the inverse of the exponential function (exp) with base 10.\r\n* `null` if the argument is negative or null or can't be converted to a `real` value. \r\n\r\n## See also\r\n\r\n* For natural (base-e) logarithms, see [log()](log-function.md).\r\n* For base-2 logarithms, see [log2()](log2-function.md)","","https://docs.microsoft.com/en-us/azure/kusto/query/log10-function","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"log2","`log2()` returns the base-2 logarithm function.","## Syntax\r\n\r\n`log2(`*x*`)`\r\n\r\n## Arguments\r\n\r\n* *x*: A real number > 0.\r\n\r\n## Returns\r\n\r\n* The logarithm is the base-2 logarithm: the inverse of the exponential function (exp) with base 2.\r\n* `null` if the argument is negative or null or can't be converted to a `real` value. \r\n\r\n## See also\r\n\r\n* For natural (base-e) logarithms, see [log()](log-function.md).\r\n* For common (base-10) logarithms, see [log10()](log10-function.md).","","https://docs.microsoft.com/en-us/azure/kusto/query/log2-function","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"loggamma","Computes log of absolute value of the [gamma function](https://en.wikipedia.org/wiki/Gamma_function)","## Syntax\r\n\r\n`loggamma(`*x*`)`\r\n\r\n## Arguments\r\n\r\n* *x*: Parameter for the gamma function\r\n\r\n## Returns\r\n\r\n* Returns the natural logarithm of the absolute value of the gamma function of x.\r\n* For computing gamma function, see [gamma()](gammafunction.md).","","https://docs.microsoft.com/en-us/azure/kusto/query/loggammafunction","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,"lookup","The `lookup` operator extends the columns of a fact table with values\r\nlooked-up in a dimension table.","```\r\nFactTable | lookup kind=leftouter (DimensionTable) on CommonColumn, $left.Col1 == $right.Col2\r\n```\r\n\r\nHere, the result is a table that extends the `FactTable` (`$left`) with data from `DimensionTable` (referenced by `$right`)\r\n by performing a lookup of each pair (`CommonColumn`,`Col`) from the former table\r\nwith each pair (`CommonColumn1`,`Col2`) in the latter table. \r\nFor the differences between fact and dimension tables, see [fact and dimension tables](../concepts/fact-and-dimension-tables.md). \r\n\r\nThe `lookup` operator performs an operation similar to the [join operator](joinoperator.md)\r\nwith the following differences:\r\n\r\n* The result does not repeat columns from the `$right` table that are the basis\r\n  for the join operation.\r\n* Only two kinds of lookup are supported, `leftouter` and `inner`,\r\n  with `leftouter` being the default.\r\n* In terms of performance, the system by default assumes that the `$left` table\r\n  is the larger (facts) table, and the `$right` table is the smaller (dimensions)\r\n  table. This is exactly opposite to the assumption used by the `join` operator.\r\n* The `lookup` operator automatically broadcasts the `$right` table to the `$left`\r\n  table (essentially, behaves as if `hint.broadcast` was specified). Note that\r\n  this limits the size of the `$right` table.\r\n\r\n## Syntax\r\n\r\n*LeftTable* `|` `lookup` [`kind` `=` (`leftouter`|`inner`)] `(` *RightTable* `)` `on` *Attributes*\r\n\r\n## Arguments\r\n\r\n* *LeftTable*: The table or tabular expression that is the basis for the lookup.\r\n  Denoted as `$left`.\r\n* *RightTable*: The table or tabular expression that is used to \"populate\"\r\n  new columns in the fact table. Denoted as `$right`.\r\n* *Attributes*: A comma-delimited list of one or more rules that describe how rows from\r\n  *LeftTable* are matched to rows from *RightTable*. Multiple rules are evaluated using the `and` logical operator.\r\n  A rule can be one of:\r\n  |Rule kind        |Syntax                                          |Predicate                                                      |\r\n  |-----------------|------------------------------------------------|---------------------------------------------------------------|\r\n  |Equality by name |*ColumnName*                                    |`where` *LeftTable*.*ColumnName* `==` *RightTable*.*ColumnName*|\r\n  |Equality by value|`$left.`*LeftColumn* `==` `$right.`*RightColumn*|`where` `$left.`*LeftColumn* `==` `$right.`*RightColumn        |\r\n  > [!Note] \r\n  > In case of 'equality by value', the column names *must* be qualified with the applicable owner table denoted by `$left` and `$right` notations.\r\n* `kind`: An optional instruction on how to treat rows in *LeftTable* that\r\n  have no match in *RightTable*. By default, `leftouter` is used, which means\r\n  all those rows will appear in the output with null values used for the\r\n  missing values of *RightTable* columns added by the operator. If `inner`\r\n  is used, such rows are omitted from the output. (Other kinds\r\n  of join are not supported by the `looku`p operator.)\r\n  \r\n\r\n## Returns\r\n\r\nA table with:\r\n\r\n* A column for every column in each of the two tables, including the matching keys.\r\n  The columns of the right side will be automatically renamed if there are name conflicts.\r\n* A row for every match between the input tables. A match is a row selected from one table that has the same value for all the `on` fields as a row in the other table. \r\n* The Attributes (lookup keys) will appear only once in the output table.\r\n * `kind` unspecified, `kind=leftouter`\r\n     In addition to the inner matches, there's a row for every row on the left (and/or right), even if it has no match. In that case, the unmatched output cells contain nulls.\r\n * `kind=inner`\r\n     There's a row in the output for every combination of matching rows from left and right.",'```\r\nlet FactTable=datatable(Row:string,Personal:string,Family:string) [\r\n  "1", "Bill",   "Gates",\r\n  "2", "Bill",   "Clinton",\r\n  "3", "Bill",   "Clinton",\r\n  "4", "Steve",  "Ballmer",\r\n  "5", "Tim",    "Cook"\r\n];\r\nlet DimTable=datatable(Personal:string,Family:string,Alias:string) [\r\n  "Bill",  "Gates",   "billg",\r\n  "Bill",  "Clinton", "billc",\r\n  "Steve", "Ballmer", "steveb",\r\n  "Tim",   "Cook",    "timc"\r\n];\r\nFactTable\r\n| lookup kind=leftouter DimTable on Personal, Family\r\n```\r\n\r\nRow     | Personal  | Family   | Alias\r\n--------|-----------|----------|--------\r\n1       | Bill      | Gates    | billg\r\n2       | Bill      | Clinton  | billc\r\n3       | Bill      | Clinton  | billc\r\n4       | Steve     | Ballmer  | steveb\r\n5       | Tim       | Cook     | timc',"https://docs.microsoft.com/en-us/azure/kusto/query/lookupoperator","lookupoperator.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"make_bag","Returns a `dynamic` (JSON) property-bag (dictionary) of all the values of *`Expr`* in the group.","* Can be used only in context of aggregation inside [summarize](summarizeoperator.md)\r\n\r\n## Syntax\r\n\r\n`summarize` `make_bag(`*`Expr`* [`,` *MaxSize*]`)`\r\n\r\n## Arguments\r\n\r\n* *Expr*: Expression of type `dynamic` that is used for aggregation calculations.\r\n* *MaxSize* is an optional integer limit on the maximum number of elements returned. The default is *1048576*. MaxSize value can't exceed *1048576*.\r\n\r\n**Note**\r\n\r\nA legacy and obsolete variant of function `make_dictionary()`, has a default limit of *MaxSize* = 128.\r\n\r\n## Returns\r\n\r\nReturns a `dynamic` (JSON) property-bag (dictionary) of all the values of *`Expr`* in the group, which are property-bags.\r\nNon-dictionary values will be skipped.\r\nIf a key appears in more than one row, an arbitrary value, out of the possible values for this key, will be selected.\r\n\r\n## See also\r\n\r\nUse the [bag_unpack()](bag-unpackplugin.md) plugin for expanding dynamic JSON objects into columns that use property bag keys.",'```\r\nlet T = datatable(prop:string, value:string)\r\n[\r\n    "prop01", "val_a",\r\n    "prop02", "val_b",\r\n    "prop03", "val_c",\r\n];\r\nT\r\n| extend p = pack(prop, value)\r\n| summarize dict=make_bag(p)\r\n\r\n```\r\n\r\n|dict|\r\n|----|\r\n|{ "prop01": "val_a", "prop02": "val_b", "prop03": "val_c" } |\r\n\r\nUse the [bag_unpack()](bag-unpackplugin.md) plugin for transforming the bag keys in the make_bag() output into columns. \r\n\r\n```\r\nlet T = datatable(prop:string, value:string)\r\n[\r\n    "prop01", "val_a",\r\n    "prop02", "val_b",\r\n    "prop03", "val_c",\r\n];\r\nT\r\n| extend p = pack(prop, value)\r\n| summarize bag=make_bag(p)\r\n| evaluate bag_unpack(bag) \r\n\r\n```\r\n\r\n|prop01|prop02|prop03|\r\n|---|---|---|\r\n|val_a|val_b|val_c|',"https://docs.microsoft.com/en-us/azure/kusto/query/make-bag-aggfunction","make-bag-aggfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"make_bag_if","Returns a `dynamic` (JSON) property-bag (dictionary) of all the values of *'Expr'* in the group, for which *Predicate* evaluates to `true`.","> [!NOTE]\r\n> Can only be used in context of aggregation inside [summarize](summarizeoperator.md).\r\n\r\n## Syntax\r\n\r\n`summarize` `make_bag_if(`*Expr*, *Predicate* [`,` *MaxSize*]`)`\r\n\r\n## Arguments\r\n\r\n* *Expr*: Expression of type `dynamic` that will be used for aggregation calculation.\r\n* *Predicate*: Predicate that has to evaluate to `true`, in order for *'Expr'* to be added to the result.\r\n* *MaxSize*: An optional integer limit on the maximum number of elements returned (default is *1048576*). MaxSize value can't exceed 1048576.\r\n\r\n## Returns\r\n\r\nReturns a `dynamic` (JSON) property-bag (dictionary) of all the values of *'Expr'* in the group that are property-bags (dictionaries), for which *Predicate* evaluates to `true`.\r\nNon-dictionary values will be skipped.\r\nIf a key appears in more than one row, an arbitrary value, out of the possible values for this key, will be selected.\r\n\r\n> [!NOTE]\r\n> The [`make_bag`](./make-bag-aggfunction.md) function, is similar to make_bag_if() without predicate expression.",'```\r\nlet T = datatable(prop:string, value:string, predicate:bool)\r\n[\r\n    "prop01", "val_a", true,\r\n    "prop02", "val_b", false,\r\n    "prop03", "val_c", true\r\n];\r\nT\r\n| extend p = pack(prop, value)\r\n| summarize dict=make_bag_if(p, predicate)\r\n\r\n```\r\n\r\n|dict|\r\n|----|\r\n|{ "prop01": "val_a", "prop03": "val_c" } |\r\n\r\nUse [bag_unpack()](bag-unpackplugin.md) plugin for transforming the bag keys in the make_bag_if() output into columns. \r\n\r\n```\r\nlet T = datatable(prop:string, value:string, predicate:bool)\r\n[\r\n    "prop01", "val_a", true,\r\n    "prop02", "val_b", false,\r\n    "prop03", "val_c", true\r\n];\r\nT\r\n| extend p = pack(prop, value)\r\n| summarize bag=make_bag_if(p, predicate)\r\n| evaluate bag_unpack(bag)\r\n\r\n```\r\n\r\n|prop01|prop03|\r\n|---|---|\r\n|val_a|val_c|',"https://docs.microsoft.com/en-us/azure/kusto/query/make-bag-if-aggfunction","make-bag-if-aggfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"make_datetime","Creates a [datetime](./scalar-data-types/datetime.md) scalar value from the specified date and time.","```\r\nmake_datetime(2017,10,01,12,10) == datetime(2017-10-01 12:10)\r\n```\r\n\r\n## Syntax\r\n\r\n`make_datetime(`*year*,*month*,*day*`)`\r\n\r\n`make_datetime(`*year*,*month*,*day*,*hour*,*minute*`)`\r\n\r\n`make_datetime(`*year*,*month*,*day*,*hour*,*minute*,*second*`)`\r\n\r\n## Arguments\r\n\r\n* *year*: year (an integer value, from 0 to 9999)\r\n* *month*: month (an integer value, from 1 to 12)\r\n* *day*: day (an integer value, from 1 to 28-31)\r\n* *hour*: hour (an integer value, from 0 to 23)\r\n* *minute*: minute (an integer value, from 0 to 59)\r\n* *second*: second (a real value, from 0 to 59.9999999)\r\n\r\n## Returns\r\n\r\nIf creation is successful, result will be a [datetime](./scalar-data-types/datetime.md) value, otherwise, result will be null.","```\r\nprint year_month_day = make_datetime(2017,10,01)\r\n```\r\n\r\n|year_month_day|\r\n|---|\r\n|2017-10-01 00:00:00.0000000|\r\n\r\n```\r\nprint year_month_day_hour_minute = make_datetime(2017,10,01,12,10)\r\n```\r\n\r\n|year_month_day_hour_minute|\r\n|---|\r\n|2017-10-01 12:10:00.0000000|\r\n\r\n```\r\nprint year_month_day_hour_minute_second = make_datetime(2017,10,01,12,11,0.1234567)\r\n```\r\n\r\n|year_month_day_hour_minute_second|\r\n|---|\r\n|2017-10-01 12:11:00.1234567|","https://docs.microsoft.com/en-us/azure/kusto/query/make-datetimefunction","make-datetimefunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"make_list","Returns a `dynamic` (JSON) array of all the values of *Expr* in the group.","* Can be used only in context of aggregation inside [summarize](summarizeoperator.md)\r\n\r\n## Syntax\r\n\r\n`summarize` `make_list(`*Expr* [`,` *MaxSize*]`)`\r\n\r\n## Arguments\r\n\r\n* *Expr*: Expression that will be used for aggregation calculation.\r\n* *MaxSize* is an optional integer limit on the maximum number of elements returned (default is *1048576*). MaxSize value cannot exceed 1048576.\r\n\r\n> [!NOTE]\r\n> A legacy and obsolete variant of this function: `makelist()` has a default limit of *MaxSize* = 128.\r\n\r\n## Returns\r\n\r\nReturns a `dynamic` (JSON) array of all the values of *Expr* in the group.\r\nIf the input to the `summarize` operator is not sorted, the order of elements in the resulting array is undefined.\r\nIf the input to the `summarize` operator is sorted, the order of elements in the resulting array tracks that of the input.\r\n\r\n> [!TIP]\r\n> Use the [`mv-apply`](./mv-applyoperator.md) operator to create an ordered list by some key. See examples [here](./mv-applyoperator.md#using-the-mv-apply-operator-to-sort-the-output-of-make_list-aggregate-by-some-key).",'### One column\r\n\r\nThe simplest example is to make a list out of a single column:\r\n\r\n```\r\nlet shapes = datatable (name: string, sideCount: int)\r\n[\r\n    "triangle", 3,\r\n    "square", 4,\r\n    "rectangle", 4,\r\n    "pentagon", 5,\r\n    "hexagon", 6,\r\n    "heptagon", 7,\r\n    "octogon", 8,\r\n    "nonagon", 9,\r\n    "decagon", 10\r\n];\r\nshapes\r\n| summarize mylist = make_list(name)\r\n```\r\n\r\n|mylist|\r\n|---|\r\n|["triangle","square","rectangle","pentagon","hexagon","heptagon","octogon","nonagon","decagon"]|\r\n\r\n### Using the \'by\' clause\r\n\r\nIn the following query, you group using the `by` clause:\r\n\r\n```\r\nlet shapes = datatable (name: string, sideCount: int)\r\n[\r\n    "triangle", 3,\r\n    "square", 4,\r\n    "rectangle", 4,\r\n    "pentagon", 5,\r\n    "hexagon", 6,\r\n    "heptagon", 7,\r\n    "octogon", 8,\r\n    "nonagon", 9,\r\n    "decagon", 10\r\n];\r\nshapes\r\n| summarize mylist = make_list(name) by isEvenSideCount = sideCount % 2 == 0\r\n```\r\n\r\n|mylist|isEvenSideCount|\r\n|---|---|\r\n|false|["triangle","pentagon","heptagon","nonagon"]|\r\n|true|["square","rectangle","hexagon","octogon","decagon"]|\r\n\r\n### Packing a dynamic object\r\n\r\nYou can [pack](./packfunction.md) a dynamic object in a column before making a list out of it, as seen in the following query:\r\n\r\n```\r\nlet shapes = datatable (name: string, sideCount: int)\r\n[\r\n    "triangle", 3,\r\n    "square", 4,\r\n    "rectangle", 4,\r\n    "pentagon", 5,\r\n    "hexagon", 6,\r\n    "heptagon", 7,\r\n    "octogon", 8,\r\n    "nonagon", 9,\r\n    "decagon", 10\r\n];\r\nshapes\r\n| extend d = pack("name", name, "sideCount", sideCount)\r\n| summarize mylist = make_list(d) by isEvenSideCount = sideCount % 2 == 0\r\n```\r\n\r\n|mylist|isEvenSideCount|\r\n|---|---|\r\n|false|[{"name":"triangle","sideCount":3},{"name":"pentagon","sideCount":5},{"name":"heptagon","sideCount":7},{"name":"nonagon","sideCount":9}]|\r\n|true|[{"name":"square","sideCount":4},{"name":"rectangle","sideCount":4},{"name":"hexagon","sideCount":6},{"name":"octogon","sideCount":8},{"name":"decagon","sideCount":10}]|\r\n\r\n## See also\r\n\r\n[`make_list_if`](./makelistif-aggfunction.md) operator is similar to `make_list`, except it also accepts a predicate.',"https://docs.microsoft.com/en-us/azure/kusto/query/makelist-aggfunction","makelist-aggfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"make_list_if","Returns a `dynamic` (JSON) array of all the values of *Expr* in the group, for which *Predicate* evaluates to `true`.","* Can be used only in context of aggregation inside [summarize](summarizeoperator.md)\r\n\r\n## Syntax\r\n\r\n`summarize` `make_list_if(`*Expr*, *Predicate* [`,` *MaxSize*]`)`\r\n\r\n## Arguments\r\n\r\n* *Expr*: Expression that will be used for aggregation calculation.\r\n* *Predicate*: Predicate that has to evaluate to `true`, in order for *Expr* to be added to the result.\r\n* *MaxSize* is an optional integer limit on the maximum number of elements returned (default is *1048576*). MaxSize value cannot exceed 1048576.\r\n\r\n## Returns\r\n\r\nReturns a `dynamic` (JSON) array of all the values of *Expr* in the group, for which *Predicate* evaluates to `true`.\r\nIf the input to the `summarize` operator is not sorted, the order of elements in the resulting array is undefined.\r\nIf the input to the `summarize` operator is sorted, the order of elements in the resulting array tracks that of the input.",'```\r\nlet T = datatable(name:string, day_of_birth:long)\r\n[\r\n   "John", 9,\r\n   "Paul", 18,\r\n   "George", 25,\r\n   "Ringo", 7\r\n];\r\nT\r\n| summarize make_list_if(name, strlen(name) > 4)\r\n```\r\n\r\n|list_name|\r\n|----|\r\n|["George", "Ringo"]|\r\n\r\n## See also\r\n\r\n[`make_list`](./makelist-aggfunction.md) function, which does the same, without predicate expression.',"https://docs.microsoft.com/en-us/azure/kusto/query/makelistif-aggfunction","makelistif-aggfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"make_list_with_nulls","Returns a `dynamic` (JSON) array of all the values of *Expr* in the group, including null values.","* Can be used only in context of aggregation inside [summarize](summarizeoperator.md)\r\n\r\n## Syntax\r\n\r\n`summarize` `make_list_with_nulls(` *Expr* `)`\r\n\r\n## Arguments\r\n\r\n* *Expr*: Expression that will be used for aggregation calculation.\r\n\r\n## Returns\r\n\r\nReturns a `dynamic` (JSON) array of all the values of *Expr* in the group, including null values.\r\nIf the input to the `summarize` operator is not sorted, the order of elements in the resulting array is undefined.\r\nIf the input to the `summarize` operator is sorted, the order of elements in the resulting array tracks that of the input.\r\n\r\n> [!TIP]\r\n> Use the [`mv-apply`](./mv-applyoperator.md) operator to create an ordered list by some key. See examples [here](./mv-applyoperator.md#using-the-mv-apply-operator-to-sort-the-output-of-make_list-aggregate-by-some-key).","","https://docs.microsoft.com/en-us/azure/kusto/query/make-list-with-nulls-aggfunction","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"make_set","Returns a `dynamic` (JSON) array of the set of distinct values that *Expr* takes in the group.","* Can be used only in context of aggregation inside [summarize](summarizeoperator.md)\r\n\r\n## Syntax\r\n\r\n`summarize` `make_set(`*Expr* [`,` *MaxSize*]`)`\r\n\r\n## Arguments\r\n\r\n* *Expr*: Expression for aggregation calculation.\r\n* *MaxSize* is an optional integer limit on the maximum number of elements returned (default is *1048576*). MaxSize value cannot exceed 1048576.\r\n\r\n> [!NOTE]\r\n> A legacy and obsolete variant of this function: `makeset()` has a default limit of *MaxSize* = 128.\r\n\r\n## Returns\r\n\r\nReturns a `dynamic` (JSON) array of the set of distinct values that *Expr* takes in the group.\r\nThe array's sort order is undefined.\r\n\r\n> [!TIP]\r\n> To only count distinct values, use [dcount()](dcount-aggfunction.md)","```\r\nPageViewLog \r\n| summarize countries=make_set(country) by continent\r\n```\r\n\r\n![Table showing Kusto Query summarize countries by continent in Azure Data Explorer](images/makeset-aggfunction/makeset.png)\r\n\r\n## See also\r\n\r\n* Use [`mv-expand`](./mvexpandoperator.md) operator for the opposite function.\r\n* [`make_set_if`](./makesetif-aggfunction.md) operator is similar to `make_set`, except it also accepts a predicate.","https://docs.microsoft.com/en-us/azure/kusto/query/makeset-aggfunction","makeset-aggfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"make_set_if","Returns a `dynamic` (JSON) array of the set of distinct values that *Expr* takes in the group, for which *Predicate* evaluates to `true`.","* Can be used only in context of aggregation inside [summarize](summarizeoperator.md)\r\n\r\n## Syntax\r\n\r\n`summarize` `make_set_if(`*Expr*, *Predicate* [`,` *MaxSize*]`)`\r\n\r\n## Arguments\r\n\r\n* *Expr*: Expression that will be used for aggregation calculation.\r\n* *Predicate*: Predicate that has to evaluate to `true` for *Expr* to be added to the result.\r\n* *MaxSize* is an optional integer limit on the maximum number of elements returned (default is *1048576*). MaxSize value cannot exceed 1048576.\r\n\r\n## Returns\r\n\r\nReturns a `dynamic` (JSON) array of the set of distinct values that *Expr* takes in the group, for which *Predicate* evaluates to `true`.\r\nThe array's sort order is undefined.\r\n\r\n> [!TIP]\r\n> To only count the distinct values, use [dcountif()](dcountif-aggfunction.md)\r\n\r\n## See also\r\n\r\n[`make_set`](./makeset-aggfunction.md) function, which does the same, without predicate expression.",'```\r\nlet T = datatable(name:string, day_of_birth:long)\r\n[\r\n   "John", 9,\r\n   "Paul", 18,\r\n   "George", 25,\r\n   "Ringo", 7\r\n];\r\nT\r\n| summarize make_set_if(name, strlen(name) > 4)\r\n```\r\n\r\n|set_name|\r\n|----|\r\n|["George", "Ringo"]|',"https://docs.microsoft.com/en-us/azure/kusto/query/makesetif-aggfunction","makesetif-aggfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"make_string","Returns the string generated by the Unicode characters.","## Syntax\r\n\r\n`make_string (`*Arg1*[, *ArgN*]... `)`\r\n\r\n## Arguments\r\n\r\n* *Arg1* ... *ArgN*: Expressions that are integers (int or long) or a dynamic value holding an array of integral numbers.\r\n* This function receives up to 64 arguments.\r\n\r\n## Returns\r\n\r\nReturns the string made of the Unicode characters whose codepoint value is provided by the arguments to this function. The input must consist of valid Unicode codepoints.\r\nIf any argument isn't mapped to a Unicode character, the function returns `null`.","```\r\nprint str = make_string(75, 117, 115, 116, 111)\r\n```\r\n\r\n|str|\r\n|---|\r\n|Kusto|\r\n\r\n```\r\nprint str = make_string(dynamic([75, 117, 115, 116, 111]))\r\n```\r\n\r\n|str|\r\n|---|\r\n|Kusto|\r\n\r\n```\r\nprint str = make_string(dynamic([75, 117, 115]), 116, 111)\r\n```\r\n\r\n|str|\r\n|---|\r\n|Kusto|\r\n\r\n```\r\nprint str = make_string(75, 10, 117, 10, 115, 10, 116, 10, 111)\r\n```\r\n\r\n|str|\r\n|---|\r\n|K<br>u<br>s<br>t<br>o|","https://docs.microsoft.com/en-us/azure/kusto/query/makestringfunction","makestringfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"make_timespan","Creates a [timespan](./scalar-data-types/timespan.md) scalar value from the specified time period.","```\r\nmake_timespan(1,12,30,55.123) == time(1.12:30:55.123)\r\n```\r\n\r\n## Syntax\r\n\r\n`make_timespan(`*hour*,*minute*`)`\r\n\r\n`make_timespan(`*hour*,*minute*,*second*`)`\r\n\r\n`make_timespan(`*day*,*hour*,*minute*,*second*`)`\r\n\r\n## Arguments\r\n\r\n* *day*: day (a positive integer value)\r\n* *hour*: hour (an integer value, from 0 to 23)\r\n* *minute*: minute (an integer value, from 0 to 59)\r\n* *second*: second (a real value, from 0 to 59.9999999)\r\n\r\n## Returns\r\n\r\nIf creation is successful, result will be a [timespan](./scalar-data-types/timespan.md) value, otherwise, result will be null.","```\r\nprint ['timespan'] = make_timespan(1,12,30,55.123)\r\n\r\n```\r\n\r\n|timespan|\r\n|---|\r\n|1.12:30:55.1230000|","https://docs.microsoft.com/en-us/azure/kusto/query/make-timespanfunction","make-timespanfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,"make-series","Create series of specified aggregated values along a specified axis.","```\r\nT | make-series sum(amount) default=0, avg(price) default=0 on timestamp from datetime(2016-01-01) to datetime(2016-01-10) step 1d by fruit, supplier\r\n```\r\n\r\n## Syntax\r\n\r\n*T* `| make-series` [*MakeSeriesParamters*]\r\n      [*Column* `=`] *Aggregation* [`default` `=` *DefaultValue*] [`,` ...]\r\n    `on` *AxisColumn* [`from` *start*] [`to` *end*] `step` *step* \r\n    [`by`\r\n      [*Column* `=`] *GroupExpression* [`,` ...]]\r\n\r\n## Arguments\r\n\r\n* *Column:* Optional name for a result column. Defaults to a name derived from the expression.\r\n* *DefaultValue:* Default value that will be used instead of absent values. If there is no row with specific values of *AxisColumn* and *GroupExpression*, then in the results the corresponding element of the array will be assigned a *DefaultValue*. If *DefaultValue* is omitted, then 0 is assumed. \r\n* *Aggregation:* A call to an [aggregation function](make-seriesoperator.md#list-of-aggregation-functions) such as `count()` or `avg()`, with column names as arguments. See the [list of aggregation functions](make-seriesoperator.md#list-of-aggregation-functions). Only aggregation functions that return numeric results can be used with the `make-series` operator.\r\n* *AxisColumn:* A column on which the series will be ordered. It could be considered as timeline, but besides `datetime` any numeric types are accepted.\r\n* *start*: (optional) The low bound value of the *AxisColumn* for each of the series to be built. *start*, *end*, and *step* are used to build an array of *AxisColumn* values within a given range and using specified *step*. All *Aggregation* values are ordered respectively to this array. This *AxisColumn* array is also the last output column in the output that has the same name as *AxisColumn*. If a *start* value is not specified, the start is the first bin (step) which has data in each series.\r\n* *end*: (optional) The high bound (non-inclusive) value of the *AxisColumn*. The last index of the time series is smaller than this value (and will be *start* plus integer multiple of *step* that is smaller than *end*). If *end* value is not provided, it will be the upper bound of the last bin (step) which has data per each series.\r\n* *step*: The difference between two consecutive elements of the *AxisColumn* array (that is, the bin size).\r\n* *GroupExpression:* An expression over the columns that provides a set of distinct values. Typically it's a column name that already provides a restricted set of values. \r\n* *MakeSeriesParameters*: Zero or more (space-separated) parameters in the form of *Name* `=` *Value* \r\n\tthat control the behavior. The following parameters are supported: \r\n  \r\n  |Name           |Values                                        |Description                                                                                        |\r\n  |---------------|-------------------------------------|------------------------------------------------------------------------------|\r\n  |`kind`          |`nonempty`\t\t\t\t\t\t\t\t |Produces default result when the input of make-series operator is empty|                                \r\n\r\n## Returns\r\n\r\nThe input rows are arranged into groups having the same values of the `by` expressions and the `bin_at(`*AxisColumn*`, `*step*`, `*start*`)` expression. Then the specified aggregation functions are computed over each group, producing a row for each group. The result contains the `by` columns, *AxisColumn* column and also at least one column for each computed aggregate. (Aggregation that multiple columns or non-numeric results are not supported.)\r\n\r\nThis intermediate result has as many rows as there are distinct combinations of `by` and `bin_at(`*AxisColumn*`, `*step*`, `*start*`)` values.\r\n\r\nFinally the rows from the intermediate result arranged into groups having the same values of the `by` expressions and all aggregated values are arranged into arrays (values of `dynamic` type). For each aggregation, there is one column containing its array with the same name. The last column in the output of the range function with all *AxisColumn* values. Its value is repeated for all rows. \r\n\r\nDue to the fill missing bins by default value, the resulting pivot table has the same number of bins (that is, aggregated values) for all series  \r\n\r\n**Note**\r\n\r\nAlthough you can provide arbitrary expressions for both the aggregation and grouping expressions, it's more efficient to use simple column names.\r\n\r\n**Alternate Syntax**\r\n\r\n*T* `| make-series`\r\n      [*Column* `=`] *Aggregation* [`default` `=` *DefaultValue*] [`,` ...]\r\n    `on` *AxisColumn* `in` `range(`*start*`,` *stop*`,` *step*`)`\r\n    [`by`\r\n      [*Column* `=`] *GroupExpression* [`,` ...]]\r\n\r\nThe generated series from the alternate syntax differs from the main syntax in two aspects:\r\n\r\n* The *stop* value is inclusive.\r\n* Binning the index axis is generated with bin() and not bin_at(), which means that *start* may not be included in the generated series.\r\n\r\nIt is recommended to use the main syntax of make-series and not the alternate syntax.\r\n\r\n**Distribution and Shuffle**\r\n\r\n`make-series` supports `summarize` [shufflekey hints](shufflequery.md) using the syntax hint.shufflekey.\r\n\r\n## List of aggregation functions\r\n\r\n|Function|Description|\r\n|--------|-----------|\r\n|[any()](any-aggfunction.md)|Returns a random non-empty value for the group|\r\n|[avg()](avg-aggfunction.md)|Returns an average value across the group|\r\n|[avgif()](avgif-aggfunction.md)|Returns an average with the predicate of the group|\r\n|[count()](count-aggfunction.md)|Returns a count of the group|\r\n|[countif()](countif-aggfunction.md)|Returns a count with the predicate of the group|\r\n|[dcount()](dcount-aggfunction.md)|Returns an  approximate distinct count of the group elements|\r\n|[dcountif()](dcountif-aggfunction.md)|Returns an approximate distinct count with the predicate of the group|\r\n|[max()](max-aggfunction.md)|Returns the maximum value across the group|\r\n|[maxif()](maxif-aggfunction.md)|Returns the maximum value with the predicate of the group|\r\n|[min()](min-aggfunction.md)|Returns the minimum value across the group|\r\n|[minif()](minif-aggfunction.md)|Returns the minimum value with the predicate of the group|\r\n|[stdev()](stdev-aggfunction.md)|Returns the standard deviation across the group|\r\n|[sum()](sum-aggfunction.md)|Returns the sum of the elements within the group|\r\n|[sumif()](sumif-aggfunction.md)|Returns the sum of the elements with the predicate of the group|\r\n|[variance()](variance-aggfunction.md)|Returns the variance across the group|\r\n\r\n## List of series analysis functions\r\n\r\n|Function|Description|\r\n|--------|-----------|\r\n|[series_fir()](series-firfunction.md)|Applies [Finite Impulse Response](https://en.wikipedia.org/wiki/Finite_impulse_response) filter|\r\n|[series_iir()](series-iirfunction.md)|Applies [Infinite Impulse Response](https://en.wikipedia.org/wiki/Infinite_impulse_response) filter|\r\n|[series_fit_line()](series-fit-linefunction.md)|Finds a straight line that is the best approximation of the input|\r\n|[series_fit_line_dynamic()](series-fit-line-dynamicfunction.md)|Finds a line that is the best approximation of the input, returning dynamic object|\r\n|[series_fit_2lines()](series-fit-2linesfunction.md)|Finds two lines that are the best approximation of the input|\r\n|[series_fit_2lines_dynamic()](series-fit-2lines-dynamicfunction.md)|Finds two lines that are the best approximation of the input, returning dynamic object|\r\n|[series_outliers()](series-outliersfunction.md)|Scores anomaly points in a series|\r\n|[series_periods_detect()](series-periods-detectfunction.md)|Finds the most significant periods that exist in a time series|\r\n|[series_periods_validate()](series-periods-validatefunction.md)|Checks whether a time series contains periodic patterns of given lengths|\r\n|[series_stats_dynamic()](series-stats-dynamicfunction.md)|Return multiple columns with the common statistics (min/max/variance/stdev/average)|\r\n|[series_stats()](series-statsfunction.md)|Generates a dynamic value with the common statistics (min/max/variance/stdev/average)|\r\n\r\n## List of series interpolation functions\r\n\r\n|Function|Description|\r\n|--------|-----------|\r\n|[series_fill_backward()](series-fill-backwardfunction.md)|Performs backward fill interpolation of missing values in a series|\r\n|[series_fill_const()](series-fill-constfunction.md)|Replaces missing values in a series with a specified constant value|\r\n|[series_fill_forward()](series-fill-forwardfunction.md)|Performs forward fill interpolation of missing values in a series|\r\n|[series_fill_linear()](series-fill-linearfunction.md)|Performs linear interpolation of missing values in a series|\r\n\r\n* Note: Interpolation functions by default assume `null` as a missing value. Therefore specify `default=`*double*(`null`) in `make-series` if you intend to use interpolation functions for the series.",'A table that shows arrays of the numbers and average prices of each fruit from each supplier ordered by the timestamp with specified range. There\'s a row in the output for each distinct combination of fruit and supplier. The output columns show the fruit, supplier, and arrays of: count, average, and the whole timeline (from 2016-01-01 until 2016-01-10). All arrays are sorted by the respective timestamp and all gaps are filled with default values (0 in this example). All other input columns are ignored.\r\n\r\n```\r\nT | make-series PriceAvg=avg(Price) default=0\r\non Purchase from datetime(2016-09-10) to datetime(2016-09-13) step 1d by Supplier, Fruit\r\n```\r\n\r\n![Makeseries](images/make-seriesoperator/makeseries.png)\r\n\r\n```\r\nlet data=datatable(timestamp:datetime, metric: real)\r\n[\r\n  datetime(2016-12-31T06:00), 50,\r\n  datetime(2017-01-01), 4,\r\n  datetime(2017-01-02), 3,\r\n  datetime(2017-01-03), 4,\r\n  datetime(2017-01-03T03:00), 6,\r\n  datetime(2017-01-05), 8,\r\n  datetime(2017-01-05T13:40), 13,\r\n  datetime(2017-01-06), 4,\r\n  datetime(2017-01-07), 3,\r\n  datetime(2017-01-08), 8,\r\n  datetime(2017-01-08T21:00), 8,\r\n  datetime(2017-01-09), 2,\r\n  datetime(2017-01-09T12:00), 11,\r\n  datetime(2017-01-10T05:00), 5,\r\n];\r\nlet interval = 1d;\r\nlet stime = datetime(2017-01-01);\r\nlet etime = datetime(2017-01-10);\r\ndata\r\n| make-series avg(metric) on timestamp from stime to etime step interval \r\n```\r\n\r\n|avg_metric|timestamp|\r\n|---|---|\r\n|[ 4.0, 3.0, 5.0, 0.0, 10.5, 4.0, 3.0, 8.0, 6.5 ]|[ "2017-01-01T00:00:00.0000000Z", "2017-01-02T00:00:00.0000000Z", "2017-01-03T00:00:00.0000000Z", "2017-01-04T00:00:00.0000000Z", "2017-01-05T00:00:00.0000000Z", "2017-01-06T00:00:00.0000000Z", "2017-01-07T00:00:00.0000000Z", "2017-01-08T00:00:00.0000000Z", "2017-01-09T00:00:00.0000000Z" ]|  \r\n\r\nWhen the input to `make-series` is empty, the default behavior of `make-series` produces an empty result as well.\r\n\r\n```\r\nlet data=datatable(timestamp:datetime, metric: real)\r\n[\r\n  datetime(2016-12-31T06:00), 50,\r\n  datetime(2017-01-01), 4,\r\n  datetime(2017-01-02), 3,\r\n  datetime(2017-01-03), 4,\r\n  datetime(2017-01-03T03:00), 6,\r\n  datetime(2017-01-05), 8,\r\n  datetime(2017-01-05T13:40), 13,\r\n  datetime(2017-01-06), 4,\r\n  datetime(2017-01-07), 3,\r\n  datetime(2017-01-08), 8,\r\n  datetime(2017-01-08T21:00), 8,\r\n  datetime(2017-01-09), 2,\r\n  datetime(2017-01-09T12:00), 11,\r\n  datetime(2017-01-10T05:00), 5,\r\n];\r\nlet interval = 1d;\r\nlet stime = datetime(2017-01-01);\r\nlet etime = datetime(2017-01-10);\r\ndata\r\n| limit 0\r\n| make-series avg(metric) default=1.0 on timestamp from stime to etime step interval \r\n| count \r\n```\r\n\r\n|Count|\r\n|---|\r\n|0|\r\n\r\nUsing `kind=nonempty` in `make-series` will produce a non-empty result of the default values:\r\n\r\n```\r\nlet data=datatable(timestamp:datetime, metric: real)\r\n[\r\n  datetime(2016-12-31T06:00), 50,\r\n  datetime(2017-01-01), 4,\r\n  datetime(2017-01-02), 3,\r\n  datetime(2017-01-03), 4,\r\n  datetime(2017-01-03T03:00), 6,\r\n  datetime(2017-01-05), 8,\r\n  datetime(2017-01-05T13:40), 13,\r\n  datetime(2017-01-06), 4,\r\n  datetime(2017-01-07), 3,\r\n  datetime(2017-01-08), 8,\r\n  datetime(2017-01-08T21:00), 8,\r\n  datetime(2017-01-09), 2,\r\n  datetime(2017-01-09T12:00), 11,\r\n  datetime(2017-01-10T05:00), 5,\r\n];\r\nlet interval = 1d;\r\nlet stime = datetime(2017-01-01);\r\nlet etime = datetime(2017-01-10);\r\ndata\r\n| limit 0\r\n| make-series kind=nonempty avg(metric) default=1.0 on timestamp from stime to etime step interval \r\n```\r\n\r\n|avg_metric|timestamp|\r\n|---|---|\r\n|[<br>  1.0,<br>  1.0,<br>  1.0,<br>  1.0,<br>  1.0,<br>  1.0,<br>  1.0,<br>  1.0,<br>  1.0<br>]|[<br>  "2017-01-01T00:00:00.0000000Z",<br>  "2017-01-02T00:00:00.0000000Z",<br>  "2017-01-03T00:00:00.0000000Z",<br>  "2017-01-04T00:00:00.0000000Z",<br>  "2017-01-05T00:00:00.0000000Z",<br>  "2017-01-06T00:00:00.0000000Z",<br>  "2017-01-07T00:00:00.0000000Z",<br>  "2017-01-08T00:00:00.0000000Z",<br>  "2017-01-09T00:00:00.0000000Z"<br>]|',"https://docs.microsoft.com/en-us/azure/kusto/query/make-seriesoperator","make-seriesoperator.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"materialize","Allows caching a subquery result during the time of query execution in a way that other subqueries can reference the partial result.",'## Syntax\r\n\r\n`materialize(`*expression*`)`\r\n\r\n## Arguments\r\n\r\n* *expression*: Tabular expression to be evaluated and cached during query execution.\r\n\r\n> [!NOTE]\r\n> Materialize has a cache size limit of **5 GB**. This limit is per cluster node and is mutual for all queries running concurrently. If a query uses `materialize()` and the cache can\'t hold any more data, the query will abort with an error.\r\n\r\n>[!TIP]\r\n>\r\n>* Push all possible operators that reduce the materialized data set and keep the semantics of the query. For example, use filters, or project only required columns.\r\n>* Use materialize with join or union when their operands have mutual subqueries that can be executed once. For example, join/union fork legs. See [example of using join operator](#examples-of-query-performance-improvement).\r\n>* Materialize can only be used in let statements if you give the cached result a name. See [example of using let statements](#examples-of-using-materialize)).\r\n\r\n## Examples of query performance improvement\r\n\r\nThe following example shows how `materialize()` can be used to improve performance of the query.\r\nThe expression `_detailed_data` is defined using `materialize()` function and therefore is calculated only once.\r\n\r\n```\r\nlet _detailed_data = materialize(StormEvents | summarize Events=count() by State, EventType);\r\n_detailed_data\r\n| summarize TotalStateEvents=sum(Events) by State\r\n| join (_detailed_data) on State\r\n| extend EventPercentage = Events*100.0 / TotalStateEvents\r\n| project State, EventType, EventPercentage, Events\r\n| top 10 by EventPercentage\r\n```\r\n\r\n|State|EventType|EventPercentage|Events|\r\n|---|---|---|---|\r\n|HAWAII WATERS|Waterspout|100|2|\r\n|LAKE ONTARIO|Marine Thunderstorm Wind|100|8|\r\n|GULF OF ALASKA|Waterspout|100|4|\r\n|ATLANTIC NORTH|Marine Thunderstorm Wind|95.2127659574468|179|\r\n|LAKE ERIE|Marine Thunderstorm Wind|92.5925925925926|25|\r\n|E PACIFIC|Waterspout|90|9|\r\n|LAKE MICHIGAN|Marine Thunderstorm Wind|85.1648351648352|155|\r\n|LAKE HURON|Marine Thunderstorm Wind|79.3650793650794|50|\r\n|GULF OF MEXICO|Marine Thunderstorm Wind|71.7504332755633|414|\r\n|HAWAII|High Surf|70.0218818380744|320|\r\n\r\nThe following example generates a set of random numbers and calculates: \r\n\r\n* how many distinct values in the set (`Dcount`)\r\n* the top three values in the set \r\n* the sum of all these values in the set \r\n \r\n\r\nThis operation can be done using [batches](batches.md) and materialize:\r\n\r\n```\r\nlet randomSet = \r\n    materialize(\r\n        range x from 1 to 3000000 step 1\r\n        | project value = rand(10000000));\r\nrandomSet | summarize Dcount=dcount(value);\r\nrandomSet | top 3 by value;\r\nrandomSet | summarize Sum=sum(value)\r\n```\r\n\r\nResult set 1:  \r\n\r\n|Dcount|\r\n|---|\r\n|2578351|\r\n\r\nResult set 2: \r\n\r\n|value|\r\n|---|\r\n|9999998|\r\n|9999998|\r\n|9999997|\r\n\r\nResult set 3: \r\n\r\n|Sum|\r\n|---|\r\n|15002960543563|\r\n\r\n## Examples of using materialize()\r\n\r\n> [!TIP]\r\n> Materialize your column at ingestion time if most of your queries extract fields from dynamic objects across millions of rows.\r\n\r\nTo use the `let` statement with a value that you use more than once, use the [materialize() function](./materializefunction.md). Try to push all possible operators that will reduce the materialized data set and still keep the semantics of the query. For example, use filters, or project only required columns.\r\n\r\n```\r\n    let materializedData = materialize(Table\r\n    | where Timestamp > ago(1d));\r\n    union (materializedData\r\n    | where Text !has "somestring"\r\n    | summarize dcount(Resource1)), (materializedData\r\n    | where Text !has "somestring"\r\n    | summarize dcount(Resource2))\r\n```\r\n\r\nThe filter on `Text` is mutual and can be pushed to the materialize expression.\r\nThe query only needs columns `Timestamp`, `Text`, `Resource1`, and `Resource2`. Project these columns inside the materialized expression.\r\n\r\n```\r\n    let materializedData = materialize(Table\r\n    | where Timestamp > ago(1d)\r\n    | where Text !has "somestring"\r\n    | project Timestamp, Resource1, Resource2, Text);\r\n    union (materializedData\r\n    | summarize dcount(Resource1)), (materializedData\r\n    | summarize dcount(Resource2))\r\n```\r\n\r\nIf the filters aren\'t identical, as in the following query:  \r\n\r\n```\r\n    let materializedData = materialize(Table\r\n    | where Timestamp > ago(1d));\r\n    union (materializedData\r\n    | where Text has "String1"\r\n    | summarize dcount(Resource1)), (materializedData\r\n    | where Text has "String2"\r\n    | summarize dcount(Resource2))\r\n ```\r\n\r\nWhen the combined filter reduces the materialized result drastically, combine both filters on the materialized result by a logical `or` expression as in the query below. However, keep the filters in each union leg to preserve the semantics of the query.\r\n\r\n```\r\n    let materializedData = materialize(Table\r\n    | where Timestamp > ago(1d)\r\n    | where Text has "String1" or Text has "String2"\r\n    | project Timestamp, Resource1, Resource2, Text);\r\n    union (materializedData\r\n    | where Text has "String1"\r\n    | summarize dcount(Resource1)), (materializedData\r\n    | where Text has "String2"\r\n    | summarize dcount(Resource2))\r\n```',"","https://docs.microsoft.com/en-us/azure/kusto/query/materializefunction","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"materialized_view","References the materialized part of a [materialized view](../management/materialized-views/materialized-view-overview.md).","The `materialized_view()` function supports a way of querying the *materialized* part only of the view, while specifying the max latency the user is willing to tolerate. This option isn't guaranteed to return the most up-to-date records, but should always be more performant than querying the entire view. This function is useful for scenarios in which you're willing to sacrifice some freshness for performance, for example in telemetry dashboards.\r\n\r\n<!--- csl --->\r\n\r\n```\r\nmaterialized_view('ViewName')\r\n```\r\n\r\n## Syntax\r\n\r\n`materialized_view(`*ViewName*`,` [*max_age*]`)`\r\n\r\n## Arguments\r\n\r\n* *ViewName*: The name of the `materialized view`.\r\n* *max_age*: Optional. If not provided, only the *materialized* part of the view is returned. If provided, function will return the \r\n_materialized_ part of the view if last materialization time is greater than [@now -  max_age]. Otherwise, the entire view is returned (identical \r\nto querying *ViewName* directly.",'Query the *materialized* part of the view only, independent on when it was last materialized.\r\n\r\n```\r\nmaterialized_view("ViewName")\r\n```\r\n\r\nQuery the *materialized* part only if it was materialized in the last 10 minutes. If the materialized part is older than 10 minutes, return the full view. This option is expected to be less performant than querying the materialized part.\r\n\r\n```\r\nmaterialized_view("ViewName", 10m)\r\n```\r\n\r\n## Notes\r\n\r\n* Once a view is created, it can be queried just as any other table in the database, including participate in cross-cluster / cross-database queries.\r\n* Materialized views aren\'t included in wildcard unions or searches.\r\n* Syntax for querying the view is the view name (like a table reference).\r\n* Querying the materialized view will always return the most up-to-date results, based on all records ingested to the source table. The query combines the materialized part of the view with all unmaterialized records in the source table. For more information, see [behind the scenes](../management/materialized-views/materialized-view-overview.md#how-materialized-views-work) for details.',"https://docs.microsoft.com/en-us/azure/kusto/query/materialized-view-function","materialized-view-function.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"max","Returns the maximum value across the group.","* Can be used only in context of aggregation inside [summarize](summarizeoperator.md)\r\n\r\n## Syntax\r\n\r\n`summarize` `max(`*Expr*`)`\r\n\r\n## Arguments\r\n\r\n* *Expr*: Expression that will be used for aggregation calculation. \r\n\r\n## Returns\r\n\r\nThe maximum value of *Expr* across the group.\r\n\r\n> [!TIP]\r\n> This gives you the min or max on its own - for example, the highest or lowest price.\r\n> But if you want other columns in the row - for example, the name of the supplier with the lowest\r\n> price - use [arg_max](arg-max-aggfunction.md) or [arg_min](arg-min-aggfunction.md).","","https://docs.microsoft.com/en-us/azure/kusto/query/max-aggfunction","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"max_of","Returns the maximum value of several evaluated numeric expressions.","```\r\nmax_of(10, 1, -3, 17) == 17\r\n```\r\n\r\n## Syntax\r\n\r\n`max_of` `(`*expr_1*`,` *expr_2* ...`)`\r\n\r\n## Arguments\r\n\r\n* *expr_i*: A scalar expression, to be evaluated.\r\n\r\n- All arguments must be of the same type.\r\n- Maximum of 64 arguments is supported.\r\n\r\n## Returns\r\n\r\nThe maximum value of all argument expressions.","```\r\nprint result = max_of(10, 1, -3, 17) \r\n```\r\n\r\n|result|\r\n|---|\r\n|17|","https://docs.microsoft.com/en-us/azure/kusto/query/max-offunction","max-offunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"maxif","Returns the maximum value across the group for which *Predicate* evaluates to `true`.","* Can be used only in context of aggregation inside [summarize](summarizeoperator.md)\r\n\r\nSee also - [max()](max-aggfunction.md) function, which returns the maximum value across the group without predicate expression.\r\n\r\n## Syntax\r\n\r\n`summarize` `maxif(`*Expr*`,`*Predicate*`)`\r\n\r\n## Arguments\r\n\r\n* *Expr*: Expression that will be used for aggregation calculation. \r\n* *Predicate*: predicate that if true, the *Expr* calculated value will be checked for maximum.\r\n\r\n## Returns\r\n\r\nThe maximum value of *Expr* across the group for which *Predicate* evaluates to `true`.","```\r\nrange x from 1 to 100 step 1\r\n| summarize maxif(x, x < 50)\r\n```\r\n\r\n|maxif_x|\r\n|---|\r\n|49|","https://docs.microsoft.com/en-us/azure/kusto/query/maxif-aggfunction","maxif-aggfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"min","Returns the minimum value across the group.","* Can be used only in context of aggregation inside [summarize](summarizeoperator.md)\r\n\r\n## Syntax\r\n\r\n`summarize` `min(`*Expr*`)`\r\n\r\n## Arguments\r\n\r\n* *Expr*: Expression that will be used for aggregation calculation. \r\n\r\n## Returns\r\n\r\nThe minimum value of *Expr* across the group.\r\n\r\n> [!TIP]\r\n> This gives you the min or max on its own - for example, the highest or lowest price. \r\n> But if you want other columns in the row - for example, the name of the supplier with the lowest \r\n> price - use [arg_max](arg-max-aggfunction.md) or [arg_min](arg-min-aggfunction.md).","","https://docs.microsoft.com/en-us/azure/kusto/query/min-aggfunction","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"min_of","Returns the minimum value of several evaluated numeric expressions.","```\r\nmin_of(10, 1, -3, 17) == -3\r\n```\r\n\r\n## Syntax\r\n\r\n`min_of` `(`*expr_1*`,` *expr_2* ...`)`\r\n\r\n## Arguments\r\n\r\n* *expr_i*: A scalar expression, to be evaluated.\r\n\r\n- All arguments must be of the same type.\r\n- Maximum of 64 arguments is supported.\r\n\r\n## Returns\r\n\r\nThe minimum value of all argument expressions.","```\r\nprint result=min_of(10, 1, -3, 17) \r\n```\r\n\r\n|result|\r\n|---|\r\n|-3|","https://docs.microsoft.com/en-us/azure/kusto/query/min-offunction","min-offunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"minif","Returns the minimum value across the group for which *Predicate* evaluates to `true`.","* Can be used only in context of aggregation inside [summarize](summarizeoperator.md)\r\n\r\nSee also - [min()](min-aggfunction.md) function, which returns the minimum value across the group without predicate expression.\r\n\r\n## Syntax\r\n\r\n`summarize` `minif(`*Expr*`,`*Predicate*`)`\r\n\r\n## Arguments\r\n\r\n* *Expr*: Expression that will be used for aggregation calculation.\r\n* *Predicate*: predicate that if true, the *Expr* calculated value will be checked for minimum.\r\n\r\n## Returns\r\n\r\nThe minimum value of *Expr* across the group for which *Predicate* evaluates to `true`.","```\r\nrange x from 1 to 100 step 1\r\n| summarize minif(x, x > 50)\r\n```\r\n\r\n|minif_x|\r\n|---|\r\n|51|","https://docs.microsoft.com/en-us/azure/kusto/query/minif-aggfunction","minif-aggfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"monthofyear","Returns the integer number represents the month number of the given year.",'Another alias: getmonth()\r\n\r\n```\r\nmonthofyear(datetime("2015-12-14"))\r\n```\r\n\r\n## Syntax\r\n\r\n`monthofyear(`*a_date*`)`\r\n\r\n## Arguments\r\n\r\n* `a_date`: A `datetime`.\r\n\r\n## Returns\r\n\r\n`month number` of the given year.',"","https://docs.microsoft.com/en-us/azure/kusto/query/monthofyearfunction","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,"mv-apply","Applies a subquery to each record, and returns the union of the results of\r\nall subqueries.","For example, assume a table `T` has a column `Metric` of type `dynamic`\r\nwhose values are arrays of `real` numbers. The following query will locate the\r\ntwo biggest values in each `Metric` value, and return the records corresponding\r\nto these values.\r\n\r\n```\r\nT | mv-apply Metric to typeof(real) on \r\n(\r\n   top 2 by Metric desc\r\n)\r\n```\r\n\r\nThe `mv-apply` operator has the following\r\nprocessing steps:\r\n\r\n1. Uses the [`mv-expand`](./mvexpandoperator.md) operator to expand each record\r\n   in the input into subtables.\r\n1. Applies the subquery for each of the subtables.\r\n1. Adds zero or more columns to the resulting subtable. These columns contain the values of the source columns that aren't expanded, and are repeated where needed.\r\n1. Returns the union of the results.\r\n\r\nThe `mv-apply` operator gets the following inputs:\r\n\r\n1. One or more expressions that evaluate into dynamic arrays to expand.\r\n   The number of records in each expanded subtable is the maximum length of\r\n   each of those dynamic arrays. Null values are added where multiple expressions are specified and the corresponding arrays have different lengths.\r\n1. Optionally, the names to assign the values of the expressions after expansion.\r\n   These names become the columns names in the subtables.\r\n   If not specified, the original name of the column is used when the expression is a column reference. A random name is used otherwise. \r\n   > [!NOTE]\r\n   > It is recommended to use the default column names.\r\n1. The data types of the elements of those dynamic arrays, after expansion.\r\n   These become the column types of the columns in the subtables.\r\n   If not specified, `dynamic` is used.\r\n1. Optionally, the name of a column to add to the subtables that specifies the\r\n   0-based index of the element in the array that resulted in the subtable record.\r\n1. Optionally, the maximum number of array elements to expand.\r\n\r\nThe `mv-apply` operator can be thought of as a generalization of the\r\n[`mv-expand`](./mvexpandoperator.md) operator (in fact, the latter can be implemented\r\nby the former, if the subquery includes only projections.)\r\n\r\n## Syntax\r\n\r\n*T* `|` `mv-apply` [*ItemIndex*] *ColumnsToExpand* [*RowLimit*] `on` `(` *SubQuery* `)`\r\n\r\nWhere *ItemIndex* has the syntax:\r\n\r\n`with_itemindex` `=` *IndexColumnName*\r\n\r\n*ColumnsToExpand* is a comma-separated list of one or more elements of the form:\r\n\r\n[*Name* `=`] *ArrayExpression* [`to` `typeof` `(`*Typename*`)`]\r\n\r\n*RowLimit* is simply:\r\n\r\n`limit` *RowLimit*\r\n\r\nand *SubQuery* has the same syntax of any query statement.\r\n\r\n## Arguments\r\n\r\n* *ItemIndex*: If used, indicates the name of a column of type `long` that is appended to the input as part of the array-expansion phase and indicates the 0-based array index of the\r\n  expanded value.\r\n* *Name*: If used, the name to assign the array-expanded values of each\r\n  array-expanded expression.\r\n  If not specified, the name of the column will be used if available.\r\n  A random name is generated if *ArrayExpression* is not a simple column name.\r\n* *ArrayExpression*: An expression of type `dynamic` whose values will be array-expanded.\r\n  If the expression is the name of a column in the input, the input column is\r\n  removed from the input and a new column of the same name (or *ColumnName* if\r\n  specified) appears in the output.\r\n* *Typename*: If used, the name of the type that the individual elements of the\r\n  `dynamic` array *ArrayExpression* take. Elements that do not conform to this\r\n  type will be replaced by a null value.\r\n  (If unspecified, `dynamic` is used by default.)\r\n* *RowLimit*: If used, a limit on the number of records to generate from each\r\n  record of the input.\r\n  (If unspecified, 2147483647 is used.)\r\n* *SubQuery*: A tabular query expression with an implicit tabular source that gets\r\n  applied to each array-expanded subtable.\r\n\r\n**Notes**\r\n\r\n* Unlike the [`mv-expand`](./mvexpandoperator.md) operator, the `mv-apply` operator\r\n  supports array expansion only. There's no support for expanding property bags.",'## Getting the largest element from the array\r\n\r\n```\r\nlet _data =\r\nrange x from 1 to 8 step 1\r\n| summarize l=make_list(x) by xMod2 = x % 2;\r\n_data\r\n| mv-apply element=l to typeof(long) on \r\n(\r\n   top 1 by element\r\n)\r\n```\r\n\r\n|`xMod2`|l           |element|\r\n|-----|------------|-------|\r\n|1    |[1, 3, 5, 7]|7      |\r\n|0    |[2, 4, 6, 8]|8      |\r\n\r\n## Calculating the sum of the largest two elements in an array\r\n\r\n```\r\nlet _data =\r\nrange x from 1 to 8 step 1\r\n| summarize l=make_list(x) by xMod2 = x % 2;\r\n_data\r\n| mv-apply l to typeof(long) on\r\n(\r\n   top 2 by l\r\n   | summarize SumOfTop2=sum(l)\r\n)\r\n```\r\n\r\n|`xMod2`|l        |SumOfTop2|\r\n|-----|---------|---------|\r\n|1    |[1,3,5,7]|12       |\r\n|0    |[2,4,6,8]|14       |\r\n\r\n## Using `with_itemindex` for working with a subset of the array\r\n\r\n```\r\nlet _data =\r\nrange x from 1 to 10 step 1\r\n| summarize l=make_list(x) by xMod2 = x % 2;\r\n_data\r\n| mv-apply with_itemindex=index element=l to typeof(long) on \r\n(\r\n   // here you have \'index\' column\r\n   where index >= 3\r\n)\r\n| project index, element\r\n```\r\n\r\n|index|element|\r\n|---|---|\r\n|3|7|\r\n|4|9|\r\n|3|8|\r\n|4|10|\r\n\r\n## Using the `mv-apply` operator to sort the output of `make_list` aggregate by some key\r\n\r\n```\r\ndatatable(command:string, command_time:datetime, user_id:string)\r\n[\r\n\t\'chmod\',\t\tdatetime(2019-07-15),\t"user1",\r\n\t\'ls\',\t\t\tdatetime(2019-07-02),\t"user1",\r\n\t\'dir\',\t\t\tdatetime(2019-07-22),\t"user1",\r\n\t\'mkdir\',\t\tdatetime(2019-07-14),\t"user1",\r\n\t\'rm\',\t\t\tdatetime(2019-07-27),\t"user1",\r\n\t\'pwd\',\t\t\tdatetime(2019-07-25),\t"user1",\r\n\t\'rm\',\t\t\tdatetime(2019-07-23),\t"user2",\r\n\t\'pwd\',\t\t\tdatetime(2019-07-25),\t"user2",\r\n]\r\n| summarize commands_details = make_list(pack(\'command\', command, \'command_time\', command_time)) by user_id\r\n| mv-apply command_details = commands_details on\r\n(\r\n    order by todatetime(command_details[\'command_time\']) asc\r\n    | summarize make_list(tostring(command_details[\'command\']))\r\n)\r\n| project-away commands_details\r\n```\r\n\r\n|`user_id`|`list_command_details_command`|\r\n|---|---|\r\n|user1|[<br>  "ls",<br>  "mkdir",<br>  "chmod",<br>  "dir",<br>  "pwd",<br>  "rm"<br>]|\r\n|user2|[<br>  "rm",<br>  "pwd"<br>]|\r\n\r\n## See also\r\n\r\n* [mv-expand](./mvexpandoperator.md) operator.',"https://docs.microsoft.com/en-us/azure/kusto/query/mv-applyoperator","mv-applyoperator.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,"mv-expand","Expands multi-value array or property bag.","`mv-expand` is applied on a [dynamic](./scalar-data-types/dynamic.md)-typed array or property bag column so that each value in the collection gets a separate row. All the other columns in an expanded row are duplicated. \r\n\r\n## Syntax\r\n\r\n*T* `| mv-expand ` [`bagexpansion=`(`bag` | `array`)] [`with_itemindex=`*IndexColumnName*] *ColumnName* [`,` *ColumnName* ...] [`limit` *Rowlimit*]\r\n\r\n*T* `| mv-expand ` [`bagexpansion=`(`bag` | `array`)] [*Name* `=`] *ArrayExpression* [`to typeof(`*Typename*`)`] [, [*Name* `=`] *ArrayExpression* [`to typeof(`*Typename*`)`] ...] [`limit` *Rowlimit*]\r\n\r\n## Arguments\r\n\r\n* *ColumnName:* In the result, arrays in the named column are expanded to multiple rows. \r\n* *ArrayExpression:* An expression yielding an array. If this form is used, a new column is added and the existing one is preserved.\r\n* *Name:* A name for the new column.\r\n* *Typename:* Indicates the underlying type of the array's elements, which becomes the type of the column produced by the `mv-apply` operator. The operation of applying type is cast-only and doesn't include parsing or type-conversion. Array elements that do not conform with the declared type will become `null` values.\r\n* *RowLimit:* The maximum number of rows generated from each original row. The default is 2147483647. \r\n  > [!Note]\r\n  > The legacy and obsolete form of the operator `mvexpand` has a default row limit of 128.\r\n* *IndexColumnName:* If `with_itemindex` is specified, the output will include an additional column (named *IndexColumnName*), which contains the index (starting at 0) of the item in the original expanded collection. \r\n\r\n## Returns\r\n\r\nMultiple rows for each of the values in any array that are in the named column or in the array expression.\r\nIf several columns or expressions are specified, they're expanded in parallel. For each input row, there will be as many output rows as there are elements in the longest expanded expression (shorter lists are padded with nulls). If the value in a row is an empty array, the row expands to nothing (won't show in the result set). However, if the value in a row isn't an array, the row is kept as is in the result set. \r\n\r\nThe expanded column always has dynamic type. Use a cast such as `todatetime()` or `tolong()` if you want to compute or aggregate values.\r\n\r\nTwo modes of property-bag expansions are supported:\r\n\r\n* `bagexpansion=bag`: Property bags are expanded into single-entry property bags. This mode is the default expansion.\r\n* `bagexpansion=array`: Property bags are expanded into two-element `[`*key*`,`*value*`]` array structures,\r\n  allowing uniform access to keys and values (also, for example, running a distinct-count aggregation\r\n  over property names).",'### Single Column\r\n\r\nA simple expansion of a single column:\r\n\r\n```\r\ndatatable (a:int, b:dynamic)[1,dynamic({"prop1":"a", "prop2":"b"})]\r\n| mv-expand b \r\n```\r\n\r\n|a|b|\r\n|---|---|\r\n|1|{"prop1":"a"}|\r\n|1|{"prop2":"b"}|\r\n\r\n### Zipped two columns\r\n\r\nExpanding two columns will first \'zip\' the applicable columns and then expand them:\r\n\r\n```\r\ndatatable (a:int, b:dynamic, c:dynamic)[1,dynamic({"prop1":"a", "prop2":"b"}), dynamic([5, 4, 3])]\r\n| mv-expand b, c\r\n```\r\n\r\n|a|b|c|\r\n|---|---|---|\r\n|1|{"prop1":"a"}|5|\r\n|1|{"prop2":"b"}|4|\r\n|1||3|\r\n\r\n### Cartesian product of two columns\r\n\r\nIf you want to get a Cartesian product of expanding two columns, expand one after the other:\r\n\r\n```\r\ndatatable (a:int, b:dynamic, c:dynamic)\r\n  [\r\n  1,\r\n  dynamic({"prop1":"a", "prop2":"b"}),\r\n  dynamic([5, 6])\r\n  ]\r\n| mv-expand b\r\n| mv-expand c\r\n```\r\n\r\n|a|b|c|\r\n|---|---|---|\r\n|1|{  "prop1": "a"}|5|\r\n|1|{  "prop1": "a"}|6|\r\n|1|{  "prop2": "b"}|5|\r\n|1|{  "prop2": "b"}|6|\r\n\r\n### Convert output\r\n\r\nIf you want to force the output of an mv-expand to a certain type (default is dynamic), use `to typeof`:\r\n\r\n```\r\ndatatable (a:string, b:dynamic, c:dynamic)["Constant", dynamic([1,2,3,4]), dynamic([6,7,8,9])]\r\n| mv-expand b, c to typeof(int)\r\n| getschema \r\n```\r\n\r\nColumnName|ColumnOrdinal|DateType|ColumnType\r\n-|-|-|-\r\na|0|System.String|string\r\nb|1|System.Object|dynamic\r\nc|2|System.Int32|int\r\n\r\nNotice column `b` is coming out as `dynamic` while `c` is coming out as `int`.\r\n\r\n### Using with_itemindex\r\n\r\nExpansion of an array with `with_itemindex`:\r\n\r\n```\r\nrange x from 1 to 4 step 1\r\n| summarize x = make_list(x)\r\n| mv-expand with_itemindex=Index x\r\n```\r\n\r\n|x|Index|\r\n|---|---|\r\n|1|0|\r\n|2|1|\r\n|3|2|\r\n|4|3|\r\n\r\n## See also\r\n\r\n* See [Chart count of live activities over time](./samples.md#chart-concurrent-sessions-over-time) for more examples.\r\n* [mv-apply](./mv-applyoperator.md) operator.\r\n* [summarize make_list()](makelist-aggfunction.md), which is the opposite function of mv-expand.\r\n* [bag_unpack()](bag-unpackplugin.md) plugin for expanding dynamic JSON objects into columns using property bag keys.',"https://docs.microsoft.com/en-us/azure/kusto/query/mvexpandoperator","mvexpandoperator.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"new_guid","Returns a random GUID (Globally Unique Identifier).","```\r\nnew_guid()\r\n```\r\n\r\n## Syntax\r\n\r\n* `new_guid()` - generates a new value of type `guid`.","","https://docs.microsoft.com/en-us/azure/kusto/query/newguidfunction","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"next","Returns the value of a column in a row that it at some offset following the\r\ncurrent row in a [serialized row set](./windowsfunctions.md#serialized-row-set).","## Syntax\r\n\r\n`next(column)`\r\n\r\n`next(column, offset)`\r\n\r\n`next(column, offset, default_value)`\r\n\r\n## Arguments\r\n\r\n* `column`: the column to get the values from.\r\n* `offset`: the offset to go ahead in rows. When no offset is specified a default offset 1 is used.\r\n* `default_value`: the default value to be used when there is no next rows to take the value from. When no default value is specified, null is used.","```\r\nTable | serialize | extend nextA = next(A,1)\r\n| extend diff = A - nextA\r\n| where diff > 1\r\n\r\nTable | serialize nextA = next(A,1,10)\r\n| extend diff = A - nextA\r\n| where diff <= 10\r\n```","https://docs.microsoft.com/en-us/azure/kusto/query/nextfunction","nextfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"not","Reverses the value of its `bool` argument.","```\r\nnot(false) == true\r\n```\r\n\r\n## Syntax\r\n\r\n`not(`*expr*`)`\r\n\r\n## Arguments\r\n\r\n* *expr*: A `bool` expression to be reversed.\r\n\r\n## Returns\r\n\r\nReturns the reversed logical value of its `bool` argument.","","https://docs.microsoft.com/en-us/azure/kusto/query/notfunction","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,"not-between","Matches the input that is outside the inclusive range.","```\r\nTable1 | where Num1 !between (1 .. 10)\r\nTable1 | where Time !between (datetime(2017-01-01) .. datetime(2017-01-01))\r\n```\r\n\r\n`!between` can operate on any numeric, datetime, or timespan expression.\r\n\r\n## Syntax\r\n\r\n*T* `|` `where` *expr* `!between` `(`*leftRange*` .. `*rightRange*`)`   \r\n\r\nIf *expr* expression is datetime - another syntactic sugar syntax is provided:\r\n\r\n*T* `|` `where` *expr* `!between` `(`*leftRangeDateTime*` .. `*rightRangeTimespan*`)`   \r\n\r\n## Arguments\r\n\r\n* *T* - The tabular input whose records are to be matched.\r\n* *expr* - the expression to filter.\r\n* *leftRange* - expression of the left range (inclusive).\r\n* *rightRange* - expression of the right range (inclusive).\r\n\r\n## Returns\r\n\r\nRows in *T* for which the predicate of (*expr* < *leftRange* or *expr* > *rightRange*) evaluates to `true`.","**Filtering numeric values using '!between' operator**  \r\n\r\n```\r\nrange x from 1 to 10 step 1\r\n| where x !between (5 .. 9)\r\n```\r\n\r\n|x|\r\n|---|\r\n|1|\r\n|2|\r\n|3|\r\n|4|\r\n|10|\r\n\r\n**Filtering datetime using 'between' operator**  \r\n\r\n```\r\nStormEvents\r\n| where StartTime !between (datetime(2007-07-27) .. datetime(2007-07-30))\r\n| count \r\n```\r\n\r\n|Count|\r\n|---|\r\n|58590|\r\n\r\n```\r\nStormEvents\r\n| where StartTime !between (datetime(2007-07-27) .. 3d)\r\n| count \r\n```\r\n\r\n|Count|\r\n|---|\r\n|58590|","https://docs.microsoft.com/en-us/azure/kusto/query/notbetweenoperator","notbetweenoperator.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"now","Returns the current UTC clock time, optionally offset by a given timespan.\r\nThis function can be used multiple times in a statement and the clock time being referenced will be the same for all instances.","```\r\nnow()\r\nnow(-2d)\r\n```\r\n\r\n## Syntax\r\n\r\n`now(`[*offset*]`)`\r\n\r\n## Arguments\r\n\r\n* *offset*: A `timespan`, added to the current UTC clock time. Default: 0.\r\n\r\n## Returns\r\n\r\nThe current UTC clock time as a `datetime`.\r\n\r\n`now()` + *offset*","Determines the interval since the event identified by the predicate:\r\n\r\n```\r\nT | where ... | extend Elapsed=now() - Timestamp\r\n```","https://docs.microsoft.com/en-us/azure/kusto/query/nowfunction","nowfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,"order","Sort the rows of the input table into order by one or more columns.","```\r\nT | order by country asc, price desc\r\n```\r\n\r\n> [!NOTE]\r\n> The order operator is an alias to the sort operator. For more information, see [sort operator](sortoperator.md)\r\n\r\n## Syntax\r\n\r\n*T* `| order by` *column* [`asc` | `desc`] [`nulls first` | `nulls last`] [`,` ...]\r\n\r\n## Arguments\r\n\r\n* *T*: The table input to sort.\r\n* *column*: Column of *T* by which to sort. The type of the values must be numeric, date, time or string.\r\n* `asc` Sort by into ascending order, low to high. The default is `desc`, descending high to low.\r\n* `nulls first` (the default for `asc` order) will place the null values at the beginning and `nulls last` (the default for `desc` order) will place the null values at the end.","","https://docs.microsoft.com/en-us/azure/kusto/query/orderoperator","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"pack","Creates a `dynamic` object (property bag) from a list of names and values.","Alias to `pack_dictionary()` function.\r\n\r\n## Syntax\r\n\r\n`pack(`*key1*`,` *value1*`,` *key2*`,` *value2*`,... )`\r\n\r\n## Arguments\r\n\r\n* An alternating list of keys and values (the total length of the list must be even)\r\n* All keys must be non-empty constant strings",'The following example returns `{"Level":"Information","ProcessID":1234,"Data":{"url":"www.bing.com"}}`:\r\n\r\n```\r\npack("Level", "Information", "ProcessID", 1234, "Data", pack("url", "www.bing.com"))\r\n```\r\n\r\nLets take 2 tables, SmsMessages and MmsMessages:\r\n\r\nTable SmsMessages \r\n\r\n|SourceNumber |TargetNumber| CharsCount\r\n|---|---|---\r\n|555-555-1234 |555-555-1212 | 46 \r\n|555-555-1234 |555-555-1213 | 50 \r\n|555-555-1212 |555-555-1234 | 32 \r\n\r\nTable MmsMessages \r\n\r\n|SourceNumber |TargetNumber| AttachmentSize | AttachmentType | AttachmentName\r\n|---|---|---|---|---\r\n|555-555-1212 |555-555-1213 | 200 | jpeg | Pic1\r\n|555-555-1234 |555-555-1212 | 250 | jpeg | Pic2\r\n|555-555-1234 |555-555-1213 | 300 | png | Pic3\r\n\r\nThe following query:\r\n\r\n```\r\nSmsMessages \r\n| extend Packed=pack("CharsCount", CharsCount) \r\n| union withsource=TableName kind=inner \r\n( MmsMessages \r\n  | extend Packed=pack("AttachmentSize", AttachmentSize, "AttachmentType", AttachmentType, "AttachmentName", AttachmentName))\r\n| where SourceNumber == "555-555-1234"\r\n``` \r\n\r\nReturns:\r\n\r\n|TableName |SourceNumber |TargetNumber | Packed\r\n|---|---|---|---\r\n|SmsMessages|555-555-1234 |555-555-1212 | {"CharsCount": 46}\r\n|SmsMessages|555-555-1234 |555-555-1213 | {"CharsCount": 50}\r\n|MmsMessages|555-555-1234 |555-555-1212 | {"AttachmentSize": 250, "AttachmentType": "jpeg", "AttachmentName": "Pic2"}\r\n|MmsMessages|555-555-1234 |555-555-1213 | {"AttachmentSize": 300, "AttachmentType": "png", "AttachmentName": "Pic3"}',"https://docs.microsoft.com/en-us/azure/kusto/query/packfunction","packfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"pack_all","Creates a `dynamic` object (property bag) from all the columns of the tabular expression.","> [!NOTE]\r\n> The representation of the returned object isn't guaranteed to be byte-level-compatible between runs. For example, properties that appear in the bag may appear in a different order.\r\n\r\n## Syntax\r\n\r\n`pack_all()`",'Given a table SmsMessages \r\n\r\n|SourceNumber |TargetNumber| CharsCount\r\n|---|---|---\r\n|555-555-1234 |555-555-1212 | 46 \r\n|555-555-1234 |555-555-1213 | 50 \r\n|555-555-1212 |555-555-1234 | 32 \r\n\r\nThe following query:\r\n\r\n```\r\ndatatable(SourceNumber:string,TargetNumber:string,CharsCount:long)\r\n[\r\n\'555-555-1234\',\'555-555-1212\',46,\r\n\'555-555-1234\',\'555-555-1213\',50,\r\n\'555-555-1212\',\'555-555-1234\',32\r\n]\r\n| extend Packed=pack_all()\r\n```\r\n\r\nReturns:\r\n\r\n|TableName |SourceNumber |TargetNumber | Packed\r\n|---|---|---|---\r\n|SmsMessages|555-555-1234 |555-555-1212 | {"SourceNumber":"555-555-1234", "TargetNumber":"555-555-1212", "CharsCount": 46}\r\n|SmsMessages|555-555-1234 |555-555-1213 | {"SourceNumber":"555-555-1234", "TargetNumber":"555-555-1213", "CharsCount": 50}\r\n|SmsMessages|555-555-1212 |555-555-1234 | {"SourceNumber":"555-555-1212", "TargetNumber":"555-555-1234", "CharsCount": 32}',"https://docs.microsoft.com/en-us/azure/kusto/query/packallfunction","packallfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"pack_array","Packs all input values into a dynamic array.","## Syntax\r\n\r\n`pack_array(`*Expr1*`[`,` *Expr2*]`)`\r\n\r\n## Arguments\r\n\r\n* *Expr1...N*: Input expressions to be packed into a dynamic array.\r\n\r\n## Returns\r\n\r\nDynamic array which includes the values of Expr1, Expr2, ... , ExprN.",'```\r\nrange x from 1 to 3 step 1\r\n| extend y = x * 2\r\n| extend z = y * 2\r\n| project pack_array(x,y,z)\r\n```\r\n\r\n|Column1|\r\n|---|\r\n|[1,2,4]|\r\n|[2,4,8]|\r\n|[3,6,12]|\r\n\r\n```\r\nrange x from 1 to 3 step 1\r\n| extend y = tostring(x * 2)\r\n| extend z = (x * 2) * 1s\r\n| project pack_array(x,y,z)\r\n```\r\n\r\n|Column1|\r\n|---|\r\n|[1,"2","00:00:02"]|\r\n|[2,"4","00:00:04"]|\r\n|[3,"6","00:00:06"]|',"https://docs.microsoft.com/en-us/azure/kusto/query/packarrayfunction","packarrayfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"pack_dictionary","An alias for [`pack()`](packfunction.md).","","","https://docs.microsoft.com/en-us/azure/kusto/query/packdictionaryfunction","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,"parse","Evaluates a string expression and parses its value into one or more calculated columns. The calculated columns will have nulls, for unsuccessfully parsed strings.\r\nFor more information, see the [parse-where operator](parsewhereoperator.md).",'```\r\nT | parse Text with "ActivityName=" name ", ActivityType=" type\r\n```\r\n\r\n## Syntax\r\n\r\n*T* `| parse` [`kind=regex` [`flags=regex_flags`] |`simple`|`relaxed`] *Expression* `with` `*` (*StringConstant* *ColumnName* [`:` *ColumnType*]) `*`...\r\n\r\n## Arguments\r\n\r\n* *T*: The input table.\r\n* kind:\r\n\t* simple (the default): StringConstant is a regular string value and the match is strict. All string delimiters should appear in the parsed string, and all extended columns must match the required types.\r\n\t\t\r\n\t* regex: StringConstant may be a regular expression and the match is strict. All string delimiters, which can be a regex for this mode, should appear in the parsed string, and all extended columns must match the required types.\r\n\t\r\n\t* flags: Flags to be used in regex mode like `U` (Ungreedy), `m` (multi-line mode), `s` (match new line `\\n`), `i` (case-insensitive) in [RE2 flags](re2.md).\r\n\t\t\r\n\t* relaxed: StringConstant is a regular string value and the match is relaxed. All string delimiters should appear in the parsed string, but extended columns may partially match the required types. Extended columns that didn\'t match the required types will get the value null.\r\n* *Expression*: An expression that evaluates to a string.\r\n* *ColumnName:* The name of a column to assign a value to, extracted from the string expression. \r\n  \r\n* *ColumnType:* Optional. The scalar value that indicates the type to convert the value to. The default is the `string` type.\r\n\r\n## Returns\r\n\r\nThe input table, extended according to the list of columns that are\r\nprovided to the operator.\r\n\r\n**Tips**\r\n\r\n* Use [`project`](projectoperator.md) if you also want to drop or rename some columns.\r\n* Use * in the pattern, to skip junk values. \r\n    > [!NOTE] \r\n    > The `*` can\'t be used after a `string` type column.\r\n* The parse pattern may start with *ColumnName* and not only with *StringConstant*.\r\n* If the parsed *Expression* isn\'t of type `string`, it will be converted to type `string`.\r\n* If regex mode is used, there\'s an option to add regex flags to control the entire regex that is used in the parse.\r\n* In regex mode, parse will translate the pattern to a regex. Use [RE2 syntax](re2.md) to do the matching, and use numbered captured groups that are handled internally.\r\n    For example:\r\n \r\n\r\n```\r\n\tparse kind=regex Col with * <regex1> var1:string <regex2> var2:long\r\n\t```\r\n\tIn the parse statement, the regex that will be internally generated by the parse is `.*?<regex1>(.*?)<regex2>(\\-\\d+)`.\r\n\t\t\r\n\t* `*` was translated to `.*?`.\r\n\t\t\r\n\t* `string` was translated to `.*?`.\r\n\t\t\r\n\t* `long` was translated to `\\-\\d+`.\r\n## Examples\r\nThe `parse` operator provides a streamlined way to `extend` a table by using multiple `extract` applications on the same `string` expression. This result is useful, when the table has a `string` column that contains several values that you want to break into individual columns. For example, a column that was produced by a developer trace ("`printf`"/"`Console.WriteLine`") statement.\r\nIn the example below, assume that the column `EventText` of table `Traces` contains\r\nstrings of the form `Event: NotifySliceRelease (resourceName={0}, totalSlices= {1}, sliceNumber={2}, lockTime={3}, releaseTime={4}, previousLockTime={5})`.\r\nThe operation will extend the table with six columns: `resourceName`, `totalSlices`, `sliceNumber`, `lockTime `, `releaseTime`, `previousLockTime`, `Month`, and `Day`. \r\n\r\n```\r\n\r\nlet Traces = datatable(EventText:string)\r\n[\r\n"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=23, lockTime=02/17/2016 08:40:01, releaseTime=02/17/2016 08:40:01, previousLockTime=02/17/2016 08:39:01)",\r\n"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=15, lockTime=02/17/2016 08:40:00, releaseTime=02/17/2016 08:40:00, previousLockTime=02/17/2016 08:39:00)",\r\n"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=20, lockTime=02/17/2016 08:40:01, releaseTime=02/17/2016 08:40:01, previousLockTime=02/17/2016 08:39:01)",\r\n"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=22, lockTime=02/17/2016 08:41:01, releaseTime=02/17/2016 08:41:00, previousLockTime=02/17/2016 08:40:01)",\r\n"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=16, lockTime=02/17/2016 08:41:00, releaseTime=02/17/2016 08:41:00, previousLockTime=02/17/2016 08:40:00)"\r\n];\r\nTraces  \r\n| parse EventText with * "resourceName=" resourceName ", totalSlices=" totalSlices:long * "sliceNumber=" sliceNumber:long * "lockTime=" lockTime ", releaseTime=" releaseTime:date "," * "previousLockTime=" previousLockTime:date ")" *  \r\n| project resourceName ,totalSlices , sliceNumber , lockTime , releaseTime , previousLockTime\r\n\r\n```\r\n|resourceName|totalSlices|sliceNumber|lockTime|releaseTime|previousLockTime|\r\n|---|---|---|---|---|---|\r\n|PipelineScheduler|27|15|02/17/2016 08:40:00|2016-02-17 08:40:00.0000000|2016-02-17 08:39:00.0000000|\r\n|PipelineScheduler|27|23|02/17/2016 08:40:01|2016-02-17 08:40:01.0000000|2016-02-17 08:39:01.0000000|\r\n|PipelineScheduler|27|20|02/17/2016 08:40:01|2016-02-17 08:40:01.0000000|2016-02-17 08:39:01.0000000|\r\n|PipelineScheduler|27|16|02/17/2016 08:41:00|2016-02-17 08:41:00.0000000|2016-02-17 08:40:00.0000000|\r\n|PipelineScheduler|27|22|02/17/2016 08:41:01|2016-02-17 08:41:00.0000000|2016-02-17 08:40:01.0000000|\r\n**For regex mode**\r\n\r\n```\r\n\r\nlet Traces = datatable(EventText:string)\r\n[\r\n"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=23, lockTime=02/17/2016 08:40:01, releaseTime=02/17/2016 08:40:01, previousLockTime=02/17/2016 08:39:01)",\r\n"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=15, lockTime=02/17/2016 08:40:00, releaseTime=02/17/2016 08:40:00, previousLockTime=02/17/2016 08:39:00)",\r\n"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=20, lockTime=02/17/2016 08:40:01, releaseTime=02/17/2016 08:40:01, previousLockTime=02/17/2016 08:39:01)",\r\n"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=22, lockTime=02/17/2016 08:41:01, releaseTime=02/17/2016 08:41:00, previousLockTime=02/17/2016 08:40:01)",\r\n"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=16, lockTime=02/17/2016 08:41:00, releaseTime=02/17/2016 08:41:00, previousLockTime=02/17/2016 08:40:00)"\r\n];\r\nTraces  \r\n| parse kind = regex EventText with "(.*?)[a-zA-Z]*=" resourceName @", totalSlices=\\s*\\d+\\s*.*?sliceNumber=" sliceNumber:long  ".*?(previous)?lockTime=" lockTime ".*?releaseTime=" releaseTime ".*?previousLockTime=" previousLockTime:date "\\\\)"  \r\n| project resourceName , sliceNumber , lockTime , releaseTime , previousLockTime\r\n\r\n```\r\n|resourceName|sliceNumber|lockTime|releaseTime|previousLockTime|\r\n|---|---|---|---|---|\r\n|PipelineScheduler|15|02/17/2016 08:40:00, |02/17/2016 08:40:00, |2016-02-17 08:39:00.0000000|\r\n|PipelineScheduler|23|02/17/2016 08:40:01, |02/17/2016 08:40:01, |2016-02-17 08:39:01.0000000|\r\n|PipelineScheduler|20|02/17/2016 08:40:01, |02/17/2016 08:40:01, |2016-02-17 08:39:01.0000000|\r\n|PipelineScheduler|16|02/17/2016 08:41:00, |02/17/2016 08:41:00, |2016-02-17 08:40:00.0000000|\r\n|PipelineScheduler|22|02/17/2016 08:41:01, |02/17/2016 08:41:00, |2016-02-17 08:40:01.0000000|\r\n**For regex mode using regex flags**\r\nIf you\'re interested in getting the resourceName only, use this query:\r\n\r\n```\r\n\r\nlet Traces = datatable(EventText:string)\r\n[\r\n"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=23, lockTime=02/17/2016 08:40:01, releaseTime=02/17/2016 08:40:01, previousLockTime=02/17/2016 08:39:01)",\r\n"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=15, lockTime=02/17/2016 08:40:00, releaseTime=02/17/2016 08:40:00, previousLockTime=02/17/2016 08:39:00)",\r\n"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=20, lockTime=02/17/2016 08:40:01, releaseTime=02/17/2016 08:40:01, previousLockTime=02/17/2016 08:39:01)",\r\n"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=22, lockTime=02/17/2016 08:41:01, releaseTime=02/17/2016 08:41:00, previousLockTime=02/17/2016 08:40:01)",\r\n"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=16, lockTime=02/17/2016 08:41:00, releaseTime=02/17/2016 08:41:00, previousLockTime=02/17/2016 08:40:00)"\r\n];\r\nTraces\r\n| parse kind = regex  EventText with * "resourceName=" resourceName \',\' *\r\n| project resourceName\r\n\r\n```\r\n|resourceName|\r\n|---|\r\n|PipelineScheduler, totalSlices=27, sliceNumber=23, lockTime=02/17/2016 08:40:01, releaseTime=02/17/2016 08:40:01|\r\n|PipelineScheduler, totalSlices=27, sliceNumber=15, lockTime=02/17/2016 08:40:00, releaseTime=02/17/2016 08:40:00|\r\n|PipelineScheduler, totalSlices=27, sliceNumber=20, lockTime=02/17/2016 08:40:01, releaseTime=02/17/2016 08:40:01|\r\n|PipelineScheduler, totalSlices=27, sliceNumber=22, lockTime=02/17/2016 08:41:01, releaseTime=02/17/2016 08:41:00|\r\n|PipelineScheduler, totalSlices=27, sliceNumber=16, lockTime=02/17/2016 08:41:00, releaseTime=02/17/2016 08:41:00|\r\nYou won\'t get the expected results, since the default mode is greedy.\r\nIf you have a few records where the *resourceName*  sometimes appears as lower-case and sometimes as upper-case, you may get nulls for some values.\r\nTo get the wanted result, run the query with the non-greedy `U`, and disable case-sensitive `i` regex flags.\r\n\r\n```\r\n\r\nlet Traces = datatable(EventText:string)\r\n[\r\n"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=23, lockTime=02/17/2016 08:40:01, releaseTime=02/17/2016 08:40:01, previousLockTime=02/17/2016 08:39:01)",\r\n"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=15, lockTime=02/17/2016 08:40:00, releaseTime=02/17/2016 08:40:00, previousLockTime=02/17/2016 08:39:00)",\r\n"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=20, lockTime=02/17/2016 08:40:01, releaseTime=02/17/2016 08:40:01, previousLockTime=02/17/2016 08:39:01)",\r\n"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=22, lockTime=02/17/2016 08:41:01, releaseTime=02/17/2016 08:41:00, previousLockTime=02/17/2016 08:40:01)",\r\n"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=16, lockTime=02/17/2016 08:41:00, releaseTime=02/17/2016 08:41:00, previousLockTime=02/17/2016 08:40:00)"\r\n];\r\nTraces\r\n| parse kind = regex flags = Ui EventText with * "RESOURCENAME=" resourceName \',\' *\r\n| project resourceName\r\n\r\n```\r\n|resourceName|\r\n|---|\r\n|PipelineScheduler|\r\n|PipelineScheduler|\r\n|PipelineScheduler|\r\n|PipelineScheduler|\r\n|PipelineScheduler|\r\nIf the parsed string has newlines, use the flag `s`, to parse the text.\r\n\r\n```\r\n\r\nlet Traces = datatable(EventText:string)\r\n[\r\n"Event: NotifySliceRelease (resourceName=PipelineScheduler\\ntotalSlices=27\\nsliceNumber=23\\nlockTime=02/17/2016 08:40:01\\nreleaseTime=02/17/2016 08:40:01\\npreviousLockTime=02/17/2016 08:39:01)",\r\n"Event: NotifySliceRelease (resourceName=PipelineScheduler\\ntotalSlices=27\\nsliceNumber=15\\nlockTime=02/17/2016 08:40:00\\nreleaseTime=02/17/2016 08:40:00\\npreviousLockTime=02/17/2016 08:39:00)",\r\n"Event: NotifySliceRelease (resourceName=PipelineScheduler\\ntotalSlices=27\\nsliceNumber=20\\nlockTime=02/17/2016 08:40:01\\nreleaseTime=02/17/2016 08:40:01\\npreviousLockTime=02/17/2016 08:39:01)",\r\n"Event: NotifySliceRelease (resourceName=PipelineScheduler\\ntotalSlices=27\\nsliceNumber=22\\nlockTime=02/17/2016 08:41:01\\nreleaseTime=02/17/2016 08:41:00\\npreviousLockTime=02/17/2016 08:40:01)",\r\n"Event: NotifySliceRelease (resourceName=PipelineScheduler\\ntotalSlices=27\\nsliceNumber=16\\nlockTime=02/17/2016 08:41:00\\nreleaseTime=02/17/2016 08:41:00\\npreviousLockTime=02/17/2016 08:40:00)"\r\n];\r\nTraces\r\n| parse kind=regex flags=s EventText with * "resourceName=" resourceName:string "(.*?)totalSlices=" totalSlices:long "(.*?)lockTime=" lockTime:datetime "(.*?)releaseTime=" releaseTime:datetime "(.*?)previousLockTime=" previousLockTime:datetime "\\\\)" \r\n| project-away EventText\r\n\r\n```\r\n|resourceName|totalSlices|lockTime|releaseTime|previousLockTime|\r\n|---|---|---|---|---|\r\n|PipelineScheduler<br>|27|2016-02-17 08:40:00.0000000|2016-02-17 08:40:00.0000000|2016-02-17 08:39:00.0000000|\r\n|PipelineScheduler<br>|27|2016-02-17 08:40:01.0000000|2016-02-17 08:40:01.0000000|2016-02-17 08:39:01.0000000|\r\n|PipelineScheduler<br>|27|2016-02-17 08:40:01.0000000|2016-02-17 08:40:01.0000000|2016-02-17 08:39:01.0000000|\r\n|PipelineScheduler<br>|27|2016-02-17 08:41:00.0000000|2016-02-17 08:41:00.0000000|2016-02-17 08:40:00.0000000|\r\n|PipelineScheduler<br>|27|2016-02-17 08:41:01.0000000|2016-02-17 08:41:00.0000000|2016-02-17 08:40:01.0000000|\r\n**Relaxed mode**\r\nIn this example for relaxed mode, *totalSlices* extended column must be of type `long`. However, in the parsed string, it has the value *nonValidLongValue*.\r\nIn *releaseTime* extended column, the value *nonValidDateTime* can\'t be parsed as *datetime*.\r\nThese two extended columns will get the value null while the other ones, such as *sliceNumber*, still get the correct values.\r\nIf you use option *kind = simple* for the same query below, you\'ll get null for all extended columns. This option is strict on extended columns, and is the difference between relaxed and simple mode.\r\n > [!NOTE] \r\n > In relaxed mode, extended columns can be partially matched.\r\n\r\n```\r\n\r\nlet Traces = datatable(EventText:string)\r\n[\r\n"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=23, lockTime=02/17/2016 08:40:01, releaseTime=nonValidDateTime 08:40:01, previousLockTime=02/17/2016 08:39:01)",\r\n"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=15, lockTime=02/17/2016 08:40:00, releaseTime=nonValidDateTime, previousLockTime=02/17/2016 08:39:00)",\r\n"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=nonValidLongValue, sliceNumber=20, lockTime=02/17/2016 08:40:01, releaseTime=nonValidDateTime 08:40:01, previousLockTime=02/17/2016 08:39:01)",\r\n"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=22, lockTime=02/17/2016 08:41:01, releaseTime=02/17/2016 08:41:00, previousLockTime=02/17/2016 08:40:01)",\r\n"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=nonValidLongValue, sliceNumber=16, lockTime=02/17/2016 08:41:00, releaseTime=02/17/2016 08:41:00, previousLockTime=02/17/2016 08:40:00)"\r\n];\r\nTraces\r\n| parse kind=relaxed EventText with * "resourceName=" resourceName ", totalSlices=" totalSlices:long * "sliceNumber=" sliceNumber:long * "lockTime=" lockTime ", releaseTime=" releaseTime:date "," * "previousLockTime=" previousLockTime:date ")" *\r\n| project-away EventText\r\n\r\n```\r\n|resourceName|totalSlices|sliceNumber|lockTime|releaseTime|previousLockTime|\r\n|---|---|---|---|---|---|\r\n|PipelineScheduler|27|15|02/17/2016 08:40:00||2016-02-17 08:39:00.0000000|\r\n|PipelineScheduler|27|23|02/17/2016 08:40:01||2016-02-17 08:39:01.0000000|\r\n|PipelineScheduler||20|02/17/2016 08:40:01||2016-02-17 08:39:01.0000000|\r\n|PipelineScheduler||16|02/17/2016 08:41:00|2016-02-17 08:41:00.0000000|2016-02-17 08:40:00.0000000|\r\n|PipelineScheduler|27|22|02/17/2016 08:41:01|2016-02-17 08:41:00.0000000|2016-02-17 08:40:01.0000000|',"","https://docs.microsoft.com/en-us/azure/kusto/query/parseoperator","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"parse_csv","Splits a given string representing a single record of comma-separated values and returns a string array with these values.",'```\r\nparse_csv("aaa,bbb,ccc") == ["aaa","bbb","ccc"]\r\n```\r\n\r\n## Syntax\r\n\r\n`parse_csv(`*source*`)`\r\n\r\n## Arguments\r\n\r\n* *source*: The source string representing a single record of comma-separated values.\r\n\r\n## Returns\r\n\r\nA string array that contains the split values.\r\n\r\n**Notes**\r\n\r\nEmbedded line feeds, commas, and quotes may be escaped using the double quotation mark (\'"\'). \r\nThis function doesn\'t support multiple records per row (only the first record is taken).','```\r\nprint result=parse_csv(\'aa,"b,b,b",cc,"Escaping quotes: ""Title""","line1\\nline2"\')\r\n```\r\n\r\n|result|\r\n|---|\r\n|[<br>  "aa",<br>  "b,b,b",<br>  "cc",<br>  "Escaping quotes: \\"Title\\"",<br>  "line1\\nline2"<br>]|\r\n\r\nCSV payload with multiple records:\r\n\r\n```\r\nprint result_multi_record=parse_csv(\'record1,a,b,c\\nrecord2,x,y,z\')\r\n```\r\n\r\n|result_multi_record|\r\n|---|\r\n|[<br>  "record1",<br>  "a",<br>  "b",<br>  "c"<br>]|',"https://docs.microsoft.com/en-us/azure/kusto/query/parsecsvfunction","parsecsvfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"parse_ipv4","Converts IPv4 string to long (signed 64-bit) number representation.","```\r\nparse_ipv4(\"127.0.0.1\") == 2130706433\r\nparse_ipv4('192.1.168.1') < parse_ipv4('192.1.168.2') == true\r\n```\r\n\r\n## Syntax\r\n\r\n`parse_ipv4(`*`Expr`*`)`\r\n\r\n## Arguments\r\n\r\n* *`Expr`*: String expression representing IPv4 that will be converted to long. String may include net-mask using [IP-prefix notation](#ip-prefix-notation).\r\n\r\n## IP-prefix notation\r\n\r\nIP addresses can be defined with `IP-prefix notation` using a slash (`/`) character.\r\nThe IP address to the LEFT of the slash (`/`) is the base IP address. The number (1 to 32) to the RIGHT of the slash (/) is the number of contiguous 1 bit in the netmask.","192.168.2.0/24 will have an associated net/subnetmask containing 24 contiguous bits or 255.255.255.0 in dotted decimal format.\r\n\r\n## Returns\r\n\r\nIf conversion is successful, the result will be a long number.\r\nIf conversion isn't successful, the result will be `null`.\r\n\r\n## Example\r\n\r\n```\r\ndatatable(ip_string:string)\r\n[\r\n '192.168.1.1',\r\n '192.168.1.1/24',\r\n '255.255.255.255/31'\r\n]\r\n| extend ip_long = parse_ipv4(ip_string)\r\n```\r\n\r\n|ip_string|ip_long|\r\n|---|---|\r\n|192.168.1.1|3232235777|\r\n|192.168.1.1/24|3232235776|\r\n|255.255.255.255/31|4294967294|","https://docs.microsoft.com/en-us/azure/kusto/query/parse-ipv4function","parse-ipv4function.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"parse_ipv4_mask","Converts the input string of IPv4 and netmask to long number representation (signed 64-bit).","```\r\nparse_ipv4_mask(\"127.0.0.1\", 24) == 2130706432\r\nparse_ipv4_mask('192.1.168.2', 31) == parse_ipv4_mask('192.1.168.3', 31)\r\n```\r\n\r\n## Syntax\r\n\r\n`parse_ipv4_mask(`*`Expr`*`, `*`PrefixMask`*`)`\r\n\r\n## Arguments\r\n\r\n* *`Expr`*: A string representation of the IPv4 address that will be converted to long. \r\n* *`PrefixMask`*: An integer from 0 to 32 representing the number of most-significant bits that are taken into account.\r\n\r\n## Returns\r\n\r\nIf conversion is successful, the result will be a long number.\r\nIf conversion isn't successful, the result will be `null`.","","https://docs.microsoft.com/en-us/azure/kusto/query/parse-ipv4-maskfunction","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"parse_ipv6","Converts IPv6 or IPv4 string to a canonical IPv6 string representation.","```\r\nparse_ipv6(\"127.0.0.1\") == '0000:0000:0000:0000:0000:ffff:7f00:0001'\r\nparse_ipv6(\":fe80::85d:e82c:9446:7994\") == 'fe80:0000:0000:0000:085d:e82c:9446:7994'\r\n```\r\n\r\n## Syntax\r\n\r\n`parse_ipv6(`*`Expr`*`)`\r\n\r\n## Arguments\r\n\r\n* *`Expr`*: String expression representing IPv6/IPv4 network address that will be converted to canonical IPv6 representation. String may include net-mask using [IP-prefix notation](#ip-prefix-notation).\r\n\r\n## IP-prefix notation\r\n\r\nIP addresses can be defined with `IP-prefix notation` using a slash (`/`) character.\r\nThe IP address to the LEFT of the slash (`/`) is the base IP address. The number (1 to 127) to the RIGHT of the slash (`/`) is the number of contiguous 1 bits in the netmask.\r\n\r\n## Returns\r\n\r\nIf conversion is successful, the result will be a string representing a canonical IPv6 network address.\r\nIf conversion isn't successful, the result will be `null`.","```\r\ndatatable(ip_string:string, netmask:long)\r\n[\r\n '192.168.255.255',     32,  // 32-bit netmask is used\r\n '192.168.255.255/24',  30,  // 24-bit netmask is used, as IPv4 address doesn't use upper 8 bits\r\n '255.255.255.255',     24,  // 24-bit netmask is used\r\n]\r\n| extend ip_long = parse_ipv4_mask(ip_string, netmask)\r\n```\r\n\r\n|ip_string|netmask|ip_long|\r\n|---|---|---|\r\n|192.168.255.255|32|3232301055|\r\n|192.168.255.255/24|30|3232300800|\r\n|255.255.255.255|24|4294967040|","https://docs.microsoft.com/en-us/azure/kusto/query/parse-ipv6function","parse-ipv6function.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"parse_ipv6_mask","Converts IPv6/IPv4 string and netmask to a canonical IPv6 string representation.","```\r\nparse_ipv6_mask(\"127.0.0.1\", 24) == '0000:0000:0000:0000:0000:ffff:7f00:0000'\r\nparse_ipv6_mask(\":fe80::85d:e82c:9446:7994\", 120) == 'fe80:0000:0000:0000:085d:e82c:9446:7900'\r\n```\r\n\r\n## Syntax\r\n\r\n`parse_ipv6_mask(`*`Expr`*`, `*`PrefixMask`*`)`\r\n\r\n## Arguments\r\n\r\n* *`Expr`*: String expression representing IPv6/IPv4 network address that will be converted to canonical IPv6 representation. String may include net-mask using [IP-prefix notation](#ip-prefix-notation).\r\n* *`PrefixMask`*: An integer from 0 to 128 representing the number of most-significant bits that are taken into account.\r\n\r\n## IP-prefix notation\r\n\r\nIP addresses can be defined with `IP-prefix notation` using a slash (`/`) character.\r\nThe IP address to the LEFT of the slash (`/`) is the base IP address. The number (1 to 127) to the RIGHT of the slash (`/`) is the number of contiguous 1 bit in the netmask.\r\n\r\n## Returns\r\n\r\nIf conversion is successful, the result will be a string representing a canonical IPv6 network address.\r\nIf conversion isn't successful, the result will be `null`.","```\r\ndatatable(ip_string:string, netmask:long)\r\n[\r\n // IPv4 addresses\r\n '192.168.255.255',     120,  // 120-bit netmask is used\r\n '192.168.255.255/24',  124,  // 120-bit netmask is used, as IPv4 address doesn't use upper 8 bits\r\n '255.255.255.255', 128,  // 128-bit netmask is used\r\n // IPv6 addresses\r\n 'fe80::85d:e82c:9446:7994', 128,     // 128-bit netmask is used\r\n 'fe80::85d:e82c:9446:7994/120', 124, // 120-bit netmask is used\r\n // IPv6 with IPv4 notation\r\n '::192.168.255.255',    128,  // 128-bit netmask is used\r\n '::192.168.255.255/24', 128,  // 120-bit netmask is used, as IPv4 address doesn't use upper 8 bits\r\n]\r\n| extend ip6_canonical = parse_ipv6_mask(ip_string, netmask)\r\n```\r\n\r\n|ip_string|netmask|ip6_canonical|\r\n|---|---|---|\r\n|192.168.255.255|120|0000:0000:0000:0000:0000:ffff:c0a8:ff00|\r\n|192.168.255.255/24|124|0000:0000:0000:0000:0000:ffff:c0a8:ff00|\r\n|255.255.255.255|128|0000:0000:0000:0000:0000:ffff:ffff:ffff|\r\n|fe80::85d:e82c:9446:7994|128|fe80:0000:0000:0000:085d:e82c:9446:7994|\r\n|fe80::85d:e82c:9446:7994/120|124|fe80:0000:0000:0000:085d:e82c:9446:7900|\r\n|::192.168.255.255|128|0000:0000:0000:0000:0000:ffff:c0a8:ffff|\r\n|::192.168.255.255/24|128|0000:0000:0000:0000:0000:ffff:c0a8:ff00|","https://docs.microsoft.com/en-us/azure/kusto/query/parse-ipv6-maskfunction","parse-ipv6-maskfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"parse_json","Interprets a `string` as a JSON value and returns the value as `dynamic`.","This function is better than [extractjson() function](./extractjsonfunction.md)\r\nwhen you need to extract more than one element of a JSON compound object.\r\n\r\n## Syntax\r\n\r\n`parse_json(`*json*`)`\r\n\r\nAliases:\r\n\r\n- [todynamic()](./todynamicfunction.md)\r\n- [toobject()](./todynamicfunction.md)\r\n\r\n## Arguments\r\n\r\n* *json*: An expression of type `string`. It represents a [JSON-formatted value](https://json.org/), or an expression of type [dynamic](./scalar-data-types/dynamic.md), representing the actual `dynamic` value.\r\n\r\n## Returns\r\n\r\nAn object of type `dynamic` that is determined by the value of *json*:\r\n\r\n* If *json* is of type `dynamic`, its value is used as-is.\r\n* If *json* is of type `string`, and is a [properly formatted JSON string](https://json.org/), then the string is parsed, and the value produced is returned.\r\n* If *json* is of type `string`, but it isn't a [properly formatted JSON string](https://json.org/), then the returned value is an object of type `dynamic` that holds the original `string` value.",'In the following example, when `context_custom_metrics` is a `string`\r\nthat looks like this:\r\n\r\n```json\r\n{"duration":{"value":118.0,"count":5.0,"min":100.0,"max":150.0,"stdDev":0.0,"sampledValue":118.0,"sum":118.0}}\r\n```\r\n\r\nthen the following CSL Fragment retrieves the value of the `duration` slot\r\nin the object, and from that it retrieves two slots, `duration.value` and\r\n `duration.min` (`118.0` and `110.0`, respectively).\r\n\r\n```\r\nT\r\n| extend d=parse_json(context_custom_metrics) \r\n| extend duration_value=d.duration.value, duration_min=d["duration"]["min"]\r\n```\r\n\r\n**Notes**\r\n\r\nIt\'s common to have a JSON string describing a property bag in which\r\none of the "slots" is another JSON string. \r\n\r\nFor example:\r\n\r\n```\r\nlet d=\'{"a":123, "b":"{\\\\"c\\\\":456}"}\';\r\nprint d\r\n```\r\n\r\nIn such cases, it isn\'t only necessary to invoke `parse_json` twice, but also\r\nto make sure that in the second call, `tostring` is used. Otherwise, the\r\nsecond call to `parse_json` will just pass on the input to the output as-is,\r\nbecause its declared type is `dynamic`.\r\n\r\n```\r\nlet d=\'{"a":123, "b":"{\\\\"c\\\\":456}"}\';\r\nprint d_b_c=parse_json(tostring(parse_json(d).b)).c\r\n```',"https://docs.microsoft.com/en-us/azure/kusto/query/parsejsonfunction","parsejsonfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"parse_path","Parses a file path `string` and returns a [`dynamic`](./scalar-data-types/dynamic.md) object that contains the following parts of the path:",'* Scheme\r\n* RootPath\r\n* DirectoryPath\r\n* DirectoryName\r\n* FileName\r\n* Extension\r\n* AlternateDataStreamName\r\n\r\nIn addition to the simple paths with both types of slashes, the function supports paths with:\r\n\r\n* Schemas. For example, "file://..."\r\n* Shared paths. For example, "\\\\shareddrive\\users..."\r\n* Long paths. For example, "\\\\?\\C:...""\r\n* Alternate data streams. For example, "file1.exe:file2.exe"\r\n\r\n## Syntax\r\n\r\n`parse_path(`*path*`)`\r\n\r\n## Arguments\r\n\r\n* *path*: A string that represents a file path.\r\n\r\n## Returns\r\n\r\nAn object of type `dynamic` that included the path components as listed above.','```\r\ndatatable(p:string) \r\n[\r\n    @"C:\\temp\\file.txt",\r\n    @"temp\\file.txt",\r\n    "file://C:/temp/file.txt:some.exe",\r\n    @"\\\\shared\\users\\temp\\file.txt.gz",\r\n    "/usr/lib/temp/file.txt"\r\n]\r\n| extend path_parts = parse_path(p)\r\n\r\n```\r\n\r\n|p|path_parts\r\n|---|---\r\n|C:\\temp\\file.txt|{"Scheme":"","RootPath":"C:","DirectoryPath":"C:\\\\temp","DirectoryName":"temp","Filename":"file.txt","Extension":"txt","AlternateDataStreamName":""}\r\n|temp\\file.txt|{"Scheme":"","RootPath":"","DirectoryPath":"temp","DirectoryName":"temp","Filename":"file.txt","Extension":"txt","AlternateDataStreamName":""}\r\n|file://C:/temp/file.txt:some.exe|{"Scheme":"file","RootPath":"C:","DirectoryPath":"C:/temp","DirectoryName":"temp","Filename":"file.txt","Extension":"txt","AlternateDataStreamName":"some.exe"}\r\n|\\\\shared\\users\\temp\\file.txt.gz|{"Scheme":"","RootPath":"","DirectoryPath":"\\\\\\\\shared\\\\users\\\\temp","DirectoryName":"temp","Filename":"file.txt.gz","Extension":"gz","AlternateDataStreamName":""}\r\n|/usr/lib/temp/file.txt|{"Scheme":"","RootPath":"","DirectoryPath":"/usr/lib/temp","DirectoryName":"temp","Filename":"file.txt","Extension":"txt","AlternateDataStreamName":""}',"https://docs.microsoft.com/en-us/azure/kusto/query/parsepathfunction","parsepathfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"parse_url","Parses an absolute URL `string` and returns a `dynamic` object contains URL parts.","## Syntax\r\n\r\n`parse_url(`*url*`)`\r\n\r\n## Arguments\r\n\r\n* *url*: A string represents a URL or the query part of the URL.\r\n\r\n## Returns\r\n\r\nAn object of type [dynamic](./scalar-data-types/dynamic.md) that included the URL components: Scheme, Host, Port, Path, Username, Password, Query Parameters, Fragment.",'```\r\nT | extend Result = parse_url("scheme://username:password@host:1234/this/is/a/path?k1=v1&k2=v2#fragment")\r\n```\r\n\r\nwill result\r\n\r\n```\r\n {\r\n \t"Scheme":"scheme",\r\n \t"Host":"host",\r\n \t"Port":"1234",\r\n \t"Path":"this/is/a/path",\r\n \t"Username":"username",\r\n \t"Password":"password",\r\n \t"Query Parameters":"{"k1":"v1", "k2":"v2"}",\r\n \t"Fragment":"fragment"\r\n }\r\n```',"https://docs.microsoft.com/en-us/azure/kusto/query/parseurlfunction","parseurlfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"parse_urlquery","Returns a `dynamic` object contains the Query parameters.","## Syntax\r\n\r\n`parse_urlquery(`*query*`)`\r\n\r\n## Arguments\r\n\r\n* *query*: A string represents a url query.\r\n\r\n## Returns\r\n\r\nAn object of type [dynamic](./scalar-data-types/dynamic.md) that includes the query parameters.",'```\r\nparse_urlquery("k1=v1&k2=v2&k3=v3")\r\n```\r\n\r\nwill result:\r\n\r\n```\r\n {\r\n \t"Query Parameters":"{"k1":"v1", "k2":"v2", "k3":"v3"}",\r\n }\r\n```\r\n\r\n**Notes**\r\n\r\n* Input format should follow URL query standards (key=value& ...)',"https://docs.microsoft.com/en-us/azure/kusto/query/parseurlqueryfunction","parseurlqueryfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"parse_user_agent","Interprets a user-agent string, which identifies the user's browser and provides certain system details to servers hosting the websites the user visits. The result is returned as [`dynamic`](./scalar-data-types/dynamic.md).",'## Syntax\r\n\r\n`parse_user_agent(`*user-agent-string*, *look-for*`)`\r\n\r\n## Arguments\r\n\r\n* *user-agent-string*: An expression of type `string`, representing a user-agent string.\r\n* *look-for*: An expression of type `string` or `dynamic`, representing what the function should be looking for in the user-agent string (parsing target). \r\nThe possible options: "browser", "os", "device". If only a single parsing target is required it can be passed a `string` parameter.\r\nIf two or three are required they can be passed as a `dynamic array`.\r\n\r\n## Returns\r\n\r\nAn object of type `dynamic` that contains the information about the requested parsing targets.\r\n\r\nBrowser: Family, MajorVersion, MinorVersion, Patch                 \r\n\r\nOperatingSystem: Family, MajorVersion, MinorVersion, Patch, PatchMinor             \r\n\r\nDevice: Family, Brand, Model\r\n\r\n> [!WARNING]\r\n> The function implementation is built on regex checks of the input string against a huge number of predefined patterns. Therefore the expected time and CPU consumption is high.\r\nWhen the function is used in a query, make sure it runs in a distributed manner on multiple machines.\r\nIf queries with this function are frequently used, you may want to pre-create the results via [update policy](../management/updatepolicy.md), but you need to take into account that using this function inside the update policy will increase the ingestion latency.','```\r\nprint useragent = "Mozilla/5.0 (Windows; U; en-US) AppleWebKit/531.9 (KHTML, like Gecko) AdobeAIR/2.5.1"\r\n| extend x = parse_user_agent(useragent, "browser") \r\n```\r\n\r\nExpected result is a dynamic object:\r\n\r\n{\r\n  "Browser": {\r\n    "Family": "AdobeAIR",\r\n    "MajorVersion": "2",\r\n    "MinorVersion": "5",\r\n    "Patch": "1"\r\n  }\r\n}\r\n\r\n```\r\nprint useragent = "Mozilla/5.0 (SymbianOS/9.2; U; Series60/3.1 NokiaN81-3/10.0.032 Profile/MIDP-2.0 Configuration/CLDC-1.1 ) AppleWebKit/413 (KHTML, like Gecko) Safari/4"\r\n| extend x = parse_user_agent(useragent, dynamic(["browser","os","device"])) \r\n```\r\n\r\nExpected result is a dynamic object:\r\n\r\n{\r\n  "Browser": {\r\n    "Family": "Nokia OSS Browser",\r\n    "MajorVersion": "3",\r\n    "MinorVersion": "1",\r\n    "Patch": ""\r\n  },\r\n  "OperatingSystem": {\r\n    "Family": "Symbian OS",\r\n    "MajorVersion": "9",\r\n    "MinorVersion": "2",\r\n    "Patch": "",\r\n    "PatchMinor": ""\r\n  },\r\n  "Device": {\r\n    "Family": "Nokia N81",\r\n    "Brand": "Nokia",\r\n    "Model": "N81-3"\r\n  }\r\n}',"https://docs.microsoft.com/en-us/azure/kusto/query/parse-useragentfunction","parse-useragentfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"parse_version","Converts the input string representation of version to a comparable decimal number.","```\r\nparse_version(\"0.0.0.1\")\r\n```\r\n\r\n## Syntax\r\n\r\n`parse_version` `(` *Expr* `)`\r\n\r\n## Arguments\r\n\r\n* *`Expr`*: A scalar expression of type `string` that specifies the version to be parsed.\r\n\r\n> [!NOTE]\r\n> * Input string must contain from one to four version parts, represented as numbers and separated with dots ('.').\r\n> * Each part of version may contain up to eight digits, with the max value at 99999999.\r\n> * If the number of parts is less than four, all the missing parts are considered as trailing (`1.0` == `1.0.0.0`).\r\n\r\n## Returns\r\n\r\nIf conversion is successful, the result will be a decimal.\r\nIf conversion is unsuccessful, the result will be `null`.",'```\r\nlet dt = datatable(v:string)\r\n["0.0.0.5","0.0.7.0","0.0.3","0.2","0.1.2.0","1.2.3.4","1","99999999.0.0.0"];\r\ndt | project v1=v, _key=1 \r\n| join kind=inner (dt | project v2=v, _key = 1) on _key | where v1 != v2\r\n| summarize v1 = max(v1),v2 = min(v2) by (hash(v1) + hash(v2)) // removing duplications\r\n| project v1, v2, higher_version = iif(parse_version(v1) > parse_version(v2), v1, v2)\r\n\r\n```\r\n\r\n|v1|v2|higher_version|\r\n|---|---|---|\r\n|99999999.0.0.0|0.0.0.5|99999999.0.0.0|\r\n|1|0.0.0.5|1|\r\n|1.2.3.4|0.0.0.5|1.2.3.4|\r\n|0.1.2.0|0.0.0.5|0.1.2.0|\r\n|0.2|0.0.0.5|0.2|\r\n|0.0.3|0.0.0.5|0.0.3|\r\n|0.0.7.0|0.0.0.5|0.0.7.0|\r\n|99999999.0.0.0|0.0.7.0|99999999.0.0.0|\r\n|1|0.0.7.0|1|\r\n|1.2.3.4|0.0.7.0|1.2.3.4|\r\n|0.1.2.0|0.0.7.0|0.1.2.0|\r\n|0.2|0.0.7.0|0.2|\r\n|0.0.7.0|0.0.3|0.0.7.0|\r\n|99999999.0.0.0|0.0.3|99999999.0.0.0|\r\n|1|0.0.3|1|\r\n|1.2.3.4|0.0.3|1.2.3.4|\r\n|0.1.2.0|0.0.3|0.1.2.0|\r\n|0.2|0.0.3|0.2|\r\n|99999999.0.0.0|0.2|99999999.0.0.0|\r\n|1|0.2|1|\r\n|1.2.3.4|0.2|1.2.3.4|\r\n|0.2|0.1.2.0|0.2|\r\n|99999999.0.0.0|0.1.2.0|99999999.0.0.0|\r\n|1|0.1.2.0|1|\r\n|1.2.3.4|0.1.2.0|1.2.3.4|\r\n|99999999.0.0.0|1.2.3.4|99999999.0.0.0|\r\n|1.2.3.4|1|1.2.3.4|\r\n|99999999.0.0.0|1|99999999.0.0.0|',"https://docs.microsoft.com/en-us/azure/kusto/query/parse-versionfunction","parse-versionfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"parse_xml","Interprets a `string` as a XML value, converts the value to a JSON and returns the value as `dynamic`.",'## Syntax\r\n\r\n`parse_xml(`*xml*`)`\r\n\r\n## Arguments\r\n\r\n* *xml*: An expression of type `string`, representing a XML-formatted value.\r\n\r\n## Returns\r\n\r\nAn object of type [dynamic](./scalar-data-types/dynamic.md) that is determined by the value of *xml*, or null, if the XML format is invalid.\r\n\r\nThe conversion is done as following:\r\n\r\nXML                                |JSON                                            |Access\r\n-----------------------------------|------------------------------------------------|--------------         \r\n`<e/>`                             | { "e": null }                                  | o.e\r\n`<e>text<\/e>`\t                   | { "e": "text" }\t                            | o.e\r\n`<e name="value" />`               | { "e":{"@name": "value"} }\t                    | o.e["@name"]\r\n`<e name="value">text<\/e>`         | { "e": { "@name": "value", "#text": "text" } } | o.e["@name"] o.e["#text"]\r\n`<e> <a>text<\/a> <b>text<\/b> <\/e>` | { "e": { "a": "text", "b": "text" } }\t        | o.e.a o.e.b\r\n`<e> <a>text<\/a> <a>text<\/a> <\/e>` | { "e": { "a": ["text", "text"] } }\t            | o.e.a[0] o.e.a[1]\r\n`<e> text <a>text<\/a> <\/e>`        | { "e": { "#text": "text", "a": "text" } }\t    | 1`o.e["#text"] o.e.a\r\n\r\n**Notes**\r\n\r\n* Maximal input `string` length for `parse_xml` is 1MB (1,048,576 bytes). Longer strings interpretation will result in a null object\r\n* Only element nodes, attributes and text nodes will be translated. Everything else will be skipped','In the following example, when `context_custom_metrics` is a `string`\r\nthat looks like this: \r\n\r\n```xml\r\n<?xml version="1.0" encoding="UTF-8"?>\r\n<duration>\r\n    <value>118.0<\/value>\r\n    <count>5.0<\/count>\r\n    <min>100.0<\/min>\r\n    <max>150.0<\/max>\r\n    <stdDev>0.0<\/stdDev>\r\n    <sampledValue>118.0<\/sampledValue>\r\n    <sum>118.0<\/sum>\r\n<\/duration>\r\n```\r\n\r\nthen the following CSL Fragment translates the XML to the following JSON:\r\n\r\n```json\r\n{\r\n    "duration": {\r\n        "value": 118.0,\r\n        "count": 5.0,\r\n        "min": 100.0,\r\n        "max": 150.0,\r\n        "stdDev": 0.0,\r\n        "sampledValue": 118.0,\r\n        "sum": 118.0\r\n    }\r\n}\r\n```\r\n\r\nand retrieves the value of the `duration` slot\r\nin the object, and from that it retrieves two slots, `duration.value` and\r\n `duration.min` (`118.0` and `110.0`, respectively).\r\n\r\n```\r\nT\r\n| extend d=parse_xml(context_custom_metrics) \r\n| extend duration_value=d.duration.value, duration_min=d["duration"]["min"]\r\n```',"https://docs.microsoft.com/en-us/azure/kusto/query/parse-xmlfunction","parse-xmlfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,"parse-where","Evaluates a string expression, and parses its value into one or more calculated columns. The result is only the successfully parsed strings.",'See [parse operator](parseoperator.md), which produces nulls for unsuccessfully parsed strings.\r\n\r\n```\r\nT | parse-where Text with "ActivityName=" name ", ActivityType=" type\r\n```\r\n\r\n## Syntax\r\n\r\n*T* `| parse-where` [`kind=regex` [`flags=regex_flags`] |`simple`] *Expression* `with` `*` (*StringConstant* *ColumnName* [`:` *ColumnType*]) `*`...\r\n\r\n## Arguments\r\n\r\n* *T*: The input table.\r\n* *kind*: \r\n\t* *simple* (default): StringConstant is a regular string value, and the match is strict. All string delimiters should appear in the parsed string, and all extended columns must match the required types.\r\n\t\t\r\n\t* *regex*: StringConstant may be a regular expression, and the match is strict. All string delimiters should appear in the parsed string, and all extended columns must match the required types. String delimiters can be a regex for this mode.\r\n\t\r\n\t* *flags*: Flags to be used in regex mode:  `U` (Ungreedy), `m` (multi-line mode), `s` (match new line `\\n`), `i` (case-insensitive), More flags can be found in [RE2 flags](re2.md).\r\n\t\t\r\n* *Expression*: An expression that evaluates to a string.\r\n* *ColumnName:* The name of a column that is assigned to a value that was taken out of the string expression. \r\n  \r\n* *ColumnType:* should be an optional scalar type that indicates the type to convert the value to. The default is string type.\r\n\r\n## Returns\r\n\r\nThe input table, which is extended according to the list of columns that are provided to the operator.\r\n\r\n> [!Note] \r\n> Only successfully parsed strings will be in the output. Strings that don\'t match the pattern will be filtered out.\r\n\r\n**Tips**\r\n\r\n* `parse-where` parses the strings in the same way as [parse](parseoperator.md), and filters out strings that were not parsed successfully.\r\n* Use [project](projectoperator.md) if you also want to drop or rename some columns.\r\n* Use * in the pattern to skip junk values. This value can\'t be used after string column.\r\n* The parse pattern may start with *ColumnName*, in addition to *StringConstant*. \r\n* If the parsed *Expression* isn\'t of type string, it will be converted to type string.\r\n* If regex mode is used, you can add regex flags to control the whole regex used in parse.\r\n* In regex mode, parse will translate the pattern to a regex and use [RE2 syntax](re2.md) in order to do the matching using numbered captured groups that are handled internally.\r\n  \r\n  For example, this parse statement:\r\n  \r\n \r\n\r\n```\r\n\tparse-where kind=regex Col with * <regex1> var1:string <regex2> var2:long\r\n\t```\r\n\tThe regex that will be generated by the parse internally is `.*?<regex1>(.*?)<regex2>(\\-\\d+)`.\r\n\t\t\r\n\t- `*` was translated to `.*?`.\r\n\t\t\r\n\t- `string` was translated to `.*?`.\r\n\t\t\r\n\t- `long` was translated to `\\-\\d+`.\r\n## Examples\r\nThe `parse-where` operator provides a streamlined way to `extend` a table by using multiple `extract` applications on the same `string` expression. This is most useful when the table has a `string` column that contains several values that you want to break into individual columns. For example, you can break up a column that was produced by a developer trace ("`printf`"/"`Console.WriteLine`") statement.\r\n### Using `parse`\r\nIn the example below, the column `EventText` of table `Traces` contains strings of the form `Event: NotifySliceRelease (resourceName={0}, totalSlices= {1}, sliceNumber={2}, lockTime={3}, releaseTime={4}, previousLockTime={5})`. The operation below will extend the table with six columns: `resourceName` , `totalSlices`, `sliceNumber`, `lockTime `, `releaseTime`, `previouLockTime`, `Month`, and `Day`. \r\nA few of the strings don\'t have a full match.\r\nUsing `parse`, the calculated columns will have nulls.\r\n\r\n```\r\n\r\nlet Traces = datatable(EventText:string)\r\n[\r\n"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=invalid_number, lockTime=02/17/2016 08:40:01, releaseTime=02/17/2016 08:40:01, previousLockTime=02/17/2016 08:39:01)",\r\n"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=15, lockTime=02/17/2016 08:40:00, releaseTime=invalid_datetime, previousLockTime=02/17/2016 08:39:00)",\r\n"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=20, lockTime=02/17/2016 08:40:01, releaseTime=02/17/2016 08:40:01, previousLockTime=02/17/2016 08:39:01)",\r\n"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=22, lockTime=02/17/2016 08:41:01, releaseTime=02/17/2016 08:41:00, previousLockTime=02/17/2016 08:40:01)",\r\n"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=invalid_number, sliceNumber=16, lockTime=02/17/2016 08:41:00, releaseTime=02/17/2016 08:41:00, previousLockTime=02/17/2016 08:40:00)"\r\n];\r\nTraces  \r\n| parse EventText with * "resourceName=" resourceName ", totalSlices=" totalSlices:long * "sliceNumber=" sliceNumber:long * "lockTime=" lockTime ", releaseTime=" releaseTime:date "," * "previousLockTime=" previouLockTime:date ")" *  \r\n| project resourceName ,totalSlices , sliceNumber , lockTime , releaseTime , previousLockTime\r\n\r\n```\r\n|resourceName|totalSlices|sliceNumber|lockTime|releaseTime|previousLockTime|\r\n|---|---|---|---|---|---|\r\n|||||||\r\n|||||||\r\n|||||||\r\n|PipelineScheduler|27|20|02/17/2016 08:40:01|2016-02-17 08:40:01.0000000|2016-02-17 08:39:01.0000000|\r\n|PipelineScheduler|27|22|02/17/2016 08:41:01|2016-02-17 08:41:00.0000000|2016-02-17 08:40:01.0000000|\r\n### Using `parse-where` \r\nUsing \'parse-where\' will filter-out unsuccessfully parsed strings from the result.\r\n\r\n```\r\n\r\nlet Traces = datatable(EventText:string)\r\n[\r\n"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=invalid_number, lockTime=02/17/2016 08:40:01, releaseTime=02/17/2016 08:40:01, previousLockTime=02/17/2016 08:39:01)",\r\n"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=15, lockTime=02/17/2016 08:40:00, releaseTime=invalid_datetime, previousLockTime=02/17/2016 08:39:00)",\r\n"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=20, lockTime=02/17/2016 08:40:01, releaseTime=02/17/2016 08:40:01, previousLockTime=02/17/2016 08:39:01)",\r\n"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=22, lockTime=02/17/2016 08:41:01, releaseTime=02/17/2016 08:41:00, previousLockTime=02/17/2016 08:40:01)",\r\n"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=invalid_number, sliceNumber=16, lockTime=02/17/2016 08:41:00, releaseTime=02/17/2016 08:41:00, previousLockTime=02/17/2016 08:40:00)"\r\n];\r\nTraces  \r\n| parse-where EventText with * "resourceName=" resourceName ", totalSlices=" totalSlices:long * "sliceNumber=" sliceNumber:long * "lockTime=" lockTime ", releaseTime=" releaseTime:date "," * "previousLockTime=" previousLockTime:date ")" *  \r\n| project resourceName ,totalSlices , sliceNumber , lockTime , releaseTime , previousLockTime\r\n\r\n```\r\n|resourceName|totalSlices|sliceNumber|lockTime|releaseTime|previousLockTime|\r\n|---|---|---|---|---|---|\r\n|PipelineScheduler|27|20|02/17/2016 08:40:01|2016-02-17 08:40:01.0000000|2016-02-17 08:39:01.0000000|\r\n|PipelineScheduler|27|22|02/17/2016 08:41:01|2016-02-17 08:41:00.0000000|2016-02-17 08:40:01.0000000|\r\n\r\n### Regex mode using regex flags\r\nTo get the resourceName and totalSlices, use the following query:\r\n\r\n```\r\n\r\nlet Traces = datatable(EventText:string)\r\n[\r\n"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=non_valid_integer, sliceNumber=11, lockTime=02/17/2016 08:40:01, releaseTime=02/17/2016 08:40:01, previousLockTime=02/17/2016 08:39:01)",\r\n"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=15, lockTime=02/17/2016 08:40:00, releaseTime=02/17/2016 08:40:00, previousLockTime=02/17/2016 08:39:00)",\r\n"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=non_valid_integer, sliceNumber=44, lockTime=02/17/2016 08:40:01, releaseTime=02/17/2016 08:40:01, previousLockTime=02/17/2016 08:39:01)",\r\n"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=22, lockTime=02/17/2016 08:41:01, releaseTime=02/17/2016 08:41:00, previousLockTime=02/17/2016 08:40:01)",\r\n"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=16, lockTime=02/17/2016 08:41:00, releaseTime=02/17/2016 08:41:00, previousLockTime=02/17/2016 08:40:00)"\r\n];\r\nTraces\r\n| parse-where kind = regex EventText with * "RESOURCENAME=" resourceName "," * "totalSlices=" totalSlices:long "," *\r\n| project resourceName, totalSlices\r\n\r\n```\r\n### `parse-where` with case-insensitive regex flag\r\nIn the above query, the default mode was case-sensitive, so the strings were parsed successfully. No result was obtained.\r\nTo get the required result, run `parse-where` with a case-insensitive (`i`) regex flag.\r\nOnly three strings will be parsed successfully, so the result is three records (some totalSlices hold invalid integers).\r\n\r\n```\r\n\r\nlet Traces = datatable(EventText:string)\r\n[\r\n"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=non_valid_integer, sliceNumber=11, lockTime=02/17/2016 08:40:01, releaseTime=02/17/2016 08:40:01, previousLockTime=02/17/2016 08:39:01)",\r\n"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=15, lockTime=02/17/2016 08:40:00, releaseTime=02/17/2016 08:40:00, previousLockTime=02/17/2016 08:39:00)",\r\n"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=non_valid_integer, sliceNumber=44, lockTime=02/17/2016 08:40:01, releaseTime=02/17/2016 08:40:01, previousLockTime=02/17/2016 08:39:01)",\r\n"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=22, lockTime=02/17/2016 08:41:01, releaseTime=02/17/2016 08:41:00, previousLockTime=02/17/2016 08:40:01)",\r\n"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=16, lockTime=02/17/2016 08:41:00, releaseTime=02/17/2016 08:41:00, previousLockTime=02/17/2016 08:40:00)"\r\n];\r\nTraces\r\n| parse-where kind = regex flags=i EventText with * "RESOURCENAME=" resourceName "," * "totalSlices=" totalSlices:long "," *\r\n| project resourceName, totalSlices\r\n\r\n```\r\n|resourceName|totalSlices|\r\n|---|---|\r\n|PipelineScheduler|27|\r\n|PipelineScheduler|27|\r\n|PipelineScheduler|27|',"","https://docs.microsoft.com/en-us/azure/kusto/query/parsewhereoperator","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,"partition","The partition operator partitions its input table into multiple sub-tables\r\naccording to the values of the specified column, executes a sub-query over each\r\nsub-table, and produces a single output table that is the union of the results\r\nof all sub-queries.",'```\r\nT | partition by Col1 ( top 10 by MaxValue )\r\nT | partition by Col1 { U | where Col2=toscalar(Col1) }\r\n```\r\n\r\n## Syntax\r\n\r\n*T* `|` `partition` [*PartitionParameters*] `by` *Column* `(` *ContextualSubquery* `)`\r\n\r\n*T* `|` `partition` [*PartitionParameters*] `by` *Column* `{` *Subquery* `}`\r\n\r\n## Arguments\r\n\r\n* *T*: The tabular source whose data is to be processed by the operator.\r\n* *Column*: The name of a column in *T* whose values determine how the input table\r\n  is to be partitioned. See **Notes** below.\r\n* *ContextualSubquery*: A tabular expression, which source is the source of the `partition` operator, scoped for a single *key* value.\r\n* *Subquery*: A tabular expression without source. The *key* value can be obtained via `toscalar()` call.\r\n* *PartitionParameters*: Zero or more (space-separated) parameters in the form of:\r\n  *Name* `=` *Value* that control the behavior\r\n  of the operator. The following parameters are supported:\r\n  |Name               |Values         |Description|\r\n  |-------------------|---------------|-----------|\r\n  |`hint.materialized`|`true`,`false` |If set to `true` will materialize the source of the `partition` operator (default: `false`)|\r\n  |`hint.concurrency`|*Number*|Hints the system how many concurrent subqueries of the `partition` operator should be executed in parallel. *Default*: Amount of CPU cores on the single node of the cluster (2 to 16).|\r\n  |`hint.spread`|*Number*|Hints the system how many nodes should be used by the concurrent`partition` subqueries execution. *Default*: 1.|\r\n\r\n## Returns\r\n\r\nThe operator returns a union of the results of applying the subquery to each\r\npartition of the input data.\r\n\r\n**Notes**\r\n\r\n* The partition operator is currently limited by the number of partitions.\r\n  Up to 64 distinct partitions may be created.\r\n  The operator will yield an error if the partition column (*Column*) has more\r\n  than 64 distinct values.\r\n* The subquery references the input partition implicitly (there\'s no "name" for\r\n  the partition in the subquery). To reference the input partition multiple times\r\n  within the subquery, use the [as operator](asoperator.md), as in\r\n  **Example: partition-reference** below.\r\n\r\n**Example: top-nested case**\r\n\r\nAt some cases - it is more performant and easier to write query using `partition` operator rather using [`top-nested` operator](topnestedoperator.md)\r\nThe next example runs a sub-query calculating `summarize` and `top` for-each of States starting with `W`: (WYOMING, WASHINGTON, WEST VIRGINIA, WISCONSIN)\r\n\r\n```\r\nStormEvents\r\n| where State startswith \'W\'\r\n| partition by State \r\n(\r\n    summarize Events=count(), Injuries=sum(InjuriesDirect) by EventType, State\r\n    | top 3 by Events \r\n) \r\n```\r\n\r\n|EventType|State|Events|Injuries|\r\n|---|---|---|---|\r\n|Hail|WYOMING|108|0|\r\n|High Wind|WYOMING|81|5|\r\n|Winter Storm|WYOMING|72|0|\r\n|Heavy Snow|WASHINGTON|82|0|\r\n|High Wind|WASHINGTON|58|13|\r\n|Wildfire|WASHINGTON|29|0|\r\n|Thunderstorm Wind|WEST VIRGINIA|180|1|\r\n|Hail|WEST VIRGINIA|103|0|\r\n|Winter Weather|WEST VIRGINIA|88|0|\r\n|Thunderstorm Wind|WISCONSIN|416|1|\r\n|Winter Storm|WISCONSIN|310|0|\r\n|Hail|WISCONSIN|303|1|\r\n\r\n**Example: query non-overlapping data partitions**\r\n\r\nSometimes it is useful (perf-wise) to run a complex subquery over non-overlapping\r\ndata partitions in a map/reduce style. The example below shows how to create a\r\nmanual distribution of aggregation over 10 partitions.\r\n\r\n```\r\nStormEvents\r\n| extend p = hash(EventId, 10)\r\n| partition by p\r\n(\r\n    summarize Count=count() by Source \r\n)\r\n| summarize Count=sum(Count) by Source\r\n| top 5 by Count\r\n```\r\n\r\n|Source|Count|\r\n|---|---|\r\n|Trained Spotter|12770|\r\n|Law Enforcement|8570|\r\n|Public|6157|\r\n|Emergency Manager|4900|\r\n|COOP Observer|3039|\r\n\r\n**Example: query-time partitioning**\r\n\r\nThe following example shows how query can be partitioned into N=10 partitions,\r\nwhere each partition calculates its own Count, and all later summarized into TotalCount.\r\n\r\n```\r\nlet N = 10;                 // Number of query-partitions\r\nrange p from 0 to N-1 step 1  // \r\n| partition by p            // Run the sub-query partitioned \r\n{\r\n    StormEvents \r\n    | where hash(EventId, N) == toscalar(p) // Use toscalar() to fetch partition key value\r\n    | summarize Count = count()\r\n}\r\n| summarize TotalCount=sum(Count) \r\n```\r\n\r\n|TotalCount|\r\n|---|\r\n|59066|\r\n\r\n**Example: partition-reference**\r\n\r\nThe following example shows how one can use the [as operator](asoperator.md) to\r\ngive a "name" to each data partition and then reuse that name within the subquery:\r\n\r\n```\r\nT\r\n| partition by Dim\r\n(\r\n    as Partition\r\n    | extend MetricPct = Metric * 100.0 / toscalar(Partition | summarize sum(Metric))\r\n)\r\n```\r\n\r\n**Example: complex subquery hidden by a function call**\r\n\r\nThe same technique can be applied with much more complex subqueries. To simplify\r\nthe syntax, one can wrap the subquery in a function call:\r\n\r\n```\r\nlet partition_function = (T:(Source:string)) \r\n{\r\n    T\r\n    | summarize Count=count() by Source\r\n};\r\nStormEvents\r\n| extend p = hash(EventId, 10)\r\n| partition by p\r\n(\r\n    invoke partition_function()\r\n)\r\n| summarize Count=sum(Count) by Source\r\n| top 5 by Count\r\n```\r\n\r\n|Source|Count|\r\n|---|---|\r\n|Trained Spotter|12770|\r\n|Law Enforcement|8570|\r\n|Public|6157|\r\n|Emergency Manager|4900|\r\n|COOP Observer|3039|',"","https://docs.microsoft.com/en-us/azure/kusto/query/partitionoperator","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"percentile","Returns an estimate for the specified [nearest-rank percentile](#nearest-rank-percentile) of the population defined by `*Expr*`.\r\nThe accuracy depends on the density of population in the region of the percentile. This function can be used only in context of aggregation inside [summarize](summarizeoperator.md)",'* `percentiles()` is like `percentile()`, but calculates a number of percentile values, which is faster than calculating each percentile individually.\r\n* `percentilesw()` is like `percentilew()`, but calculates a number of weighted percentile values, which is faster than calculating each percentile individually.\r\n* `percentilew()` and `percentilesw()` let you calculate weighted percentiles. Weighted percentiles calculate the given percentiles in a "weighted" way, by treating each value as if it was repeated `weight` times, in the input.\r\n\r\n## Syntax\r\n\r\nsummarize `percentile(`*Expr*`,` *Percentile*`)`\r\n\r\nsummarize `percentiles(`*Expr*`,` *Percentile1* [`,` *Percentile2*]`)`\r\n\r\nsummarize `percentiles_array(`*Expr*`,` *Percentile1* [`,` *Percentile2*]`)`\r\n\r\nsummarize `percentiles_array(`*Expr*`,` *Dynamic array*`)`\r\n\r\nsummarize `percentilew(`*Expr*`,` *WeightExpr*`,` *Percentile*`)`\r\n\r\nsummarize `percentilesw(`*Expr*`,` *WeightExpr*`,` *Percentile1* [`,` *Percentile2*]`)`\r\n\r\nsummarize `percentilesw_array(`*Expr*`,` *WeightExpr*`,` *Percentile1* [`,` *Percentile2*]`)`\r\n\r\nsummarize `percentilesw_array(`*Expr*`,` *WeightExpr*`,` *Dynamic array*`)`\r\n\r\n## Arguments\r\n\r\n* `*Expr*`: Expression that will be used for aggregation calculation.\r\n* `*WeightExpr*`: Expression that will be used as the weight of values for aggregation calculation.\r\n* `*Percentile*`: A double constant that specifies the percentile.\r\n* `*Dynamic array*`: list of percentiles in a dynamic array of integer or floating point numbers.\r\n\r\n## Returns\r\n\r\nReturns an estimate for `*Expr*` of the specified percentiles in the group.',"The value of `Duration` that is larger than 95% of the sample set and smaller than 5% of the sample set.\r\n\r\n```\r\nCallDetailRecords | summarize percentile(Duration, 95) by continent\r\n```\r\n\r\nSimultaneously calculate 5, 50 (median) and 95.\r\n\r\n```\r\nCallDetailRecords \r\n| summarize percentiles(Duration, 5, 50, 95) by continent\r\n```\r\n\r\n![Percentiles](images/percentiles-aggfunction/percentiles.png)\r\nThe results show that in Europe, 5% of calls are shorter than 11.55s, 50% of calls are shorter than 3 minutes, 18.46 seconds, and 95% of calls are shorter than 40 minutes 48 seconds.\r\n\r\n```\r\nCallDetailRecords \r\n| summarize percentiles(Duration, 5, 50, 95), avg(Duration)\r\n```\r\n\r\n## Weighted percentiles\r\n\r\nAssume you repetitively measure the time (Duration) it takes an action to complete. Instead of recording every value of the measurement, you record each value of Duration, rounded to 100 msec, and how many times the rounded value appeared (BucketSize).\r\n\r\nUse `summarize percentilesw(Duration, BucketSize, ...)` to calculate the given\r\npercentiles in a \"weighted\" way. Treat each value of Duration as if it was repeated\r\nBucketSize times in the input, without actually needing to materialize those records.\r\n\r\n## Example\r\n\r\nA customer has a set of latency values in milliseconds:\r\n`{ 1, 1, 2, 2, 2, 5, 7, 7, 12, 12, 15, 15, 15, 18, 21, 22, 26, 35 }`.\r\n\r\nTo reduce bandwidth and storage, do pre-aggregation to the\r\nfollowing buckets: `{ 10, 20, 30, 40, 50, 100 }`. Count the number of events in each bucket to produce the following  table:\r\n\r\n![Percentilesw table](images/percentiles-aggfunction/percentilesw-table.png)\r\nThe table displays:\r\n\r\n* Eight events in the 10-ms bucket (corresponding to subset `{ 1, 1, 2, 2, 2, 5, 7, 7 }`)\r\n * Six events in the 20-ms bucket (corresponding to subset `{ 12, 12, 15, 15, 15, 18 }`)\r\n * Three events in the 30-ms bucket (corresponding to subset `{ 21, 22, 26 }`)\r\n * One event  in the 40-ms bucket (corresponding to subset `{ 35 }`)\r\n\r\n\r\nAt this point, the original data is no longer available. Only the number of events in each bucket. To compute percentiles from this data, use the `percentilesw()` function.\r\nFor example, for the 50, 75, and 99.9 percentiles, use the following query.\r\n\r\n```\r\ndatatable (ReqCount:long, LatencyBucket:long) \r\n[ \r\n    8, 10, \r\n    6, 20, \r\n    3, 30, \r\n    1, 40 \r\n]\r\n| summarize percentilesw(LatencyBucket, ReqCount, 50, 75, 99.9) \r\n```\r\n\r\nThe result for the above query is:\r\n\r\n![Percentilesw result](images/percentiles-aggfunction/percentilesw-result.png)\r\n\r\nThe above query corresponds to the function\r\n`percentiles(LatencyBucket, 50, 75, 99.9)`, if the data was expanded to the following form:\r\n\r\n![Percentilesw raw table](images/percentiles-aggfunction/percentilesw-rawtable.png)\r\n\r\n## Getting multiple percentiles in an array\r\n\r\nMultiple percentiles can be obtained as an array in a single dynamic column, instead of in multiple columns.\r\n\r\n```\r\nCallDetailRecords \r\n| summarize percentiles_array(Duration, 5, 25, 50, 75, 95), avg(Duration)\r\n```\r\n\r\n![Percentiles array result](images/percentiles-aggfunction/percentiles-array-result.png)\r\nSimilarly, weighted percentiles can be returned as a dynamic array using `percentilesw_array`.\r\n\r\nPercentiles for `percentiles_array` and `percentilesw_array` can be specified in a dynamic array of integer or floating-point numbers. The array must be constant but doesn't have to be literal.\r\n\r\n```\r\nCallDetailRecords \r\n| summarize percentiles_array(Duration, dynamic([5, 25, 50, 75, 95])), avg(Duration)\r\n```\r\n\r\n```\r\nCallDetailRecords \r\n| summarize percentiles_array(Duration, range(0, 100, 5)), avg(Duration)\r\n```\r\n\r\n## Nearest-rank percentile\r\n\r\n*P*-th percentile (0 < *P* <= 100) of a list of ordered values, sorted from least to greatest, is the smallest value in the list. The *P* percent of the data is less or equal to *P*-th percentile value ([from Wikipedia article on percentiles](https://en.wikipedia.org/wiki/Percentile#The_Nearest_Rank_method)).\r\n\r\nDefine *0*-th percentiles to be the smallest member of the population.\r\n\r\n>[!NOTE]\r\n> Given the approximating nature of the calculation, the actual returned value may not be a member of the population.\r\n> Nearest-rank definition means that *P*=50 does not conform to the [interpolative definition of the median](https://en.wikipedia.org/wiki/Median). When evaluating the significance of this discrepancy for the specific application, the size of the population and an [estimation error](#estimation-error-in-percentiles) should be taken into account.\r\n\r\n## Estimation error in percentiles\r\n\r\nThe percentiles aggregate provides an approximate value using [T-Digest](https://github.com/tdunning/t-digest/blob/master/docs/t-digest-paper/histo.pdf).\r\n\r\n>[!NOTE]\r\n> * The bounds on the estimation error vary with the value of the requested percentile. The best accuracy is at both ends of the [0..100] scale. Percentiles 0 and 100 are the exact minimum and maximum values of the distribution. The accuracy gradually decreases towards the middle of the scale. It's worst at the median and is capped at 1%.\r\n> * Error bounds are observed on the rank, not on the value. Suppose percentile(X, 50) returned a value of Xm. The estimate guarantees that at least 49% and at most 51% of the values of X are less or equal to Xm. There is no theoretical limit on the difference between Xm and the actual median value of X.\r\n> * The estimation may sometimes result in a precise value but there are no reliable conditions to define when it will be the case.","https://docs.microsoft.com/en-us/azure/kusto/query/percentiles-aggfunction","percentiles-aggfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"percentile_tdigest","Calculates the percentile result from the `tdigest` results (which was generated by [tdigest()](tdigest-aggfunction.md) or [tdigest_merge()](tdigest-merge-aggfunction.md))","## Syntax\r\n\r\n`percentile_tdigest(`*`Expr`*`,` *Percentile1* [`,` *typeLiteral*]`)`\r\n\r\n`percentiles_array_tdigest(`*`Expr`*`,` *Percentile1* [`,` *Percentile2*] ...[`,` *PercentileN*]`)`\r\n\r\n`percentiles_array_tdigest(`*`Expr`*`,` *Dynamic array*`)`\r\n\r\n## Arguments\r\n\r\n* *Expr*: Expression that was generated by [`tdigest`](tdigest-aggfunction.md) or [tdigest_merge()](tdigest-merge-aggfunction.md).\r\n* *Percentile* is a double constant that specifies the percentile.\r\n* *typeLiteral*: An optional type literal (for example, `typeof(long)`). If provided, the result set will be of this type. \r\n* *Dynamic array*: list of percentiles in a dynamic array of integer or floating point numbers.\r\n\r\n## Returns\r\n\r\nThe percentiles/percentilesw value of each value in *`Expr`*.\r\n\r\n**Tips**\r\n\r\n* The function must receive at least one percent (and maybe more, see the syntax above: *Percentile1* [`,` *Percentile2*] ...[`,` *PercentileN*]) and the result will be\r\n  a dynamic array that includes the results. (such like [`percentiles()`](percentiles-aggfunction.md))\r\n  \r\n* If only one percent was provided, and the type was provided also, then the result will be a column of the same type provided with the results of that percent. In this case, all `tdigest` functions must be of that type.\r\n* If *`Expr`* includes `tdigest` functions of different types, don't provide the type. The result will be of type dynamic. See below examples.",'```\r\nStormEvents\r\n| summarize tdigestRes = tdigest(DamageProperty) by State\r\n| project percentile_tdigest(tdigestRes, 100, typeof(int))\r\n```\r\n\r\n|percentile_tdigest_tdigestRes|\r\n|---|\r\n|0|\r\n|62000000|\r\n|110000000|\r\n|1200000|\r\n|250000|\r\n\r\n```\r\nStormEvents\r\n| summarize tdigestRes = tdigest(DamageProperty) by State\r\n| project percentiles_array_tdigest(tdigestRes, range(0, 100, 50), typeof(int))\r\n```\r\n\r\n|percentile_tdigest_tdigestRes|\r\n|---|\r\n|[0,0,0]|\r\n|[0,0,62000000]|\r\n|[0,0,110000000]|\r\n|[0,0,1200000]|\r\n|[0,0,250000]|\r\n\r\n```\r\nStormEvents\r\n| summarize tdigestRes = tdigest(DamageProperty) by State\r\n| union (StormEvents | summarize tdigestRes = tdigest(EndTime) by State)\r\n| project percentile_tdigest(tdigestRes, 100)\r\n```\r\n\r\n|percentile_tdigest_tdigestRes|\r\n|---|\r\n|[0]|\r\n|[62000000]|\r\n|["2007-12-20T11:30:00.0000000Z"]|\r\n|["2007-12-31T23:59:00.0000000Z"]|',"https://docs.microsoft.com/en-us/azure/kusto/query/percentile-tdigestfunction","percentile-tdigestfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"percentrank_tdigest","Calculates the approximate rank of the value in a set, where rank is expressed as a percentage of the set's size.\r\nThis function can be viewed as the inverse of the percentile.","## Syntax\r\n\r\n`percentrank_tdigest(`*TDigest*`,` *Expr*`)`\r\n\r\n## Arguments\r\n\r\n* *TDigest*: Expression that was generated by [tdigest()](tdigest-aggfunction.md) or [tdigest_merge()](tdigest-merge-aggfunction.md).\r\n* *Expr*: Expression representing a value to be used for percentage ranking calculation.\r\n\r\n## Returns\r\n\r\nThe percentage rank of value in a dataset.\r\n\r\n**Tips**\r\n\r\n1) The type of second parameter and the type of the elements in the `tdigest` should be the same.\r\n2) First parameter should be TDigest that was generated by [tdigest()](tdigest-aggfunction.md) or [tdigest_merge()](tdigest-merge-aggfunction.md)","Getting the percentrank_tdigest() of the damage property that valued 4490$ is ~85%:\r\n\r\n```\r\nStormEvents\r\n| summarize tdigestRes = tdigest(DamageProperty)\r\n| project percentrank_tdigest(tdigestRes, 4490)\r\n\r\n```\r\n\r\n|Column1|\r\n|---|\r\n|85.0015237192293|\r\n\r\nUsing percentile 85 over the damage property should give 4490$:\r\n\r\n```\r\nStormEvents\r\n| summarize tdigestRes = tdigest(DamageProperty)\r\n| project percentile_tdigest(tdigestRes, 85, typeof(long))\r\n\r\n```\r\n\r\n|percentile_tdigest_tdigestRes|\r\n|---|\r\n|4490|","https://docs.microsoft.com/en-us/azure/kusto/query/percentrank-tdigestfunction","percentrank-tdigestfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"pi","Returns the constant value of Pi.","## Syntax\r\n\r\n`pi()`\r\n\r\n## Returns\r\n\r\n* The double value of Pi (3.1415926...)","","https://docs.microsoft.com/en-us/azure/kusto/query/pifunction","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"pow","Returns a result of raising to power","## Syntax\r\n\r\n`pow(`*base*`,` *exponent* `)`\r\n\r\n## Arguments\r\n\r\n* *base*: Base value.\r\n* *exponent*: Exponent value.\r\n\r\n## Returns\r\n\r\nReturns base raised to the power exponent: base ^ exponent.","","https://docs.microsoft.com/en-us/azure/kusto/query/powfunction","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"prev","Returns the value of a specific column in a specified row.\r\nThe specified row is at a specified offset from the current row in a [serialized row set](./windowsfunctions.md#serialized-row-set).","## Syntax\r\n\r\nThere are several possibilities.\r\n\r\n* `prev(column)`\r\n* `prev(column, offset)`\r\n* `prev(column, offset, default_value)`\r\n\r\n## Arguments\r\n\r\n* `column`: The column to get the values from.\r\n* `offset`: The offset to go back in rows. When no offset is specified, a default offset 1 is used.\r\n* `default_value`: The default value to be used when there are no previous rows to take the value from. When no default value is specified, null is used.","```\r\nTable | serialize | extend prevA = prev(A,1)\r\n| extend diff = A - prevA\r\n| where diff > 1\r\n\r\nTable | serialize prevA = prev(A,1,10)\r\n| extend diff = A - prevA\r\n| where diff <= 10\r\n```","https://docs.microsoft.com/en-us/azure/kusto/query/prevfunction","prevfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,"print","Outputs single-row with one or more scalar expressions.",'```\r\nprint x=1, s=strcat("Hello", ", ", "World!")\r\n```\r\n\r\n## Syntax\r\n\r\n`print` [*ColumnName* `=`] *ScalarExpression* [\',\' ...]\r\n\r\n## Arguments\r\n\r\n* *ColumnName*: An option name to assign to the output\'s singular column.\r\n* *ScalarExpression*: A scalar expression to evaluate.\r\n\r\n## Returns\r\n\r\nA single-column, single-row, table whose single cell has the value of the evaluated *ScalarExpression*.','The `print` operator is useful as a quick way to evaluate one or more\r\nscalar expressions and make a single-row table out of the resulting values.\r\nFor example:\r\n\r\n```\r\nprint 0 + 1 + 2 + 3 + 4 + 5, x = "Wow!"\r\n```\r\n\r\n```\r\nprint banner=strcat("Hello", ", ", "World!")\r\n```',"https://docs.microsoft.com/en-us/azure/kusto/query/printoperator","printoperator.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,"project","Select the columns to include, rename or drop, and insert new computed columns.","The order of the columns in the result is specified by the order of the arguments. Only the columns specified in the arguments are included in the result. Any other columns in the input are dropped.  (See also `extend`.)\r\n\r\n```\r\nT | project cost=price*quantity, price\r\n```\r\n\r\n## Syntax\r\n\r\n*T* `| project` *ColumnName* [`=` *Expression*] [`,` ...]\r\n\r\nor\r\n\r\n*T* `| project` [*ColumnName* | `(`*ColumnName*[`,`]`)` `=`] *Expression* [`,` ...]\r\n\r\n## Arguments\r\n\r\n* *T*: The input table.\r\n* *ColumnName:* Optional name of a column to appear in the output. If there is no *Expression*, then *ColumnName* is mandatory and a column of that name must appear in the input. If omitted, the name will be automatically generated. If *Expression* returns more than one column, a list of column names can be specified in parentheses. In this case *Expression*'s output columns will be given the specified names, dropping all rest of the output columns, if there are any. If list of the column names is not specified, all *Expression*'s output columns with generated names will be added to the output.\r\n* *Expression:* Optional scalar expression referencing the input columns. If *ColumnName* is not omitted then *Expression* is mandatory.\r\n    It is legal to return a new calculated column with the same name as an existing column in the input.\r\n\r\n## Returns\r\n\r\nA table that has the columns named as arguments, and as many rows as the input table.",'The following example shows several kinds of manipulations that can be done\r\nusing the `project` operator. The input table `T` has three columns of type `int`: `A`, `B`, and `C`. \r\n\r\n```\r\nT\r\n| project\r\n    X=C,                       // Rename column C to X\r\n    A=2*B,                     // Calculate a new column A from the old B\r\n    C=strcat("-",tostring(C)), // Calculate a new column C from the old C\r\n    B=2*B                      // Calculate a new column B from the old B\r\n```\r\n\r\n[series_stats](series-statsfunction.md) is an example of a function that returns multiple columns.',"https://docs.microsoft.com/en-us/azure/kusto/query/projectoperator","projectoperator.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,"project-away","Select what columns in the input to exclude from the output","```\r\nT | project-away price, quantity, zz*\r\n```\r\n\r\nThe order of the columns in the result is determined by their original order in the table. Only the columns that were specified as arguments are dropped. The other columns are included in the result.  (See also `project`.)\r\n\r\n## Syntax\r\n\r\n*T* `| project-away` *ColumnNameOrPattern* [`,` ...]\r\n\r\n## Arguments\r\n\r\n* *T*: The input table\r\n* *ColumnNameOrPattern:* The name of the column or column wildcard-pattern to be removed from the output.\r\n\r\n## Returns\r\n\r\nA table with columns that were not named as arguments. Contains same number of rows as the input table.\r\n\r\n**Tips**\r\n\r\n* Use [`project-rename`](projectrenameoperator.md) if your intention is to rename columns.\r\n* Use [`project-reorder`](projectreorderoperator.md) if your intention is to reorder columns.\r\n* You can `project-away` any columns that are present in the original table or that were computed as part of the query.","The input table `T` has three columns of type `long`: `A`, `B`, and `C`.\r\n\r\n```\r\ndatatable(A:long, B:long, C:long) [1, 2, 3]\r\n| project-away C    // Removes column C from the output\r\n```\r\n\r\n|A|B|\r\n|---|---|\r\n|1|2|\r\n\r\nRemoving columns starting with 'a'.\r\n\r\n```\r\nprint  a2='a2', b = 'b', a3='a3', a1='a1'\r\n|  project-away a* \r\n```\r\n\r\n|b|\r\n|---|\r\n|b|","https://docs.microsoft.com/en-us/azure/kusto/query/projectawayoperator","projectawayoperator.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,"project-rename","Renames columns in the result output.","```\r\nT | project-rename new_column_name = column_name\r\n```\r\n\r\n## Syntax\r\n\r\n*T* `| project-rename` *NewColumnName* = *ExistingColumnName* [`,` ...]\r\n\r\n## Arguments\r\n\r\n* *T*: The input table.\r\n* *NewColumnName:* The new name of a column. \r\n* *ExistingColumnName:* The existing name of a column. \r\n\r\n## Returns\r\n\r\nA table that has the columns in the same order as in an existing table, with columns renamed.","```\r\nprint a='a', b='b', c='c'\r\n|  project-rename new_b=b, new_a=a\r\n```\r\n\r\n|new_a|new_b|c|\r\n|---|---|---|\r\n|a|b|c|","https://docs.microsoft.com/en-us/azure/kusto/query/projectrenameoperator","projectrenameoperator.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,"project-reorder","Reorders columns in the result output.","```\r\nT | project-reorder Col2, Col1, Col* asc\r\n```\r\n\r\n## Syntax\r\n\r\n*T* `| project-reorder` *ColumnNameOrPattern* [`asc`|`desc`] [`,` ...]\r\n\r\n## Arguments\r\n\r\n* *T*: The input table.\r\n* *ColumnNameOrPattern:* The name of the column or column wildcard pattern added to the output.\r\n* For wildcard patterns: specifying `asc` or `desc` orders columns using their names in ascending or descending order. If `asc` or `desc` aren't specified, the order is determined by the matching columns as they appear in the source table.\r\n\r\n> [!NOTE]\r\n> * In ambiguous *ColumnNameOrPattern* matching, the column appears in the first position matching the pattern.\r\n> * Specifying columns for the `project-reorder` is optional. Columns that aren't specified explicitly appear as the last columns of the output table.\r\n> * Use [`project-away`](projectawayoperator.md) to remove columns.\r\n> * Use [`project-rename`](projectrenameoperator.md) to rename columns.\r\n\r\n## Returns\r\n\r\nA table that contains columns in the order specified by the operator arguments. `project-reorder` doesn't rename or remove columns from the table, therefore, all columns that existed in the source table, appear in the result table.","Reorder a table with three columns (a, b, c) so the second column (b) will appear first.\r\n\r\n```\r\nprint a='a', b='b', c='c'\r\n|  project-reorder b\r\n```\r\n\r\n|b|a|c|\r\n|---|---|---|\r\n|b|a|c|\r\n\r\nReorder columns of a table so that columns starting with `a` will appear before other columns.\r\n\r\n```\r\nprint b = 'b', a2='a2', a3='a3', a1='a1'\r\n|  project-reorder a* asc\r\n```\r\n\r\n|a1|a2|a3|b|\r\n|---|---|---|---|\r\n|a1|a2|a3|b|","https://docs.microsoft.com/en-us/azure/kusto/query/projectreorderoperator","projectreorderoperator.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"radians","Converts angle value in degrees into value in radians, using formula `radians = (PI / 180 ) * angle_in_degrees`","## Syntax\r\n\r\n`radians(`*a*`)`\r\n\r\n## Arguments\r\n\r\n* *a*: Angle in degrees (a real number).\r\n\r\n## Returns\r\n\r\n* The corresponding angle in radians for an angle specified in degrees.","```\r\nprint radians0 = radians(90), radians1 = radians(180), radians2 = radians(360) \r\n\r\n```\r\n\r\n|radians0|radians1|radians2|\r\n|---|---|---|\r\n|1.5707963267949|3.14159265358979|6.28318530717959|","https://docs.microsoft.com/en-us/azure/kusto/query/radiansfunction","radiansfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"rand","Returns a random number.","```\r\nrand()\r\nrand(1000)\r\n```\r\n\r\n## Syntax\r\n\r\n* `rand()` - returns a value of type `real`\r\n  with a uniform distribution in the range [0.0, 1.0).\r\n* `rand(` *N* `)` - returns a value of type `real`\r\n  chosen with a uniform distribution from the set {0.0, 1.0, ..., *N* - 1}.","","https://docs.microsoft.com/en-us/azure/kusto/query/randfunction","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"range","Generates a dynamic array holding a series of equally-spaced values.","## Syntax\r\n\r\n`range(`*start*`,` *stop*[`,` *step*]`)` \r\n\r\n## Arguments\r\n\r\n* *start*: The value of the first element in the resulting array. \r\n* *stop*: The value of the last element in the resulting array,\r\nor the least value that is greater than the last element in the resulting\r\narray and within an integer multiple of *step* from *start*.\r\n* *step*: The difference between two consecutive elements of\r\nthe array. \r\nThe default value for *step* is `1` for numeric and `1h` for `timespan` or `datetime`",'The following example returns `[1, 4, 7]`:\r\n\r\n```\r\nT | extend r = range(1, 8, 3)\r\n```\r\n\r\nThe following example returns an array holding all days\r\nin the year 2015:\r\n\r\n```\r\nT | extend r = range(datetime(2015-01-01), datetime(2015-12-31), 1d)\r\n```\r\n\r\nThe following example returns `[1,2,3]`:\r\n\r\n```\r\nrange(1, 3)\r\n```\r\n\r\nThe following example returns `["01:00:00","02:00:00","03:00:00","04:00:00","05:00:00"]`:\r\n\r\n```\r\nrange(1h, 5h)\r\n```',"https://docs.microsoft.com/en-us/azure/kusto/query/rangefunction","rangefunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,"range","Generates a single-column table of values.","Notice that it doesn't have a pipeline input. \r\n\r\n## Syntax\r\n\r\n`range` *columnName* `from` *start* `to` *stop* `step` *step*\r\n\r\n## Arguments\r\n\r\n* *columnName*: The name of the single column in the output table.\r\n* *start*: The smallest value in the output.\r\n* *stop*: The highest value being generated in the output (or a bound\r\non the highest value, if *step* steps over this value).\r\n* *step*: The difference between two consecutive values. \r\n\r\nThe arguments must be numeric, date or timespan values. They can't reference the columns of any table. (If you want to compute the range based on an input table, use the range function, maybe with the mv-expand operator.) \r\n\r\n## Returns\r\n\r\nA table with a single column called *columnName*,\r\nwhose values are *start*, *start* `+` *step*, ... up to and until *stop*.","A table of midnight at the past seven days. The bin (floor) function reduces each time to the start of the day.\r\n\r\n```\r\nrange LastWeek from ago(7d) to now() step 1d\r\n```\r\n\r\n|LastWeek|\r\n|---|\r\n|2015-12-05 09:10:04.627|\r\n|2015-12-06 09:10:04.627|\r\n|...|\r\n|2015-12-12 09:10:04.627|\r\n\r\nA table with a single column called `Steps`\r\nwhose type is `long` and whose values are `1`, `4`, and `7`.\r\n\r\n```\r\nrange Steps from 1 to 8 step 3\r\n```\r\n\r\nThe next example shows how the `range` operator can be used to create\r\na small, ad-hoc, dimension table which is then used to introduce zeros where the source data has no values.\r\n\r\n```\r\nrange TIMESTAMP from ago(4h) to now() step 1m\r\n| join kind=fullouter\r\n  (Traces\r\n      | where TIMESTAMP > ago(4h)\r\n      | summarize Count=count() by bin(TIMESTAMP, 1m)\r\n  ) on TIMESTAMP\r\n| project Count=iff(isnull(Count), 0, Count), TIMESTAMP\r\n| render timechart  \r\n```","https://docs.microsoft.com/en-us/azure/kusto/query/rangeoperator","rangeoperator.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,"reduce","Groups a set of strings together based on values similarity.",'```\r\nT | reduce by LogMessage with threshold=0.1\r\n```\r\n\r\nFor each such group, it outputs a **pattern** that best describes the group (possibly using the\r\nasterix (`*`) character to represent wildcards), a **count** of the number of values in the group,\r\nand a **representative** of the group (one of the original values in the group).\r\n\r\n## Syntax\r\n\r\n*T* `|` `reduce` [`kind` `=` *ReduceKind*] `by` *Expr* [`with` [`threshold` `=` *Threshold*] [`,` `characters` `=` *Characters*] ]\r\n\r\n## Arguments\r\n\r\n* *Expr*: An expression that evaluates to a `string` value.\r\n* *Threshold*: A `real` literal in the range (0..1). Default is 0.1. For large inputs, threshold should be small. \r\n* *Characters*: A `string` literal containing a list of characters to add to the list of characters\r\n  that don\'t break a term. (For example, if you want `aaa=bbbb` and `aaa:bbb` to each be a whole term,\r\n  rather than break on `=` and `:`, use `":="` as the string literal.)\r\n* *ReduceKind*: Specifies the reduce flavor. The only valid value for the time being is `source`.\r\n\r\n## Returns\r\n\r\nThis operator returns a table with three columns (`Pattern`, `Count`, and `Representative`),\r\nand as many rows as there are groups. `Pattern` is the pattern value for the group, with `*`\r\nbeing used as a wildcard (representing arbitrary insertion strings), `Count` counts how\r\nmany rows in the input to the operator are represented by this pattern, and `Representative`\r\nis one value from the input that falls into this group.\r\n\r\nIf `[kind=source]` is specified, the operator will append the `Pattern` column to the existing table structure.\r\nNote that the syntax an schema of this flavor might be subjected to future changes.\r\n\r\nFor example, the result of `reduce by city` might include: \r\n\r\n|Pattern     |Count |Representative|\r\n|------------|------|--------------|\r\n| San *      | 5182 |San Bernard   |\r\n| Saint *    | 2846 |Saint Lucy    |\r\n| Moscow     | 3726 |Moscow        |\r\n| \\* -on- \\* | 2730 |One -on- One  |\r\n| Paris      | 2716 |Paris         |\r\n\r\nAnother example with customized tokenization:\r\n\r\n```\r\nrange x from 1 to 1000 step 1\r\n| project MyText = strcat("MachineLearningX", tostring(toint(rand(10))))\r\n| reduce by MyText  with threshold=0.001 , characters = "X" \r\n```\r\n\r\n|Pattern         |Count|Representative   |\r\n|----------------|-----|-----------------|\r\n|MachineLearning*|1000 |MachineLearningX4|','The following example shows how one might apply the `reduce` operator to a "sanitized"\r\ninput, in which GUIDs in the column being reduced are replaced prior to reducing\r\n\r\n```\r\n// Start with a few records from the Trace table.\r\nTrace | take 10000\r\n// We will reduce the Text column which includes random GUIDs.\r\n// As random GUIDs interfere with the reduce operation, replace them all\r\n// by the string "GUID".\r\n| extend Text=replace(@"[[:xdigit:]]{8}-[[:xdigit:]]{4}-[[:xdigit:]]{4}-[[:xdigit:]]{4}-[[:xdigit:]]{12}", @"GUID", Text)\r\n// Now perform the reduce. In case there are other "quasi-random" identifiers with embedded \'-\'\r\n// or \'_\' characters in them, treat these as non-term-breakers.\r\n| reduce by Text with characters="-_"\r\n```\r\n\r\n## See also\r\n\r\n[autocluster](./autoclusterplugin.md)\r\n\r\n**Notes**\r\n\r\nThe implementation of `reduce` operator is largely based on the paper [A Data Clustering Algorithm for Mining Patterns From Event Logs](https://ristov.github.io/publications/slct-ipom03-web.pdf), by Risto Vaarandi.',"https://docs.microsoft.com/en-us/azure/kusto/query/reduceoperator","reduceoperator.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,"render","Instructs the user agent to render the results of the query in a particular way.",'```\r\nrange x from 0.0 to 2*pi() step 0.01 | extend y=sin(x) | render linechart\r\n```\r\n\r\n> [!NOTE]\r\n> * The render operator should be the last operator in the query, and used only with queries that produce a single tabular data stream result.\r\n> * The render operator does not modify data. It injects an annotation ("Visualization") into the result\'s extended properties. The annotation contains the information provided by the operator in the query.\r\n> * The interpretation of the visualization information is done by the user agent. Different agents (such as Kusto.Explorer,Kusto.WebExplorer) might support different visualizations.\r\n\r\n## Syntax\r\n\r\n*T* `|` `render` *Visualization* [`with` `(` *PropertyName* `=` *PropertyValue* [`,` ...] `)`]\r\n\r\nWhere:\r\n\r\n* *Visualization* indicates the kind of visualization to use. The supported values are:\r\n\r\n\r\n|*Visualization*     |Description|\r\n|--------------------|-|\r\n| `anomalychart`     | Similar to timechart, but [highlights anomalies](./samples.md#get-more-out-of-your-data-in-kusto-with-machine-learning) using [series_decompose_anomalies](./series-decompose-anomaliesfunction.md) function. |\r\n| `areachart`        | Area graph. First column is the x-axis and should be a numeric column. Other numeric columns are y-axes. |\r\n| `barchart`         | First column is the x-axis and can be text, datetime or numeric. Other columns are numeric, displayed as horizontal strips.|\r\n| `card`             | First result record is treated as set of scalar values and shows as a card. |\r\n| `columnchart`      | Like `barchart` with vertical strips instead of horizontal strips.|\r\n| `ladderchart`      | Last two columns are the x-axis, other columns are y-axis.|\r\n| `linechart`        | Line graph. First column is x-axis, and should be a numeric column. Other numeric columns are y-axes. |\r\n| `piechart`         | First column is color-axis, second column is numeric. |\r\n| `pivotchart`       | Displays a pivot table and chart. User can interactively select data, columns, rows and various chart types. |\r\n| `scatterchart`     | Points graph. First column is x-axis and should be a numeric column. Other numeric columns are y-axes. |\r\n| `stackedareachart` | Stacked area graph. First column is x-axis, and should be a numeric column. Other numeric columns are y-axes. |\r\n| `table`            | Default - results are shown as a table.|\r\n| `timechart`        | Line graph. First column is x-axis, and should be datetime. Other (numeric) columns are y-axes. There is one string column whose values are used to "group" the numeric columns and create different lines in the chart (further string columns are ignored). |\r\n| `timepivot`        | Interactive navigation over the events time-line (pivoting on time axis)|\r\n\r\n* *PropertyName*/*PropertyValue* indicate additional information to use when rendering.\r\n  All properties are optional. The supported properties are:\r\n\r\n\r\n|*PropertyName*|*PropertyValue*                                                                   |\r\n|--------------|----------------------------------------------------------------------------------|\r\n|`accumulate`  |Whether the value of each measure gets added to all its predecessors. (`true` or `false`)|\r\n|`kind`        |Further elaboration of the visualization kind. See below.                         |\r\n|`legend`      |Whether to display a legend or not (`visible` or `hidden`).                       |\r\n|`series`      |Comma-delimited list of columns whose combined per-record values define the series that record belongs to.|\r\n|`ymin`        |The minimum value to be displayed on Y-axis.                                      |\r\n|`ymax`        |The maximum value to be displayed on Y-axis.                                      |\r\n|`title`       |The title of the visualization (of type `string`).                                |\r\n|`xaxis`       |How to scale the x-axis (`linear` or `log`).                                      |\r\n|`xcolumn`     |Which column in the result is used for the x-axis.                                |\r\n|`xtitle`      |The title of the x-axis (of type `string`).                                       |\r\n|`yaxis`       |How to scale the y-axis (`linear` or `log`).                                      |\r\n|`ycolumns`    |Comma-delimited list of columns that consist of the values provided per value of the x column.|\r\n|`ysplit`      |How to split multiple the visualization. See below.                               |\r\n|`ytitle`      |The title of the y-axis (of type `string`).                                       |\r\n|`anomalycolumns`|Property relevant only for `anomalychart`. Comma-delimited list of columns which will be considered as anomaly series and displayed as points on the chart|\r\n\r\nSome visualizations can be further elaborated by providing the `kind` property.\r\nThese are:\r\n\r\n|*Visualization*|`kind`             |Description                        |\r\n|---------------|-------------------|-----------------------------------|\r\n|`areachart`    |`default`          |Each "area" stands on its own.     |\r\n|               |`unstacked`        |Same as `default`.                 |\r\n|               |`stacked`          |Stack "areas" to the right.        |\r\n|               |`stacked100`       |Stack "areas" to the right and stretch each one to the same width as the others.|\r\n|`barchart`     |`default`          |Each "bar" stands on its own.      |\r\n|               |`unstacked`        |Same as `default`.                 |\r\n|               |`stacked`          |Stack "bars".                      |\r\n|               |`stacked100`       |Stack "bard" and stretch each one to the same width as the others.|\r\n|`columnchart`  |`default`          |Each "column" stands on its own.   |\r\n|               |`unstacked`        |Same as `default`.                 |\r\n|               |`stacked`          |Stack "columns" one atop the other.|\r\n|               |`stacked100`       |Stack "columns" and stretch each one to the same height as the others.|\r\n|`scatterchart` |`map`              |Expected columns are [Longitude, Latitude] or GeoJSON point. Series column is optional.|\r\n|`piechart`     |`map`              |Expected columns are [Longitude, Latitude] or GeoJSON point, color-axis and numeric. Supported in Kusto Explorer desktop.|\r\n\r\nSome visualizations support splitting into multiple y-axis values:\r\n\r\n|`ysplit`  |Description                                                       |\r\n|----------|------------------------------------------------------------------|\r\n|`none`    |A single y-axis is displayed for all series data. (Default)       |\r\n|`axes`    |A single chart is displayed with multiple y-axes (one per series).|\r\n|`panels`  |One chart is rendered for each `ycolumn` value (up to some limit).|\r\n\r\n> [!NOTE]\r\n> The data model of the render operator looks at the tabular data as if it has\r\nthree kinds of columns:\r\n>\r\n> * The x axis column (indicated by the `xcolumn` property).\r\n> * The series columns (any number of columns indicated by the `series` property.)\r\n  For each record, the combined values of these columns defines a single series,\r\n  and the chart has as many series as there are distinct combined values.\r\n> * The y axis columns (any number of columns indicated by the `ycolumns`\r\n  property).\r\n  For each record, the series has as many measurements ("points" in the chart)\r\n  as there are y-axis columns.\r\n\r\n> [!TIP]\r\n> \r\n> * Use `where`, `summarize` and `top` to limit the volume that you display.\r\n> * Sort the data to define the order of the x-axis.\r\n> * User agents are free to "guess" the value of properties that are not specified\r\n  by the query. In particular, having "uninteresting" columns in the schema of\r\n  the result might translate into them guessing wrong. Try projecting-away such\r\n  columns when that happens.','```\r\nrange x from -2 to 2 step 0.1\r\n| extend sin = sin(x), cos = cos(x)\r\n| extend x_sign = iif(x > 0, "x_pos", "x_neg")\r\n| extend sum_sign = iif(sin + cos > 0, "sum_pos", "sum_neg")\r\n| render linechart with  (ycolumns = sin, cos, series = x_sign, sum_sign)\r\n```\r\n\r\n[Rendering examples in the tutorial](./tutorial.md#render-display-a-chart-or-table).\r\n\r\n[Anomaly detection](./samples.md#get-more-out-of-your-data-in-kusto-with-machine-learning)',"https://docs.microsoft.com/en-us/azure/kusto/query/renderoperator","renderoperator.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"repeat","Generates a dynamic array holding a series of equal values.","## Syntax\r\n\r\n`repeat(`*value*`,` *count*`)` \r\n\r\n## Arguments\r\n\r\n* *value*: The value of the element in the resulting array. The type of *value* can be boolean, integer, long, real, datetime, or timespan.   \r\n* *count*: The count of the elements in the resulting array. The *count* must be an integer number.\r\nIf *count* is equal to zero, a empty array is returned.\r\nIf *count* is less than zero, a null value is returned.","The following example returns `[1, 1, 1]`:\r\n\r\n```\r\nT | extend r = repeat(1, 3)\r\n```","https://docs.microsoft.com/en-us/azure/kusto/query/repeatfunction","repeatfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"replace","Replace all regex matches with another string.","## Syntax\r\n\r\n`replace(`*regex*`,` *rewrite*`,` *text*`)`\r\n\r\n## Arguments\r\n\r\n* *regex*: The [regular expression](https://github.com/google/re2/wiki/Syntax) to search *text*. It can contain capture groups in '('parentheses')'. \r\n* *rewrite*: The replacement regex for any match made by *matchingRegex*. Use `\\0` to refer to the whole match, `\\1` for the first capture group, `\\2` and so on for subsequent capture groups.\r\n* *text*: A string.\r\n\r\n## Returns\r\n\r\n*text* after replacing all matches of *regex* with evaluations of *rewrite*. Matches do not overlap.","This statement:\r\n\r\n```\r\nrange x from 1 to 5 step 1\r\n| extend str=strcat('Number is ', tostring(x))\r\n| extend replaced=replace(@'is (\\d+)', @'was: \\1', str)\r\n```\r\n\r\nHas the following results:\r\n\r\n| x    | str | replaced|\r\n|---|---|---|\r\n| 1    | Number is 1.000000  | Number was: 1.000000|\r\n| 2    | Number is 2.000000  | Number was: 2.000000|\r\n| 3    | Number is 3.000000  | Number was: 3.000000|\r\n| 4    | Number is 4.000000  | Number was: 4.000000|\r\n| 5    | Number is 5.000000  | Number was: 5.000000|","https://docs.microsoft.com/en-us/azure/kusto/query/replacefunction","replacefunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"reverse","Function reverses the order of the input string.\r\nIf the input value isn't of type `string`, then the function forcibly casts the value to type `string`.","## Syntax\r\n\r\n`reverse(`*source*`)`\r\n\r\n## Arguments\r\n\r\n* *source*: input value.  \r\n\r\n## Returns\r\n\r\nThe reverse order of a string value.","```\r\nprint str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\r\n| extend rstr = reverse(str)\r\n```\r\n\r\n|str|rstr|\r\n|---|---|\r\n|ABCDEFGHIJKLMNOPQRSTUVWXYZ|ZYXWVUTSRQPONMLKJIHGFEDCBA|\r\n\r\n```\r\nprint ['int'] = 12345, ['double'] = 123.45, \r\n['datetime'] = datetime(2017-10-15 12:00), ['timespan'] = 3h\r\n| project rint = reverse(['int']), rdouble = reverse(['double']), \r\nrdatetime = reverse(['datetime']), rtimespan = reverse(['timespan'])\r\n```\r\n\r\n|rint|rdouble|rdatetime|rtimespan|\r\n|---|---|---|---|\r\n|54321|54.321|Z0000000.00:00:21T51-01-7102|00:00:30|","https://docs.microsoft.com/en-us/azure/kusto/query/reversefunction","reversefunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"round","Returns the rounded source to the specified precision.","## Syntax\r\n\r\n`round(`*source* [`,` *Precision*]`)`\r\n\r\n## Arguments\r\n\r\n* *source*: The source scalar the round is calculated on.\r\n* *Precision*: Number of digits the source will be rounded to.(default value is 0)\r\n\r\n## Returns\r\n\r\nThe rounded source to the specified precision.\r\n\r\nRound is different than [`bin()`](binfunction.md)/[`floor()`](floorfunction.md) in\r\nthat the first rounds a number to a specific number of digits while the last rounds value to an integer multiple \r\nof a given bin size (round(2.15, 1) returns 2.2 while bin(2.15, 1) returns 2).","```\r\nround(2.15, 1)                   // 2.2\r\nround(2.15) (which is the same as round(2.15, 0))                   // 2\r\nround(-50.55, -2)                   // -100\r\nround(21.5, -1)                   // 20\r\n```","https://docs.microsoft.com/en-us/azure/kusto/query/roundfunction","roundfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"row_cumsum","Calculates the cumulative sum of a column in a [serialized row set](./windowsfunctions.md#serialized-row-set).","## Syntax\r\n\r\n`row_cumsum` `(` *Term* [`,` *Restart*] `)`\r\n\r\n* *Term* is an expression indicating the value to be summed.\r\n  The expression must be a scalar of one of the following types:\r\n  `decimal`, `int`, `long`, or `real`. Null *Term* values do not affect the\r\n  sum.\r\n* *Restart* is an optional argument of type `bool` that indicates when the\r\n  accumulation operation should be restarted (set back to 0). It can be\r\n  used to indicate partitions of the data; see the second example below.\r\n\r\n## Returns\r\n\r\nThe function returns the cumulative sum of its argument.",'The following example shows how to calculate the cumulative sum of the first\r\nfew even integers.\r\n\r\n```\r\ndatatable (a:long) [\r\n    1, 2, 3, 4, 5, 6, 7, 8, 9, 10\r\n]\r\n| where a%2==0\r\n| serialize cs=row_cumsum(a)\r\n```\r\n\r\na    | cs\r\n-----|-----\r\n2    | 2\r\n4    | 6\r\n6    | 12\r\n8    | 20\r\n10   | 30\r\n\r\nThis example shows how to calculate the cumulative sum (here, of `salary`)\r\nwhen the data is partitioned (here, by `name`):\r\n\r\n```\r\ndatatable (name:string, month:int, salary:long)\r\n[\r\n    "Alice", 1, 1000,\r\n    "Bob",   1, 1000,\r\n    "Alice", 2, 2000,\r\n    "Bob",   2, 1950,\r\n    "Alice", 3, 1400,\r\n    "Bob",   3, 1450,\r\n]\r\n| order by name asc, month asc\r\n| extend total=row_cumsum(salary, name != prev(name))\r\n```\r\n\r\nname   | month  | salary  | total\r\n-------|--------|---------|------\r\nAlice  | 1      | 1000    | 1000\r\nAlice  | 2      | 2000    | 3000\r\nAlice  | 3      | 1400    | 4400\r\nBob    | 1      | 1000    | 1000\r\nBob    | 2      | 1950    | 2950\r\nBob    | 3      | 1450    | 4400',"https://docs.microsoft.com/en-us/azure/kusto/query/rowcumsumfunction","rowcumsumfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"row_number","Returns the current row's index in a [serialized row set](./windowsfunctions.md#serialized-row-set).\r\nThe row index starts by default at `1` for the first row, and is incremented by `1` for each additional row.\r\nOptionally, the row index can start at a different value than `1`.\r\nAdditionally, the row index may be reset according to some provided predicate.","## Syntax\r\n\r\n`row_number` `(` [*StartingIndex* [`,` *Restart*]] `)`\r\n\r\n* *StartingIndex* is a constant expression of type `long` indicating the value\r\n  of the row index to start at (or to restart to). The default value is `1`.\r\n* *Restart* is an optional argument of type `bool` that indicates when the\r\n  numbering is to be restarted to the *StartingIndex* value. If not provided,\r\n  the default value of `false` is used.\r\n\r\n## Returns\r\n\r\nThe function returns the row index of the current row as a value of type `long`.",'The following example returns a table with two columns, the first column (`a`)\r\nwith numbers from `10` down to `1`, and the second column (`rn`) with numbers\r\nfrom `1` up to `10`:\r\n\r\n```\r\nrange a from 1 to 10 step 1\r\n| sort by a desc\r\n| extend rn=row_number()\r\n```\r\n\r\nThe following example is similar to the above, only the second column (`rn`)\r\nstarts at `7`:\r\n\r\n```\r\nrange a from 1 to 10 step 1\r\n| sort by a desc\r\n| extend rn=row_number(7)\r\n```\r\n\r\nThe last example shows how one can partition the data and number the rows\r\nper each partition. Here, we partition the data by `Airport`:\r\n\r\n```\r\ndatatable (Airport:string, Airline:string, Departures:long)\r\n[\r\n  "TLV", "LH", 1,\r\n  "TLV", "LY", 100,\r\n  "SEA", "LH", 1,\r\n  "SEA", "BA", 2,\r\n  "SEA", "LY", 0\r\n]\r\n| sort by Airport asc, Departures desc\r\n| extend Rank=row_number(1, prev(Airport) != Airport)\r\n```\r\n\r\nRunning this query produces the following result:\r\n\r\nAirport  | Airline  | Departures  | Rank\r\n---------|----------|-------------|------\r\nSEA      | BA       | 2           | 1\r\nSEA      | LH       | 1           | 2\r\nSEA      | LY       | 0           | 3\r\nTLV      | LY       | 100         | 1\r\nTLV      | LH       | 1           | 2',"https://docs.microsoft.com/en-us/azure/kusto/query/rownumberfunction","rownumberfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"row_window_session","`row_window_session()` calculates session start values of a column in a [serialized row set](./windowsfunctions.md#serialized-row-set).","## Syntax\r\n\r\n`row_window_session` `(` *`Expr`* `,` *`MaxDistanceFromFirst`* `,` *`MaxDistanceBetweenNeighbors`* [`,` *`Restart`*] `)`\r\n\r\n* *`Expr`* is an expression whose values are grouped together in sessions.\r\n  Null values produce null values, and the next value starts a new session.\r\n  *`Expr`* must be a scalar expression of type `datetime`.\r\n* *`MaxDistanceFromFirst`* establishes one criterion for starting a new session:\r\n  The maximum distance between the current value of *`Expr`* and the value of\r\n  *`Expr`* at the beginning of the session.\r\n  It is a scalar constant of type `timespan`.\r\n* *`MaxDistanceBetweenNeighbors`* establishes a second criterion for starting a new session:\r\n  The maximum distance from one value of *`Expr`* to the next.\r\n  It is a scalar constant of type `timespan`.\r\n* *Restart* is an optional scalar expression of type `boolean`. If specified,\r\n  every value that evaluates to `true` will immediately restart the session.\r\n\r\n## Returns\r\n\r\nThe function returns the values at the beginning of each session.\r\n\r\n**Notes**\r\n\r\nThe function has the following conceptual calculation model:\r\n\r\n1. Go over the input sequence of values *`Expr`* in order.\r\n1. For every value, determine if it establishes a new session.\r\n1. If it establishes a new session, emit the value of *`Expr`*. Otherwise, emit the previous value of *`Expr`*.\r\n\r\nThe condition that determines if the value represents a new session is\r\na logical OR one of the following conditions:\r\n\r\n* If there was no previous session value, or the previous session value was null.\r\n* If the value of *`Expr`* equals or exceeds the previous session value plus\r\n  *`MaxDistanceFromFirst`*.\r\n* If the value of *`Expr`* equals or exceeds the previous value of *`Expr`*\r\n  plus *`MaxDistanceBetweenNeighbors`*.","The following example shows how to calculate the session start values for a table\r\nwith two columns: an `ID` column that identifies a sequence, and a `Timestamp`\r\ncolumn that gives the time at which each record occurred. In this example,\r\na session can't exceed 1 hour, and it continues as long as records are less than\r\n5 minutes apart.\r\n\r\n```\r\ndatatable (ID:string, Timestamp:datetime) [\r\n    // ...\r\n]\r\n| sort by ID asc, Timestamp asc\r\n| extend SessionStarted = row_window_session(Timestamp, 1h, 5m, ID != prev(ID))\r\n```","https://docs.microsoft.com/en-us/azure/kusto/query/row-window-session-function","row-window-session-function.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,"sample","Returns up to the specified number of random rows from the input table.","```\r\nT | sample 5\r\n```\r\n\r\n> [!NOTE]\r\n> * `sample` is geared for speed rather than even distribution of values. Specifically, it means that it will not produce 'fair' results if used after operators that union 2 data sets of different sizes (such as a `union` or `join` operators). It's recommended to use `sample` right after the table reference and filters.\r\n> * `sample` is a non-deterministic operator, and will return different result set each time it is evaluated during the query. For example, the following query yields two different rows (even if one would expect to return the same row twice).\r\n\r\n## Syntax\r\n\r\n*T* `| sample` *NumberOfRows*\r\n\r\n## Arguments\r\n\r\n* *NumberOfRows*: The number of rows of *T* to return. You can specify any numeric expression.","```\r\nlet _data = range x from 1 to 100 step 1;\r\nlet _sample = _data | sample 1;\r\nunion (_sample), (_sample)\r\n```\r\n\r\n| x   |\r\n| --- |\r\n| 83  |\r\n| 3   |\r\n\r\nTo ensure that in example above `_sample` is calculated once, one can use [materialize()](./materializefunction.md) function:\r\n\r\n```\r\nlet _data = range x from 1 to 100 step 1;\r\nlet _sample = materialize(_data | sample 1);\r\nunion (_sample), (_sample)\r\n```\r\n\r\n| x   |\r\n| --- |\r\n| 34  |\r\n| 34  |\r\n\r\nTo sample a certain percentage of your data (rather than a specified number of rows), you can use\r\n\r\n```\r\nStormEvents | where rand() < 0.1\r\n```\r\n\r\nTo sample keys rather than rows (for example - sample 10 Ids and get all rows for these Ids) you can use [`sample-distinct`](./sampledistinctoperator.md) in combination with the `in` operator.\r\n\r\n```\r\nlet sampleEpisodes = StormEvents | sample-distinct 10 of EpisodeId;\r\nStormEvents\r\n| where EpisodeId in (sampleEpisodes)\r\n```","https://docs.microsoft.com/en-us/azure/kusto/query/sampleoperator","sampleoperator.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,"sample-distinct","Returns a single column that contains up to the specified number of distinct values of the requested column.","the default (and currently only) flavor of the operator tries to return an answer as quickly as possible (rather than trying to make a fair sample)\r\n\r\n```\r\nT | sample-distinct 5 of DeviceId\r\n```\r\n\r\n## Syntax\r\n\r\n*T* `| sample-distinct` *NumberOfValues* `of` *ColumnName*\r\n\r\n## Arguments\r\n\r\n* *NumberOfValues*: The number distinct values of *T* to return. You can specify any numeric expression.\r\n\r\n**Tips**\r\n\r\nCan be handy to sample a population by putting `sample-distinct` in a let statement and later filter using the `in` operator (see example) \r\n\r\nIf you want the top values rather than just a sample, you can use the [top-hitters](tophittersoperator.md) operator \r\n\r\nif you want to sample data rows (rather than values of a specific column), refer to the [sample operator](sampleoperator.md)","Get 10 distinct values from a population\r\n\r\n```\r\nStormEvents | sample-distinct 10 of EpisodeId\r\n\r\n```\r\n\r\nSample a population and do further computation knowing the summarize won't exceed query limits. \r\n\r\n```\r\nlet sampleEpisodes = StormEvents | sample-distinct 10 of EpisodeId;\r\nStormEvents \r\n| where EpisodeId in (sampleEpisodes) \r\n| summarize totalInjuries=sum(InjuriesDirect) by EpisodeId\r\n```","https://docs.microsoft.com/en-us/azure/kusto/query/sampledistinctoperator","sampledistinctoperator.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,"search","The search operator provides a multi-table/multi-column search experience.",'## Syntax\r\n\r\n* [*TabularSource* `|`] `search` [`kind=`*CaseSensitivity*] [`in` `(`*TableSources*`)`] *SearchPredicate*\r\n\r\n## Arguments\r\n\r\n* *TabularSource*: An optional tabular expression that acts as a data source to be searched over,\r\n  such as a table name, a [union operator](unionoperator.md), the results\r\n  of a tabular query, etc. Cannot appear together with the optional phrase that includes *TableSources*.\r\n* *CaseSensitivity*: An optional flag that controls the behavior of all `string` scalar operators\r\n  with respect to case sensitivity. Valid values are the two synonyms `default` and `case_insensitive`\r\n  (which is the default for operators such as `has`, namely being case-insensitive) and `case_sensitive`\r\n  (which forces all such operators into case-sensitive matching mode).\r\n* *TableSources*: An optional comma-separated list of "wildcarded" table names to take part in the search.\r\n  The list has the same syntax as the list of the [union operator](unionoperator.md).\r\n  Cannot appear together with the optional *TabularSource*.\r\n* *SearchPredicate*: A mandatory predicate that defines what to search for (in other words,\r\n  a Boolean expression that is evaluated for every record in the input and that, if it returns\r\n  `true`, the record is outputted.)\r\n  The syntax for *SearchPredicate* extends and modifies the normal Kusto syntax for Boolean expressions:\r\n  **String matching extensions**: String literals that appear as terms in the *SearchPredicate* indicate a term\r\n    match between all columns and the literal using `has`, `hasprefix`, `hassuffix`, and the inverted (`!`)\r\n    or case-sensitive (`sc`) versions of these operators. The decision whether to apply `has`, `hasprefix`,\r\n    or `hassuffix` depends on whether the literal starts or ends (or both) by an asterisk (`*`). Asterisks\r\n    inside the literal are not allowed.\r\n    |Literal   |Operator   |\r\n    |----------|-----------|\r\n    |`billg`   |`has`      |\r\n    |`*billg`  |`hassuffix`|\r\n    |`billg*`  |`hasprefix`|\r\n    |`*billg*` |`contains` |\r\n    |`bi*lg`   |`matches regex`|\r\n  **Column restriction**: By default, string matching extensions attempt to match against all columns\r\n    of the data set. It is possible to restrict this matching to a particular column by using\r\n    the following syntax: *ColumnName*`:`*StringLiteral*.\r\n  **String equality**: Exact matches of a column against a string value (instead of a term-match)\r\n    can be done using the syntax *ColumnName*`==`*StringLiteral*.\r\n  **Other Boolean expressions**: All regular Kusto Boolean expressions are supported by the syntax.\r\n    For example, `"error" and x==123` means: search for records that have the term `error` in any\r\n    of their columns, and have the value `123` in the `x` column."\r\n  **Regex match**: Regular expression matching is indicated using *Column* `matches regex` *StringLiteral*\r\n    syntax, where *StringLiteral* is the regex pattern.\r\n\r\nNote that if both *TabularSource* and *TableSources* are omitted, the search is carried over all unrestricted tables\r\nand views of the database in scope.\r\n\r\n## Summary of string matching extensions\r\n\r\n|# |Syntax                                 |Meaning (equivalent `where`)           |Comments|\r\n  |--|---------------------------------------|---------------------------------------|--------|\r\n  | 1|`search "err"`                         |`where * has "err"`                    ||\r\n  | 2|`search in (T1,T2,A*) and "err"`       |<code>union T1,T2,A* &#124; where * has "err"<code>   ||\r\n  | 3|`search col:"err"`                     |`where col has "err"`                  ||\r\n  | 4|`search col=="err"`                    |`where col=="err"`                     ||\r\n  | 5|`search "err*"`                        |`where * hasprefix "err"`              ||\r\n  | 6|`search "*err"`                        |`where * hassuffix "err"`              ||\r\n  | 7|`search "*err*"`                       |`where * contains "err"`               ||\r\n  | 8|`search "Lab*PC"`                      |`where * matches regex @"\\bLab.*PC\\b"`||\r\n  | 9|`search *`                             |`where 0==0`                           ||\r\n  |10|`search col matches regex "..."`       |`where col matches regex "..."`        ||\r\n  |11|`search kind=case_sensitive`           |                                       |All string comparisons are case-sensitive|\r\n  |12|`search "abc" and ("def" or "hij")`    |`where * has "abc" and (* has "def" or * has hij")`||\r\n  |13|`search "err" or (A>a and A<b)`        |`where * has "err" or (A>a and A<b)`   ||\r\n\r\n## Remarks\r\n\r\n**Unlike** the [find operator](findoperator.md), the `search` operator does not support the following:\r\n\r\n1. `withsource=`: The output will always include a column called `$table` of type `string` whose value\r\n   is the table name from which each record was retrieved (or some system-generated name if the source\r\n   is not a table but a composite expression).\r\n2. `project=`, `project-smart`: The output schema is equivalent to `project-smart` output schema.','```\r\n// 1. Simple term search over all unrestricted tables and views of the database in scope\r\nsearch "billg"\r\n\r\n// 2. Like (1), but looking only for records that match both terms\r\nsearch "billg" and ("steveb" or "satyan")\r\n\r\n// 3. Like (1), but looking only in the TraceEvent table\r\nsearch in (TraceEvent) and "billg"\r\n\r\n// 4. Like (2), but performing a case-sensitive match of all terms\r\nsearch "BillB" and ("SteveB" or "SatyaN")\r\n\r\n// 5. Like (1), but restricting the match to some columns\r\nsearch CEO:"billg" or CSA:"billg"\r\n\r\n// 6. Like (1), but only for some specific time limit\r\nsearch "billg" and Timestamp >= datetime(1981-01-01)\r\n\r\n// 7. Searches over all the higher-ups\r\nsearch in (C*, TF) "billg" or "davec" or "steveb"\r\n\r\n// 8. A different way to say (7). Prefer to use (7) when possible\r\nunion C*, TF | search "billg" or "davec" or "steveb"\r\n```\r\n\r\n## Performance Tips\r\n\r\n|# |Tip                                                                                  |Prefer                                        |Over                                                                    |\r\n  |--|-------------------------------------------------------------------------------------|----------------------------------------------|------------------------------------------------------------------------|\r\n  | 1| Prefer to use a single `search` operator over several consecutive `search` operators|`search "billg" and ("steveb" or "satyan")`   |<code>search "billg" &#124; search "steveb" or "satyan"<code>           ||\r\n  | 2| Prefer to filter inside the `search` operator                                       |`search "billg" and "steveb"`                 |<code>search * &#124; where * has "billg" and * has "steveb"<code>      ||',"https://docs.microsoft.com/en-us/azure/kusto/query/searchoperator","searchoperator.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,"serialize","Marks that the order of the input row set is safe to use for window functions.","The operator has a declarative meaning. It marks the input row set as serialized (ordered), so that [window functions](./windowsfunctions.md) can be applied to it.\r\n\r\n```\r\nT | serialize rn=row_number()\r\n```\r\n\r\n## Syntax\r\n\r\n`serialize` [*Name1* `=` *Expr1* [`,` *Name2* `=` *Expr2*]...]\r\n\r\n* The *Name*/*Expr* pairs are similar to those pairs in the [extend operator](./extendoperator.md).",'```\r\nTraces\r\n| where ActivityId == "479671d99b7b"\r\n| serialize\r\n\r\nTraces\r\n| where ActivityId == "479671d99b7b"\r\n| serialize rn = row_number()\r\n```\r\n\r\nThe output row set of the following operators is marked as serialized.\r\n\r\n[range](./rangeoperator.md), [sort](./sortoperator.md), [order](./orderoperator.md), [top](./topoperator.md), [top-hitters](./tophittersoperator.md), [getschema](./getschemaoperator.md).\r\n\r\nThe output row set of the following operators is marked as non-serialized.\r\n\r\n[sample](./sampleoperator.md), [sample-distinct](./sampledistinctoperator.md), [distinct](./distinctoperator.md), [join](./joinoperator.md), \r\n[top-nested](./topnestedoperator.md), [count](./countoperator.md), [summarize](./summarizeoperator.md), [facet](./facetoperator.md), [mv-expand](./mvexpandoperator.md), \r\n[evaluate](./evaluateoperator.md), [reduce by](./reduceoperator.md), [make-series](./make-seriesoperator.md)\r\n\r\nAll other operators preserve the serialization property. \r\nIf the input row set is serialized, then the output row set is also serialized.',"https://docs.microsoft.com/en-us/azure/kusto/query/serializeoperator","serializeoperator.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"series_add","Calculates the element-wise addition of two numeric series inputs.","## Syntax\r\n\r\n`series_add(`*series1*`,` *series2*`)`\r\n\r\n## Arguments\r\n\r\n* *series1, series2*: Input numeric arrays to be element-wise added into a dynamic array result. All arguments must be dynamic arrays. \r\n\r\n## Returns\r\n\r\nDynamic array of calculated element-wise add operation between the two inputs. Any non-numeric element or non-existing element (arrays of different sizes) yields a `null` element value.","```\r\nrange x from 1 to 3 step 1\r\n| extend y = x * 2\r\n| extend z = y * 2\r\n| project s1 = pack_array(x,y,z), s2 = pack_array(z, y, x)\r\n| extend s1_add_s2 = series_add(s1, s2)\r\n```\r\n\r\n|s1|s2|s1_add_s2|\r\n|---|---|---|\r\n|[1,2,4]|[4,2,1]|[5,4,5]|\r\n|[2,4,8]|[8,4,2]|[10,8,10]|\r\n|[3,6,12]|[12,6,3]|[15,12,15]|","https://docs.microsoft.com/en-us/azure/kusto/query/series-addfunction","series-addfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"series_decompose","Applies a decomposition transformation on a series.",'Takes an expression containing a series (dynamic numerical array) as input and decomposes it to seasonal, trend, and residual components.\r\n\r\n## Syntax\r\n\r\n`series_decompose(`*Series* `[,` *Seasonality*`,` *Trend*`,` *Test_points*`,` *Seasonality_threshold*`])`\r\n\r\n## Arguments\r\n\r\n* *Series*: Dynamic array cell, which is an array of numeric values, typically the resulting output of [make-series](make-seriesoperator.md) or [make_list](makelist-aggfunction.md) operators\r\n* *Seasonality*: An integer controlling the seasonal analysis, containing either\r\n    * -1: autodetect seasonality using [series_periods_detect](series-periods-detectfunction.md) (default).\r\n    * period: positive integer specifying the expected period in number of bins. For example, if the series is in 1-h bins, a weekly period is 168 bins.\r\n    * 0: no seasonality (skip extracting this component).    \r\n* *Trend*: A string controlling the trend analysis, containing one of the following values:\r\n    * "avg": define trend component as average(x) (default)\r\n    * "linefit": extract trend component using linear regression.\r\n    * "none": no trend, skip extracting this component.    \r\n* *Test_points*: 0 (default) or positive integer, specifying the number of points at the end of the series to exclude from the learning (regression) process. This parameter should be set for forecasting purposes.\r\n* *Seasonality_threshold*: The threshold for seasonality score when *Seasonality* is set to autodetect, the default score threshold is `0.6`. For more information, see [series_periods_detect](series-periods-detectfunction.md).\r\n\r\n**Return**\r\n\r\nThe function returns the following respective series:\r\n\r\n* `baseline`: the predicted value of the series (sum of seasonal and trend components, see below).\r\n* `seasonal`: the series of the seasonal component:\r\n    * if the period isn\'t detected or is explicitly set to 0: constant 0.\r\n    * if detected or set to positive integer: median of the series points in the same phase\r\n* `trend`: the series of the trend component.\r\n* `residual`: the series of the residual component (that is, x - baseline).\r\n  \r\n\r\n**Notes**\r\n\r\n* Component execution order:\r\n    1. Extract the seasonal series\r\n    2. Subtract it from x, generating the deseasonal series\r\n    3. Extract the trend component from the deseasonal series\r\n    4. Create the baseline = seasonal + trend\r\n    5. Create the residual = x - baseline\r\n    \r\n* Either seasonality and, or trend should be enabled. Otherwise, the function is redundant, and just returns baseline = 0 and residual = x.\r\n\r\n**More about series decomposition**\r\n\r\nThis method is usually applied to time series of metrics expected to manifest periodic and/or trend behavior. You can use the method to  forecast future metric values and/or detect anomalous values. The implicit assumption of this regression process is that apart from seasonal and trend behavior, the time series is stochastic and randomly distributed. Forecast future metric values from the seasonal and trend components while ignoring the residual part. Detect anomalous values based on outlier detection only on the residual part only. Further details can be found in the [Time Series Decomposition chapter](https://otexts.com/fpp2/decomposition.html).',"**Weekly seasonality**\r\n\r\nIn the following example, we generate a series with weekly seasonality and without trend, we then add some outliers to it. `series_decompose` finds and automatically detects the seasonality, and generates a baseline that is almost identical to the seasonal component. The outliers we added can be clearly seen in the residuals component.\r\n\r\n```\r\nlet ts=range t from 1 to 24*7*5 step 1 \r\n| extend Timestamp = datetime(2018-03-01 05:00) + 1h * t \r\n| extend y = 2*rand() + iff((t/24)%7>=5, 10.0, 15.0) - (((t%24)/10)*((t%24)/10)) // generate a series with weekly seasonality\r\n| extend y=iff(t==150 or t==200 or t==780, y-8.0, y) // add some dip outliers\r\n| extend y=iff(t==300 or t==400 or t==600, y+8.0, y) // add some spike outliers\r\n| summarize Timestamp=make_list(Timestamp, 10000),y=make_list(y, 10000);\r\nts \r\n| extend series_decompose(y)\r\n| render timechart  \r\n```\r\n\r\n![Series decompose 1](images/samples/series-decompose1.png)\r\n**Weekly seasonality with trend**\r\n\r\nIn this example, we add a trend to the series from the previous example. First, we run `series_decompose` with the default parameters. The trend `avg` default value only takes the average and doesn't compute the trend. The generated baseline doesn't contain the trend. When observing the trend in the residuals, it becomes apparent that this example is less accurate than the previous example.\r\n\r\n```\r\nlet ts=range t from 1 to 24*7*5 step 1 \r\n| extend Timestamp = datetime(2018-03-01 05:00) + 1h * t \r\n| extend y = 2*rand() + iff((t/24)%7>=5, 5.0, 15.0) - (((t%24)/10)*((t%24)/10)) + t/72.0 // generate a series with weekly seasonality and ongoing trend\r\n| extend y=iff(t==150 or t==200 or t==780, y-8.0, y) // add some dip outliers\r\n| extend y=iff(t==300 or t==400 or t==600, y+8.0, y) // add some spike outliers\r\n| summarize Timestamp=make_list(Timestamp, 10000),y=make_list(y, 10000);\r\nts \r\n| extend series_decompose(y)\r\n| render timechart  \r\n```\r\n\r\n![Series decompose 2](images/samples/series-decompose2.png)\r\nNext, we rerun the same example. Since we're expecting a trend in the series, we specify `linefit` in the trend parameter. We can see that the positive trend is detected and the baseline is much closer to the input series. The residuals are close to zero, and only the outliers stand out. We can see all the components on the series in the chart.\r\n\r\n```\r\nlet ts=range t from 1 to 24*7*5 step 1 \r\n| extend Timestamp = datetime(2018-03-01 05:00) + 1h * t \r\n| extend y = 2*rand() + iff((t/24)%7>=5, 5.0, 15.0) - (((t%24)/10)*((t%24)/10)) + t/72.0 // generate a series with weekly seasonality and ongoing trend\r\n| extend y=iff(t==150 or t==200 or t==780, y-8.0, y) // add some dip outliers\r\n| extend y=iff(t==300 or t==400 or t==600, y+8.0, y) // add some spike outliers\r\n| summarize Timestamp=make_list(Timestamp, 10000),y=make_list(y, 10000);\r\nts \r\n| extend series_decompose(y, -1, 'linefit')\r\n| render timechart  \r\n```\r\n\r\n![Series decompose 3](images/samples/series-decompose3.png)","https://docs.microsoft.com/en-us/azure/kusto/query/series-decomposefunction","series-decomposefunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"series_decompose_anomalies","Anomaly Detection is based on series decomposition.\r\nFor more information, see [series_decompose()](series-decomposefunction.md).",'The function takes an expression containing a series (dynamic numerical array) as input, and extracts anomalous points with scores.\r\n\r\n## Syntax\r\n\r\n`series_decompose_anomalies (`*Series* `[, ` *Threshold*`,` *Seasonality*`,` *Trend*`, ` *Test_points*`, ` *AD_method*`,` *Seasonality_threshold* `])`\r\n\r\n## Arguments\r\n\r\n* *Series*: Dynamic array cell that is an array of numeric values, typically the resulting output of [make-series](make-seriesoperator.md) or [make_list](makelist-aggfunction.md) operators\r\n* *Threshold*: Anomaly threshold, default 1.5 (k value) for detecting mild or stronger anomalies\r\n* *Seasonality*: An integer controlling the seasonal analysis, containing either\r\n    * -1: Autodetect seasonality (using [series_periods_detect](series-periods-detectfunction.md)) [default]\r\n    * 0: No seasonality (that is, skip extracting this component)\r\n    * period: Positive integer, specifying the expected period in number of bins unit. For example, if the series is in one hour bins, a weekly period is 168 bins\r\n* *Trend*: A string controlling the trend analysis, containing either\r\n    * "avg": Define trend component as average of the series [default]\r\n    * "none": No trend, skip extracting this component\r\n    * "linefit": Extract trend component using linear regression\r\n* *Test_points*: 0 [default] or a positive integer, that specifies the number of points at the end of the series to exclude from the learning (regression) process. This parameter should be set for forecasting purposes\r\n* *AD_method*: A string controlling the anomaly detection method on the residual time series, containing one of:\r\n    * \u201cctukey\u201d: [Tukey\u2019s fence test](https://en.wikipedia.org/wiki/Outlier#Tukey\'s_fences) with custom 10th-90th percentile range [default]\r\n    * \u201ctukey\u201d: [Tukey\u2019s fence test](https://en.wikipedia.org/wiki/Outlier#Tukey\'s_fences) with standard 25th-75th percentile range\r\nFor more information on residual time series, see [series_outliers](series-outliersfunction.md)\r\n* *Seasonality_threshold*: The threshold for seasonality score when *Seasonality* is set to autodetect. The default score threshold is `0.6`. For more information, see [series_periods_detect](series-periods-detectfunction.md)\r\n\r\n## Returns\r\n\r\nThe function returns the following respective series:\r\n\r\n* `ad_flag`: A ternary series containing (+1, -1, 0) marking up/down/no anomaly respectively\r\n* `ad_score`: Anomaly score\r\n* `baseline`: The predicted value of the series, according to the decomposition\r\n\r\n## The algorithm\r\n\r\nThis function follows these steps:\r\n\r\n1. Calls [series_decompose()](series-decomposefunction.md) with the respective parameters, to create the baseline and residuals series.\r\n1. Calculates ad_score series by applying [series_outliers()](series-outliersfunction.md) with the chosen anomaly detection method on the residuals series.\r\n1. Calculates the ad_flag series by applying the threshold on the ad_score to mark up/down/no anomaly respectively.',"### Detect anomalies in weekly seasonality\r\n\r\nIn the following example, generate a series with weekly seasonality, and then add some outliers to it. `series_decompose_anomalies` autodetects the seasonality and generates a baseline that captures the repetitive pattern. The outliers you added can be clearly spotted in the ad_score component.\r\n\r\n```\r\nlet ts=range t from 1 to 24*7*5 step 1 \r\n| extend Timestamp = datetime(2018-03-01 05:00) + 1h * t \r\n| extend y = 2*rand() + iff((t/24)%7>=5, 10.0, 15.0) - (((t%24)/10)*((t%24)/10)) // generate a series with weekly seasonality\r\n| extend y=iff(t==150 or t==200 or t==780, y-8.0, y) // add some dip outliers\r\n| extend y=iff(t==300 or t==400 or t==600, y+8.0, y) // add some spike outliers\r\n| summarize Timestamp=make_list(Timestamp, 10000),y=make_list(y, 10000);\r\nts \r\n| extend series_decompose_anomalies(y)\r\n| render timechart  \r\n```\r\n\r\n![Weekly seasonality showing baseline and outliers](images/series-decompose-anomaliesfunction/weekly-seasonality-outliers.png)\r\n\r\n### Detect anomalies in weekly seasonality with trend\r\n\r\nIn this example, add a trend to the series from the previous example. First, run `series_decompose_anomalies` with the default parameters in which the trend `avg` default value only takes the average and doesn't compute the trend. The generated baseline doesn't contain the trend and is less exact, compared to the previous example. Consequently, some of the outliers you inserted in the data aren't detected because of the higher variance.\r\n\r\n```\r\nlet ts=range t from 1 to 24*7*5 step 1 \r\n| extend Timestamp = datetime(2018-03-01 05:00) + 1h * t \r\n| extend y = 2*rand() + iff((t/24)%7>=5, 5.0, 15.0) - (((t%24)/10)*((t%24)/10)) + t/72.0 // generate a series with weekly seasonality and ongoing trend\r\n| extend y=iff(t==150 or t==200 or t==780, y-8.0, y) // add some dip outliers\r\n| extend y=iff(t==300 or t==400 or t==600, y+8.0, y) // add some spike outliers\r\n| summarize Timestamp=make_list(Timestamp, 10000),y=make_list(y, 10000);\r\nts \r\n| extend series_decompose_anomalies(y)\r\n| extend series_decompose_anomalies_y_ad_flag = \r\nseries_multiply(10, series_decompose_anomalies_y_ad_flag) // multiply by 10 for visualization purposes\r\n| render timechart\r\n```\r\n\r\n![Weekly seasonality outliers with trend](images/series-decompose-anomaliesfunction/weekly-seasonality-outliers-with-trend.png)\r\nNext, run the same example, but since you're expecting a trend in the series, specify `linefit` in the trend parameter. You can see that the baseline is much closer to the input series. All the inserted outliers are detected, and also some false positives. See the next example on tweaking the threshold.\r\n\r\n```\r\nlet ts=range t from 1 to 24*7*5 step 1 \r\n| extend Timestamp = datetime(2018-03-01 05:00) + 1h * t \r\n| extend y = 2*rand() + iff((t/24)%7>=5, 5.0, 15.0) - (((t%24)/10)*((t%24)/10)) + t/72.0 // generate a series with weekly seasonality and ongoing trend\r\n| extend y=iff(t==150 or t==200 or t==780, y-8.0, y) // add some dip outliers\r\n| extend y=iff(t==300 or t==400 or t==600, y+8.0, y) // add some spike outliers\r\n| summarize Timestamp=make_list(Timestamp, 10000),y=make_list(y, 10000);\r\nts \r\n| extend series_decompose_anomalies(y, 1.5, -1, 'linefit')\r\n| extend series_decompose_anomalies_y_ad_flag = \r\nseries_multiply(10, series_decompose_anomalies_y_ad_flag) // multiply by 10 for visualization purposes\r\n| render timechart  \r\n```\r\n\r\n![Weekly seasonality anomalies with linefit trend](images/series-decompose-anomaliesfunction/weekly-seasonality-linefit-trend.png)\r\n\r\n### Tweak the anomaly detection threshold\r\n\r\nA few noisy points were detected as anomalies in the previous example. Now increase the anomaly detection threshold from a default of 1.5 to 2.5. Use this interpercentile range, so that only stronger anomalies are detected. Now, only the outliers you inserted in the data, will be detected.\r\n\r\n```\r\nlet ts=range t from 1 to 24*7*5 step 1 \r\n| extend Timestamp = datetime(2018-03-01 05:00) + 1h * t \r\n| extend y = 2*rand() + iff((t/24)%7>=5, 5.0, 15.0) - (((t%24)/10)*((t%24)/10)) + t/72.0 // generate a series with weekly seasonality and onlgoing trend\r\n| extend y=iff(t==150 or t==200 or t==780, y-8.0, y) // add some dip outliers\r\n| extend y=iff(t==300 or t==400 or t==600, y+8.0, y) // add some spike outliers\r\n| summarize Timestamp=make_list(Timestamp, 10000),y=make_list(y, 10000);\r\nts \r\n| extend series_decompose_anomalies(y, 2.5, -1, 'linefit')\r\n| extend series_decompose_anomalies_y_ad_flag = \r\nseries_multiply(10, series_decompose_anomalies_y_ad_flag) // multiply by 10 for visualization purposes\r\n| render timechart  \r\n```\r\n\r\n![Weekly series anomalies with higher anomaly threshold](images/series-decompose-anomaliesfunction/weekly-seasonality-higher-threshold.png)","https://docs.microsoft.com/en-us/azure/kusto/query/series-decompose-anomaliesfunction","series-decompose-anomaliesfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"series_decompose_forecast","Forecast based on series decomposition.","Takes an expression containing a series (dynamic numerical array) as input, and predicts the values of the last trailing points. For more information, see [series_decompose](series-decomposefunction.md).\r\n\r\n## Syntax\r\n\r\n`series_decompose_forecast(`*Series* `,` *Points* `[,` *Seasonality*`,` *Trend*`,` *Seasonality_threshold*`])`\r\n\r\n## Arguments\r\n\r\n* *Series*: Dynamic array cell of numeric values. Typically, the resulting output of [make-series](make-seriesoperator.md) or [make_list](makelist-aggfunction.md) operators.\r\n* *Points*: Integer specifying the number of points at the end of the series to predict (forecast). These points are excluded from the learning (regression) process.\r\n* *Seasonality*: An integer controlling the seasonal analysis, containing one of:\r\n    * -1: Autodetect seasonality using [series_periods_detect](series-periods-detectfunction.md) (default).\r\n    * period: Positive integer, specifying the expected period in number of bins. For example, if the series is in 1h bins, a weekly period is 168 bins.\r\n    * 0: No seasonality (skip extracting this component).\r\n* *Trend*: A string controlling the trend analysis, containing one of:\r\n    * `linefit`: Extract trend component using linear regression (default).\r\n    * `avg`: Define trend component as average(x).\r\n    * `none`: No trend, skip extracting this component.\r\n* *Seasonality_threshold*: The threshold for seasonality score when *Seasonality* is set to autodetect. The default score threshold is `0.6`. For more information, see [series_periods_detect](series-periods-detectfunction.md).\r\n\r\n**Return**\r\n\r\nA dynamic array with the forecasted series.\r\n\r\n> [!NOTE]\r\n> * The dynamic array of the original input series should include a number of *points* slots to be forecasted. The forecast is typically done by using [make-series](make-seriesoperator.md) and specifying the end time in the range that includes the timeframe to forecast.\r\n> * Either seasonality or trend should be enabled, otherwise the function is redundant, and just returns a series filled with zeroes.","In the following example, we generate a series of four weeks in an hourly grain, with weekly seasonality and a small upward trend. We then use `make-series` and add another empty week to the series. `series_decompose_forecast` is called with a week (24*7 points), and it automatically detects the seasonality and trend, and generates a forecast of the entire five-week period.\r\n\r\n```\r\nlet ts=range t from 1 to 24*7*4 step 1 // generate 4 weeks of hourly data\r\n| extend Timestamp = datetime(2018-03-01 05:00) + 1h * t \r\n| extend y = 2*rand() + iff((t/24)%7>=5, 5.0, 15.0) - (((t%24)/10)*((t%24)/10)) + t/72.0 // generate a series with weekly seasonality and ongoing trend\r\n| extend y=iff(t==150 or t==200 or t==780, y-8.0, y) // add some dip outliers\r\n| extend y=iff(t==300 or t==400 or t==600, y+8.0, y) // add some spike outliers\r\n| make-series y=max(y) on Timestamp in range(datetime(2018-03-01 05:00), datetime(2018-03-01 05:00)+24*7*5h, 1h); // create a time series of 5 weeks (last week is empty)\r\nts \r\n| extend y_forcasted = series_decompose_forecast(y, 24*7)  // forecast a week forward\r\n| render timechart \r\n```\r\n\r\n![Series decompose forecast](images/series-decompose-forecastfunction/series-decompose-forecast.png)","https://docs.microsoft.com/en-us/azure/kusto/query/series-decompose-forecastfunction","series-decompose-forecastfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"series_divide","Calculates the element-wise division of two numeric series inputs.","## Syntax\r\n\r\n`series_divide(`*series1*`,` *series2*`)`\r\n\r\n## Arguments\r\n\r\n* *series1, series2*: Input numeric arrays, the first to be element-wise divided by the second into a dynamic array result. All arguments must be dynamic arrays. \r\n\r\n## Returns\r\n\r\nDynamic array of calculated element-wise divide operation between the two inputs. Any non-numeric element or non-existing element (arrays of different sizes) yields a `null` element value.\r\n\r\nNote: the result series is of double type, even if the inputs are integers. Division by zero follows the double division by zero (e.g. 2/0 yields double(+inf)).","```\r\nrange x from 1 to 3 step 1\r\n| extend y = x * 2\r\n| extend z = y * 2\r\n| project s1 = pack_array(x,y,z), s2 = pack_array(z, y, x)\r\n| extend s1_divide_s2 = series_divide(s1, s2)\r\n```\r\n\r\n|s1\t        |s2|\t    s1_divide_s2|\r\n|---|---|---|\r\n|[1,2,4]\t|[4,2,1]|\t[0.25,1.0,4.0]|\r\n|[2,4,8]\t|[8,4,2]|\t[0.25,1.0,4.0]|\r\n|[3,6,12]\t|[12,6,3]|\t[0.25,1.0,4.0]|","https://docs.microsoft.com/en-us/azure/kusto/query/series-dividefunction","series-dividefunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"series_equals","Calculates the element-wise equals (`==`) logic operation of two numeric series inputs.","## Syntax\r\n\r\n`series_equals (`*Series1*`,` *Series2*`)`\r\n\r\n## Arguments\r\n\r\n* *Series1, Series2*: Input numeric arrays to be element-wise compared. All arguments must be dynamic arrays. \r\n\r\n## Returns\r\n\r\nDynamic array of booleans containing the calculated element-wise equal logic operation between the two inputs. Any non-numeric element or non-existing element (arrays of different sizes) yields a `null` element value.","```\r\nprint s1 = dynamic([1,2,4]), s2 = dynamic([4,2,1])\r\n| extend s1_equals_s2 = series_equals(s1, s2)\r\n```\r\n\r\n|s1|s2|s1_equals_s2|\r\n|---|---|---|\r\n|[1,2,4]|[4,2,1]|[false,true,false]|\r\n\r\n## See also\r\n\r\nFor entire series statistics comparisons, see:\r\n\r\n* [series_stats()](series-statsfunction.md)\r\n* [series_stats_dynamic()](series-stats-dynamicfunction.md)","https://docs.microsoft.com/en-us/azure/kusto/query/series-equalsfunction","series-equalsfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"series_fft","Applies the Fast Fourier Transform (FFT) on a series.","The series_fft() function takes a series of complex numbers in the time/spatial domain and transforms it to the frequency domain using the [Fast Fourier Transform](https://en.wikipedia.org/wiki/Fast_Fourier_transform). The transformed complex series represents the magnitude and phase of the frequencies appearing in the original series. Use the complementary function [series_ifft](series-ifft-function.md) to transform from the frequency domain back to the time/spatial domain.\r\n\r\n## Syntax\r\n\r\n`series_fft(`*x_real* [`,` *x_imaginary*]`)`\r\n\r\n## Arguments\r\n\r\n* *x_real*: Dynamic array of numeric values representing the real component of the series to transform.\r\n* *x_imaginary*: A similar dynamic array representing the imaginary component of the series. This parameter is optional and should be specified only if the input series contains complex numbers.\r\n\r\n## Returns\r\n\r\nThe function returns the complex inverse fft in two series. The first series for the real component and the second one for the imaginary component.","* Generate a complex series, where the real and imaginary components are pure sine waves in different frequencies. Use FFT to transform it to the frequency domain:\r\n\r\n    \r\n    ```\r\n    let sinewave=(x:double, period:double, gain:double=1.0, phase:double=0.0)\r\n    {\r\n        gain*sin(2*pi()/period*(x+phase))\r\n    }\r\n    ;\r\n    let n=128;      //  signal length\r\n    range x from 0 to n-1 step 1 | extend yr=sinewave(x, 8), yi=sinewave(x, 32)\r\n    | summarize x=make_list(x), y_real=make_list(yr), y_imag=make_list(yi)\r\n    | extend (fft_y_real, fft_y_imag) = series_fft(y_real, y_imag)\r\n    | render linechart with(ysplit=panels)\r\n    ```\r\n    \r\n    This query returns *fft_y_real* and *fft_y_imag*:  \r\n    \r\n    ![Series fft](images/series-fft-function/series-fft.png)    \r\n* Transform a series to the frequency domain, and then apply the inverse transform to get back the original series:\r\n\r\n    \r\n    ```\r\n    let sinewave=(x:double, period:double, gain:double=1.0, phase:double=0.0)\r\n    {\r\n        gain*sin(2*pi()/period*(x+phase))\r\n    }\r\n    ;\r\n    let n=128;      //  signal length\r\n    range x from 0 to n-1 step 1 | extend yr=sinewave(x, 8), yi=sinewave(x, 32)\r\n    | summarize x=make_list(x), y_real=make_list(yr), y_imag=make_list(yi)\r\n    | extend (fft_y_real, fft_y_imag) = series_fft(y_real, y_imag)\r\n    | extend (y_real2, y_image2) = series_ifft(fft_y_real, fft_y_imag)\r\n    | project-away fft_y_real, fft_y_imag   //  too many series for linechart with panels\r\n    | render linechart with(ysplit=panels)\r\n    ```\r\n    \r\n    This query returns *y_real2* and *y_imag2, which are the same as *y_real* and *y_imag*:  \r\n    \r\n    ![Series ifft](images/series-fft-function/series-ifft.png)","https://docs.microsoft.com/en-us/azure/kusto/query/series-fft-function","series-fft-function.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"series_fill_backward","Performs a backward fill interpolation of missing values in a series.","An expression containing dynamic numerical array is the input. The function replaces all instances of missing_value_placeholder with the nearest value from its right side (other than missing_value_placeholder), and returns the resulting array. The rightmost instances of missing_value_placeholder are preserved.\r\n\r\n## Syntax\r\n\r\n`series_fill_backward(`*x*`[, `*missing_value_placeholder*`])`\r\n\r\n* Will return series *x* with all instances of *missing_value_placeholder* filled backwards.\r\n\r\n## Arguments\r\n\r\n* *x*: dynamic array scalar expression, which is an array of numeric values.\r\n* *missing_value_placeholder*: this optional parameter specifies a placeholder for missing values. The default value is `double`(*null*).\r\n\r\n**Notes**\r\n\r\n* Specify *null* as the default value to apply any interpolation functions after [make-series](make-seriesoperator.md): \r\n\r\n\r\n```\r\nmake-series num=count() default=long(null) on TimeStamp from ago(1d) to ago(1h) step 1h by Os, Browser\r\n```\r\n\r\n* The *missing_value_placeholder* can be of any type that will be converted to actual element types. Both `double`(*null*), `long`(*null*) and `int`(*null*) have the same meaning.\r\n* If *missing_value_placeholder* is `double`(*null*), (or omitted, which have the same meaning) then a result may contain *null* values. To fill these *null* values, use other interpolation functions. Currently only [series_outliers()](series-outliersfunction.md) support *null* values in input arrays.\r\n* The function preserves original type of array elements.","```\r\nlet data = datatable(arr: dynamic)\r\n[\r\n    dynamic([111,null,36,41,null,null,16,61,33,null,null])   \r\n];\r\ndata \r\n| project arr, \r\n          fill_forward = series_fill_backward(arr)\r\n\r\n```\r\n\r\n|`arr`|`fill_forward`|\r\n|---|---|\r\n|[111,null,36,41,null,null,16,61,33,null,null]|[111,36,36,41,16, 16,16,61,33,null,null]|\r\n\r\nUse [series_fill_forward](series-fill-forwardfunction.md) or [series-fill-const](series-fill-constfunction.md) to complete interpolation of the above array.","https://docs.microsoft.com/en-us/azure/kusto/query/series-fill-backwardfunction","series-fill-backwardfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"series_fill_const","Replaces missing values in a series with a specified constant value.","Takes an expression containing dynamic numerical array as input, replaces all instances of missing_value_placeholder with the specified constant_value and returns the resulting array.\r\n\r\n## Syntax\r\n\r\n`series_fill_const(`*x*`, `*constant_value*`[,` *missing_value_placeholder*`])`\r\n\r\n* Will return series *x* with all instances of *missing_value_placeholder* replaced with *constant_value*.\r\n\r\n## Arguments\r\n\r\n* *x*: dynamic array scalar expression that is an array of numeric values.\r\n* *constant_value*: the value replacing missing values. \r\n* *missing_value_placeholder*: optional parameter that specifies a placeholder for a missing value to be replaced. Default value is `double`(*null*).\r\n\r\n**Notes**\r\n\r\n* If you create the series using the [make-series](make-seriesoperator.md) operator, it fills in the missing values using default 0. Alternatively, you can specify a constant value to fill in by specifying `default = ` *DefaultValue* in the make-series statement.\r\n\r\n\r\n```\r\nmake-series num=count() default=-1 on TimeStamp from ago(1d) to ago(1h) step 1h by Os, Browser\r\n```\r\n\r\n* To apply any interpolation functions after [make-series](make-seriesoperator.md), specify *null* as a default value: \r\n\r\n\r\n```\r\nmake-series num=count() default=long(null) on TimeStamp from ago(1d) to ago(1h) step 1h by Os, Browser\r\n```\r\n\r\n* The *missing_value_placeholder* can be of any type, which will be converted to actual element types. As such, either `double`(*null*), `long`(*null*) or `int`(*null*) have the same meaning.\r\n* The function preserves original type of the array elements.","```\r\nlet data = datatable(`arr`: dynamic)\r\n[\r\n    dynamic([111,null,36,41,23,null,16,61,33,null,null])   \r\n];\r\ndata \r\n| project arr, \r\n          fill_const1 = series_fill_const(arr, 0.0),\r\n          fill_const2 = series_fill_const(arr, -1)  \r\n```\r\n\r\n|`arr`|`fill_const1`|`fill_const2`|\r\n|---|---|---|\r\n|[111,null,36,41,23,null,16,61,33,null,null]|[111,0.0,36,41,23,0.0,16,61,33,0.0,0.0]|[111,-1,36,41,23,-1,16,61,33,-1,-1]|","https://docs.microsoft.com/en-us/azure/kusto/query/series-fill-constfunction","series-fill-constfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"series_fill_forward","Performs a forward fill interpolation of missing values in a series.","An expression containing dynamic numerical array is the input. The function replaces all instances of missing_value_placeholder with the nearest value from its left side other than missing_value_placeholder, and returns the resulting array. The leftmost instances of missing_value_placeholder are preserved.\r\n\r\n## Syntax\r\n\r\n`series_fill_forward(`*x*`[, `*missing_value_placeholder*`])`\r\n\r\n* Will return series *x* with all instances of *missing_value_placeholder* filled forwards.\r\n\r\n## Arguments\r\n\r\n* *x*: dynamic array scalar expression, which is an array of numeric values. \r\n* *missing_value_placeholder*: optional parameter, which specifies a placeholder for a missing value to be replaced. Default value is `double`(*null*).\r\n\r\n**Notes**\r\n\r\n* Specify *null* as the default value to apply interpolation functions after [make-series](make-seriesoperator.md): \r\n\r\n\r\n```\r\nmake-series num=count() default=long(null) on TimeStamp from ago(1d) to ago(1h) step 1h by Os, Browser\r\n```\r\n\r\n* The *missing_value_placeholder* can be of any type that will be converted to actual element types. Both `double`(*null*) `long`(*null*) and `int`(*null*) have the same meaning.\r\n* If missing_value_placeholder is (null) (or omitted - which have the same meaning), then a result may contain *null* values. To fill these *null* values, use other interpolation functions. Currently only [series_outliers()](series-outliersfunction.md) support *null* values in input arrays.\r\n* The functions preserve the original type of array elements.","```\r\nlet data = datatable(arr: dynamic)\r\n[\r\n    dynamic([null,null,36,41,null,null,16,61,33,null,null])   \r\n];\r\ndata \r\n| project arr, \r\n          fill_forward = series_fill_forward(arr)  \r\n\r\n```\r\n\r\n|`arr`|`fill_forward`|\r\n|---|---|\r\n|[null,null,36,41,null,null,16,61,33,null,null]|[null,null,36,41,41,41,16,61,33,33,33]|\r\n\r\nUse [series_fill_backward](series-fill-backwardfunction.md) or [series-fill-const](series-fill-constfunction.md) to complete interpolation of the above array.","https://docs.microsoft.com/en-us/azure/kusto/query/series-fill-forwardfunction","series-fill-forwardfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"series_fill_linear","Linearly interpolates missing values in a series.",'Takes an expression containing dynamic numerical array as input, does linear interpolation for all instances of missing_value_placeholder, and returns the resulting array. If the beginning and end of the array contain missing_value_placeholder, then it will be replaced with the nearest value other than missing_value_placeholder. This feature can be turned off. If the whole array consists of the missing_value_placeholder, the array will be filled with constant_value, or 0 if not specified.  \r\n\r\n## Syntax\r\n\r\n`series_fill_linear(`*x*`[,` *missing_value_placeholder*` [,`*fill_edges*` [,`*constant_value*`]]]))`\r\n\r\n* Will return series linear interpolation of *x* using specified parameters.\r\n \r\n\r\n## Arguments\r\n\r\n* *x*: dynamic array scalar expression, which is an array of numeric values.\r\n* *missing_value_placeholder*: optional parameter, which specifies a placeholder for the "missing values" to be replaced. Default value is `double`(*null*).\r\n* *fill_edges*: Boolean value, which indicates whether *missing_value_placeholder* at the start and end of the array should be replaced with nearest value. *True* by default. If set to *false*, then *missing_value_placeholder* at the start and end of the array will be preserved.\r\n* *constant_value*: optional parameter relevant only for arrays entirely consists of *null* values. This parameter specifies a constant value to fill the series with. Default value is *0*. Setting this parameter it to `double`(*null*) will effectively leave *null* values where they are.\r\n\r\n## Notes\r\n\r\n* To apply any interpolation functions after [make-series](make-seriesoperator.md), specify *null* as the default value: \r\n    \r\n    ```\r\n    make-series num=count() default=long(null) on TimeStamp from ago(1d) to ago(1h) step 1h by Os, Browser\r\n    ```\r\n* The *missing_value_placeholder* can be of any type that will be converted to actual element types. As such, either `double`(*null*), `long`(*null*) or `int`(*null*) have the same meaning.\r\n* If *missing_value_placeholder* is `double`(*null*) (or omitted, which have the same meaning) then a result may contain *null* values. Use other interpolation functions to fill these *null* values. Currently only [series_outliers()](series-outliersfunction.md) support *null* values in input arrays.\r\n* The function preserves original type of array elements. If x contains only int or long elements, then the linear interpolation will return rounded interpolated values rather than exact ones.',"```\r\nlet data = datatable(arr: dynamic)\r\n[\r\n    dynamic([null, 111.0, null, 36.0, 41.0, null, null, 16.0, 61.0, 33.0, null, null]), // Array of double    \r\n    dynamic([null, 111,   null, 36,   41,   null, null, 16,   61,   33,   null, null]), // Similar array of int\r\n    dynamic([null, null, null, null])                                                   // Array with missing values only\r\n];\r\ndata\r\n| project arr, \r\n          without_args = series_fill_linear(arr),\r\n          with_edges = series_fill_linear(arr, double(null), true),\r\n          wo_edges = series_fill_linear(arr, double(null), false),\r\n          with_const = series_fill_linear(arr, double(null), true, 3.14159)  \r\n\r\n```\r\n\r\n|`arr`|`without_args`|`with_edges`|`wo_edges`|`with_const`|\r\n|---|---|---|---|---|\r\n|[null,111.0,null,36.0,41.0,null,null,16.0,61.0,33.0,null,null]|[111.0,111.0,73.5,36.0,41.0,32.667,24.333,16.0,61.0,33.0,33.0,33.0]|[111.0,111.0,73.5,36.0,41.0,32.667,24.333,16.0,61.0,33.0,33.0,33.0]|[null,111.0,73.5,36.0,41.0,32.667,24.333,16.0,61.0,33.0,null,null]|[111.0,111.0,73.5,36.0,41.0,32.667,24.333,16.0,61.0,33.0,33.0,33.0]|\r\n|[null,111,null,36,41,null,null,16,61,33,null,null]|[111,111,73,36,41,32,24,16,61,33,33,33]|[111,111,73,36,41,32,24,16,61,33,33,33]|[null,111,73,36,41,32,24,16,61,33,null,null]|[111,111,74,38,  41,32,24,16,61,33,33,33]|\r\n|[null,null,null,null]|[0.0,0.0,0.0,0.0]|[0.0,0.0,0.0,0.0]|[0.0,0.0,0.0,0.0]|[3.14159,3.14159,3.14159,3.14159]|","https://docs.microsoft.com/en-us/azure/kusto/query/series-fill-linearfunction","series-fill-linearfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"series_fir","Applies a Finite Impulse Response (FIR) filter on a series.","The function takes an expression containing a dynamic numerical array as input and applies a [Finite Impulse Response](https://en.wikipedia.org/wiki/Finite_impulse_response) filter. By specifying the `filter` coefficients, it can be used for calculating a moving average, smoothing, change-detection, and many more use cases. The function takes the column containing the dynamic array and a static dynamic array of the filter's coefficients as input, and applies the filter on the column. It outputs a new dynamic array column, containing the filtered output.  \r\n\r\n## Syntax\r\n\r\n`series_fir(`*x*`,` *filter* [`,` *normalize*[`,` *center*]]`)`\r\n\r\n## Arguments\r\n\r\n* *x*: Dynamic array cell of numeric values. Typically the resulting output of [make-series](make-seriesoperator.md) or [make_list](makelist-aggfunction.md) operators.\r\n* *filter*: A constant expression containing the coefficients of the filter (stored as a dynamic array of numeric values).\r\n* *normalize*: Optional Boolean value indicating whether the filter should be normalized. That is, divided by the sum of the coefficients. If filter contains negative values, then *normalize* must be specified as `false`, otherwise result will be `null`. If not specified, then a default value of *normalize* is assumed, depending on the presence of negative values in the *filter*. If *filter* contains at least one negative value, then *normalize* is assumed to be `false`.  \r\nNormalization is a convenient way to make sure that the sum of the coefficients is 1. Then the filter doesn't amplify or attenuate the series. For example, the moving average of four bins could be specified by *filter*=[1,1,1,1] and *normalized*=true, which is easier than typing [0.25,0.25.0.25,0.25].\r\n* *center*: An optional Boolean value that indicates whether the filter is applied symmetrically on a time window before and after the current point, or on a time window from the current point backwards. By default, center is false, which fits the scenario of streaming data, where we can only apply the filter on the current and older points. However, for ad-hoc processing you can set it to `true`, keeping it synchronized with the time series. See examples below. This parameter controls the filter\u2019s [group delay](https://en.wikipedia.org/wiki/Group_delay_and_phase_delay).","* Calculate a moving average of five points by setting *filter*=[1,1,1,1,1] and *normalize*=`true` (default). Note the effect of *center*=`false` (default) vs. `true`:\r\n\r\n\r\n\r\n```\r\nrange t from bin(now(), 1h)-23h to bin(now(), 1h) step 1h\r\n| summarize t=make_list(t)\r\n| project id='TS', val=dynamic([0,0,0,0,0,0,0,0,0,10,20,40,100,40,20,10,0,0,0,0,0,0,0,0]), t\r\n| extend 5h_MovingAvg=series_fir(val, dynamic([1,1,1,1,1])),\r\n         5h_MovingAvg_centered=series_fir(val, dynamic([1,1,1,1,1]), true, true)\r\n| render timechart\r\n```\r\n\r\nThis query returns:  \r\n*5h_MovingAvg*: Five points moving average filter. The spike is smoothed and its peak shifted by (5-1)/2 = 2h.  \r\n*5h_MovingAvg_centered*: Same, but by setting `center=true`, the peak stays in its original location.\r\n\r\n![Series fir](images/series-firfunction/series-fir.png)\r\n\r\n* To calculate the difference between a point and its preceding one, set *filter*=[1,-1].\r\n\r\n\r\n\r\n```\r\nrange t from bin(now(), 1h)-11h to bin(now(), 1h) step 1h\r\n| summarize t=make_list(t)\r\n| project id='TS',t,value=dynamic([0,0,0,0,2,2,2,2,3,3,3,3])\r\n| extend diff=series_fir(value, dynamic([1,-1]), false, false)\r\n| render timechart\r\n```\r\n\r\n![Series fir 2](images/series-firfunction/series-fir2.png)","https://docs.microsoft.com/en-us/azure/kusto/query/series-firfunction","series-firfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"series_fit_2lines","Applies two segments linear regression on a series, returning multiple columns.","Takes an expression containing dynamic numerical array as input and applies [two segments linear regression](https://en.wikipedia.org/wiki/Segmented_regression) in order to identify and quantify a trend change in a series. The function iterates on the series indexes. In each iteration, the function splits the series to two parts, fits a separate line (using [series_fit_line()](series-fit-linefunction.md)) to each part, and calculates the total r-square. The best split is the one that maximized r-square; the function returns its parameters:\r\n\r\n|Parameter  |Description  |\r\n|---------|---------|\r\n|`rsquare`     | [R-square](https://en.wikipedia.org/wiki/Coefficient_of_determination) is standard measure of the fit quality. It's a number in the range [0-1], where 1 - is the best possible fit, and 0 means the data is unordered and do not fit any line.        |\r\n|`split_idx`     |   The index of breaking point to two segments (zero-based).      |\r\n|`variance`     | Variance of the input data.        |\r\n|`rvariance`     | Residual variance, which is the variance between the input data values the approximated ones (by the two line segments).        |\r\n|`line_fit`     | Numerical array holding a series of values of the best fitted line. The series length is equal to the length of the input array. It's mainly used for charting.        |\r\n|`right_rsquare`     | R-square of the line on the right side of the split, see [series_fit_line()](series-fit-linefunction.md).        |\r\n|`right_slope`     | Slope of the right approximated line (of the form y=ax+b).         |\r\n|`right_interception`     |  Interception of the approximated left line (b from y=ax+b).       |\r\n|`right_variance`    | Variance of the input data on the right side of the split.        |\r\n|`right_rvariance`     | Residual variance of the input data on the right side of the split.        |\r\n|`left_rsquare`     | R-square of the line on the left side of the split, see [series_fit_line()](series-fit-linefunction.md).        |\r\n|`left_slope`    | Slope of the left approximated line (of the form y=ax+b).        |\r\n|`left_interception`     |   Interception of the approximated left line (of the form y=ax+b).      |\r\n|`left_variance`     | Variance of the input data on the left side of the split.        |\r\n|`left_rvariance`     | Residual variance of the input data on the left side of the split.        |\r\n\r\n> [!Note]\r\n> This function returns multiple columns an so cannot be used as an argument for another function.\r\n\r\n## Syntax\r\n\r\nproject `series_fit_2lines(`*x*`)`\r\n\r\n* Will return all mentioned above columns with the following names: series_fit_2lines_x_rsquare, series_fit_2lines_x_split_idx etc.\r\n\r\nproject (rs, si, v)=`series_fit_2lines(`*x*`)`\r\n\r\n* Will return the following columns: rs (r-square), si (split index), v (variance) and the rest will look like series_fit_2lines_x_rvariance, series_fit_2lines_x_line_fit and etc.\r\n\r\nextend (rs, si, v)=`series_fit_2lines(`*x*`)`\r\n\r\n* Will return only: rs (r-square), si (split index) and v (variance).\r\n  \r\n\r\n## Arguments\r\n\r\n* *x*: Dynamic array of numeric values.  \r\n\r\n> [!TIP]\r\n> The most convenient way of using this function is applying it to the results of [make-series](make-seriesoperator.md) operator.","```\r\nprint id=' ', x=range(bin(now(), 1h)-11h, bin(now(), 1h), 1h), y=dynamic([1,2.2, 2.5, 4.7, 5.0, 12, 10.3, 10.3, 9, 8.3, 6.2])\r\n| extend (Slope,Interception,RSquare,Variance,RVariance,LineFit)=series_fit_line(y), (RSquare2, SplitIdx, Variance2,RVariance2,LineFit2)=series_fit_2lines(y)\r\n| project id, x, y, LineFit, LineFit2\r\n| render timechart\r\n```\r\n\r\n![Series fit 2 lines](images/series-fit-2lines/series-fit-2lines.png)","https://docs.microsoft.com/en-us/azure/kusto/query/series-fit-2linesfunction","series-fit-2linesfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"series_fit_2lines_dynamic","Applies two segments linear regression on a series, returning a dynamic object.","Takes an expression containing dynamic numerical array as input and applies [two segments linear regression](https://en.wikipedia.org/wiki/Segmented_regression) in order to identify and quantify trend changes in a series. The function iterates on the series indexes. In each iteration, it splits the series to two parts, and fits a separate line using [series_fit_line()](series-fit-linefunction.md) or [series_fit_line_dynamic()](series-fit-line-dynamicfunction.md). The function fits the lines to each of the two parts, and calculates the total R-squared value. The best split is the one that maximizes R-squared. The function returns its parameters in dynamic value with the following content:\r\n\r\n* `rsquare`: [R-squared](https://en.wikipedia.org/wiki/Coefficient_of_determination) is a standard measure of the fit quality. It's a number in the range of [0-1], where 1 is the best possible fit, and 0 means the data is unordered and do not fit any line.\r\n* `split_idx`: the index of breaking point to two segments (zero-based).\r\n* `variance`: variance of the input data.\r\n* `rvariance`: residual variance that is the variance between the input data values the approximated ones (by the two line segments).\r\n* `line_fit`: numerical array holding a series of values of the best fitted line. The series length is equal to the length of the input array. It is used for charting.\r\n* `right.rsquare`: r-square of the line on the right side of the split, see [series_fit_line()](series-fit-linefunction.md) or [series_fit_line_dynamic()](series-fit-line-dynamicfunction.md).\r\n* `right.slope`: slope of the right approximated line (of the form y=ax+b).\r\n* `right.interception`: interception of the approximated left line (b from y=ax+b).\r\n* `right.variance`: variance of the input data on the right side of the split.\r\n* `right.rvariance`: residual variance of the input data on the right side of the split.\r\n* `left.rsquare`: r-square of the line on the left side of the split, see [series_fit_line()].(series-fit-linefunction.md) or [series_fit_line_dynamic()](series-fit-line-dynamicfunction.md).\r\n* `left.slope`: slope of the left approximated line (of the form y=ax+b).\r\n* `left.interception`: interception of the approximated left line (of the form y=ax+b).\r\n* `left.variance`: variance of the input data on the left side of the split.\r\n* `left.rvariance`: residual variance of the input data on the left side of the split.\r\n\r\nThis operator is similar to [series_fit_2lines](series-fit-2linesfunction.md). Unlike `series-fit-2lines`, it returns a dynamic bag.\r\n\r\n## Syntax\r\n\r\n`series_fit_2lines_dynamic(`*x*`)`\r\n\r\n## Arguments\r\n\r\n* *x*: Dynamic array of numeric values.  \r\n\r\n> [!TIP]\r\n> The most convenient way of using this function is applying it to the results of the [make-series](make-seriesoperator.md) operator.","```\r\nprint id=' ', x=range(bin(now(), 1h)-11h, bin(now(), 1h), 1h), y=dynamic([1,2.2, 2.5, 4.7, 5.0, 12, 10.3, 10.3, 9, 8.3, 6.2])\r\n| extend LineFit=series_fit_line_dynamic(y).line_fit, LineFit2=series_fit_2lines_dynamic(y).line_fit\r\n| project id, x, y, LineFit, LineFit2\r\n| render timechart\r\n```\r\n\r\n![Series fit 2 lines](images/series-fit-2lines/series-fit-2lines.png)","https://docs.microsoft.com/en-us/azure/kusto/query/series-fit-2lines-dynamicfunction","series-fit-2lines-dynamicfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"series_fit_line","Applies linear regression on a series, returning multiple columns.",'Takes an expression containing dynamic numerical array as input and does [linear regression](https://en.wikipedia.org/wiki/Line_fitting) to find the line that best fits it. This function should be used on time series arrays, fitting the output of make-series operator. The function generates the following columns:\r\n\r\n* `rsquare`: [r-square](https://en.wikipedia.org/wiki/Coefficient_of_determination) is a standard measure of the fit quality. The value\'s a number in the range [0-1], where 1 - is the best possible fit, and 0 means the data is unordered and doesn\'t fit any line. \r\n* `slope`: Slope of the approximated line ("a" from y=ax+b).\r\n* `variance`: Variance of the input data.\r\n* `rvariance`: Residual variance that is the variance between the input data values the approximated ones.\r\n* `interception`: Interception of the approximated line ("b" from y=ax+b).\r\n* `line_fit`: Numerical array holding a series of values of the best fitted line. The series length is equal to the length of the input array. The value\'s used for charting.\r\n\r\n## Syntax\r\n\r\n`series_fit_line(`*x*`)`\r\n\r\n## Arguments\r\n\r\n* *x*: Dynamic array of numeric values.\r\n\r\n> [!TIP]\r\n> The most convenient way of using this function is to apply it to the results of [make-series](make-seriesoperator.md) operator.',"```\r\nprint id=' ', x=range(bin(now(), 1h)-11h, bin(now(), 1h), 1h), y=dynamic([2,5,6,8,11,15,17,18,25,26,30,30])\r\n| extend (RSquare,Slope,Variance,RVariance,Interception,LineFit)=series_fit_line(y)\r\n| render timechart\r\n```\r\n\r\n![Series fit line](images/series-fit-line/series-fit-line.png)\r\n| RSquare | Slope | Variance | RVariance | Interception | LineFit                                                                                     |\r\n|---------|-------|----------|-----------|--------------|---------------------------------------------------------------------------------------------|\r\n| 0.982   | 2.730 | 98.628   | 1.686     | -1.666       | 1.064, 3.7945, 6.526, 9.256, 11.987, 14.718, 17.449, 20.180, 22.910, 25.641, 28.371, 31.102 |","https://docs.microsoft.com/en-us/azure/kusto/query/series-fit-linefunction","series-fit-linefunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"series_fit_line_dynamic","Applies linear regression on a series, returning dynamic object.","Takes an expression containing dynamic numerical array as input, and does [linear regression](https://en.wikipedia.org/wiki/Line_fitting) to find the line that best fits it. This function should be used on time series arrays, fitting the output of make-series operator. It generates a dynamic value with the following content:\r\n\r\n* `rsquare`: [r-square](https://en.wikipedia.org/wiki/Coefficient_of_determination) is a standard measure of the fit quality. It's a number in the range [0-1], where 1 is the best possible fit, and 0 means the data is unordered and doesn't fit any line\r\n* `slope`: Slope of the approximated line (the *a*-value from *y=ax+b*)\r\n* `variance`: Variance of the input data\r\n* `rvariance`: Residual variance that is the variance between the input data values and the approximated ones.\r\n* `interception`: Interception of the approximated line (the *b*-value from *y=ax+b*)\r\n* `line_fit`: Numerical array containing a series of values of the best fit line. The series length is equal to the length of the input array. It's used mainly for charting.\r\n\r\nThis operator is similar to [series_fit_line](series-fit-linefunction.md), but unlike `series-fit-line` it returns a dynamic bag.\r\n\r\n## Syntax\r\n\r\n`series_fit_line_dynamic(`*x*`)`\r\n\r\n## Arguments\r\n\r\n* *x*: Dynamic array of numeric values.\r\n\r\n> [!TIP]\r\n> The most convenient way of using this function is by applying it to the results of [make-series](make-seriesoperator.md) operator.","```\r\nprint id=' ', x=range(bin(now(), 1h)-11h, bin(now(), 1h), 1h), y=dynamic([2,5,6,8,11,15,17,18,25,26,30,30])\r\n| extend fit=series_fit_line_dynamic(y)\r\n| extend RSquare=fit.rsquare, Slope=fit.slope, Variance=fit.variance,RVariance=fit.rvariance,Interception=fit.interception,LineFit=fit.line_fit\r\n| render timechart\r\n```\r\n\r\n![Series fit line](images/series-fit-line/series-fit-line.png)\r\n| RSquare | Slope | Variance | RVariance | Interception | LineFit                                                                                     |\r\n|---------|-------|----------|-----------|--------------|---------------------------------------------------------------------------------------------|\r\n| 0.982   | 2.730 | 98.628   | 1.686     | -1.666       | 1.064, 3.7945, 6.526, 9.256, 11.987, 14.718, 17.449, 20.180, 22.910, 25.641, 28.371, 31.102 |","https://docs.microsoft.com/en-us/azure/kusto/query/series-fit-line-dynamicfunction","series-fit-line-dynamicfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"series_greater","Calculates the element-wise greater (`>`) logic operation of two numeric series inputs.","## Syntax\r\n\r\n`series_greater (`*Series1*`,` *Series2*`)`\r\n\r\n## Arguments\r\n\r\n* *Series1, Series2*: Input numeric arrays to be element-wise compared. All arguments must be dynamic arrays. \r\n\r\n## Returns\r\n\r\nDynamic array of booleans containing the calculated element-wise greater logic operation between the two inputs. Any non-numeric element or non-existing element (arrays of different sizes) yields a `null` element value.","```\r\nprint s1 = dynamic([1,2,4]), s2 = dynamic([4,2,1])\r\n| extend s1_greater_s2 = series_greater(s1, s2)\r\n```\r\n\r\n|s1|s2|s1_greater_s2|\r\n|---|---|---|\r\n|[1,2,4]|[4,2,1]|[false,false,true]|\r\n\r\n## See also\r\n\r\nFor entire series statistics comparisons, see:\r\n\r\n* [series_stats()](series-statsfunction.md)\r\n* [series_stats_dynamic()](series-stats-dynamicfunction.md)","https://docs.microsoft.com/en-us/azure/kusto/query/series-greaterfunction","series-greaterfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"series_greater_equals","Calculates the element-wise greater or equals (`>=`) logic operation of two numeric series inputs.","## Syntax\r\n\r\n`series_greater_equals (`*Series1*`,` *Series2*`)`\r\n\r\n## Arguments\r\n\r\n* *Series1, Series2*: Input numeric arrays to be element-wise compared. All arguments must be dynamic arrays. \r\n\r\n## Returns\r\n\r\nDynamic array of booleans containing the calculated element-wise greater or equal logic operation between the two inputs. Any non-numeric element or non-existing element (arrays of different sizes) yields a `null` element value.","```\r\nprint s1 = dynamic([1,2,4]), s2 = dynamic([4,2,1])\r\n| extend s1_greater_equals_s2 = series_greater_equals(s1, s2)\r\n```\r\n\r\n|s1|s2|s1_greater_equals_s2|\r\n|---|---|---|\r\n|[1,2,4]|[4,2,1]|[false,true,true]|\r\n\r\n## See also\r\n\r\nFor entire series statistics comparisons, see:\r\n\r\n* [series_stats()](series-statsfunction.md)\r\n* [series_stats_dynamic()](series-stats-dynamicfunction.md)","https://docs.microsoft.com/en-us/azure/kusto/query/series-greater-equalsfunction","series-greater-equalsfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"series_ifft","Applies the Inverse Fast Fourier Transform (IFFT) on a series.","The series_ifft() function takes a series of complex numbers in the frequency domain and transforms it back to the time/spatial domain using the [Fast Fourier Transform](https://en.wikipedia.org/wiki/Fast_Fourier_transform). This function is the complementary function of [series_fft](series-fft-function.md). Commonly the original series is transformed to the frequency domain for spectral processing and then back to the time/spatial domain.\r\n\r\n## Syntax\r\n\r\n`series_ifft(`*fft_real* [`,` *fft_imaginary*]`)`\r\n\r\n## Arguments\r\n\r\n* *fft_real*: Dynamic array of numeric values representing the real component of the series to transform.\r\n* *fft_imaginary*: A similar dynamic array representing the imaginary component of the series. This parameter is optional and should be specified only if the input series contains complex numbers.\r\n\r\n## Returns\r\n\r\nThe function returns the complex inverse fft in two series. The first series for the real component and the second one for the imaginary component.","See [series_fft](series-fft-function.md#example)","https://docs.microsoft.com/en-us/azure/kusto/query/series-ifft-function","series-ifft-function.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"series_iir","Applies an Infinite Impulse Response filter on a series.","The function takes an expression containing dynamic numerical array as input, and applies an [Infinite Impulse Response](https://en.wikipedia.org/wiki/Infinite_impulse_response) filter. By specifying the filter coefficients, the function can be used:\r\n\r\n* to calculate the cumulative sum of the series\r\n* to apply smoothing operations\r\n* to apply various [high-pass](https://en.wikipedia.org/wiki/High-pass_filter), [band-pass](https://en.wikipedia.org/wiki/Band-pass_filter), and [low-pass](https://en.wikipedia.org/wiki/Low-pass_filter) filters\r\n\r\nThe function takes as input the column containing the dynamic array and two static dynamic arrays of the filter's *a* and *b* coefficients, and applies the filter on the column. It outputs a new dynamic array column, containing the filtered output.  \r\n\r\n## Syntax\r\n\r\n`series_iir(`*x*`,` *b* `,` *a*`)`\r\n\r\n## Arguments\r\n\r\n* *x*: Dynamic array cell that is an array of numeric values, typically the resulting output of [make-series](make-seriesoperator.md) or [make_list](makelist-aggfunction.md) operators.\r\n* *b*: A constant expression containing the numerator coefficients of the filter (stored as a dynamic array of numeric values).\r\n* *a*: A constant expression, like *b*. Containing the denominator coefficients of the filter.\r\n\r\n> [!IMPORTANT]\r\n> The first element of `a` (that is, `a[0]`) mustn't be zero, to avoid division by 0. See the [formula below](#the-filters-recursive-formula).\r\n\r\n## The filter's recursive formula\r\n\r\n* Consider an input array X, and coefficients arrays a and b of lengths n_a and n_b respectively. The transfer function of the filter that will generate the output array Y, is defined by:\r\n\r\n<div align=\"center\">\r\nY<sub>i<\/sub> = a<sub>0<\/sub><sup>-1<\/sup>(b<sub>0<\/sub>X<sub>i<\/sub>\r\n + b<sub>1<\/sub>X<sub>i-1<\/sub> + ... + b<sub>n<sub>b<\/sub>-1<\/sub>X<sub>i-n<sub>b<\/sub>-1<\/sub>\r\n - a<sub>1<\/sub>Y<sub>i-1<\/sub>-a<sub>2<\/sub>Y<sub>i-2<\/sub> - ... - a<sub>n<sub>a<\/sub>-1<\/sub>Y<sub>i-n<sub>a<\/sub>-1<\/sub>)\r\n<\/div>","Calculate a cumulative sum. \r\nUse the iir filter with coefficients *a*=[1,-1] and *b*=[1]:  \r\n\r\n```\r\nlet x = range(1.0, 10, 1);\r\nprint x=x, y = series_iir(x, dynamic([1]), dynamic([1,-1]))\r\n| mv-expand x, y\r\n```\r\n\r\n| x | y |\r\n|:--|:--|\r\n|1.0|1.0|\r\n|2.0|3.0|\r\n|3.0|6.0|\r\n|4.0|10.0|\r\n\r\nHere's how to wrap it in a function:\r\n\r\n```\r\nlet vector_sum=(x:dynamic)\r\n{\r\n  let y=array_length(x) - 1;\r\n  toreal(series_iir(x, dynamic([1]), dynamic([1, -1]))[y])\r\n};\r\nprint d=dynamic([0, 1, 2, 3, 4])\r\n| extend dd=vector_sum(d)\r\n```\r\n\r\n|d            |dd  |\r\n|-------------|----|\r\n|`[0,1,2,3,4]`|`10`|","https://docs.microsoft.com/en-us/azure/kusto/query/series-iirfunction","series-iirfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"series_less","Calculates the element-wise less (`<`) logic operation of two numeric series inputs.","## Syntax\r\n\r\n`series_less (`*Series1*`,` *Series2*`)`\r\n\r\n## Arguments\r\n\r\n* *Series1, Series2*: Input numeric arrays to be element-wise compared. All arguments must be dynamic arrays. \r\n\r\n## Returns\r\n\r\nDynamic array of booleans containing the calculated element-wise less logic operation between the two inputs. Any non-numeric element or non-existing element (arrays of different sizes) yields a `null` element value.","```\r\nprint s1 = dynamic([1,2,4]), s2 = dynamic([4,2,1])\r\n| extend s1_less_s2 = series_less(s1, s2)\r\n```\r\n\r\n|s1|s2|s1_less_s2|\r\n|---|---|---|\r\n|[1,2,4]|[4,2,1]|[true,false,false]|\r\n\r\n## See also\r\n\r\nFor entire series statistics comparisons, see:\r\n\r\n* [series_stats()](series-statsfunction.md)\r\n* [series_stats_dynamic()](series-stats-dynamicfunction.md)","https://docs.microsoft.com/en-us/azure/kusto/query/series-lessfunction","series-lessfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"series_less_equals","Calculates the element-wise less or equal (`<=`) logic operation of two numeric series inputs.","## Syntax\r\n\r\n`series_less_equals (`*Series1*`,` *Series2*`)`\r\n\r\n## Arguments\r\n\r\n* *Series1, Series2*: Input numeric arrays to be element-wise compared. All arguments must be dynamic arrays. \r\n\r\n## Returns\r\n\r\nDynamic array of booleans containing the calculated element-wise less or equal logic operation between the two inputs. Any non-numeric element or non-existing element (arrays of different sizes) yields a `null` element value.","```\r\nprint s1 = dynamic([1,2,4]), s2 = dynamic([4,2,1])\r\n| extend s1_less_equals_s2 = series_less_equals(s1, s2)\r\n```\r\n\r\n|s1|s2|s1_less_equals_s2|\r\n|---|---|---|\r\n|[1,2,4]|[4,2,1]|[true,true,false]|\r\n\r\n## See also\r\n\r\nFor entire series statistics comparisons, see:\r\n\r\n* [series_stats()](series-statsfunction.md)\r\n* [series_stats_dynamic()](series-stats-dynamicfunction.md)","https://docs.microsoft.com/en-us/azure/kusto/query/series-less-equalsfunction","series-less-equalsfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"series_multiply","Calculates the element-wise multiplication of two numeric series inputs.","## Syntax\r\n\r\n`series_multiply(`*series1*`,` *series2*`)`\r\n\r\n## Arguments\r\n\r\n* *series1, series2*: Input numeric arrays, to be element-wise multiplied into a dynamic array result. All arguments must be dynamic arrays. \r\n\r\n## Returns\r\n\r\nDynamic array of calculated element-wise multiplication operation between the two inputs. Any non-numeric element or non-existing element (arrays of different sizes) yields a `null` element value.","```\r\nrange x from 1 to 3 step 1\r\n| extend y = x * 2\r\n| extend z = y * 2\r\n| project s1 = pack_array(x,y,z), s2 = pack_array(z, y, x)\r\n| extend s1_multiply_s2 = series_multiply(s1, s2)\r\n```\r\n\r\n|s1\t        |s2|\t    s1_multiply_s2|\r\n|---|---|---|\r\n|[1,2,4]\t|[4,2,1]|\t[4,4,4]|\r\n|[2,4,8]\t|[8,4,2]|\t[16,16,16]|\r\n|[3,6,12]\t|[12,6,3]|\t[36,36,36]|","https://docs.microsoft.com/en-us/azure/kusto/query/series-multiplyfunction","series-multiplyfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"series_not_equals","Calculates the element-wise not equals (`!=`) logic operation of two numeric series inputs.","## Syntax\r\n\r\n`series_not_equals (`*Series1*`,` *Series2*`)`\r\n\r\n## Arguments\r\n\r\n* *Series1, Series2*: Input numeric arrays to be element-wise compared. All arguments must be dynamic arrays. \r\n\r\n## Returns\r\n\r\nDynamic array of booleans containing the calculated element-wise not equal logic operation between the two inputs. Any non-numeric element or non-existing element (arrays of different sizes) yields a `null` element value.","```\r\nprint s1 = dynamic([1,2,4]), s2 = dynamic([4,2,1])\r\n| extend s1_not_equals_s2 = series_not_equals(s1, s2)\r\n```\r\n\r\n|s1|s2|s1_not_equals_s2|\r\n|---|---|---|\r\n|[1,2,4]|[4,2,1]|[true,false,true]|\r\n\r\n## See also\r\n\r\nFor entire series statistics comparisons, see:\r\n\r\n* [series_stats()](series-statsfunction.md)\r\n* [series_stats_dynamic()](series-stats-dynamicfunction.md)","https://docs.microsoft.com/en-us/azure/kusto/query/series-not-equalsfunction","series-not-equalsfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"series_outliers","Scores anomaly points in a series.",'The function takes an expression with a dynamic numerical array as input, and generates a dynamic numeric array of the same length. Each value of the array indicates a score of a possible anomaly, using ["Tukey\'s test"](https://en.wikipedia.org/wiki/Outlier#Tukey\'s_fences). A value greater than 1.5 in the same element of the input indicates a rise or decline anomaly. A value less than -1.5, indicates a decline anomaly.\r\n\r\n## Syntax\r\n\r\n`series_outliers(`*x*`, `*kind*`, `*ignore_val*`, `*min_percentile*`, `*max_percentile*`)`\r\n\r\n## Arguments\r\n\r\n* *x*: Dynamic array cell that is an array of numeric values\r\n* *kind*: Algorithm of outlier detection. Currently supports `"tukey"` (traditional "Tukey") and  `"ctukey"` (custom "Tukey"). Default is `"ctukey"`\r\n* *ignore_val*: Numeric value indicating missing values in the series. Default is double(null). The score of nulls and ignore values is set to `0`\r\n* *min_percentile*: For calculating the normal inter-quantile range. Default is 10, custom values supported are in range `[2.0, 98.0]` (`ctukey` only)\r\n* *max_percentile*: same, default is 90, custom values supported are in range `[2.0, 98.0]` (ctukey only)\r\n\r\nThe following table describes differences between `"tukey"` and `"ctukey"`:\r\n\r\n| Algorithm | Default quantile range | Supports custom quantile range |\r\n|-----------|----------------------- |--------------------------------|\r\n| `"tukey"` | 25% / 75%              | No                             |\r\n| `"ctukey"`| 10% / 90%              | Yes                            |\r\n\r\n> [!TIP]\r\n> The best way to use this function is to apply it to the results of the [make-series](make-seriesoperator.md) operator.',"A time series with some noise creates outliers. If you would like to replace those outliers (noise) with the average value, use series_outliers() to detect the outliers, and then replace them.\r\n\r\n```\r\nrange x from 1 to 100 step 1 \r\n| extend y=iff(x==20 or x==80, 10*rand()+10+(50-x)/2, 10*rand()+10) // generate a sample series with outliers at x=20 and x=80\r\n| summarize x=make_list(x),series=make_list(y)\r\n| extend series_stats(series), outliers=series_outliers(series)\r\n| mv-expand x to typeof(long), series to typeof(double), outliers to typeof(double)\r\n| project x, series , outliers_removed=iff(outliers > 1.5 or outliers < -1.5, series_stats_series_avg , series ) // replace outliers with the average\r\n| render linechart\r\n``` \r\n\r\n![Series outliers](images/series-outliersfunction/series-outliers.png)","https://docs.microsoft.com/en-us/azure/kusto/query/series-outliersfunction","series-outliersfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"series_pearson_correlation","Calculates the pearson correlation coefficient of two numeric series inputs.","See: [Pearson correlation coefficient](https://en.wikipedia.org/wiki/Pearson_correlation_coefficient).\r\n\r\n## Syntax\r\n\r\n`series_pearson_correlation(`*Series1*`,` *Series2*`)`\r\n\r\n## Arguments\r\n\r\n* *Series1, Series2*: Input numeric arrays for calculating the correlation coefficient. All arguments must be dynamic arrays of the same length. \r\n\r\n## Returns\r\n\r\nThe calculated Pearson correlation coefficient between the two inputs. Any non-numeric element or non-existing element (arrays of different sizes) yields a `null` result.","```\r\nrange s1 from 1 to 5 step 1 | extend s2 = 2*s1 // Perfect correlation\r\n| summarize s1 = make_list(s1), s2 = make_list(s2)\r\n| extend correlation_coefficient = series_pearson_correlation(s1,s2)\r\n```\r\n\r\n|s1|s2|correlation_coefficient|\r\n|---|---|---|\r\n|[1,2,3,4,5]|[2,4,6,8,10]|1|","https://docs.microsoft.com/en-us/azure/kusto/query/series-pearson-correlationfunction","series-pearson-correlationfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"series_periods_detect","Finds the most significant periods that exist in a time series.","Often, a metric measuring an application\u2019s traffic, is characterized by two significant periods: a weekly and a daily. \r\nThe function `series_periods_detect()` detects these two dominant periods in a time series.  \r\nThe function takes as input:\r\n\r\n* A column containing a dynamic array of time series. Typically, the column is the resulting output of [make-series](make-seriesoperator.md) operator.\r\n* Two `real` numbers defining the minimal and maximal period size, the number of bins to search for. For example, for a 1h bin, the size of a daily period would be 24. \r\n* A `long` number defining the total number of periods for the function to search. \r\n\r\nThe function outputs two columns:\r\n\r\n* *periods*: A dynamic array containing the periods that have been found, in units of the bin size, ordered by their scores.\r\n* *scores*: A dynamic array containing values between 0 and 1. Each array measures the significance of a period in its respective position in the *periods* array.\r\n \r\n\r\n## Syntax\r\n\r\n`series_periods_detect(`*x*`,` *min_period*`,` *max_period*`,` *num_periods*`)`\r\n\r\n## Arguments\r\n\r\n* *x*: Dynamic array scalar expression that is an array of numeric values, typically the resulting output of [make-series](make-seriesoperator.md) or [make_list](makelist-aggfunction.md) operators.\r\n* *min_period*: A `real` number specifying the minimal period to search for.\r\n* *max_period*: A `real` number specifying the maximal period to search for.\r\n* *num_periods*: A `long` number specifying the maximum required number of periods. This number will be the length of the output dynamic arrays.\r\n\r\n> [!IMPORTANT]\r\n> * The algorithm can detect periods containing at least 4 points and at most half of the series length. \r\n>\r\n> * Set the *min_period* a little below, and *max_period* a little above, the periods you expect to find in the time series. For example, if you have an hourly aggregated signal, and you look for both daily and weekly periods (24 and 168 hours respectively), you can set *min_period*=0.8\\*24, *max_period*=1.2\\*168, and leave 20% margins around these periods.\r\n>\r\n> * The input time series must be regular. That is, aggregated in constant bins, which is always the case if it has been created using [make-series](make-seriesoperator.md). Otherwise, the output is meaningless.","The following query embeds a snapshot of a month of an application\u2019s traffic, aggregated twice a day. The bin size is 12 hours.\r\n\r\n```\r\nprint y=dynamic([80,139,87,110,68,54,50,51,53,133,86,141,97,156,94,149,95,140,77,61,50,54,47,133,72,152,94,148,105,162,101,160,87,63,53,55,54,151,103,189,108,183,113,175,113,178,90,71,62,62,65,165,109,181,115,182,121,178,114,170])\r\n| project x=range(1, array_length(y), 1), y  \r\n| render linechart \r\n```\r\n\r\n![Series periods](images/series-periods/series-periods.png)\r\nRunning `series_periods_detect()` on this series, results in the weekly period, 14 points long.\r\n\r\n```\r\nprint y=dynamic([80,139,87,110,68,54,50,51,53,133,86,141,97,156,94,149,95,140,77,61,50,54,47,133,72,152,94,148,105,162,101,160,87,63,53,55,54,151,103,189,108,183,113,175,113,178,90,71,62,62,65,165,109,181,115,182,121,178,114,170])\r\n| project x=range(1, array_length(y), 1), y  \r\n| project series_periods_detect(y, 0.0, 50.0, 2)\r\n```\r\n\r\n| series\\_periods\\_detect\\_y\\_periods  | series\\_periods\\_detect\\_y\\_periods\\_scores |\r\n|-------------|-------------------|\r\n| [14.0, 0.0] | [0.84, 0.0]  |\r\n\r\n> [!NOTE] \r\n> The daily period that can be also seen in the chart wasn't found becasue the sampling is too coarse (12h bin size), so a daily period of 2 bins is below the minimum period size of 4 points, required by the algorithm.","https://docs.microsoft.com/en-us/azure/kusto/query/series-periods-detectfunction","series-periods-detectfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"series_periods_validate","Checks whether a time series contains periodic patterns of given lengths.","Often a metric measuring the traffic of an application is characterized by a weekly or daily period. This period can be confirmed by running `series_periods_validate()` that checks for a weekly and daily period.\r\n\r\nThe function takes as input a column that contains a dynamic array of time series (typically the resulting output of [make-series](make-seriesoperator.md) operator), and one or more `real` numbers that define the lengths of the periods to validate.\r\n\r\nThe function outputs two columns:\r\n\r\n* *periods*: A dynamic array that contains the periods to validate (supplied in the input).\r\n* *scores*: A dynamic array that contains a score between 0 and 1. The score shows the significance of a period in its respective position in the *periods* array.\r\n\r\n## Syntax\r\n\r\n`series_periods_validate(`*x*`,` *period1* [ `,` *period2* `,` . . . ] `)`\r\n\r\n## Arguments\r\n\r\n* *x*: Dynamic array scalar expression that is an array of numeric values, typically the resulting output of [make-series](make-seriesoperator.md) or [make_list](makelist-aggfunction.md) operators.\r\n* *period1*, *period2*, and so on: `real` numbers specifying the periods to validate, in units of the bin size. For example, if the series is in 1h bins, a weekly period is 168 bins.\r\n\r\n> [!IMPORTANT]\r\n> * The minimal value for each of the *period* arguments is **4** and the maximal is half of the length of the input series. For a *period* argument outside these bounds, the output score will be **0**.\r\n>\r\n> * The input time series must be regular, that is, aggregated in constant bins, and is always the case if it has been created using [make-series](make-seriesoperator.md). Otherwise, the output is meaningless.\r\n> \r\n> * The function accepts up to 16 periods to validate.","The following query embeds a snapshot of a month of an application\u2019s traffic, aggregated twice a day (the bin size is 12 hours).\r\n\r\n```\r\nprint y=dynamic([80,139,87,110,68,54,50,51,53,133,86,141,97,156,94,149,95,140,77,61,50,54,47,133,72,152,94,148,105,162,101,160,87,63,53,55,54,151,103,189,108,183,113,175,113,178,90,71,62,62,65,165,109,181,115,182,121,178,114,170])\r\n| project x=range(1, array_length(y), 1), y  \r\n| render linechart \r\n```\r\n\r\n![Series periods](images/series-periods/series-periods.png)\r\nIf you run `series_periods_validate()` on this series to validate a weekly period (14 points long) it results in a high score, and with a **0** score when you validate a five-day period (10 points long).\r\n\r\n```\r\nprint y=dynamic([80,139,87,110,68,54,50,51,53,133,86,141,97,156,94,149,95,140,77,61,50,54,47,133,72,152,94,148,105,162,101,160,87,63,53,55,54,151,103,189,108,183,113,175,113,178,90,71,62,62,65,165,109,181,115,182,121,178,114,170])\r\n| project x=range(1, array_length(y), 1), y  \r\n| project series_periods_validate(y, 14.0, 10.0)\r\n```\r\n\r\n| series\\_periods\\_validate\\_y\\_periods  | series\\_periods\\_validate\\_y\\_scores |\r\n|-------------|-------------------|\r\n| [14.0, 10.0] | [0.84,0.0]  |","https://docs.microsoft.com/en-us/azure/kusto/query/series-periods-validatefunction","series-periods-validatefunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"series_seasonal","Calculates the seasonal component of a series, according to the detected or given seasonal period.","## Syntax\r\n\r\n`series_seasonal(`*series* `[,` *period*`])`\r\n\r\n## Arguments\r\n\r\n* *series*: Input numeric dynamic array\r\n* *period* (optional): Integer number of bins in each seasonal period, possible values:\r\n    *  -1 (default): Autodetects the period by using [series_periods_detect()](series-periods-detectfunction.md) with a threshold of *0.7*. Returns zeroes if seasonality isn't detected\r\n    * Positive integer: Used as the period for the seasonal component\r\n    * Any other value: Ignores seasonality and returns a series of zeroes\r\n\r\n## Returns\r\n\r\nDynamic array of the same length as the *series* input that contains the calculated seasonal component of the series. The seasonal component is calculated as the *median* of all the values that correspond to the location of the bin, across the periods.","### Auto detect the period\r\n\r\nIn the following example, the series' period is automatically detected. The first series' period is detected to be six bins and the second five bins. The third series' period is too short to be detected and returns a series of zeroes. \r\nSee the next example on [how to force the period](#force-a-period).\r\n\r\n```\r\nprint s=dynamic([2,5,3,4,3,2,1,2,3,4,3,2,1,2,3,4,3,2,1,2,3,4,3,2,1])\r\n| union (print s=dynamic([8,12,14,12,10,10,12,14,12,10,10,12,14,12,10,10,12,14,12,10]))\r\n| union (print s=dynamic([1,3,5,2,4,6,1,3,5,2,4,6]))\r\n| extend s_seasonal = series_seasonal(s)\r\n```\r\n\r\n|s|s_seasonal|\r\n|---|---|\r\n|[2,5,3,4,3,2,1,2,3,4,3,2,1,2,3,4,3,2,1,2,3,4,3,2,1]|[1.0,2.0,3.0,4.0,3.0,2.0,1.0,2.0,3.0,4.0,3.0,2.0,1.0,2.0,3.0,4.0,3.0,2.0,1.0,2.0,3.0,4.0,3.0,2.0,1.0]|\r\n|[8,12,14,12,10,10,12,14,12,10,10,12,14,12,10,10,12,14,12,10]|[10.0,12.0,14.0,12.0,10.0,10.0,12.0,14.0,12.0,10.0,10.0,12.0,14.0,12.0,10.0,10.0,12.0,14.0,12.0,10.0]|\r\n|[1,3,5,2,4,6,1,3,5,2,4,6]|[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]|\r\n\r\n### Force a period\r\n\r\nIn this example, the series' period is too short to be detected by [series_periods_detect()](series-periods-detectfunction.md), so we explicitly force the period to get the seasonal pattern.\r\n\r\n```\r\nprint s=dynamic([1,3,5,1,3,5,2,4,6]) \r\n| union (print s=dynamic([1,3,5,2,4,6,1,3,5,2,4,6]))\r\n| extend s_seasonal = series_seasonal(s,3)\r\n```\r\n\r\n|s|s_seasonal|\r\n|---|---|\r\n|[1,3,5,1,3,5,2,4,6]|[1.0,3.0,5.0,1.0,3.0,5.0,1.0,3.0,5.0]|\r\n|[1,3,5,2,4,6,1,3,5,2,4,6]|[1.5,3.5,5.5,1.5,3.5,5.5,1.5,3.5,5.5,1.5,3.5,5.5]|\r\n\r\n## Next steps\r\n\r\n* [series_periods_detect()](series-periods-detectfunction.md)\r\n* [series_periods_validate()](series-periods-validatefunction.md)","https://docs.microsoft.com/en-us/azure/kusto/query/series-seasonalfunction","series-seasonalfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"series_stats","`series_stats()` returns statistics for a series in multiple columns.","The `series_stats()` function takes a column containing dynamic numerical array as input and calculates the following columns:\r\n\r\n* `min`: minimum value in the input array\r\n* `min_idx`: first position of the minimum value in the input array\r\n* `max`: maximum value in the input array\r\n* `max_idx`: first position of the maximum value in the input array\r\n* `avg`: average value of the input array\r\n* `variance`: sample variance of input array\r\n* `stdev`: sample standard deviation of the input array\r\n\r\n> [!NOTE] \r\n> This function returns multiple columns so it can't be used as an argument for another function.\r\n\r\n## Syntax\r\n\r\nproject `series_stats(`*x* `[,`*ignore_nonfinite*`])` or extend `series_stats(`*x*`)` \r\nReturns all above-mentioned columns with the following names: series_stats_x_min, series_stats_x_min_idx and etc.\r\n\r\nproject (m, mi)=`series_stats(`*x*`)` or extend (m, mi)=`series_stats(`*x*`)`\r\nReturns the following columns: m (min) and mi (min_idx).\r\n\r\n## Arguments\r\n\r\n* *x*: Dynamic array cell, which is an array of numeric values. \r\n* *ignore_nonfinite*: Boolean (optional, default: `false`) flag that specifies whether to calculate the statistics while ignoring non-finite values (*null*, *NaN*, *inf*, etc.). If set to `false`, the returned values would be `null` if non-finite values are present in the array.","```\r\nprint x=dynamic([23,46,23,87,4,8,3,75,2,56,13,75,32,16,29]) \r\n| project series_stats(x)\r\n\r\n```\r\n\r\n|series_stats_x_min|series_stats_x_min_idx|series_stats_x_max|series_stats_x_max_idx|series_stats_x_avg|series_stats_x_stdev|series_stats_x_variance|\r\n|---|---|---|---|---|---|---|\r\n|2|8|87|3|32.8|28.5036338535483|812.457142857143|","https://docs.microsoft.com/en-us/azure/kusto/query/series-statsfunction","series-statsfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"series_stats_dynamic","Returns statistics for a series in a dynamic object.","The `series_stats_dynamic()` function takes a column containing dynamic numerical array as input and generates a dynamic value with the following content:\r\n\r\n* `min`: minimum value in the input array\r\n* `min_idx`: first position of the minimum value in the input array\r\n* `max`: maximum value in the input array\r\n* `max_idx`: first position of the maximum value in the input array\r\n* `avg`: average value of the input array\r\n* `variance`: sample variance of input array\r\n* `stdev`: sample standard deviation of the input array\r\n\r\n## Syntax\r\n\r\n`series_stats_dynamic(`*x* `[,`*ignore_nonfinite*`])`\r\n\r\n## Arguments\r\n\r\n* *x*: Dynamic array cell which is an array of numeric values. \r\n* *ignore_nonfinite*: Boolean (optional, default: `false`) flag that specifies whether to calculate the statistics while ignoring non-finite values (*null*, *NaN*, *inf*, etc.). If set to `false` the returned result is `null` if non-finite values are present in the array.",'```\r\nprint x=dynamic([23,46,23,87,4,8,3,75,2,56,13,75,32,16,29]) \r\n| project stats=series_stats_dynamic(x)\r\n```\r\n\r\n|stats\r\n|---|\r\n|{"min": 2.0, "min_idx": 8, "max": 87.0, "max_idx": 3, "avg": 32.8, "stdev": 28.503633853548269, "variance": 812.45714285714291 }',"https://docs.microsoft.com/en-us/azure/kusto/query/series-stats-dynamicfunction","series-stats-dynamicfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"series_subtract","Calculates the element-wise subtraction of two numeric series inputs.","## Syntax\r\n\r\n`series_subtract(`*series1*`,` *series2*`)`\r\n\r\n## Arguments\r\n\r\n* *series1, series2*: Input numeric arrays, the second to be element-wise subtracted from the first into a dynamic array result. All arguments must be dynamic arrays. \r\n\r\n## Returns\r\n\r\nDynamic array of calculated element-wise subtract operation between the two inputs. Any non-numeric element or non-existing element (arrays of different sizes) yields a `null` element value.","```\r\nrange x from 1 to 3 step 1\r\n| extend y = x * 2\r\n| extend z = y * 2\r\n| project s1 = pack_array(x,y,z), s2 = pack_array(z, y, x)\r\n| extend s1_subtract_s2 = series_subtract(s1, s2)\r\n```\r\n\r\n|s1|s2|s1_subtract_s2|\r\n|---|---|---|\r\n|[1,2,4]|[4,2,1]|[-3,0,3]|\r\n|[2,4,8]|[8,4,2]|[-6,0,6]|\r\n|[3,6,12]|[12,6,3]|[-9,0,9]|","https://docs.microsoft.com/en-us/azure/kusto/query/series-subtractfunction","series-subtractfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"set_difference","Returns a `dynamic` (JSON) array of the set of all distinct values that are in the first array but aren't in other arrays - (((arr1 \\ arr2) \\ arr3) \\ ...).","## Syntax\r\n\r\n`set_difference(`*arr1*`, `*arr2*`[`,` *arr3*, ...])`\r\n\r\n## Arguments\r\n\r\n* *arr1...arrN*: Input arrays to create a difference set (at least two arrays). All arguments must be dynamic arrays (see [pack_array](packarrayfunction.md)). \r\n\r\n## Returns\r\n\r\nReturns a dynamic array of the set of all distinct values that are in arr1 but aren't in other arrays. See [`set_union()`](setunionfunction.md) and [`set_intersect()`](setintersectfunction.md).","```\r\nrange x from 1 to 3 step 1\r\n| extend y = x * 2\r\n| extend z = y * 2\r\n| extend w = z * 2\r\n| extend a1 = pack_array(x,y,x,z), a2 = pack_array(x, y), a3 = pack_array(x,y,w)\r\n| project set_difference(a1, a2, a3)\r\n```\r\n\r\n|Column1|\r\n|---|\r\n|[4]|\r\n|[8]|\r\n|[12]|\r\n\r\n```\r\nprint arr = set_difference(dynamic([1,2,3]), dynamic([1,2,3]))\r\n```\r\n\r\n|arr|\r\n|---|\r\n|[]|","https://docs.microsoft.com/en-us/azure/kusto/query/setdifferencefunction","setdifferencefunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"set_has_element","Determines whether the specified set contains the specified element.","## Syntax\r\n\r\n`set_has_element(`*array*,*value*`)`\r\n\r\n## Arguments\r\n\r\n* *array*: Input array to search.\r\n* *value*: Value to search for. The value should be of type `long`, `integer`, `double`, `datetime`, `timespan`, `decimal`, `string`, or `guid`.\r\n\r\n## Returns\r\n\r\nTrue or false depending on if the value exists in the array.",'```\r\nprint arr=dynamic(["this", "is", "an", "example"]) \r\n| project Result=set_has_element(arr, "example")\r\n```\r\n\r\n|Result|\r\n|---|\r\n|1|\r\n\r\n## See also\r\n\r\nUse [`array_index_of(arr, value)`](arrayindexoffunction.md) to find the position at which the value exists in the array. Both functions are equally performant.',"https://docs.microsoft.com/en-us/azure/kusto/query/sethaselementfunction","sethaselementfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"set_intersect","Returns a `dynamic` array of the set of all distinct values that are in all arrays - (arr1 \u2229 arr2 \u2229 ...).","## Syntax\r\n\r\n`set_intersect(`*arr1*`, `*arr2*`[`,` *arr3*, ...])`\r\n\r\n## Arguments\r\n\r\n* *arr1...arrN*: Input arrays to create an intersect set (at least two arrays). All arguments must be dynamic arrays. For more information, see [pack_array](packarrayfunction.md). \r\n\r\n## Returns\r\n\r\nReturns a dynamic array of the set of all distinct values that are in all arrays. See [`set_union()`](setunionfunction.md) and [`set_difference()`](setdifferencefunction.md).","```\r\nrange x from 1 to 3 step 1\r\n| extend y = x * 2\r\n| extend z = y * 2\r\n| extend w = z * 2\r\n| extend a1 = pack_array(x,y,x,z), a2 = pack_array(x, y), a3 = pack_array(w,x)\r\n| project set_intersect(a1, a2, a3)\r\n```\r\n\r\n|Column1|\r\n|---|\r\n|[1]|\r\n|[2]|\r\n|[3]|\r\n\r\n```\r\nprint arr = set_intersect(dynamic([1, 2, 3]), dynamic([4,5]))\r\n```\r\n\r\n|arr|\r\n|---|\r\n|[]|","https://docs.microsoft.com/en-us/azure/kusto/query/setintersectfunction","setintersectfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"set_union","Returns a `dynamic` array of the set of all distinct values that are in any of arrays - (arr1 \u222a arr2 \u222a ...).","## Syntax\r\n\r\n`set_union(`*arr1*`, `*arr2*`[`,` *arr3*, ...]``)`\r\n\r\n## Arguments\r\n\r\n* *arr1...arrN*: Input arrays to create a union set (at least two arrays). All arguments must be dynamic arrays (see [pack_array](packarrayfunction.md)). \r\n\r\n## Returns\r\n\r\nReturns a dynamic array of the set of all distinct values that are in any of arrays. See [`set_intersect()`](setintersectfunction.md)  and [`set_difference()`](setdifferencefunction.md).","```\r\nrange x from 1 to 3 step 1\r\n| extend y = x * 2\r\n| extend z = y * 2\r\n| extend w = z * 2\r\n| extend a1 = pack_array(x,y,x,z), a2 = pack_array(x, y), a3 = pack_array(w)\r\n| project set_union(a1, a2, a3)\r\n```\r\n\r\n|Column1|\r\n|---|\r\n|[1,2,4,8]|\r\n|[2,4,8,16]|\r\n|[3,6,12,24]|","https://docs.microsoft.com/en-us/azure/kusto/query/setunionfunction","setunionfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"sign","Sign of a numeric expression","## Syntax\r\n\r\n`sign(`*x*`)`\r\n\r\n## Arguments\r\n\r\n* *x*: A real number.\r\n\r\n## Returns\r\n\r\n* The positive (+1), zero (0), or negative (-1) sign of the specified expression.","```\r\nprint s1 = sign(-42), s2 = sign(0), s3 = sign(11.2)\r\n\r\n```\r\n\r\n|s1|s2|s3|\r\n|---|---|---|\r\n|-1|0|1|","https://docs.microsoft.com/en-us/azure/kusto/query/signfunction","signfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"sin","Returns the sine function.","## Syntax\r\n\r\n`sin(`*x*`)`\r\n\r\n## Arguments\r\n\r\n* *x*: A real number.\r\n\r\n## Returns\r\n\r\n* The result of `sin(x)`","","https://docs.microsoft.com/en-us/azure/kusto/query/sinfunction","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,"sort","Sort the rows of the input table into order by one or more columns.","```\r\nT | sort by strlen(country) asc, price desc\r\n```\r\n\r\n**Alias**\r\n\r\n`order`\r\n\r\n## Syntax\r\n\r\n*T* `| sort by` *expression* [`asc` | `desc`] [`nulls first` | `nulls last`] [`,` ...]\r\n\r\n## Arguments\r\n\r\n* *T*: The table input to sort.\r\n* *expression*: A scalar expression by which to sort. The type of the values must be numeric, date, time or string.\r\n* `asc` Sort by into ascending order, low to high. The default is `desc`, descending high to low.\r\n* `nulls first` (the default for `asc` order) will place the null values at the beginning and `nulls last` (the default for `desc` order) will place the null values at the end.",'```\r\nTraces\r\n| where ActivityId == "479671d99b7b"\r\n| sort by Timestamp asc nulls first\r\n```\r\n\r\nAll rows in table Traces that have a specific `ActivityId`, sorted by their timestamp. If `Timestamp` column contains null values, those will appear at the first lines of the result.\r\n\r\nIn order to exclude null values from the result add a filter before the call to sort:\r\n\r\n```\r\nTraces\r\n| where ActivityId == "479671d99b7b" and isnotnull(Timestamp)\r\n| sort by Timestamp asc\r\n```',"https://docs.microsoft.com/en-us/azure/kusto/query/sortoperator","sortoperator.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"split","Splits a given string according to a given delimiter and returns a string array with the contained substrings.",'Optionally, a specific substring can be returned if exists.\r\n\r\n```\r\nsplit("aaa_bbb_ccc", "_") == ["aaa","bbb","ccc"]\r\n```\r\n\r\n## Syntax\r\n\r\n`split(`*source*`,` *delimiter* [`,` *requestedIndex*]`)`\r\n\r\n## Arguments\r\n\r\n* *source*: The source string that will be split according to the given delimiter.\r\n* *delimiter*: The delimiter that will be used in order to split the source string.\r\n* *requestedIndex*: An optional zero-based index `int`. If provided, the returned string array will contain the requested substring if exists. \r\n\r\n## Returns\r\n\r\nA string array that contains the substrings of the given source string that are delimited by the given delimiter.','```\r\nprint\r\n    split("aa_bb", "_"),           // ["aa","bb"]\r\n    split("aaa_bbb_ccc", "_", 1),  // ["bbb"]\r\n    split("", "_"),                // [""]\r\n    split("a__b", "_"),            // ["a","","b"]\r\n    split("aabbcc", "bb")          // ["aa","cc"]\r\n```',"https://docs.microsoft.com/en-us/azure/kusto/query/splitfunction","splitfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"sqrt","Returns the square root function.","## Syntax\r\n\r\n`sqrt(`*x*`)`\r\n\r\n## Arguments\r\n\r\n* *x*: A real number >= 0.\r\n\r\n## Returns\r\n\r\n* A positive number such that `sqrt(x) * sqrt(x) == x`\r\n* `null` if the argument is negative or cannot be converted to a `real` value.","","https://docs.microsoft.com/en-us/azure/kusto/query/sqrtfunction","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"startofday","Returns the start of the day containing the date, shifted by an offset, if provided.","## Syntax\r\n\r\n`startofday(`*date* [`,`*offset*]`)`\r\n\r\n## Arguments\r\n\r\n* `date`: The input date.\r\n* `offset`: An optional number of offset days from the input date (integer, default - 0). \r\n\r\n## Returns\r\n\r\nA datetime representing the start of the day for the given *date* value, with the offset, if specified.","```\r\n  range offset from -1 to 1 step 1\r\n | project dayStart = startofday(datetime(2017-01-01 10:10:17), offset) \r\n```\r\n\r\n|dayStart|\r\n|---|\r\n|2016-12-31 00:00:00.0000000|\r\n|2017-01-01 00:00:00.0000000|\r\n|2017-01-02 00:00:00.0000000|","https://docs.microsoft.com/en-us/azure/kusto/query/startofdayfunction","startofdayfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"startofmonth","Returns the start of the month containing the date, shifted by an offset, if provided.","## Syntax\r\n\r\n`startofmonth(`*date* [`,`*offset*]`)`\r\n\r\n## Arguments\r\n\r\n* `date`: The input date.\r\n* `offset`: An optional number of offset months from the input date (integer, default - 0).\r\n\r\n## Returns\r\n\r\nA datetime representing the start of the month for the given *date* value, with the offset, if specified.","```\r\n  range offset from -1 to 1 step 1\r\n | project monthStart = startofmonth(datetime(2017-01-01 10:10:17), offset) \r\n```\r\n\r\n|monthStart|\r\n|---|\r\n|2016-12-01 00:00:00.0000000|\r\n|2017-01-01 00:00:00.0000000|\r\n|2017-02-01 00:00:00.0000000|","https://docs.microsoft.com/en-us/azure/kusto/query/startofmonthfunction","startofmonthfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"startofweek","Returns the start of the week containing the date, shifted by an offset, if provided.","Start of the week is considered to be a Sunday.\r\n\r\n## Syntax\r\n\r\n`startofweek(`*date* [`,`*offset*]`)`\r\n\r\n## Arguments\r\n\r\n* `date`: The input date.\r\n* `offset`: An optional number of offset weeks from the input date (integer, default - 0).\r\n\r\n## Returns\r\n\r\nA datetime representing the start of the week for the given *date* value, with the offset, if specified.","```\r\n  range offset from -1 to 1 step 1\r\n | project weekStart = startofweek(datetime(2017-01-01 10:10:17), offset) \r\n```\r\n\r\n|weekStart|\r\n|---|\r\n|2016-12-25 00:00:00.0000000|\r\n|2017-01-01 00:00:00.0000000|\r\n|2017-01-08 00:00:00.0000000|","https://docs.microsoft.com/en-us/azure/kusto/query/startofweekfunction","startofweekfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"startofyear","Returns the start of the year containing the date, shifted by an offset, if provided.","## Syntax\r\n\r\n`startofyear(`*date* [`,`*offset*]`)`\r\n\r\n## Arguments\r\n\r\n* `date`: The input date.\r\n* `offset`: An optional number of offset years from the input date (integer, default - 0). \r\n\r\n## Returns\r\n\r\nA datetime representing the start of the year for the given *date* value, with the offset, if specified.","```\r\n  range offset from -1 to 1 step 1\r\n | project yearStart = startofyear(datetime(2017-01-01 10:10:17), offset) \r\n```\r\n\r\n|yearStart|\r\n|---|\r\n|2016-01-01 00:00:00.0000000|\r\n|2017-01-01 00:00:00.0000000|\r\n|2018-01-01 00:00:00.0000000|","https://docs.microsoft.com/en-us/azure/kusto/query/startofyearfunction","startofyearfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"stdev","Calculates the standard deviation of *Expr* across the group, considering the group as a [sample](https://en.wikipedia.org/wiki/Sample_%28statistics%29).","* Used formula:\r\n\r\n![Stdev sample](images/stdev-aggfunction/stdev-sample.png)\r\n\r\n* Can be used only in context of aggregation inside [summarize](summarizeoperator.md)\r\n\r\n## Syntax\r\n\r\nsummarize `stdev(`*Expr*`)`\r\n\r\n## Arguments\r\n\r\n* *Expr*: Expression that will be used for aggregation calculation. \r\n\r\n## Returns\r\n\r\nThe standard deviation value of *Expr* across the group.","```\r\nrange x from 1 to 5 step 1\r\n| summarize make_list(x), stdev(x)\r\n\r\n```\r\n\r\n|list_x|stdev_x|\r\n|---|---|\r\n|[ 1, 2, 3, 4, 5]|1.58113883008419|","https://docs.microsoft.com/en-us/azure/kusto/query/stdev-aggfunction","stdev-aggfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"stdevif","Calculates the [stdev](stdev-aggfunction.md) of *Expr* across the group for which *Predicate* evaluates to `true`.","* Can be used only in context of aggregation inside [summarize](summarizeoperator.md)\r\n\r\n## Syntax\r\n\r\nsummarize `stdevif(`*Expr*`, `*Predicate*`)`\r\n\r\n## Arguments\r\n\r\n* *Expr*: Expression that will be used for aggregation calculation. \r\n* *Predicate*:  predicate that if true, the *Expr* calculated value will be added to the standard deviation.\r\n\r\n## Returns\r\n\r\nThe standard deviation value of *Expr* across the group where *Predicate* evaluates to `true`.","```\r\nrange x from 1 to 100 step 1\r\n| summarize stdevif(x, x%2 == 0)\r\n\r\n```\r\n\r\n|stdevif_x|\r\n|---|\r\n|29.1547594742265|","https://docs.microsoft.com/en-us/azure/kusto/query/stdevif-aggfunction","stdevif-aggfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"stdevp","Calculates the standard deviation of *Expr* across the group, considering the group as a [population](https://en.wikipedia.org/wiki/Statistical_population).","* Used formula:\r\n\r\n![Stdev population](images/stdevp-aggfunction/stdev-population.png)\r\n\r\n* Can be used only in context of aggregation inside [summarize](summarizeoperator.md)\r\n\r\n## Syntax\r\n\r\nsummarize `stdevp(`*Expr*`)`\r\n\r\n## Arguments\r\n\r\n* *Expr*: Expression that will be used for aggregation calculation. \r\n\r\n## Returns\r\n\r\nThe standard deviation value of *Expr* across the group.","```\r\nrange x from 1 to 5 step 1\r\n| summarize make_list(x), stdevp(x)\r\n\r\n```\r\n\r\n|list_x|stdevp_x|\r\n|---|---|\r\n|[ 1, 2, 3, 4, 5]|1.4142135623731|","https://docs.microsoft.com/en-us/azure/kusto/query/stdevp-aggfunction","stdevp-aggfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"strcat","Concatenates between 1 and 64 arguments.","* If the arguments aren't of string type, they'll be forcibly converted to string.\r\n\r\n## Syntax\r\n\r\n`strcat(`*argument1*, *argument2*[, *argumentN*]`)`\r\n\r\n## Arguments\r\n\r\n* *argument1* ... *argumentN*: Expressions to be concatenated.\r\n\r\n## Returns\r\n\r\nArguments, concatenated to a single string.",'```\r\nprint str = strcat("hello", " ", "world")\r\n```\r\n\r\n|str|\r\n|---|\r\n|hello world|',"https://docs.microsoft.com/en-us/azure/kusto/query/strcatfunction","strcatfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"strcat_array","Creates a concatenated string of array values using specified delimiter.","## Syntax\r\n\r\n`strcat_array(`*array*, *delimiter*`)`\r\n\r\n## Arguments\r\n\r\n* *array*: A `dynamic` value representing an array of values to be concatenated.\r\n* *delimeter*: A `string` value that will be used to concatenate the values in *array*\r\n\r\n## Returns\r\n\r\nArray values, concatenated to a single string.",'```\r\nprint str = strcat_array(dynamic([1, 2, 3]), "->")\r\n```\r\n\r\n|str|\r\n|---|\r\n|1->2->3|',"https://docs.microsoft.com/en-us/azure/kusto/query/strcat-arrayfunction","strcat-arrayfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"strcat_delim","Concatenates between 2 and 64 arguments, with delimiter, provided as first argument.","* If arguments aren't of string type, they'll be forcibly converted to string.\r\n\r\n## Syntax\r\n\r\n`strcat_delim(`*delimiter*, *argument1*, *argument2*[ , *argumentN*]`)`\r\n\r\n## Arguments\r\n\r\n* *delimiter*: string expression, which will be used as separator.\r\n* *argument1* ... *argumentN*: Expressions to be concatenated.\r\n\r\n## Returns\r\n\r\nArguments, concatenated to a single string with *delimiter*.","```\r\nprint st = strcat_delim('-', 1, '2', 'A', 1s)\r\n\r\n```\r\n\r\n|st|\r\n|---|\r\n|1-2-A-00:00:01|","https://docs.microsoft.com/en-us/azure/kusto/query/strcat-delimfunction","strcat-delimfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"strcmp","Compares two strings.","The function starts comparing the first character of each string. If they are equal to each other, it continues with the following pairs until the characters differ or until the end of shorter string is reached.\r\n\r\n## Syntax\r\n\r\n`strcmp(`*string1*`,` *string2*`)` \r\n\r\n## Arguments\r\n\r\n* *string1*: first input string for comparison. \r\n* *string2*: second input string for comparison.\r\n\r\n## Returns\r\n\r\nReturns an integral value indicating the relationship between the strings:\r\n\r\n* *<0* - the first character that does not match has a lower value in string1 than in string2\r\n* *0* - the contents of both strings are equal\r\n* *>0* - the first character that does not match has a greater value in string1 than in string2",'```\r\ndatatable(string1:string, string2:string)\r\n["ABC","ABC",\r\n"abc","ABC",\r\n"ABC","abc",\r\n"abcde","abc"]\r\n| extend result = strcmp(string1,string2)\r\n```\r\n\r\n|string1|string2|result|\r\n|---|---|---|\r\n|ABC|ABC|0|\r\n|abc|ABC|1|\r\n|ABC|abc|-1|\r\n|abcde|abc|1|',"https://docs.microsoft.com/en-us/azure/kusto/query/strcmpfunction","strcmpfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"string_size","Returns the size, in bytes, of the input string.","## Syntax\r\n\r\n`string_size(`*source*`)`\r\n\r\n## Arguments\r\n\r\n* *source*: The source string that will be measured for string size.\r\n\r\n## Returns\r\n\r\nReturns the length, in bytes, of the input string.",'```\r\nprint size = string_size("hello")\r\n```\r\n\r\n|size|\r\n|---|\r\n|5|\r\n\r\n```\r\nprint size = string_size("\u24a6\u24b0\u24ae\u24af\u24aa")\r\n```\r\n\r\n|size|\r\n|---|\r\n|15|',"https://docs.microsoft.com/en-us/azure/kusto/query/stringsizefunction","stringsizefunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"strlen","Returns the length, in characters, of the input string.","## Syntax\r\n\r\n`strlen(`*source*`)`\r\n\r\n## Arguments\r\n\r\n* *source*: The source string that will be measured for string length.\r\n\r\n## Returns\r\n\r\nReturns the length, in characters, of the input string.\r\n\r\n**Notes**\r\n\r\nEach Unicode character in the string is equal to `1`, including surrogates.\r\n(e.g: Chinese characters will be counted once despite the fact that it requires more than one value in UTF-8 encoding).",'```\r\nprint length = strlen("hello")\r\n```\r\n\r\n|length|\r\n|---|\r\n|5|\r\n\r\n```\r\nprint length = strlen("\u24a6\u24b0\u24ae\u24af\u24aa")\r\n```\r\n\r\n|length|\r\n|---|\r\n|5|',"https://docs.microsoft.com/en-us/azure/kusto/query/strlenfunction","strlenfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"strrep","Repeats given [string](./scalar-data-types/string.md) provided amount of times.","* In case if first or third argument is not of a string type, it will be forcibly converted to string.\r\n\r\n## Syntax\r\n\r\n`strrep(`*value*,*multiplier*,[*delimiter*]`)`\r\n\r\n## Arguments\r\n\r\n* *value*: input expression\r\n* *multiplier*: positive integer value (from 1 to 1024)\r\n* *delimiter*: an optional string expression (default: empty string)\r\n\r\n## Returns\r\n\r\nValue repeated for a specified number of times, concatenated with *delimiter*.\r\n\r\nIn case if *multiplier* is more than maximal allowed value (1024), input string will be repeated 1024 times.","```\r\nprint from_str = strrep('ABC', 2), from_int = strrep(123,3,'.'), from_time = strrep(3s,2,' ')\r\n```\r\n\r\n|from_str|from_int|from_time|\r\n|---|---|---|\r\n|ABCABC|123.123.123|00:00:03 00:00:03|","https://docs.microsoft.com/en-us/azure/kusto/query/strrepfunction","strrepfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"substring","Extracts a substring from a source string starting from some index to the end of the string.",'Optionally, the length of the requested substring can be specified.\r\n\r\n```\r\nsubstring("abcdefg", 1, 2) == "bc"\r\n```\r\n\r\n## Syntax\r\n\r\n`substring(`*source*`,` *startingIndex* [`,` *length*]`)`\r\n\r\n## Arguments\r\n\r\n* *source*: The source string that the substring will be taken from.\r\n* *startingIndex*: The zero-based starting character position of the requested substring.\r\n* *length*: An optional parameter that can be used to specify the requested number of characters in the substring. \r\n\r\n**Notes**\r\n\r\n*startingIndex* can be a negative number, in which case the substring will be retrieved from the end of the source string.\r\n\r\n## Returns\r\n\r\nA substring from the given string. The substring starts at startingIndex (zero-based) character position and continues to the end of the string or length characters if specified.','```\r\nsubstring("123456", 1)        // 23456\r\nsubstring("123456", 2, 2)     // 34\r\nsubstring("ABCD", 0, 2)       // AB\r\nsubstring("123456", -2, 2)    // 56\r\n```',"https://docs.microsoft.com/en-us/azure/kusto/query/substringfunction","substringfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"sum","Calculates the sum of *Expr* across the group.","* Can be used only in context of aggregation inside [summarize](summarizeoperator.md)\r\n\r\n## Syntax\r\n\r\nsummarize `sum(`*Expr*`)`\r\n\r\n## Arguments\r\n\r\n* *Expr*: Expression that will be used for aggregation calculation. \r\n\r\n## Returns\r\n\r\nThe sum value of *Expr* across the group.","","https://docs.microsoft.com/en-us/azure/kusto/query/sum-aggfunction","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"sumif","Returns a sum of *Expr* for which *Predicate* evaluates to `true`.","* Can be used only in context of aggregation inside [summarize](summarizeoperator.md)\r\n\r\nYou can also use the [sum()](sum-aggfunction.md) function, which sums rows without predicate expression.\r\n\r\n## Syntax\r\n\r\nsummarize `sumif(`*Expr*`,`*Predicate*`)`\r\n\r\n## Arguments\r\n\r\n* *Expr*: expression for aggregation calculation. \r\n* *Predicate*: predicate that, if true, the *Expr*'s calculated value will be added to the sum. \r\n\r\n## Returns\r\n\r\nThe sum value of *Expr* for which *Predicate* evaluates to `true`.",'```\r\nlet T = datatable(name:string, day_of_birth:long)\r\n[\r\n   "John", 9,\r\n   "Paul", 18,\r\n   "George", 25,\r\n   "Ringo", 7\r\n];\r\nT\r\n| summarize sumif(day_of_birth, strlen(name) > 4)\r\n```\r\n\r\n|sumif_day_of_birth|\r\n|----|\r\n|32|',"https://docs.microsoft.com/en-us/azure/kusto/query/sumif-aggfunction","sumif-aggfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,"summarize","Produces a table that aggregates the content of the input table.","```\r\nSales | summarize NumTransactions=count(), Total=sum(UnitPrice * NumUnits) by Fruit, StartOfMonth=startofmonth(SellDateTime)\r\n```\r\n\r\nReturns a table with how many sell transactions and the total amount per fruit and sell month.\r\nThe output columns show the count of transactions, transaction worth, fruit, and the datetime of the beginning of the month\r\nin which the transaction was recorded.\r\n\r\n```\r\nT | summarize count() by price_range=bin(price, 10.0)\r\n```\r\n\r\nA table that shows how many items have prices in each interval  [0,10.0], [10.0,20.0], and so on. This example has a column for the count and one for the price range. All other input columns are ignored.\r\n\r\n## Syntax\r\n\r\n*T* `| summarize`\r\n      [[*Column* `=`] *Aggregation* [`,` ...]]\r\n    [`by`\r\n      [*Column* `=`] *GroupExpression* [`,` ...]]\r\n\r\n## Arguments\r\n\r\n* *Column:* Optional name for a result column. Defaults to a name derived from the expression.\r\n* *Aggregation:* A call to an [aggregation function](summarizeoperator.md#list-of-aggregation-functions) such as `count()` or `avg()`, with column names as arguments. See the [list of aggregation functions](summarizeoperator.md#list-of-aggregation-functions).\r\n* *GroupExpression:* A scalar expression that can reference the input data.\r\n  The output will have as many records as there are distinct values of all the\r\n  group expressions.\r\n\r\n> [!NOTE]\r\n> When the input table is empty, the output depends on whether *GroupExpression*\r\n> is used:\r\n>\r\n> * If *GroupExpression* is not provided, the output will be a single (empty) row.\r\n> * If *GroupExpression* is provided, the output will have no rows.\r\n\r\n## Returns\r\n\r\nThe input rows are arranged into groups having the same values of the `by` expressions. Then the specified aggregation functions are computed over each group, producing a row for each group. The result contains the `by` columns and also at least one column for each computed aggregate. (Some aggregation functions return multiple columns.)\r\n\r\nThe result has as many rows as there are distinct combinations of `by` values\r\n(which may be zero). If there are no group keys provided, the result has a single\r\nrecord.\r\n\r\nTo summarize over ranges of numeric values, use `bin()` to reduce ranges to discrete values.\r\n\r\n> [!NOTE]\r\n> * Although you can provide arbitrary expressions for both the aggregation and grouping expressions, it's more efficient to use simple column names, or apply `bin()` to a numeric column.\r\n> * The automatic hourly bins for datetime columns is no longer supported. Use explicit binning instead. For example, `summarize by bin(timestamp, 1h)`.\r\n\r\n## List of aggregation functions\r\n\r\n|Function|Description|\r\n|--------|-----------|\r\n|[any()](any-aggfunction.md)|Returns a random non-empty value for the group|\r\n|[anyif()](anyif-aggfunction.md)|Returns a random non-empty value for the group (with predicate)|\r\n|[arg_max()](arg-max-aggfunction.md)|Returns one or more expressions when the argument is maximized|\r\n|[arg_min()](arg-min-aggfunction.md)|Returns one or more expressions when the argument is minimized|\r\n|[avg()](avg-aggfunction.md)|Returns an average value across the group|\r\n|[avgif()](avgif-aggfunction.md)|Returns an average value across the group (with predicate)|\r\n|[binary_all_and](binary-all-and-aggfunction.md)|Returns aggregated value using the binary `AND` of the group|\r\n|[binary_all_or](binary-all-or-aggfunction.md)|Returns aggregated value using the binary `OR` of the group|\r\n|[binary_all_xor](binary-all-xor-aggfunction.md)|Returns aggregated value using the binary `XOR` of the group|\r\n|[buildschema()](buildschema-aggfunction.md)|Returns the minimal schema that admits all values of the `dynamic` input|\r\n|[count()](count-aggfunction.md)|Returns a count of the group|\r\n|[countif()](countif-aggfunction.md)|Returns a count with the predicate of the group|\r\n|[dcount()](dcount-aggfunction.md)|Returns an approximate distinct count of the group elements|\r\n|[dcountif()](dcountif-aggfunction.md)|Returns an approximate distinct count of the group elements (with predicate)|\r\n|[make_bag()](make-bag-aggfunction.md)|Returns a property bag of dynamic values within the group|\r\n|[make_bag_if()](make-bag-if-aggfunction.md)|Returns a property bag of dynamic values within the group (with predicate)|\r\n|[make_list()](makelist-aggfunction.md)|Returns a list of all the values within the group|\r\n|[make_list_if()](makelistif-aggfunction.md)|Returns a list of all the values within the group (with predicate)|\r\n|[make_list_with_nulls()](make-list-with-nulls-aggfunction.md)|Returns a list of all the values within the group, including null values|\r\n|[make_set()](makeset-aggfunction.md)|Returns a set of distinct values within the group|\r\n|[make_set_if()](makesetif-aggfunction.md)|Returns a set of distinct values within the group (with predicate)|\r\n|[max()](max-aggfunction.md)|Returns the maximum value across the group|\r\n|[maxif()](maxif-aggfunction.md)|Returns the maximum value across the group (with predicate)|\r\n|[min()](min-aggfunction.md)|Returns the minimum value across the group|\r\n|[minif()](minif-aggfunction.md)|Returns the minimum value across the group (with predicate)|\r\n|[percentiles()](percentiles-aggfunction.md)|Returns the percentile approximate of the group|\r\n|[percentiles_array()](percentiles-aggfunction.md)|Returns the percentiles approximates of the group|\r\n|[percentilesw()](percentiles-aggfunction.md)|Returns the weighted percentile approximate of the group|\r\n|[percentilesw_array()](percentiles-aggfunction.md)|Returns the weighted percentiles approximates of the group|\r\n|[stdev()](stdev-aggfunction.md)|Returns the standard deviation across the group|\r\n|[stdevif()](stdevif-aggfunction.md)|Returns the standard deviation across the group (with predicate)|\r\n|[sum()](sum-aggfunction.md)|Returns the sum of the elements within the group|\r\n|[sumif()](sumif-aggfunction.md)|Returns the sum of the elements within the group (with predicate)|\r\n|[variance()](variance-aggfunction.md)|Returns the variance across the group|\r\n|[varianceif()](varianceif-aggfunction.md)|Returns the variance across the group (with predicate)|\r\n\r\n## Aggregates default values\r\n\r\nThe following table summarizes the default values of aggregations:\r\n\r\nOperator       |Default value                         \r\n---------------|------------------------------------\r\n `count()`, `countif()`, `dcount()`, `dcountif()`         |   0                            \r\n `make_bag()`, `make_bag_if()`, `make_list()`, `make_list_if()`, `make_set()`, `make_set_if()` |    empty dynamic array              ([])          \r\n All others          |   null                           \r\n\r\nWhen using these aggregates over entities which includes null values, the null values will be ignored and won't participate in the calculation (see examples below).","![Summarize price by fruit and supplier](images/summarizeoperator/summarize-price-by-supplier.png)\r\n\r\n## Example\r\n\r\nDetermine what unique combinations of\r\n`ActivityType` and `CompletionStatus` there are in a table. There are no aggregation functions, just group-by keys. The output will just show the columns for those results:\r\n\r\n```\r\nActivities | summarize by ActivityType, completionStatus\r\n```\r\n\r\n|`ActivityType`|`completionStatus`\r\n|---|---\r\n|`dancing`|`started`\r\n|`singing`|`started`\r\n|`dancing`|`abandoned`\r\n|`singing`|`completed`\r\n\r\n## Example\r\n\r\nFinds the minimum and maximum timestamp of all records in the Activities table. There is no group-by clause, so there is just one row in the output:\r\n\r\n```\r\nActivities | summarize Min = min(Timestamp), Max = max(Timestamp)\r\n```\r\n\r\n|`Min`|`Max`\r\n|---|---\r\n|`1975-06-09 09:21:45` | `2015-12-24 23:45:00`\r\n\r\n## Example\r\n\r\nCreate a row for each continent, showing a count of the cities in which activities occur. Because there are few values for \"continent\", no grouping function is needed in the 'by' clause:\r\n\r\n```\r\nActivities | summarize cities=dcount(city) by continent\r\n```\r\n\r\n|`cities`|`continent`\r\n|---:|---\r\n|`4290`|`Asia`|\r\n|`3267`|`Europe`|\r\n|`2673`|`North America`|\r\n\r\n## Example\r\n\r\nThe following example calculates a histogram for each activity\r\ntype. Because `Duration` has many values, use `bin` to group its values into 10-minute intervals:\r\n\r\n```\r\nActivities | summarize count() by ActivityType, length=bin(Duration, 10m)\r\n```\r\n\r\n|`count_`|`ActivityType`|`length`\r\n|---:|---|---\r\n|`354`| `dancing` | `0:00:00.000`\r\n|`23`|`singing` | `0:00:00.000`\r\n|`2717`|`dancing`|`0:10:00.000`\r\n|`341`|`singing`|`0:10:00.000`\r\n|`725`|`dancing`|`0:20:00.000`\r\n|`2876`|`singing`|`0:20:00.000`\r\n|...\r\n\r\n**Example for the aggregates default values**\r\n\r\nWhen the input of `summarize` operator has at least one empty group-by key, it's result is empty, too.\r\n\r\nWhen the input of `summarize` operator doesn't have an empty group-by key, the result is the default values of the aggregates used in the `summarize`:\r\n\r\n```\r\ndatatable(x:long)[]\r\n| summarize any(x), arg_max(x, x), arg_min(x, x), avg(x), buildschema(todynamic(tostring(x))), max(x), min(x), percentile(x, 55), hll(x) ,stdev(x), sum(x), sumif(x, x > 0), tdigest(x), variance(x)\r\n```\r\n\r\n|any_x|max_x|max_x_x|min_x|min_x_x|avg_x|schema_x|max_x1|min_x1|percentile_x_55|hll_x|stdev_x|sum_x|sumif_x|tdigest_x|variance_x|\r\n|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|\r\n|||||||||||||||||\r\n\r\n```\r\ndatatable(x:long)[]\r\n| summarize  count(x), countif(x > 0) , dcount(x), dcountif(x, x > 0)\r\n```\r\n\r\n|count_x|countif_|dcount_x|dcountif_x|\r\n|---|---|---|---|\r\n|0|0|0|0|\r\n\r\n```\r\ndatatable(x:long)[]\r\n| summarize  make_set(x), make_list(x)\r\n```\r\n\r\n|set_x|list_x|\r\n|---|---|\r\n|[]|[]|\r\n\r\nThe aggregate avg sums all the non-nulls and counts only those which participated in the calculation (will not take nulls into account).\r\n\r\n```\r\nrange x from 1 to 2 step 1\r\n| extend y = iff(x == 1, real(null), real(5))\r\n| summarize sum(y), avg(y)\r\n```\r\n\r\n|sum_y|avg_y|\r\n|---|---|\r\n|5|5|\r\n\r\nThe regular count will count nulls: \r\n\r\n```\r\nrange x from 1 to 2 step 1\r\n| extend y = iff(x == 1, real(null), real(5))\r\n| summarize count(y)\r\n```\r\n\r\n|count_y|\r\n|---|\r\n|2|\r\n\r\n```\r\nrange x from 1 to 2 step 1\r\n| extend y = iff(x == 1, real(null), real(5))\r\n| summarize make_set(y), make_set(y)\r\n```\r\n\r\n|set_y|set_y1|\r\n|---|---|\r\n|[5.0]|[5.0]|","https://docs.microsoft.com/en-us/azure/kusto/query/summarizeoperator","summarizeoperator.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"table","The table() function references a table by providing its name as an expression\r\nof type `string`.",'```\r\ntable(\'StormEvent\')\r\n```\r\n\r\n## Syntax\r\n\r\n`table` `(` *TableName* [`,` *DataScope*] `)`\r\n\r\n## Arguments\r\n\r\n* *TableName*: An expression of type `string` that provides the name of the table\r\n  being referenced. The value of this expression must be constant at the point\r\n  of call to the function (i.e. it cannot vary by the data context).\r\n* *DataScope*: An optional parameter of type `string` that can be used to restrict\r\n  the table reference to data according to how this data falls under the table\'s\r\n  effective [cache policy](../management/cachepolicy.md). If used, the actual argument\r\n  must be a constant `string` expression having one of the following possible values:\r\n    - `"hotcache"`: Only data that is categorized as hot cache will be referenced.\r\n    - `"all"`: All the data in the table will be referenced.\r\n    - `"default"`: This is the same as `"all"`, except if the cluster has been\r\n      set to use `"hotcache"` as the default by the cluster admin.',"### Use table() to access table of the current database\r\n\r\n```\r\ntable('StormEvent') | count\r\n```\r\n\r\n|Count|\r\n|---|\r\n|59066|\r\n\r\n### Use table() inside let statements\r\n\r\nThe same query as above can be rewritten to use inline function (let statement) that \r\nreceives a parameter `tableName` - which is passed into the table() function.\r\n\r\n```\r\nlet foo = (tableName:string)\r\n{\r\n    table(tableName) | count\r\n};\r\nfoo('help')\r\n```\r\n\r\n|Count|\r\n|---|\r\n|59066|\r\n\r\n### Use table() inside Functions\r\n\r\nThe same query as above can be rewritten to be used in a function that \r\nreceives a parameter `tableName` - which is passed into the table() function.\r\n\r\n```\r\n.create function foo(tableName:string)\r\n{\r\n    table(tableName) | count\r\n};\r\n```\r\n\r\n**Note:** such functions can be used only locally and not in the cross-cluster query.\r\n\r\n### Use table() with non-constant parameter\r\n\r\nA parameter, which is not scalar constant string can't be passed as parameter to `table()` function.\r\n\r\nBelow, given an example of workaround for such case.\r\n\r\n```\r\nlet T1 = print x=1;\r\nlet T2 = print x=2;\r\nlet _choose = (_selector:string)\r\n{\r\n    union\r\n    (T1 | where _selector == 'T1'),\r\n    (T2 | where _selector == 'T2')\r\n};\r\n_choose('T2')\r\n\r\n```\r\n\r\n|x|\r\n|---|\r\n|2|","https://docs.microsoft.com/en-us/azure/kusto/query/tablefunction","tablefunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,"take","Return up to the specified number of rows.","```\r\nT | take 5\r\n```\r\n\r\nThere is no guarantee which records are returned, unless\r\nthe source data is sorted.\r\n\r\n> [!NOTE]\r\n> `take` is a simple, quick, and efficient way to view a small sample of records when browsing data interactively, but be aware that it doesn't guarantee any consistency in its results when executing multiple times, even if the data set hasn't changed.\r\n> Even if the number of rows returned by the query isn't explicitly limited by the query (no `take` operator is used), Kusto limits that number by default. For more details, see [Kusto query limits](../concepts/querylimits.md).\r\n\r\n## Syntax\r\n\r\n`take` *NumberOfRows*\r\n`limit` *NumberOfRows*\r\n\r\n(`take` and `limit` are synonyms.)\r\n\r\n## Does Kusto support paging of query results?\r\n\r\nKusto doesn't provide a built-in paging mechanism.\r\n\r\nKusto is a complex service that continuously optimizes the data it stores to provide excellent query performance over huge data sets. While paging is a useful mechanism for stateless clients with limited\r\nresources, it shifts the burden to the backend service which\r\nhas to track client state information. Subsequently, the performance\r\nand scalability of the backend service is severely limited.\r\n\r\nFor paging support implement one of the following features:\r\n\r\n* Exporting the result of a query to an external storage and paging through the\r\n   generated data.\r\n* Writing a middle-tier application that provides a stateful paging API by caching\r\n   the results of a Kusto query.\r\n\r\n## See also\r\n\r\n* [sort operator](sortoperator.md)\r\n* [top operator](topoperator.md)\r\n* [top-nested operator](topnestedoperator.md)","","https://docs.microsoft.com/en-us/azure/kusto/query/takeoperator","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"tan","Returns the tangent function.","## Syntax\r\n\r\n`tan(`*x*`)`\r\n\r\n## Arguments\r\n\r\n* *x*: A real number.\r\n\r\n## Returns\r\n\r\n* The result of `tan(x)`","","https://docs.microsoft.com/en-us/azure/kusto/query/tanfunction","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"tdigest","Calculates the intermediate results of [`percentiles()`](percentiles-aggfunction.md) across the group.","> [!NOTE]\r\n> Can only be used in context of aggregation, inside [summarize](summarizeoperator.md).\r\n\r\nFor more information, see the [underlying algorithm (T-Digest) and the estimated error](percentiles-aggfunction.md#estimation-error-in-percentiles).\r\n\r\n## Syntax\r\n\r\n`summarize` `tdigest`(*`Expr`* [`,` *`WeightExpr`*])\r\n\r\n## Arguments\r\n\r\n* *Expr*: Expression that is used for aggregation calculation.\r\n* *WeightExpr*: Expression that is used as the weight of values for the aggregation calculation.\r\n\t\r\n\r\n## Returns\r\n\r\nThe Intermediate results of weighted percentiles of `*Expr*` across the group.\r\n\r\n**Tips**\r\n\r\n* Use the aggregation function [tdigest_merge()](tdigest-merge-aggfunction.md) to merge the output of `tdigest` again across another group.\r\n* Use the function [percentile_tdigest()](percentile-tdigestfunction.md) to calculate the percentile/percentilew of the `tdigest` results.","```\r\nStormEvents\r\n| summarize tdigest(DamageProperty) by State\r\n```\r\n\r\n|State|tdigest_DamageProperty|\r\n|---|---|\r\n|ATLANTIC SOUTH|[[5],[0],[193]]|\r\n|FLORIDA|[[5],[250,10,600000,5000,375000,15000000,20000,6000000,0,110000,150000,500,12000,30000,15000,46000000,7000000,6200000,200000,40000,8000,52000000,62000000,1200000,130000,1500000,4000000,7000,250000,875000,3000,100000,10600000,300000,1000000,25000,75000,2000,60000,10000,170000,350000,50000,1000,16000,80000,2500,400000],[9,1,1,22,1,1,9,1,842,1,3,7,2,4,7,1,1,1,2,5,3,3,1,1,1,1,2,2,1,1,9,7,1,1,2,5,2,9,2,27,1,1,7,27,1,1,1,1]]|\r\n|GEORGIA|[[5],[468,209,300000,3000,250000,775000,14000,500000,0,75000,4500000,500,6928,22767,9714,800000,700000,600000,150000,25000,5000,1600000,1250000,2700000,1500000,2250000,400000,4000,175000,325000,2500,73750,750000,1400000,350000,28000000,39000,1500,35000,6455,140000,225000,30000,1000,110000000,21700000,2000,275000,200000,100000,1000000,2600000,370000,2100000,355000,117500,50000,20100,10000],[11,11,4,53,21,1,6,10,1317,8,1,56,8,6,7,1,1,1,14,29,69,1,2,1,1,1,3,14,5,1,3,4,4,1,4,1,5,14,3,5,2,1,9,96,1,1,72,1,10,17,3,1,1,1,1,2,21,4,31]]|\r\n|MISSISSIPPI|[[5],[267,55,90000,3000,75000,300000,11167,160000,0,32000,40000,1000,7000,13000,8000,400000,200000,180000,50000,15000,5000,700000,500000,120000,650000,1000000,150000,4000,60000,100000,2500,30000,250000,600000,110000,12000,20000,1500,17000,6000,45000,70000,15250,1219,10000,25000,2000,80000,65000,35000,450000,1200000,130000,750000],[3,2,6,21,1,4,6,1,741,4,13,44,8,2,8,1,5,1,23,21,32,1,3,1,1,1,5,18,17,4,1,14,2,4,4,16,13,10,4,9,2,10,4,8,31,17,51,13,1,1,1,2,1,1]]|\r\n|AMERICAN SAMOA|[[5],[0,250000],[15,1]]|","https://docs.microsoft.com/en-us/azure/kusto/query/tdigest-aggfunction","tdigest-aggfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"tdigest_merge","Merges `tdigest` results (scalar version of the aggregate version [`tdigest_merge()`](tdigest-merge-aggfunction.md)).","Read more about the underlying algorithm (T-Digest) and the estimated error [here](percentiles-aggfunction.md#estimation-error-in-percentiles).\r\n\r\n## Syntax\r\n\r\n`merge_tdigests(` *Expr1*`,` *Expr2*`, ...)`\r\n\r\n`tdigest_merge(` *Expr1*`,` *Expr2*`, ...)` - An alias.\r\n\r\n## Arguments\r\n\r\n* Columns that have the `tdigest` values to be merged.\r\n\r\n## Returns\r\n\r\nThe result for merging the columns `*Expr1*`, `*Expr2*`, ... `*ExprN*` to one `tdigest`.","```\r\nrange x from 1 to 10 step 1 \r\n| extend y = x + 10\r\n| summarize tdigestX = tdigest(x), tdigestY = tdigest(y)\r\n| project merged = tdigest_merge(tdigestX, tdigestY)\r\n| project percentile_tdigest(merged, 100, typeof(long))\r\n```\r\n\r\n|percentile_tdigest_merged|\r\n|---|\r\n|20|","https://docs.microsoft.com/en-us/azure/kusto/query/tdigest-mergefunction","tdigest-mergefunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"to_utf8","Returns a dynamic array of the unicode characters of an input string (the inverse operation of make_string).","## Syntax\r\n\r\n`to_utf8(`*source*`)`\r\n\r\n## Arguments\r\n\r\n* *source*: The source string to convert.\r\n\r\n## Returns\r\n\r\nReturns a dynamic array of the unicode characters that make up the string provided to this function.\r\nSee [`make_string()`](makestringfunction.md))",'```\r\nprint arr = to_utf8("\u24a6\u24b0\u24ae\u24af\u24aa")\r\n```\r\n\r\n|arr|\r\n|---|\r\n|[9382, 9392, 9390, 9391, 9386]|\r\n\r\n```\r\nprint arr = to_utf8("\u05e7\u05d5\u05e1\u05d8\u05d5 - Kusto")\r\n```\r\n\r\n|arr|\r\n|---|\r\n|[1511, 1493, 1505, 1496, 1493, 32, 45, 32, 75, 117, 115, 116, 111]|\r\n\r\n```\r\nprint str = make_string(to_utf8("Kusto"))\r\n```\r\n\r\n|str|\r\n|---|\r\n|Kusto|',"https://docs.microsoft.com/en-us/azure/kusto/query/toutf8function","toutf8function.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"tobool","Converts input to boolean (signed 8-bit) representation.",'```\r\ntobool("true") == true\r\ntobool("false") == false\r\ntobool(1) == true\r\ntobool(123) == true\r\n```\r\n\r\n## Syntax\r\n\r\n`tobool(`*Expr*`)`\r\n`toboolean(`*Expr*`)` (alias)\r\n\r\n## Arguments\r\n\r\n* *Expr*: Expression that will be converted to boolean. \r\n\r\n## Returns\r\n\r\nIf conversion is successful, result will be a boolean.\r\nIf conversion isn\'t successful, result will be `null`.',"","https://docs.microsoft.com/en-us/azure/kusto/query/toboolfunction","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"todatetime","Converts input to [datetime](./scalar-data-types/datetime.md) scalar.",'```\r\ntodatetime("2015-12-24") == datetime(2015-12-24)\r\n```\r\n\r\n## Syntax\r\n\r\n`todatetime(`*Expr*`)`\r\n\r\n## Arguments\r\n\r\n* *Expr*: Expression that will be converted to [datetime](./scalar-data-types/datetime.md).\r\n\r\n## Returns\r\n\r\nIf the conversion is successful, the result will be a [datetime](./scalar-data-types/datetime.md) value.\r\nElse, the result will be null.\r\n\r\n> [!NOTE]\r\n> Prefer using [datetime()](./scalar-data-types/datetime.md) when possible.',"","https://docs.microsoft.com/en-us/azure/kusto/query/todatetimefunction","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"todecimal","Converts input to decimal number representation.",'```\r\ntodecimal("123.45678") == decimal(123.45678)\r\n```\r\n\r\n## Syntax\r\n\r\n`todecimal(`*Expr*`)`\r\n\r\n## Arguments\r\n\r\n* *Expr*: Expression that will be converted to decimal. \r\n\r\n## Returns\r\n\r\nIf conversion is successful, result will be a decimal number.\r\nIf conversion is not successful, result will be `null`.\r\n\r\n*Note*: Prefer using [real()](./scalar-data-types/real.md) when possible.',"","https://docs.microsoft.com/en-us/azure/kusto/query/todecimalfunction","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"todouble","Converts the input to a value of type `real`. (`todouble()` and `toreal()` are synonyms.)",'```\r\ntoreal("123.4") == 123.4\r\n```\r\n\r\n> [!NOTE]\r\n> Prefer using [double() or real()](./scalar-data-types/real.md) when possible.\r\n\r\n## Syntax\r\n\r\n`toreal(`*Expr*`)`\r\n`todouble(`*Expr*`)`\r\n\r\n## Arguments\r\n\r\n* *Expr*: An expression whose value will be converted to a value of type `real`.\r\n\r\n## Returns\r\n\r\nIf conversion is successful, the result is a value of type `real`.\r\nIf conversion is not successful, the result is the value `real(null)`.',"","https://docs.microsoft.com/en-us/azure/kusto/query/todoublefunction","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"todynamic","Interprets a `string` as a [JSON value](https://json.org/) and returns the value as [`dynamic`](./scalar-data-types/dynamic.md).","It is superior to using [extractjson() function](./extractjsonfunction.md)\r\nwhen you need to extract more than one element of a JSON compound object.\r\n\r\nAliases to [parse_json()](./parsejsonfunction.md) function.\r\n\r\n> [!NOTE]\r\n> Prefer using [dynamic()](./scalar-data-types/dynamic.md) when possible.\r\n\r\n## Syntax\r\n\r\n`todynamic(`*json*`)`\r\n`toobject(`*json*`)`\r\n\r\n## Arguments\r\n\r\n* *json*: A JSON document.\r\n\r\n## Returns\r\n\r\nAn object of type `dynamic` specified by *json*.","","https://docs.microsoft.com/en-us/azure/kusto/query/todynamicfunction","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"toguid","Converts input to [`guid`](./scalar-data-types/guid.md) representation.",'```\r\ntoguid("70fc66f7-8279-44fc-9092-d364d70fce44") == guid("70fc66f7-8279-44fc-9092-d364d70fce44")\r\n```\r\n\r\n> [!NOTE]\r\n> Prefer using [guid()](./scalar-data-types/guid.md) when possible.\r\n\r\n## Syntax\r\n\r\n`toguid(`*Expr*`)`\r\n\r\n## Arguments\r\n\r\n* *Expr*: Expression that will be converted to [`guid`](./scalar-data-types/guid.md) scalar. \r\n\r\n## Returns\r\n\r\nIf conversion is successful, result will be a [`guid`](./scalar-data-types/guid.md) scalar.\r\nIf conversion is not successful, result will be `null`.',"","https://docs.microsoft.com/en-us/azure/kusto/query/toguidfunction","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"tohex","Converts input to a hexadecimal string.","```\r\ntohex(256) == '100'\r\ntohex(-256) == 'ffffffffffffff00' // 64-bit 2's complement of -256\r\ntohex(toint(-256), 8) == 'ffffff00' // 32-bit 2's complement of -256\r\ntohex(256, 8) == '00000100'\r\ntohex(256, 2) == '100' // Exceeds min length of 2, so min length is ignored.\r\n```\r\n\r\n## Syntax\r\n\r\n`tohex(`*Expr*`, [`,` *MinLength*]`)`\r\n\r\n## Arguments\r\n\r\n* *Expr*: int or long value that will be converted to a hex string.  Other types are not supported.\r\n* *MinLength*: numeric value representing the number of leading characters to include in the output.  Values between 1 and 16 are supported, values greater than 16 will be truncated to 16.  If the string is longer than minLength without leading characters, then minLength is effectively ignored.  Negative numbers may only be represented at minimum by their underlying data size, so for an int (32-bit) the minLength will be at minimum 8, for a long (64-bit) it will be at minimum 16.\r\n\r\n## Returns\r\n\r\nIf conversion is successful, result will be a string value.\r\nIf conversion is not successful, result will be null.","","https://docs.microsoft.com/en-us/azure/kusto/query/tohexfunction","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"toint","Converts input to integer (signed 32-bit) number representation.",'```\r\ntoint("123") == int(123)\r\n```\r\n\r\n## Syntax\r\n\r\n`toint(`*Expr*`)`\r\n\r\n## Arguments\r\n\r\n* *Expr*: Expression that will be converted to integer. \r\n\r\n## Returns\r\n\r\nIf the conversion is successful, the result will be an integer.\r\nIf the conversion isn\'t successful, the result will be `null`.\r\n\r\n*Note*: Prefer using [int()](./scalar-data-types/int.md) when possible.',"","https://docs.microsoft.com/en-us/azure/kusto/query/tointfunction","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"tolong","Converts input to long (signed 64-bit) number representation.",'```\r\ntolong("123") == 123\r\n```\r\n\r\n> [!NOTE]\r\n> Prefer using [long()](./scalar-data-types/long.md) when possible.\r\n\r\n## Syntax\r\n\r\n`tolong(`*Expr*`)`\r\n\r\n## Arguments\r\n\r\n* *Expr*: Expression that will be converted to long. \r\n\r\n## Returns\r\n\r\nIf conversion is successful, result will be a long number.\r\nIf conversion is not successful, result will be `null`.',"","https://docs.microsoft.com/en-us/azure/kusto/query/tolongfunction","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"tolower","Converts input string to lower case.",'```\r\ntolower("Hello") == "hello"\r\n```',"","https://docs.microsoft.com/en-us/azure/kusto/query/tolowerfunction","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,"top","Returns the first *N* records sorted by the specified columns.",'```\r\nT | top 5 by Name desc nulls last\r\n```\r\n\r\n## Syntax\r\n\r\n*T* `| top` *NumberOfRows* `by` *Expression* [`asc` | `desc`] [`nulls first` | `nulls last`]\r\n\r\n## Arguments\r\n\r\n* *NumberOfRows*: The number of rows of *T* to return. You can specify any numeric expression.\r\n* *Expression*: A scalar expression by which to sort. The type of the values must be numeric, date, time or string.\r\n* `asc` or `desc` (the default) may appear to control whether selection is actually from the "bottom" or "top" of the range.\r\n* `nulls first` (the default for `asc` order) or `nulls last` (the default for `desc` order) may appear to control whether null values will be at the beginning or the end of the range.\r\n\r\n> [!TIP]\r\n> `top 5 by name` is equivalent to the expression `sort by name | take 5` both from semantic and performance perspectives.\r\n\r\n## See also \r\n\r\n* Use [top-nested](topnestedoperator.md) operator to produce hierarchical (nested) top results.',"","https://docs.microsoft.com/en-us/azure/kusto/query/topoperator","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,"top-hitters","Returns an approximation of the first *N* results (assuming skewed distribution of the input).","```\r\nT | top-hitters 25 of Page by Views \r\n```\r\n\r\n> [!NOTE]\r\n> `top-hitters` is an approximation algorithm and should be used when running with large data. \r\n> The approximation of the the top-hitters is based on the [Count-Min-Sketch](https://en.wikipedia.org/wiki/Count%E2%80%93min_sketch) algorithm.  \r\n\r\n## Syntax\r\n\r\n*T* `| top-hitters` *NumberOfRows* `of` *sort_key* `[` `by` *expression* `]`\r\n\r\n## Arguments\r\n\r\n* *NumberOfRows*: The number of rows of *T* to return. You can specify any numeric expression.\r\n* *sort_key*: The name of the column by which to sort the rows.\r\n* *expression*: (optional) An expression which will be used for the top-hitters estimation. \r\n    * *expression*: top-hitters will return *NumberOfRows* rows which have an approximated maximum of sum(*expression*). Expression can be a column, or any other expression that evaluates to a number. \r\n    *  If *expression* is not mentioned, top-hitters algorithm will count the occurrences of the *sort-key*.","### Get most frequent items \r\n\r\nThe next example shows how to find top-5 languages with most pages in Wikipedia (accessed after during April 2016). \r\n\r\n```\r\nPageViews\r\n| where Timestamp > datetime(2016-04-01) and Timestamp < datetime(2016-05-01) \r\n| top-hitters 5 of Language \r\n```\r\n\r\n|Language|approximate_count_Language|\r\n|---|---|\r\n|en|1539954127|\r\n|zh|339827659|\r\n|de|262197491|\r\n|ru|227003107|\r\n|fr|207943448|\r\n\r\n### Get top hitters based on column value\r\n\r\nThe next example shows how to find most viewed English pages of Wikipedia of the year 2016. \r\nThe query uses 'Views' (integer number) to calculate page popularity (number of views). \r\n\r\n```\r\nPageViews\r\n| where Timestamp > datetime(2016-01-01)\r\n| where Language == \"en\"\r\n| where Page !has 'Special'\r\n| top-hitters 10 of Page by Views\r\n```\r\n\r\n|Page|approximate_sum_Views|\r\n|---|---|\r\n|Main_Page|1325856754|\r\n|Web_scraping|43979153|\r\n|Java_(programming_language)|16489491|\r\n|United_States|13928841|\r\n|Wikipedia|13584915|\r\n|Donald_Trump|12376448|\r\n|YouTube|11917252|\r\n|The_Revenant_(2015_film)|10714263|\r\n|Star_Wars:_The_Force_Awakens|9770653|\r\n|Portal:Current_events|9578000|","https://docs.microsoft.com/en-us/azure/kusto/query/tophittersoperator","tophittersoperator.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,"top-nested","Produces a hierarchical aggregation and top values selection, where each level is a refinement of the previous one.",'```\r\nT | top-nested 3 of Location with others="Others" by sum(MachinesNumber), top-nested 4 of bin(Timestamp,5m) by sum(MachinesNumber)\r\n```\r\n\r\nThe `top-nested` operator accepts tabular data as input, and one or more aggregation clauses.\r\nThe first aggregation clause (left-most) subdivides the input records into partitions, according\r\nto the unique values of some expression over those records. The clause then keeps a certain number of records\r\nthat maximize or minimize this expression over the records. The next aggregation clause then\r\napplies a similar function, in a nested fashion. Each following clause is applied to the partition produced\r\nby the previous clause. This process continues for all aggregation clauses.\r\n\r\nFor example, the `top-nested` operator can be used to answer the following question: "For a table containing sales\r\nfigures, such as country, salesperson, and amount sold: what are the top five countries by sales? What are the top three salespeople in each of these countries?"\r\n\r\n## Syntax\r\n\r\n*T* `|` `top-nested` *TopNestedClause2* [`,` *TopNestedClause2*...]\r\n\r\nWhere *TopNestedClause* has the following syntax:\r\n\r\n[*N*] `of` [*`ExprName`* `=`] *`Expr`* [`with` `others` `=` *`ConstExpr`*] `by` [*`AggName`* `=`] *`Aggregation`* [`asc` | `desc`]\r\n\r\n## Arguments\r\n\r\nFor each *TopNestedClause*:\r\n\r\n* *`N`*: A literal of type `long` indicating how many top values to return\r\n  for this hierarchy level.\r\n  If omitted, all distinct values will be returned.\r\n* *`ExprName`*: If specified, sets the name of the output column corresponding\r\n  to the values of *`Expr`*.\r\n* *`Expr`*: An expression over the input record indicating which value to return\r\n  for this hierarchy level.\r\n  Typically it\'s a column reference for the tabular input (*T*), or some\r\n  calculation (such as `bin()`) over such a column.\r\n* *`ConstExpr`*: If specified, for each hierarchy level, 1 record will be added\r\n  with the value that is the aggregation over all records that didn\'t\r\n  "make it to the top".\r\n* *`AggName`*: If specified, this identifier sets the column name\r\n  in the output for the value of *Aggregation*.\r\n* *`Aggregation`*: A numeric expression indicating the aggregation to apply\r\n  to all records sharing the same value of *`Expr`*. The value of this aggregation\r\n  determines which of the resulting records are "top".\r\n  \r\n  The following aggregation functions are supported:\r\n   * [sum()](sum-aggfunction.md),\r\n   * [count()](count-aggfunction.md),\r\n   * [max()](max-aggfunction.md),\r\n   * [min()](min-aggfunction.md),\r\n   * [dcount()](dcountif-aggfunction.md),\r\n   * [avg()](avg-aggfunction.md),\r\n   * [percentile()](percentiles-aggfunction.md), and\r\n   * [percentilew()](percentiles-aggfunction.md). Any algebraic combination of the aggregations is also supported.\r\n* `asc` or `desc` (the default) may appear to control whether selection is actually from the "bottom" or "top" of the range of aggregated values.\r\n\r\n## Returns\r\n\r\nThis operator returns a table that has two columns for each aggregation clause:\r\n\r\n* One column holds the distinct values of the clause\'s *`Expr`* calculation (having the\r\n  column name *ExprName* if specified)\r\n* One column holds the result of the *Aggregation*\r\n  calculation (having the column name *AggregationName* if specified)\r\n\r\n## Notes\r\n\r\nInput columns that aren\'t specified as *`Expr`* values aren\'t outputted.\r\nTo get all values at a certain level, add an aggregation count that:\r\n\r\n* Omits the value of *N*\r\n* Uses the column name as the value of *`Expr`*\r\n* Uses `Ignore=max(1)` as the aggregation, and then ignore (or project-away)\r\n   the column `Ignore`.\r\n\r\nThe number of records may grow exponentially with the number of aggregation clauses\r\n((N1+1) \\* (N2+1) \\* ...). Record growth is even faster if no *N* limit is specified. Take into account that this operator may consume a considerable amount of resources.\r\n\r\nIf the distribution of the aggregation is considerably non-uniform,\r\nlimit the number of distinct values to return (by using *N*) and use the\r\n`with others=` *ConstExpr* option to get an indication for the "weight" of all other\r\ncases.',"```\r\nStormEvents\r\n| top-nested 2 of State by sum(BeginLat),\r\n  top-nested 3 of Source by sum(BeginLat),\r\n  top-nested 1 of EndLocation by sum(BeginLat)\r\n```\r\n\r\n|State|aggregated_State|Source|aggregated_Source|EndLocation|aggregated_EndLocation|\r\n|---|---|---|---|---|---|\r\n|KANSAS|87771.2355000001|Law Enforcement|18744.823|FT SCOTT|264.858|\r\n|KANSAS|87771.2355000001|Public|22855.6206|BUCKLIN|488.2457|\r\n|KANSAS|87771.2355000001|Trained Spotter|21279.7083|SHARON SPGS|388.7404|\r\n|TEXAS|123400.5101|Public|13650.9079|AMARILLO|246.2598|\r\n|TEXAS|123400.5101|Law Enforcement|37228.5966|PERRYTON|289.3178|\r\n|TEXAS|123400.5101|Trained Spotter|13997.7124|CLAUDE|421.44|\r\n\r\nUse the option 'with others':\r\n\r\n```\r\nStormEvents\r\n| top-nested 2 of State with others = \"All Other States\" by sum(BeginLat),\r\n  top-nested 3 of Source by sum(BeginLat),\r\n  top-nested 1 of EndLocation with others = \"All Other End Locations\" by  sum(BeginLat)\r\n\r\n\r\n```\r\n\r\n|State|aggregated_State|Source|aggregated_Source|EndLocation|aggregated_EndLocation|\r\n|---|---|---|---|---|---|\r\n|KANSAS|87771.2355000001|Law Enforcement|18744.823|FT SCOTT|264.858|\r\n|KANSAS|87771.2355000001|Public|22855.6206|BUCKLIN|488.2457|\r\n|KANSAS|87771.2355000001|Trained Spotter|21279.7083|SHARON SPGS|388.7404|\r\n|TEXAS|123400.5101|Public|13650.9079|AMARILLO|246.2598|\r\n|TEXAS|123400.5101|Law Enforcement|37228.5966|PERRYTON|289.3178|\r\n|TEXAS|123400.5101|Trained Spotter|13997.7124|CLAUDE|421.44|\r\n|KANSAS|87771.2355000001|Law Enforcement|18744.823|All Other End Locations|18479.965|\r\n|KANSAS|87771.2355000001|Public|22855.6206|All Other End Locations|22367.3749|\r\n|KANSAS|87771.2355000001|Trained Spotter|21279.7083|All Other End Locations|20890.9679|\r\n|TEXAS|123400.5101|Public|13650.9079|All Other End Locations|13404.6481|\r\n|TEXAS|123400.5101|Law Enforcement|37228.5966|All Other End Locations|36939.2788|\r\n|TEXAS|123400.5101|Trained Spotter|13997.7124|All Other End Locations|13576.2724|\r\n|KANSAS|87771.2355000001|||All Other End Locations|24891.0836|\r\n|TEXAS|123400.5101|||All Other End Locations|58523.2932000001|\r\n|All Other States|1149279.5923|||All Other End Locations|1149279.5923|\r\n\r\nThe following query shows the same results for the first level used in the example above.\r\n\r\n```\r\n StormEvents\r\n | where State !in ('TEXAS', 'KANSAS')\r\n | summarize sum(BeginLat)\r\n```\r\n\r\n|sum_BeginLat|\r\n|---|\r\n|1149279.5923|\r\n\r\nRequest another column (EventType) to the top-nested result.\r\n\r\n```\r\nStormEvents\r\n| top-nested 2 of State by sum(BeginLat),    top-nested 2 of Source by sum(BeginLat),    top-nested 1 of EndLocation by sum(BeginLat), top-nested of EventType  by tmp = max(1)\r\n| project-away tmp\r\n```\r\n\r\n|State|aggregated_State|Source|aggregated_Source|EndLocation|aggregated_EndLocation|EventType|\r\n|---|---|---|---|---|---|---|\r\n|KANSAS|87771.2355000001|Trained Spotter|21279.7083|SHARON SPGS|388.7404|Thunderstorm Wind|\r\n|KANSAS|87771.2355000001|Trained Spotter|21279.7083|SHARON SPGS|388.7404|Hail|\r\n|KANSAS|87771.2355000001|Trained Spotter|21279.7083|SHARON SPGS|388.7404|Tornado|\r\n|KANSAS|87771.2355000001|Public|22855.6206|BUCKLIN|488.2457|Hail|\r\n|KANSAS|87771.2355000001|Public|22855.6206|BUCKLIN|488.2457|Thunderstorm Wind|\r\n|KANSAS|87771.2355000001|Public|22855.6206|BUCKLIN|488.2457|Flood|\r\n|TEXAS|123400.5101|Trained Spotter|13997.7124|CLAUDE|421.44|Hail|\r\n|TEXAS|123400.5101|Law Enforcement|37228.5966|PERRYTON|289.3178|Hail|\r\n|TEXAS|123400.5101|Law Enforcement|37228.5966|PERRYTON|289.3178|Flood|\r\n|TEXAS|123400.5101|Law Enforcement|37228.5966|PERRYTON|289.3178|Flash Flood|\r\n\r\nGive an index sort order for each value in this level (per group) to sort the result by the last nested level (in this example by EndLocation):\r\n\r\n```\r\nStormEvents\r\n| top-nested 2 of State  by sum(BeginLat),    top-nested 2 of Source by sum(BeginLat),    top-nested 4 of EndLocation by  sum(BeginLat)\r\n| order by State , Source, aggregated_EndLocation\r\n| summarize EndLocations = make_list(EndLocation, 10000) , endLocationSums = make_list(aggregated_EndLocation, 10000) by State, Source\r\n| extend indicies = range(0, array_length(EndLocations) - 1, 1)\r\n| mv-expand EndLocations, endLocationSums, indicies\r\n```\r\n\r\n|State|Source|EndLocations|endLocationSums|indices|\r\n|---|---|---|---|---|\r\n|TEXAS|Trained Spotter|CLAUDE|421.44|0|\r\n|TEXAS|Trained Spotter|AMARILLO|316.8892|1|\r\n|TEXAS|Trained Spotter|DALHART|252.6186|2|\r\n|TEXAS|Trained Spotter|PERRYTON|216.7826|3|\r\n|TEXAS|Law Enforcement|PERRYTON|289.3178|0|\r\n|TEXAS|Law Enforcement|LEAKEY|267.9825|1|\r\n|TEXAS|Law Enforcement|BRACKETTVILLE|264.3483|2|\r\n|TEXAS|Law Enforcement|GILMER|261.9068|3|\r\n|KANSAS|Trained Spotter|SHARON SPGS|388.7404|0|\r\n|KANSAS|Trained Spotter|ATWOOD|358.6136|1|\r\n|KANSAS|Trained Spotter|LENORA|317.0718|2|\r\n|KANSAS|Trained Spotter|SCOTT CITY|307.84|3|\r\n|KANSAS|Public|BUCKLIN|488.2457|0|\r\n|KANSAS|Public|ASHLAND|446.4218|1|\r\n|KANSAS|Public|PROTECTION|446.11|2|\r\n|KANSAS|Public|MEADE STATE PARK|371.1|3|","https://docs.microsoft.com/en-us/azure/kusto/query/topnestedoperator","topnestedoperator.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"toscalar","Returns a scalar constant value of the evaluated expression.","This function is useful for queries that require staged calculations. For example, \r\ncalculate a total count of events, and then use the result to filter groups\r\nthat exceed a certain percent of all events.\r\n\r\n## Syntax\r\n\r\n`toscalar(`*Expression*`)`\r\n\r\n## Arguments\r\n\r\n* *Expression*: Expression that will be evaluated for scalar conversion.\r\n\r\n## Returns\r\n\r\nA scalar constant value of the evaluated expression.\r\nIf the result is a tabular, then the first column and first row will be taken for conversion.\r\n\r\n> [!TIP]\r\n> You can use a [let statement](letstatement.md) for readability of the query when using `toscalar()`.\r\n\r\n**Notes**\r\n\r\n`toscalar()` can be calculated a constant number of times during the query execution.\r\nThe `toscalar()` function can't be applied on row-level (for-each-row scenario).","Evaluate `Start`, `End`, and `Step` as scalar constants, and use the result for `range` evaluation.\r\n\r\n```\r\nlet Start = toscalar(print x=1);\r\nlet End = toscalar(range x from 1 to 9 step 1 | count);\r\nlet Step = toscalar(2);\r\nrange z from Start to End step Step | extend start=Start, end=End, step=Step\r\n```\r\n\r\n|z|start|end|step|\r\n|---|---|---|---|\r\n|1|1|9|2|\r\n|3|1|9|2|\r\n|5|1|9|2|\r\n|7|1|9|2|\r\n|9|1|9|2|","https://docs.microsoft.com/en-us/azure/kusto/query/toscalarfunction","toscalarfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"tostring","Converts input to a string representation.",'```\r\ntostring(123) == "123"\r\n```\r\n\r\n## Syntax\r\n\r\n`tostring(`*`Expr`*`)`\r\n\r\n## Arguments\r\n\r\n* *`Expr`*: Expression that will be converted to string. \r\n\r\n## Returns\r\n\r\nIf the *`Expr`* value is non-null, the result will be a string representation of *`Expr`*.\r\nIf the *`Expr`* value is null, the result will be an empty string.',"","https://docs.microsoft.com/en-us/azure/kusto/query/tostringfunction","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"totimespan","Converts input to [timespan](./scalar-data-types/timespan.md) scalar.",'```\r\ntotimespan("0.00:01:00") == time(1min)\r\n```\r\n\r\n## Syntax\r\n\r\n`totimespan(Expr)`\r\n\r\n## Arguments\r\n\r\n* *`Expr`*: Expression that will be converted to [timespan](./scalar-data-types/timespan.md).\r\n\r\n## Returns\r\n\r\nIf conversion is successful, result will be a [timespan](./scalar-data-types/timespan.md) value.\r\nElse, result will be null.',"","https://docs.microsoft.com/en-us/azure/kusto/query/totimespanfunction","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"toupper","Converts a string to upper case.",'```\r\ntoupper("hello") == "HELLO"\r\n```',"","https://docs.microsoft.com/en-us/azure/kusto/query/toupperfunction","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"translate","Replaces a set of characters ('searchList') with another set of characters ('replacementList') in a given a string.\r\nThe function searches for characters in the 'searchList' and replaces them with the corresponding characters in 'replacementList'","## Syntax\r\n\r\n`translate(`*searchList*`,` *replacementList*`,` *text*`)`\r\n\r\n## Arguments\r\n\r\n* *searchList*: The list of characters that should be replaced\r\n* *replacementList*: The list of characters that should replace the characters in 'searchList'\r\n* *text*: A string to search\r\n\r\n## Returns\r\n\r\n*text* after replacing all ocurrences of characters in 'replacementList' with the corresponding characters in 'searchList'",'|Input                                 |Output   |\r\n|--------------------------------------|---------|\r\n|`translate("abc", "x", "abc")`        |`"xxx"`  |\r\n|`translate("abc", "", "ab")`          |`""`     |\r\n|`translate("krasp", "otsku", "spark")`|`"kusto"`|',"https://docs.microsoft.com/en-us/azure/kusto/query/translatefunction","translatefunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"treepath","Enumerates all the path expressions that identify leaves in a dynamic object.","`treepath(`*dynamic object*`)`\r\n\r\n## Returns\r\n\r\nAn array of path expressions.",'|Expression|Evaluates to|\r\n|---|---|\r\n|`treepath(parse_json(\'{"a":"b", "c":123}\'))` | `["[\'a\']","[\'c\']"]`|\r\n|`treepath(parse_json(\'{"prop1":[1,2,3,4], "prop2":"value2"}\'))`|`["[\'prop1\']","[\'prop1\'][0]","[\'prop2\']"]`|\r\n|`treepath(parse_json(\'{"listProperty":[100,200,300,"abcde",{"x":"y"}]}\'))`|`["[\'listProperty\']","[\'listProperty\'][0]","[\'listProperty\'][0][\'x\']"]`|',"https://docs.microsoft.com/en-us/azure/kusto/query/treepathfunction","treepathfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"trim","Removes all leading and trailing matches of the specified regular expression.","## Syntax\r\n\r\n`trim(`*regex*`,` *text*`)`\r\n\r\n## Arguments\r\n\r\n* *regex*: String or [regular expression](re2.md) to be trimmed from the beginning and/or the end of *text*.  \r\n* *text*: A string.\r\n\r\n## Returns\r\n\r\n*text* after trimming matches of *regex* found in the beginning and/or the end of *text*.",'Statement bellow trims *substring*  from the start and the end of the *string_to_trim*:\r\n\r\n```\r\nlet string_to_trim = @"--https://bing.com--";\r\nlet substring = "--";\r\nprint string_to_trim = string_to_trim, trimmed_string = trim(substring,string_to_trim)\r\n```\r\n\r\n|string_to_trim|trimmed_string|\r\n|---|---|\r\n|--https://bing.com--|https://bing.com|\r\n\r\nNext statement trims all non-word characters from start and end of the string:\r\n\r\n```\r\nrange x from 1 to 5 step 1\r\n| project str = strcat("-  ","Te st",x,@"// $")\r\n| extend trimmed_str = trim(@"[^\\w]+",str)\r\n```\r\n\r\n|str|trimmed_str|\r\n|---|---|\r\n|-  Te st1// $|Te st1|\r\n|-  Te st2// $|Te st2|\r\n|-  Te st3// $|Te st3|\r\n|-  Te st4// $|Te st4|\r\n|-  Te st5// $|Te st5|',"https://docs.microsoft.com/en-us/azure/kusto/query/trimfunction","trimfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"trim_end","Removes trailing match of the specified regular expression.","## Syntax\r\n\r\n`trim_end(`*regex*`,` *text*`)`\r\n\r\n## Arguments\r\n\r\n* *regex*: String or [regular expression](re2.md) to be trimmed from the end of *text*.  \r\n* *text*: A string.\r\n\r\n## Returns\r\n\r\n*text* after trimming matches of *regex* found in the end of *text*.",'Statement bellow trims *substring*  from the end of *string_to_trim*:\r\n\r\n```\r\nlet string_to_trim = @"bing.com";\r\nlet substring = ".com";\r\nprint string_to_trim = string_to_trim,trimmed_string = trim_end(substring,string_to_trim)\r\n```\r\n\r\n|string_to_trim|trimmed_string|\r\n|--------------|--------------|\r\n|bing.com      |bing          |\r\n\r\nNext statement trims all non-word characters from the end of the string:\r\n\r\n```\r\nprint str = strcat("-  ","Te st",x,@"// $")\r\n| extend trimmed_str = trim_end(@"[^\\w]+",str)\r\n```\r\n\r\n|str          |trimmed_str|\r\n|-------------|-----------|\r\n|-  Te st1// $|-  Te st1  |\r\n|-  Te st2// $|-  Te st2  |\r\n|-  Te st3// $|-  Te st3  |\r\n|-  Te st4// $|-  Te st4  |\r\n|-  Te st5// $|-  Te st5  |',"https://docs.microsoft.com/en-us/azure/kusto/query/trimendfunction","trimendfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"trim_start","Removes leading match of the specified regular expression.","## Syntax\r\n\r\n`trim_start(`*regex*`,` *text*`)`\r\n\r\n## Arguments\r\n\r\n* *regex*: String or [regular expression](re2.md) to be trimmed from the beginning of *text*.  \r\n* *text*: A string.\r\n\r\n## Returns\r\n\r\n*text* after trimming match of *regex* found in the beginning of *text*.",'Statement bellow trims *substring*  from the start of *string_to_trim*:\r\n\r\n```\r\nlet string_to_trim = @"https://bing.com";\r\nlet substring = "https://";\r\nprint string_to_trim = string_to_trim,trimmed_string = trim_start(substring,string_to_trim)\r\n```\r\n\r\n|string_to_trim|trimmed_string|\r\n|---|---|\r\n|https://bing.com|bing.com|\r\n\r\nNext statement trims all non-word characters from the beginning of the string:\r\n\r\n```\r\nrange x from 1 to 5 step 1\r\n| project str = strcat("-  ","Te st",x,@"// $")\r\n| extend trimmed_str = trim_start(@"[^\\w]+",str)\r\n```\r\n\r\n|str|trimmed_str|\r\n|---|---|\r\n|-  Te st1// $|Te st1// $|\r\n|-  Te st2// $|Te st2// $|\r\n|-  Te st3// $|Te st3// $|\r\n|-  Te st4// $|Te st4// $|\r\n|-  Te st5// $|Te st5// $|',"https://docs.microsoft.com/en-us/azure/kusto/query/trimstartfunction","trimstartfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,"union","Takes two or more tables and returns the rows of all of them.",'```\r\nTable1 | union Table2, Table3\r\n```\r\n\r\n## Syntax\r\n\r\n*T* `| union` [*UnionParameters*] [`kind=` `inner`|`outer`] [`withsource=`*ColumnName*] [`isfuzzy=` `true`|`false`] *Table* [`,` *Table*]...  \r\n\r\nAlternative form with no piped input:\r\n\r\n`union` [*UnionParameters*] [`kind=` `inner`|`outer`] [`withsource=`*ColumnName*] [`isfuzzy=` `true`|`false`] *Table* [`,` *Table*]...  \r\n\r\n## Arguments\r\n\r\n* `Table`:\r\n    *  The name of a table, such as `Events`; or\r\n    *  A query expression that must be enclosed with parenthesis, such as `(Events | where id==42)` or `(cluster("https://help.kusto.windows.net:443").database("Samples").table("*"))`; or\r\n    *  A set of tables specified with a wildcard. For example, `E*` would form the union of all the tables in the database whose names begin `E`.\r\n* `kind`: \r\n    * `inner` - The result has the subset of columns that are common to all of the input tables.\r\n    * `outer` - (default). The result has all the columns that occur in any of the inputs. Cells that weren\'t defined by an input row are set to `null`.\r\n* `withsource`=*ColumnName*: If specified, the output will include a column\r\ncalled *ColumnName* whose value indicates which source table has contributed each row.\r\nIf the query effectively (after wildcard matching) references tables from more than one database (default database always counts) the value of this column will have a table name qualified with the database.\r\nSimilarly __cluster and database__ qualifications will be present in the value if more than one cluster is referenced. \r\n* `isfuzzy=` `true` | `false`: If `isfuzzy` is set to `true` - allows fuzzy resolution of union legs. `Fuzzy` applies to the set of `union` sources. It means that while analyzing the query and preparing for execution, the set of union sources is reduced to the set of table references that exist and are accessible at the time. If at least one such table was found, any resolution failure will yield a warning in the query status results (one for each missing reference), but will not prevent the query execution; if no resolutions were successful - the query will return an error.\r\nThe default is `isfuzzy=` `false`.\r\n* *UnionParameters*: Zero or more (space-separated) parameters in the form of\r\n  *Name* `=` *Value* that control the behavior\r\n  of the row-match operation and execution plan. The following parameters are supported: \r\n  |Name           |Values                                        |Description                                  |\r\n  |---------------|----------------------------------------------|---------------------------------------------|\r\n  |`hint.concurrency`|*Number*|Hints the system how many concurrent subqueries of the `union` operator should be executed in parallel. *Default*: Amount of CPU cores on the single node of the cluster (2 to 16).|\r\n  |`hint.spread`|*Number*|Hints the system how many nodes should be used by the concurrent `union` subqueries execution. *Default*: 1.|\r\n\r\n\r\n## Returns\r\n\r\nA table with as many rows as there are in all the input tables.\r\n\r\n**Notes**\r\n\r\n1. `union` scope can include [let statements](./letstatement.md) if those are \r\nattributed with [view keyword](./letstatement.md)\r\n2. `union` scope will not include [functions](../management/functions.md). To include a function in the union scope, define a [let statement](./letstatement.md) with [view keyword](./letstatement.md)\r\n3. If the `union` input is [tables](../management/tables.md) (as oppose to [tabular expressions](./tabularexpressionstatements.md)), and the `union` is followed by a [where operator](./whereoperator.md), for better performance, consider replacing both with [find](./findoperator.md). Note the different [output schema](./findoperator.md#output-schema) produced by the `find` operator. \r\n4. `isfuzzy=true` only applies to the `union` sources resolution phase. Once the set of source tables is determined, possible additional query failures will not be suppressed.\r\n5. When using `outer union`, the result has all the columns that occur in any of the inputs, one column for each name and type occurrences. This means that if a column appears in multiple tables and has multiple types, it will have a corresponding column for each type in the `union`\'s result. This column name will be suffixed with a \'_\' followed by the origin column [type](./scalar-data-types/index.md).',"```\r\nunion K* | where * has \"Kusto\"\r\n```\r\n\r\nRows from all tables in the database whose name starts with `K`, and in which any column includes the word `Kusto`.\r\n\r\n## Example\r\n\r\n```\r\nunion withsource=SourceTable kind=outer Query, Command\r\n| where Timestamp > ago(1d)\r\n| summarize dcount(UserId)\r\n```\r\n\r\nThe number of distinct users that have produced\r\neither a `Query` event or a `Command` event over the past day. In the result, the 'SourceTable' column will indicate either \"Query\" or \"Command\".\r\n\r\n```\r\nQuery\r\n| where Timestamp > ago(1d)\r\n| union withsource=SourceTable kind=outer \r\n   (Command | where Timestamp > ago(1d))\r\n| summarize dcount(UserId)\r\n```\r\n\r\nThis more efficient version produces the same result. It filters each table before creating the union.\r\n\r\n**Example: Using `isfuzzy=true`**\r\n\r\n```\r\n// Using union isfuzzy=true to access non-existing view:                                     \r\nlet View_1 = view () { print x=1 };\r\nlet View_2 = view () { print x=1 };\r\nlet OtherView_1 = view () { print x=1 };\r\nunion isfuzzy=true\r\n(View_1 | where x > 0), \r\n(View_2 | where x > 0),\r\n(View_3 | where x > 0)\r\n| count \r\n```\r\n\r\n|Count|\r\n|---|\r\n|2|\r\n\r\nObserving Query Status - the following warning returned:\r\n`Failed to resolve entity 'View_3'`\r\n\r\n```\r\n// Using union isfuzzy=true and wildcard access:\r\nlet View_1 = view () { print x=1 };\r\nlet View_2 = view () { print x=1 };\r\nlet OtherView_1 = view () { print x=1 };\r\nunion isfuzzy=true View*, SomeView*, OtherView*\r\n| count \r\n```\r\n\r\n|Count|\r\n|---|\r\n|3|\r\n\r\nObserving Query Status - the following warning returned:\r\n`Failed to resolve entity 'SomeView*'`\r\n\r\n**Example: source columns types mismatch**\r\n\r\n```\r\nlet View_1 = view () { print x=1 };\r\nlet View_2 = view () { print x=toint(2) };\r\nunion withsource=TableName View_1, View_2\r\n```\r\n\r\n|TableName|x_long|x_int|\r\n|---------|------|-----|\r\n|View_1   |1     |     |\r\n|View_2   |      |2    |\r\n\r\n```\r\nlet View_1 = view () { print x=1 };\r\nlet View_2 = view () { print x=toint(2) };\r\nlet View_3 = view () { print x_long=3 };\r\nunion withsource=TableName View_1, View_2, View_3 \r\n```\r\n\r\n|TableName|x_long1|x_int |x_long|\r\n|---------|-------|------|------|\r\n|View_1   |1      |      |      |\r\n|View_2   |       |2     |      |\r\n|View_3   |       |      |3     |\r\n\r\nColumn `x` from `View_1` received the suffix `_long`, and as a column named `x_long` already exists in the result schema, the column names were de-duplicated, producing a new column- `x_long1`","https://docs.microsoft.com/en-us/azure/kusto/query/unionoperator","unionoperator.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"unixtime_microseconds_todatetime","Converts unix-epoch microseconds to UTC datetime.","## Syntax\r\n\r\n`unixtime_microseconds_todatetime(*microseconds*)`\r\n\r\n## Arguments\r\n\r\n* *microseconds*: A real number represents epoch timestamp in microseconds. `Datetime` that occurs before the epoch time (1970-01-01 00:00:00) has a negative timestamp value.\r\n\r\n## Returns\r\n\r\nIf the conversion is successful, the result will be a [datetime](./scalar-data-types/datetime.md) value. If conversion is not successful, result will be null.\r\n\r\n## See also\r\n\r\n* Convert unix-epoch seconds to UTC datetime using [unixtime_seconds_todatetime()](unixtime-seconds-todatetimefunction.md).\r\n* Convert unix-epoch milliseconds to UTC datetime using [unixtime_milliseconds_todatetime()](unixtime-milliseconds-todatetimefunction.md).\r\n* Convert unix-epoch nanoseconds to UTC datetime using [unixtime_nanoseconds_todatetime()](unixtime-nanoseconds-todatetimefunction.md).","```\r\nprint date_time = unixtime_microseconds_todatetime(1546300800000000)\r\n```\r\n\r\n|date_time|\r\n|---|\r\n|2019-01-01 00:00:00.0000000|","https://docs.microsoft.com/en-us/azure/kusto/query/unixtime-microseconds-todatetimefunction","unixtime-microseconds-todatetimefunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"unixtime_milliseconds_todatetime","Converts unix-epoch milliseconds to UTC datetime.","## Syntax\r\n\r\n`unixtime_milliseconds_todatetime(*milliseconds*)`\r\n\r\n## Arguments\r\n\r\n* *milliseconds*: A real number represents epoch timestamp in milliseconds. `Datetime` that occurs before the epoch time (1970-01-01 00:00:00) has a negative timestamp value.\r\n\r\n## Returns\r\n\r\nIf the conversion is successful, the result will be a [datetime](./scalar-data-types/datetime.md) value. If conversion is not successful, result will be null.\r\n\r\n## See also\r\n\r\n* Convert unix-epoch seconds to UTC datetime using [unixtime_seconds_todatetime()](unixtime-seconds-todatetimefunction.md).\r\n* Convert unix-epoch microseconds to UTC datetime using [unixtime_microseconds_todatetime()](unixtime-microseconds-todatetimefunction.md).\r\n* Convert unix-epoch nanoseconds to UTC datetime using [unixtime_nanoseconds_todatetime()](unixtime-nanoseconds-todatetimefunction.md).","```\r\nprint date_time = unixtime_milliseconds_todatetime(1546300800000)\r\n```\r\n\r\n|date_time|\r\n|---|\r\n|2019-01-01 00:00:00.0000000|","https://docs.microsoft.com/en-us/azure/kusto/query/unixtime-milliseconds-todatetimefunction","unixtime-milliseconds-todatetimefunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"unixtime_nanoseconds_todatetime","Converts unix-epoch nanoseconds to UTC datetime.","## Syntax\r\n\r\n`unixtime_nanoseconds_todatetime(*nanoseconds*)`\r\n\r\n## Arguments\r\n\r\n* *nanoseconds*: A real number represents epoch timestamp in nanoseconds. `Datetime` that occurs before the epoch time (1970-01-01 00:00:00) has a negative timestamp value.\r\n\r\n## Returns\r\n\r\nIf the conversion is successful, the result will be a [datetime](./scalar-data-types/datetime.md) value. If conversion is not successful, result will be null.\r\n\r\n## See also\r\n\r\n* Convert unix-epoch seconds to UTC datetime using [unixtime_seconds_todatetime()](unixtime-seconds-todatetimefunction.md).\r\n* Convert unix-epoch milliseconds to UTC datetime using [unixtime_milliseconds_todatetime()](unixtime-milliseconds-todatetimefunction.md).\r\n* Convert unix-epoch microseconds to UTC datetime using [unixtime_microseconds_todatetime()](unixtime-microseconds-todatetimefunction.md).","```\r\nprint date_time = unixtime_nanoseconds_todatetime(1546300800000000000)\r\n```\r\n\r\n|date_time|\r\n|---|\r\n|2019-01-01 00:00:00.0000000|","https://docs.microsoft.com/en-us/azure/kusto/query/unixtime-nanoseconds-todatetimefunction","unixtime-nanoseconds-todatetimefunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"unixtime_seconds_todatetime","Converts unix-epoch seconds to UTC datetime.","## Syntax\r\n\r\n`unixtime_seconds_todatetime(*seconds*)`\r\n\r\n## Arguments\r\n\r\n* *seconds*: A real number represents epoch timestamp in seconds. `Datetime` that occurs before the epoch time (1970-01-01 00:00:00) has a negative timestamp value.\r\n\r\n## Returns\r\n\r\nIf the conversion is successful, the result will be a [datetime](./scalar-data-types/datetime.md) value. If conversion is not successful, result will be null.\r\n\r\n## See also\r\n\r\n* Convert unix-epoch milliseconds to UTC datetime using [unixtime_milliseconds_todatetime()](unixtime-milliseconds-todatetimefunction.md).\r\n* Convert unix-epoch microseconds to UTC datetime using [unixtime_microseconds_todatetime()](unixtime-microseconds-todatetimefunction.md).\r\n* Convert unix-epoch nanoseconds to UTC datetime using [unixtime_nanoseconds_todatetime()](unixtime-nanoseconds-todatetimefunction.md).","```\r\nprint date_time = unixtime_seconds_todatetime(1546300800)\r\n```\r\n\r\n|date_time|\r\n|---|\r\n|2019-01-01 00:00:00.0000000|","https://docs.microsoft.com/en-us/azure/kusto/query/unixtime-seconds-todatetimefunction","unixtime-seconds-todatetimefunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"url_decode","The function converts encoded URL into a to regular URL representation.","Detailed information about URL decoding and encoding can be found [here](https://en.wikipedia.org/wiki/Percent-encoding).\r\n\r\n## Syntax\r\n\r\n`url_decode(`*encoded url*`)`\r\n\r\n## Arguments\r\n\r\n* *encoded url*: encoded URL (string).  \r\n\r\n## Returns\r\n\r\nURL (string) in a regular representation.","```\r\nlet url = @'https%3a%2f%2fwww.bing.com%2f';\r\nprint original = url, decoded = url_decode(url)\r\n```\r\n\r\n|original|decoded|\r\n|---|---|\r\n|https%3a%2f%2fwww.bing.com%2f|https://www.bing.com/|","https://docs.microsoft.com/en-us/azure/kusto/query/urldecodefunction","urldecodefunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"url_encode","The function converts characters of the input URL into a format that can be transmitted over the Internet.","Detailed information about URL encoding and decoding can be found [here](https://en.wikipedia.org/wiki/Percent-encoding).\r\nDiffers from [url_encode_component](./urlencodecomponentfunction.md) by encoding spaces as '+' and not as '20%' (see application/x-www-form-urlencoded [here](https://en.wikipedia.org/wiki/Percent-encoding)).\r\n\r\n## Syntax\r\n\r\n`url_encode(`*url*`)`\r\n\r\n## Arguments\r\n\r\n* *url*: input URL (string).  \r\n\r\n## Returns\r\n\r\nURL (string) converted into a format that can be transmitted over the Internet.","```\r\nlet url = @'https://www.bing.com/hello word';\r\nprint original = url, encoded = url_encode(url)\r\n```\r\n\r\n|original|encoded|\r\n|---|---|\r\n|https://www.bing.com/hello word/|https%3a%2f%2fwww.bing.com%2fhello+word|","https://docs.microsoft.com/en-us/azure/kusto/query/urlencodefunction","urlencodefunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"url_encode_component","The function converts characters of the input URL into a format that can be transmitted over the Internet.","Detailed information about URL encoding and decoding can be found [here](https://en.wikipedia.org/wiki/Percent-encoding).\r\nDiffers from [url_encode](./urlencodefunction.md) by encoding spaces as '20%' and not as '+'.\r\n\r\n## Syntax\r\n\r\n`url_encode_component(`*url*`)`\r\n\r\n## Arguments\r\n\r\n* *url*: input URL (string).  \r\n\r\n## Returns\r\n\r\nURL (string) converted into a format that can be transmitted over the Internet.","```\r\nlet url = @'https://www.bing.com/hello word/';\r\nprint original = url, encoded = url_encode_component(url)\r\n```\r\n\r\n|original|encoded|\r\n|---|---|\r\n|https://www.bing.com/hello word/|https%3a%2f%2fwww.bing.com%2fhello%20word|","https://docs.microsoft.com/en-us/azure/kusto/query/urlencodecomponentfunction","urlencodecomponentfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"variance","Calculates the variance of *Expr* across the group, considering the group as a [sample](https://en.wikipedia.org/wiki/Sample_%28statistics%29).","* Used formula:\r\n\r\n![Variance sample](images/variance-aggfunction/variance-sample.png)\r\n\r\n* Can be used only in context of aggregation inside [summarize](summarizeoperator.md)\r\n\r\n## Syntax\r\n\r\nsummarize `variance(`*Expr*`)`\r\n\r\n## Arguments\r\n\r\n* *Expr*: Expression that will be used for aggregation calculation. \r\n\r\n## Returns\r\n\r\nThe variance value of *Expr* across the group.","```\r\nrange x from 1 to 5 step 1\r\n| summarize make_list(x), variance(x) \r\n```\r\n\r\n|list_x|variance_x|\r\n|---|---|\r\n|[ 1, 2, 3, 4, 5]|2.5|","https://docs.microsoft.com/en-us/azure/kusto/query/variance-aggfunction","variance-aggfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"varianceif","Calculates the [variance](variance-aggfunction.md) of *Expr* across the group for which *Predicate* evaluates to `true`.","* Can be used only in context of aggregation inside [summarize](summarizeoperator.md)\r\n\r\n## Syntax\r\n\r\nsummarize `varianceif(`*Expr*`, `*Predicate*`)`\r\n\r\n## Arguments\r\n\r\n* *Expr*: Expression that will be used for aggregation calculation. \r\n* *Predicate*:  predicate that if true, the *Expr* calculated value will be added to the variance.\r\n\r\n## Returns\r\n\r\nThe variance value of *Expr* across the group where *Predicate* evaluates to `true`.","```\r\nrange x from 1 to 100 step 1\r\n| summarize varianceif(x, x%2 == 0)\r\n\r\n```\r\n\r\n|varianceif_x|\r\n|---|\r\n|850|","https://docs.microsoft.com/en-us/azure/kusto/query/varianceif-aggfunction","varianceif-aggfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"variancep","Calculates the variance of *Expr* across the group, considering the group as a [population](https://en.wikipedia.org/wiki/Statistical_population).","* Used formula:\r\n\r\n![Variance population](images/variancep-aggfunction/variance-population.png)\r\n\r\n* Can be used only in context of aggregation inside [summarize](summarizeoperator.md)\r\n\r\n## Syntax\r\n\r\nsummarize `variancep(`*Expr*`)`\r\n\r\n## Arguments\r\n\r\n* *Expr*: Expression that will be used for aggregation calculation. \r\n\r\n## Returns\r\n\r\nThe variance value of *Expr* across the group.","```\r\nrange x from 1 to 5 step 1\r\n| summarize make_list(x), variancep(x) \r\n```\r\n\r\n|list_x|variance_x|\r\n|---|---|\r\n|[ 1, 2, 3, 4, 5]|2|","https://docs.microsoft.com/en-us/azure/kusto/query/variancep-aggfunction","variancep-aggfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"week_of_year","Returns an integer which represents the week number. The week number is calculated from the first week of a year, which is the one that includes the first Thursday, according to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Week_dates).",'```\r\nweek_of_year(datetime("2015-12-14"))\r\n```\r\n\r\n## Syntax\r\n\r\n`week_of_year(`*a_date*`)`\r\n\r\n## Arguments\r\n\r\n* `a_date`: A `datetime`.\r\n\r\n## Returns\r\n\r\n`week number` - The week number that contains the given date.',"|Input                                    |Output|\r\n|-----------------------------------------|------|\r\n|`week_of_year(datetime(2020-12-31))`     |`53`  |\r\n|`week_of_year(datetime(2020-06-15))`     |`25`  |\r\n|`week_of_year(datetime(1970-01-01))`     |`1`   |\r\n|`week_of_year(datetime(2000-01-01))`     |`52`  |\r\n\r\n> [!NOTE]\r\n> `weekofyear()` is an obsolete variant of this function. `weekofyear()` was not ISO 8601 compliant; the first week of a year was defined as the week with the year's first Wednesday in it.\r\nThe current version of this function, `week_of_year()`, is ISO 8601 compliant; the first week of a year is defined as the week with the year's first Thursday in it.","https://docs.microsoft.com/en-us/azure/kusto/query/weekofyearfunction","weekofyearfunction.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"welch_test","Computes the p_value of the [Welch-test function](https://en.wikipedia.org/wiki/Welch%27s_t-test)",'```\r\n// s1, s2 values are from https://en.wikipedia.org/wiki/Welch%27s_t-test\r\nprint\r\n    s1 = dynamic([27.5, 21.0, 19.0, 23.6, 17.0, 17.9, 16.9, 20.1, 21.9, 22.6, 23.1, 19.6, 19.0, 21.7, 21.4]),\r\n    s2 = dynamic([27.1, 22.0, 20.8, 23.4, 23.4, 23.5, 25.8, 22.0, 24.8, 20.2, 21.9, 22.1, 22.9, 20.5, 24.4])\r\n| mv-expand s1 to typeof(double), s2 to typeof(double)\r\n| summarize m1=avg(s1), v1=variance(s1), c1=count(), m2=avg(s2), v2=variance(s2), c2=count()\r\n| extend pValue=welch_test(m1,v1,c1,m2,v2,c2)\r\n// pValue = 0.021\r\n```\r\n\r\n## Syntax\r\n\r\n`welch_test(`*mean1*`, `*variance1*`, `*count1*`, `*mean2*`, `*variance2*`, `*count2*`)`\r\n\r\n## Arguments\r\n\r\n* *mean1*: Expression that represents the mean (average) value of the first series\r\n* *variance1*:  Expression that represents the variance value of the first series\r\n* *count1*:  Expression that represents the count of values in the first series\r\n* *mean2*: Expression that represents the mean (average) value of the second series\r\n* *variance2*:  Expression that represents the variance value of the second series\r\n* *count2*:  Expression that represents the count of values in the second series\r\n\r\n## Returns\r\n\r\nFrom [Wikipedia](https://en.wikipedia.org/wiki/Welch%27s_t-test):\r\n\r\nIn statistics, Welch\'s t-test is a two-sample location test that\'s used to test the hypothesis that two populations have equal means. \r\nWelch\'s t-test is an adaptation of Student\'s t-test, and is more reliable when the two samples have unequal variances and unequal sample sizes. These tests are often referred to as "unpaired" or "independent samples" t-tests. \r\nThe tests are typically applied when the statistical units underlying the two samples being compared are non-overlapping. \r\nWelch\'s t-test is less popular than Student\'s t-test, and may be less familiar to readers. The test is also called "Welch\'s unequal variances t-test", or "unequal variances t-test".',"","https://docs.microsoft.com/en-us/azure/kusto/query/welch-testfunction","")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,"where","Filters a table to the subset of rows that satisfy a predicate.","```\r\nT | where fruit==\"apple\"\r\n```\r\n\r\n**Alias** `filter`\r\n\r\n## Syntax\r\n\r\n*T* `| where` *Predicate*\r\n\r\n## Arguments\r\n\r\n* *T*: The tabular input whose records are to be filtered.\r\n* *Predicate*: A `boolean` [expression](./scalar-data-types/bool.md) over the columns of *T*. It's evaluated for each row in *T*.\r\n\r\n## Returns\r\n\r\nRows in *T* for which *Predicate* is `true`.\r\n\r\n**Notes**\r\nNull values: all filtering functions return false when compared with null values. \r\nYou can use special null-aware functions to write queries that handle null values.\r\n\r\n[isnull()](./isnullfunction.md),\r\n[isnotnull()](./isnotnullfunction.md),\r\n[isempty()](./isemptyfunction.md),\r\n[isnotempty()](./isnotemptyfunction.md). \r\n\r\n**Tips**\r\n\r\nTo get the fastest performance:\r\n\r\n* **Use simple comparisons** between column names and constants. ('Constant' means constant over the table - so `now()` and `ago()` are OK, and so are scalar values assigned using a [`let` statement](./letstatement.md).)\r\n    For example, prefer `where Timestamp >= ago(1d)` to `where floor(Timestamp, 1d) == ago(1d)`.\r\n* **Simplest terms first**: If you have multiple clauses conjoined with `and`, put first the clauses that involve just one column. So `Timestamp > ago(1d) and OpId == EventId` is better than the other way around.\r\n\r\nFor more information, see the summary of [available String operators](./datatypes-string-operators.md) and the summary of [available Numerical operators](./numoperators.md).",'```\r\nTraces\r\n| where Timestamp > ago(1h)\r\n    and Source == "MyCluster"\r\n    and ActivityId == SubActivityId \r\n```\r\n\r\nThis example retrieves records that are no older than 1 hour,\r\ncome from a source called `MyCluster`, and have two columns of the same value. \r\n\r\nNotice that we put the comparison between two columns last, as it can\'t use the index and forces a scan.\r\n\r\n## Example\r\n\r\n```\r\nTraces | where * has "Kusto"\r\n```\r\n\r\nAll the rows in which the word "Kusto" appears in any column.',"https://docs.microsoft.com/en-us/azure/kusto/query/whereoperator","whereoperator.md")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,"zip","The `zip` function accepts any number of `dynamic` arrays, and returns an\r\narray whose elements are each an array holding the elements of the input\r\narrays of the same index.","## Syntax\r\n\r\n`zip(`*array1*`,` *array2*`, ... )`\r\n\r\n## Arguments\r\n\r\nBetween 2 and 16 dynamic arrays.",'The following example returns `[[1,2],[3,4],[5,6]]`:\r\n\r\n```\r\nprint zip(dynamic([1,3,5]), dynamic([2,4,6]))\r\n```\r\n\r\nThe following example returns `[["A",{}], [1,"B"], [1.5, null]]`:\r\n\r\n```\r\nprint zip(dynamic(["A", 1, 1.5]), dynamic([{}, "B"]))\r\n```\r\n\r\nThe following example returns `[[1,"one"],[2,"two"],[3,"three"]]`:\r\n\r\n```\r\ndatatable(a:int, b:string) [1,"one",2,"two",3,"three"]\r\n| summarize a = make_list(a), b = make_list(b)\r\n| project zip(a, b)\r\n```',"https://docs.microsoft.com/en-us/azure/kusto/query/zipfunction","zipfunction.md")))}}});Bridge.ns("Kusto.Data.IntelliSense.CslDocumentation",$asm.$);Bridge.apply($asm.$.Kusto.Data.IntelliSense.CslDocumentation,{f1:function(kvp){return kvp.value}});Bridge.define("Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult",{$kind:"nested enum",statics:{fields:{None:0,AppendEntities:1,ReplaceEntities:2}}});Bridge.define("Kusto.Data.IntelliSense.CslTopicDocumentation",{props:{TokenKind:0,Name:null,ShortDescription:null,LongDescription:null,Examples:null,Url:null,MarkdownSource:null},ctors:{ctor:function(tokenKind,name,shortDescription,longDescription,examples,url,markdownSource){url===void 0&&(url=null);markdownSource===void 0&&(markdownSource=null);this.$initialize();this.TokenKind=tokenKind;this.Name=name;this.ShortDescription=shortDescription;this.LongDescription=longDescription;this.Examples=examples;this.Url=url;this.MarkdownSource=markdownSource}},methods:{GetMarkDownText:function(){var $t,sb=new System.Text.StringBuilder,part;sb.appendFormat(System.String.format("## [{0}]({1})",this.Name,this.Url));sb.appendLine();sb.appendLine();$t=Bridge.getEnumerator(System.Array.init([this.ShortDescription,this.LongDescription,this.Examples],System.String));try{while($t.moveNext())part=$t.Current,System.String.isNullOrEmpty(part)||(sb.appendLine(part),sb.appendLine())}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return sb.toString()},equals:function(obj){if(obj==null)return!1;var other=Bridge.as(obj,Kusto.Data.IntelliSense.CslTopicDocumentation);return other==null?!1:this.TokenKind===other.TokenKind&&Bridge.referenceEquals(this.Name,other.Name)&&Bridge.referenceEquals(this.ShortDescription,other.ShortDescription)&&Bridge.referenceEquals(this.Examples,other.Examples)},getHashCode:function(){var $t,$t1,$t2,$t3;return Bridge.getHashCode(this.TokenKind)^Bridge.getHashCode(this.Name)^($t=($t1=this.ShortDescription)!=null?Bridge.getHashCode($t1):null,$t!=null?$t:0)^($t2=($t3=this.Examples)!=null?Bridge.getHashCode($t3):null,$t2!=null?$t2:0)}}});Bridge.define("Kusto.Data.IntelliSense.DMRuleKind",{$kind:"enum",statics:{fields:{None:0,Start:0,YieldAdminCommandsOptions:0,YieldShowCommandOptions:1,YieldShowClustersKeywordOptions:2,YieldShowClustersSettingsKeywordOptions:3,YieldShowClustersSettingsVersionKeywordOptions:4,YieldShowClustersSettingsWithEncryptedSecretsKeywordOptions:5,YieldShowPrincipalRolesCommandOptions:6,YieldAlterCommandOptions:7,YieldAlterMergeCommandOptions:8,YieldAlterClustersSettingsKeywordOptions:9,YieldCreateCommandOptions:10,YieldDropCommandOptions:11,YieldAddCommandOptions:12,YieldAddOrAlterCommandOptions:13,YieldAddDataObtainerKeyworkOptions:14,YieldAddDataObtainerInitializeKeyworkOptions:15,YieldAddDataObtainerInitializeWithKeyworkOptions:16,YieldGetCommandOptions:17,YieldGetIngestionQueuesCommandOptions:18,YieldGetIngestionQueuesTypeCommandOptions:19,YieldFlushCommandOptions:20,YieldInitializeCommandOptions:21,YieldInitializeClusterConfigCommandOptions:22,YieldInitializeClusterConfigEncryptionCommandOptions:23,YieldResetCommandOptions:24,YieldSetCommandOptions:25,YieldAlterClustersSettingsFromKeywordOptions:26,YieldAlterObtainerQueuesOptions:27,YieldAddOrAlterEventHubIngestionSourceSettingsOptions:28,YieldPurgeShowCommandOptions:29,YieldPurgeShowCommandFromKeywordOptions:30,YieldPurgeShowCommandToKeywordOptions:31,YieldPurgeTableCommandOptions:32,YieldPurgeTableInDatabaseCommandOptions:33,YieldPurgeRetryCommandOptions:34,YieldPurgeRetryCommandFromKeywordOptions:35,YieldPurgeRetryCommandToKeywordOptions:36,YieldPurgeCancelCommandOptions:37,RefreshPolicyCacheCommandOptions:38},ctors:{init:function(){this.None=Kusto.Data.IntelliSense.RuleKind.None;this.Start=Kusto.Data.IntelliSense.RuleKind.Last}}}});Bridge.define("Kusto.Data.IntelliSense.EntityDataType",{$kind:"enum",statics:{fields:{Empty:0,Object:1,DBNull:2,Boolean:3,Char:4,SByte:5,Byte:6,Int16:7,UInt16:8,Int32:9,UInt32:10,Int64:11,UInt64:12,Single:13,Double:14,Decimal:15,DateTime:16,String:18,Dynamic:19,TimeSpan:20}}});Bridge.define("Kusto.Data.IntelliSense.EntityDataTypeConverter",{statics:{methods:{FromType:function(typeName){var typeCode={v:Kusto.Data.IntelliSense.EntityDataType.String};return System.Enum.tryParse(Kusto.Data.IntelliSense.EntityDataType,typeName,typeCode)||Bridge.referenceEquals(typeName,"Guid")&&(typeCode.v=Kusto.Data.IntelliSense.EntityDataType.String),typeCode.v}}}});Bridge.define("Kusto.Data.IntelliSense.ExpressionEntity",{fields:{Operator:null,Name:null,Arguments:null,IsGenerated:!1},ctors:{init:function(){this.IsGenerated=!1}},methods:{FirstArgument:function(){return Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(System.String,this.Arguments)?System.Linq.Enumerable.from(this.Arguments,System.String).first():""}}});Bridge.define("Kusto.Data.IntelliSense.ExpressionEntityParser",{statics:{methods:{ParseEntities:function(input){return Kusto.Data.IntelliSense.ExpressionEntityParser.ParseEntitiesList(Kusto.Data.IntelliSense.ExpressionEntity,input,Kusto.Data.IntelliSense.ExpressionEntityParser.ParseEntityExpression)},ParseEntities$1:function(input,generateImplicitEntities){return Kusto.Data.IntelliSense.ExpressionEntityParser.ParseEntitiesList(Kusto.Data.IntelliSense.ExpressionEntity,input,Kusto.Data.IntelliSense.ExpressionEntityParser.ParseEntityExpression,generateImplicitEntities)},ParseEntitiesList:function(T,entities,parse,generateImplicitEntities){var result,i,ch,closingBracket,closingBracket1;if(generateImplicitEntities===void 0&&(generateImplicitEntities=null),result=new(System.Collections.Generic.List$1(T).ctor),System.String.isNullOrWhiteSpace(entities))return result;var state=0,chars=System.String.toCharArray(entities,0,entities.length),startToken=0,multipleColumnsResultsCount={v:0},startFunctionName=-1;for(i=0;i<chars.length;i=i+1|0)if(ch=chars[System.Array.index(i,chars)],state===0){if(startToken=i,ch===61)state=2,startFunctionName=i+1|0;else if(System.Char.isDigit(ch)||System.Char.isLetter(ch)||ch===42)multipleColumnsResultsCount.v=0,state=1,startFunctionName=i;else if(ch===91)i=Kusto.Data.IntelliSense.ExpressionEntityParser.IndexOfClosingBracket(chars,93,i+1|0),multipleColumnsResultsCount.v=result.Count,Kusto.Data.IntelliSense.ExpressionEntityParser.AddEntity(T,entities,result,startToken,i,parse),multipleColumnsResultsCount.v=result.Count-multipleColumnsResultsCount.v|0;else if(ch===40)i=Kusto.Data.IntelliSense.ExpressionEntityParser.IndexOfClosingBracket(chars,41,i+1|0),multipleColumnsResultsCount.v=result.Count,Kusto.Data.IntelliSense.ExpressionEntityParser.AddEntity(T,entities,result,startToken,i,parse),multipleColumnsResultsCount.v=result.Count-multipleColumnsResultsCount.v|0;else if(ch===41){Kusto.Data.IntelliSense.ExpressionEntityParser.AddEntity(T,entities,result,startToken,i,parse);break}i===(chars.length-1|0)&&(i=i-1|0,state===0&&(state=1))}else if(state===1){if(multipleColumnsResultsCount.v=0,ch===61)Kusto.Data.IntelliSense.ExpressionEntityParser.AddEntity(T,entities,result,startToken,i-1|0,parse),state=2;else if(ch===44)Kusto.Data.IntelliSense.ExpressionEntityParser.AddEntity(T,entities,result,startToken,i-1|0,parse),state=0;else if(ch===40){if(closingBracket=Kusto.Data.IntelliSense.ExpressionEntityParser.IndexOfClosingBracket(chars,41,i+1|0),Kusto.Data.IntelliSense.ExpressionEntityParser.GenerateMultipleColumnOutput(T,entities,i,startFunctionName,closingBracket,multipleColumnsResultsCount,result,parse,generateImplicitEntities)){i=closingBracket+1|0;state=0;continue}i=closingBracket}i===(chars.length-1|0)&&Kusto.Data.IntelliSense.ExpressionEntityParser.AddEntity(T,entities,result,startToken,i,parse)}else if(state===2)if(ch===44)multipleColumnsResultsCount.v=0,state=0;else if(ch===40)closingBracket1=Kusto.Data.IntelliSense.ExpressionEntityParser.IndexOfClosingBracket(chars,41,i+1|0),Kusto.Data.IntelliSense.ExpressionEntityParser.GenerateMultipleColumnOutput(T,entities,i,startFunctionName,closingBracket1,multipleColumnsResultsCount,result,parse,generateImplicitEntities),i=closingBracket1;else if(ch===41)break;return result},GenerateMultipleColumnOutput:function(T,entities,currentChar,startFunctionName,closingBracket,multipleColumnsResultsCount,result,parse,generateImplicitEntities){var added=!1,args,funcName;return Bridge.staticEquals(generateImplicitEntities,null)||startFunctionName===-1||(args=new(System.Collections.Generic.List$1(T).ctor),Kusto.Data.IntelliSense.ExpressionEntityParser.AddEntity(T,entities,args,currentChar,closingBracket,parse),funcName=entities.substr(startFunctionName,currentChar-startFunctionName|0).trim(),added=generateImplicitEntities(funcName,args,multipleColumnsResultsCount.v,result),multipleColumnsResultsCount.v=0,startFunctionName=-1),added},AddEntity:function(T,entities,result,startIndex,endIndex,parse){var tokenLen=(endIndex-startIndex|0)+1|0,token,entity;tokenLen<=0||(token=(startIndex+tokenLen|0)>=entities.length?entities.substr(startIndex):entities.substr(startIndex,tokenLen),token=Kusto.Data.IntelliSense.ExpressionEntityParser.UnescapeEntityName(token),entity=parse(token),result.AddRange(entity))},UnescapeEntityName:function(token){return token=token.trim(),token=Kusto.Cloud.Platform.Utils.ExtendedString.TrimBalancedSquareBrackets(token),Kusto.Cloud.Platform.Utils.ExtendedString.TrimBalancedSingleAndDoubleQuotes(token)},NormalizeEntityName:function(entityName){var i,ch;if(System.String.isNullOrEmpty(entityName))return"";if(!System.Linq.Enumerable.from(entityName,System.Char).contains(46)&&!System.Linq.Enumerable.from(entityName,System.Char).contains(91))return entityName;var sb=new System.Text.StringBuilder,chars=System.String.toCharArray(entityName,0,entityName.length),state=0;for(i=0;i<chars.length;i=i+1|0){ch=chars[System.Array.index(i,chars)];switch(state){case 0:ch===46?(sb.append("_"),state=1):ch===91?(sb.append("_"),state=2):sb.append(String.fromCharCode(ch));break;case 1:ch!==91&&sb.append(String.fromCharCode(ch));state=2;break;case 2:if(ch===39||ch===34){var start=i+1|0,end=Kusto.Data.IntelliSense.ExpressionEntityParser.ConsumeTill(chars,start,ch),entity_part=entityName.substr(start,end-start|0);entity_part=System.String.replaceAll(entity_part,String.fromCharCode(32),String.fromCharCode(95));sb.append(entity_part);i=end}else ch===93?state=0:sb.append(String.fromCharCode(ch));break}}return sb.toString()},ConsumeTill:function(chars,start,ch){for(var i=start;i<chars.length;i=i+1|0)if(chars[System.Array.index(i,chars)]===ch)return i;return chars.length},ParseEntityExpression:function(token){var $t,indexOfAssignment=System.String.indexOf(token,String.fromCharCode(61)),indexOfStartingBracket=System.String.indexOf(token,String.fromCharCode(40)),entityName,indexOfEndingBracket,entityName1,entitiesList,entities;if(indexOfAssignment>0&&(indexOfStartingBracket<0||indexOfAssignment<indexOfStartingBracket))return entityName=Kusto.Data.IntelliSense.ExpressionEntityParser.NormalizeEntityName(token.substr(0,indexOfAssignment).trim()),System.Array.init([($t=new Kusto.Data.IntelliSense.ExpressionEntity,$t.Name=entityName,$t)],Kusto.Data.IntelliSense.ExpressionEntity);if(indexOfStartingBracket<0)return indexOfEndingBracket=System.String.indexOf(token,String.fromCharCode(41)),indexOfEndingBracket>=0&&(token=token.substr(0,indexOfEndingBracket)),entityName1=Kusto.Data.IntelliSense.ExpressionEntityParser.NormalizeEntityName(token.trim()),System.Array.init([($t=new Kusto.Data.IntelliSense.ExpressionEntity,$t.Name=entityName1,$t)],Kusto.Data.IntelliSense.ExpressionEntity);else if(indexOfStartingBracket===0)return entitiesList=Kusto.Cloud.Platform.Utils.ExtendedString.TrimBalancedRoundBrackets(token),entities=Kusto.Data.IntelliSense.ExpressionEntityParser.ParseEntitiesList(System.String,entitiesList,$asm.$.Kusto.Data.IntelliSense.ExpressionEntityParser.f1),System.Linq.Enumerable.from(entities,System.String).select($asm.$.Kusto.Data.IntelliSense.ExpressionEntityParser.f2);var op=token.substr(0,indexOfStartingBracket).trim(),argList=Kusto.Cloud.Platform.Utils.ExtendedString.TrimBalancedRoundBrackets(token.substr(indexOfStartingBracket)),$arguments=Kusto.Data.IntelliSense.ExpressionEntityParser.ParseEntitiesList(System.String,argList,$asm.$.Kusto.Data.IntelliSense.ExpressionEntityParser.f1),result=($t=new Kusto.Data.IntelliSense.ExpressionEntity,$t.Operator=op,$t);return System.Linq.Enumerable.from($arguments,System.String).any()&&(result.Name=Kusto.Cloud.Platform.Utils.ExtendedString.TrimBalancedRoundBrackets($arguments.getItem(0)),result.Arguments=System.Linq.Enumerable.from($arguments,System.String).skip(1).ToArray(System.String)),System.Array.init([result],Kusto.Data.IntelliSense.ExpressionEntity)},IndexOfClosingBracket:function(chars,closingBracket,startIndex){for(var ch,i=startIndex;i<chars.length;i=i+1|0)if(ch=chars[System.Array.index(i,chars)],ch===40)i=Kusto.Data.IntelliSense.ExpressionEntityParser.IndexOfClosingBracket(chars,41,i+1|0);else if(ch===91)i=Kusto.Data.IntelliSense.ExpressionEntityParser.IndexOfClosingBracket(chars,93,i+1|0);else if(ch===closingBracket)return i;return chars.length}}}});Bridge.ns("Kusto.Data.IntelliSense.ExpressionEntityParser",$asm.$);Bridge.apply($asm.$.Kusto.Data.IntelliSense.ExpressionEntityParser,{f1:function(s){return System.Array.init([s.trim()],System.String)},f2:function(e){var $t1;return $t1=new Kusto.Data.IntelliSense.ExpressionEntity,$t1.Name=Kusto.Data.IntelliSense.ExpressionEntityParser.NormalizeEntityName(e),$t1}});Bridge.define("Kusto.Data.IntelliSense.IKustoIntelliSenseSchemaResolver",{$kind:"interface"});Bridge.define("Kusto.Data.IntelliSense.IntelliSenseCommandTip",{fields:{m_signature:null},props:{Name:null,Signature:{get:function(){if(System.String.isNullOrEmpty(this.m_signature))if(this.NameSuffix!=null)this.m_signature=(this.Name||"")+(this.NameSuffix||"");else if(this.Parameters!=null&&System.Linq.Enumerable.from(this.Parameters,Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).any()){var parameters=Bridge.toArray(System.Linq.Enumerable.from(this.Parameters,Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).select($asm.$.Kusto.Data.IntelliSense.IntelliSenseCommandTip.f1)).join(", ");this.m_signature=System.String.format("<b>{0}(<\/b>{1}<b>)<\/b>",this.Name,parameters)}else this.m_signature=(this.Name||"")+"()";return this.m_signature}},Summary:null,Usage:null,NameSuffix:null,Parameters:null},methods:{GetSignatureWithBoldParameter:function(i){var $t,$t1,signature,boldElement,parameters,parameters1;return this.Parameters!=null&&System.Linq.Enumerable.from(this.Parameters,Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).any()?System.Linq.Enumerable.from(this.Parameters,Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).count()>i?(boldElement=System.Array.init([System.String.format("<b>{0}<\/b>",[($t=($t1=Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,System.Linq.Enumerable.from(this.Parameters,$t1).ToArray($t1)))[System.Array.index(i,$t)].PlainSignature])],System.String),parameters=Bridge.toArray(System.Linq.Enumerable.from(this.Parameters,Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).take(i).select($asm.$.Kusto.Data.IntelliSense.IntelliSenseCommandTip.f2).concat(boldElement).concat(System.Linq.Enumerable.from(this.Parameters,Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).skip(i+1|0).select($asm.$.Kusto.Data.IntelliSense.IntelliSenseCommandTip.f2))).join(", "),signature=System.String.format('<font color="blue"><b>{0}<\/font>(<\/b>{1}<b>)<\/b>',this.Name,parameters)):(parameters1=Bridge.toArray(System.Linq.Enumerable.from(this.Parameters,Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).select($asm.$.Kusto.Data.IntelliSense.IntelliSenseCommandTip.f2)).join(", "),signature=System.String.format('<font color="blue"><b>{0}<\/font>(<\/b>{1}<b>)<\/b>',this.Name,parameters1)):signature=this.NameSuffix!=null?(this.Name||"")+(this.NameSuffix||""):(this.Name||"")+"()",signature},Clone:function(){var $t,parameters=this.Parameters!=null&&System.Linq.Enumerable.from(this.Parameters,Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).any()?System.Linq.Enumerable.from(this.Parameters,Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).select($asm.$.Kusto.Data.IntelliSense.IntelliSenseCommandTip.f3).ToArray(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter):null;return $t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=this.Name,$t.NameSuffix=this.NameSuffix,$t.Parameters=parameters,$t.Summary=this.Summary,$t.Usage=this.Usage,$t}}});Bridge.ns("Kusto.Data.IntelliSense.IntelliSenseCommandTip",$asm.$);Bridge.apply($asm.$.Kusto.Data.IntelliSense.IntelliSenseCommandTip,{f1:function(p){return p.Singature},f2:function(p){return p.PlainSignature},f3:function(p){return p.Clone()}});Bridge.define("Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter",{props:{Name:null,Description:null,DataType:null,Optional:!1,IsArgsArray:!1,Singature:{get:function(){return this.IsArgsArray?"...":System.String.format("<b>{0}{1}<\/b> <i>{2}<\/i>",this.Optional?"[?] ":"",this.DataType,this.Name)}},PlainSignature:{get:function(){return this.IsArgsArray?"...":System.String.format('{0}<font color="blue">{1}<\/font> <i>{2}<\/i>',this.Optional?"[?] ":"",this.DataType,this.Name)}}},methods:{Clone:function(){var $t;return $t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=this.DataType,$t.Description=this.Description,$t.IsArgsArray=this.IsArgsArray,$t.Name=this.Name,$t.Optional=this.Optional,$t}}});Bridge.define("Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.PrivateTracer",{$kind:"nested class",statics:{fields:{Tracer:null},ctors:{init:function(){this.Tracer=new Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.PrivateTracer}}},methods:{TraceVerbose:function(format,list){list===void 0&&(list=[])}}});Bridge.define("Kusto.Data.IntelliSense.KustoCommandContext",{inherits:function(){return[System.IEquatable$1(Kusto.Data.IntelliSense.KustoCommandContext)]},statics:{fields:{Empty:null},ctors:{init:function(){this.Empty=new Kusto.Data.IntelliSense.KustoCommandContext("")}}},props:{Context:null,Operation:0},alias:["equalsT","System$IEquatable$1$Kusto$Data$IntelliSense$KustoCommandContext$equalsT"],ctors:{ctor:function(context,operation){operation===void 0&&(operation=0);this.$initialize();this.Context=context;this.Operation=operation}},methods:{equalsT:function(other){return other!=null&&System.String.equals(other.Context,this.Context)&&other.Operation===this.Operation},getHashCode:function(){return Bridge.getHashCode(this.Context)^Bridge.getHashCode(this.Operation)},Flatten:function(){return System.Linq.Enumerable.from(System.String.split(this.Context,System.Array.init([44],System.Char).map(function(i){return String.fromCharCode(i)}),null,1),System.String).select(Bridge.fn.bind(this,$asm.$.Kusto.Data.IntelliSense.KustoCommandContext.f1)).ToArray(Kusto.Data.IntelliSense.KustoCommandContext)},IsEmpty:function(){return System.String.isNullOrEmpty(this.Context)}}});Bridge.ns("Kusto.Data.IntelliSense.KustoCommandContext",$asm.$);Bridge.apply($asm.$.Kusto.Data.IntelliSense.KustoCommandContext,{f1:function(t){return new Kusto.Data.IntelliSense.KustoCommandContext(t.trim(),this.Operation)}});Bridge.define("Kusto.Data.IntelliSense.KustoIntelliSenseAccountEntity",{props:{Name:null}});Bridge.define("Kusto.Data.IntelliSense.KustoIntelliSenseClusterEntity",{props:{ConnectionString:null,Alias:null,Databases:null,Plugins:null},methods:{Clone:function(){var $t,$t1,$t2;return $t=new Kusto.Data.IntelliSense.KustoIntelliSenseClusterEntity,$t.ConnectionString=this.ConnectionString,$t.Alias=this.Alias,$t.Databases=($t1=this.Databases)!=null?System.Linq.Enumerable.from($t1,Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity).select($asm.$.Kusto.Data.IntelliSense.KustoIntelliSenseClusterEntity.f1).ToArray(Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity):null,$t.Plugins=($t2=this.Plugins)!=null?System.Linq.Enumerable.from($t2,Kusto.Data.IntelliSense.KustoIntelliSensePluginEntity).select($asm.$.Kusto.Data.IntelliSense.KustoIntelliSenseClusterEntity.f2).ToArray(Kusto.Data.IntelliSense.KustoIntelliSensePluginEntity):null,$t}}});Bridge.ns("Kusto.Data.IntelliSense.KustoIntelliSenseClusterEntity",$asm.$);Bridge.apply($asm.$.Kusto.Data.IntelliSense.KustoIntelliSenseClusterEntity,{f1:function(db){return db.Clone()},f2:function(p){return p.Clone()}});Bridge.define("Kusto.Data.IntelliSense.KustoIntelliSenseColumnEntity",{props:{Name:null,TypeCode:0},methods:{Clone:function(){var $t;return $t=new Kusto.Data.IntelliSense.KustoIntelliSenseColumnEntity,$t.Name=this.Name,$t.TypeCode=this.TypeCode,$t}}});Bridge.define("Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity",{props:{Name:null,Alias:null,Tables:null,Functions:null,IsInitialized:!1},methods:{Clone:function(){var $t,$t1,$t2;return $t=new Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity,$t.Name=this.Name,$t.Alias=this.Alias,$t.Tables=($t1=this.Tables)!=null?System.Linq.Enumerable.from($t1,Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity).select($asm.$.Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity.f1).ToArray(Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity):null,$t.Functions=($t2=this.Functions)!=null?System.Linq.Enumerable.from($t2,Kusto.Data.IntelliSense.KustoIntelliSenseFunctionEntity).select($asm.$.Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity.f2).ToArray(Kusto.Data.IntelliSense.KustoIntelliSenseFunctionEntity):null,$t.IsInitialized=this.IsInitialized,$t}}});Bridge.ns("Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity",$asm.$);Bridge.apply($asm.$.Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity,{f1:function(t){return t.Clone()},f2:function(f){return f.Clone()}});Bridge.define("Kusto.Data.IntelliSense.KustoIntelliSenseFunctionEntity",{props:{Name:null,CallName:null,Expression:null},methods:{Clone:function(){var $t;return $t=new Kusto.Data.IntelliSense.KustoIntelliSenseFunctionEntity,$t.Name=this.Name,$t.CallName=this.CallName,$t.Expression=this.Expression,$t}}});Bridge.define("Kusto.Data.IntelliSense.KustoIntelliSensePluginEntity",{props:{Name:null},methods:{Clone:function(){var $t;return $t=new Kusto.Data.IntelliSense.KustoIntelliSensePluginEntity,$t.Name=this.Name,$t}}});Bridge.define("Kusto.Data.IntelliSense.KustoIntelliSenseQuerySchema",{props:{Cluster:null,Database:null},ctors:{ctor:function(cluster,database){this.$initialize();this.Cluster=cluster;this.Database=database}},methods:{Clone:function(){return new Kusto.Data.IntelliSense.KustoIntelliSenseQuerySchema(this.Cluster!=null?this.Cluster.Clone():null,this.Database!=null?this.Database.Clone():null)}}});Bridge.define("Kusto.Data.IntelliSense.KustoIntelliSenseServiceEntity",{props:{Name:null}});Bridge.define("Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity",{props:{Name:null,IsInvisible:!1,Columns:null},methods:{Clone:function(){var $t,$t1;return $t=new Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity,$t.Name=this.Name,$t.Columns=($t1=this.Columns)!=null?System.Linq.Enumerable.from($t1,Kusto.Data.IntelliSense.KustoIntelliSenseColumnEntity).select($asm.$.Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity.f1).ToArray(Kusto.Data.IntelliSense.KustoIntelliSenseColumnEntity):null,$t.IsInvisible=this.IsInvisible,$t}}});Bridge.ns("Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity",$asm.$);Bridge.apply($asm.$.Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity,{f1:function(c){return c.Clone()}});Bridge.define("Kusto.Data.IntelliSense.OptionKind",{$kind:"enum",statics:{fields:{None:0,Operator:1,Command:2,Service:3,Policy:4,Database:5,Table:6,DataType:7,Literal:8,Parameter:9,IngestionMapping:10,ExpressionFunction:11,Option:12,OptionKind:13,OptionRender:14,Column:15,ColumnString:16,ColumnNumeric:17,ColumnDateTime:18,ColumnTimespan:19,FunctionLocal:20,FunctionServerSide:21,FunctionAggregation:22,FunctionFilter:23,FunctionScalar:24,ClientDirective:25,MaterializedView:26}}});Bridge.define("Kusto.Data.IntelliSense.ParseMode",{$kind:"enum",statics:{fields:{CommandTokensOnly:0,TokenizeAllText:1}}});Bridge.define("Kusto.Data.IntelliSense.RuleKind",{$kind:"enum",statics:{fields:{None:0,YieldColumnNamesForFilter:1,YieldColumnNamesForProject:2,YieldColumnNamesForProjectAway:3,YieldColumnNamesForProjectRename:4,YieldColumnNamesForJoin:5,YieldKindFlavorsForJoin:6,YieldKindFlavorsForReduceBy:7,YieldColumnNamesForOrdering:8,YieldColumnNamesForTwoParamFunctions:9,YieldColumnNamesForThreeParamFunctions:10,YieldColumnNamesForManyParamFunctions:11,YieldColumnNamesAndFunctionsForExtend:12,YieldColumnNamesForMakeSeries:13,YieldTableNames:14,YieldTableNamesForFindIn:15,YieldRenderOptions:16,YieldRenderKindKeywordOption:17,YieldRenderKindOptions:18,YieldOperatorsAfterPipe:19,YieldStringComparisonOptions:20,YieldNumericComparisonOptions:21,YieldDateTimeOperatorsOptions:22,YieldSummarizeOperatorOptions:23,YieldAscendingDescendingOptions:24,YieldNumericScalarOptions:25,YieldByKeywordOptions:26,YieldWithKeywordOptions:27,YieldStarOption:28,YieldParseTypesKeywordOptions:29,YieldColumnNamesForParse:30,YieldColumnNamesForDiffPatternsPluginSplitParameter:31,YieldParseKeywordKindsOptions:32,YieldRangeFromOptions:33,YieldRangeFromToOptions:34,YieldRangeFromToStepOptions:35,YieldQueryParameters:36,YieldEvaluateOperatorOptions:37,YieldPostJoinOptions:38,YieldPostFindInOptions:39,YieldPostFindOptions:40,YieldTopNestedOfKeywordOption:41,YieldTopNestedOthersOption:42,YieldTopNestedKeywordOption:43,YieldTopHittersKeywordOption:44,YieldTimespanOptions:45,YieldDatabaseNamesOptions:46,YieldClusterNamesOptions:47,YieldDatabaseFunctionOption:48,YieldNullsFirstNullsLastOptions:49,YieldTableNamesForRemoteQueryOptions:50,YieldColumnNamesForRender:51,YieldColumnNamesForFilterInFind:52,YieldColumnNamesForProjectInFind:53,YieldEndOrContinueFindInOptions:54,YieldPostFindInListOptions:55,YieldFindProjectSmartOptions:56,YieldMakeSeriesOperatorOptions:57,YieldMakeSeriesOperatorForDefaultOrOn:58,YieldMakeSeriesOperatorForOn:59,YieldMakeSeriesOperatorForRange:60,YieldMakeSeriesOperatorForBy:61,YieldPostSearchOptions:62,YieldPostSearchKindOptions:63,YieldSearchKindOptions:64,YieldInsideSearchOptions:65,YieldClientDirectivesOptions:66,YieldClientDirective_ConnectOptions:67,Last:68}}});Bridge.define("Kusto.Data.Net.Common.ExtendedKustoDataStreamFormat",{statics:{methods:{FastToString:function(that){switch(that){case Kusto.Data.Net.Common.KustoDataStreamFormat.KustoJsonDataStream:return"KustoJsonDataStream";case Kusto.Data.Net.Common.KustoDataStreamFormat.KustoDataStream:return"KustoDataStream";default:break}return System.String.format("[unknown: {0}]",[Bridge.box(that,System.Int32)])},FastIsDefined$1:function(value){var dummy={v:new Kusto.Data.Net.Common.KustoDataStreamFormat};return Kusto.Data.Net.Common.ExtendedKustoDataStreamFormat.FastTryParse(value,dummy,!1,!0)},FastIsDefined:function(value){switch(value){case Kusto.Data.Net.Common.KustoDataStreamFormat.KustoJsonDataStream:return!0;case Kusto.Data.Net.Common.KustoDataStreamFormat.KustoDataStream:return!0;default:return!1}},FastHasFlag$1:function(that,flag){return(that&flag)===flag},FastHasFlag:function(that,flag){return(that&flag)===flag},FastParse:function(value,ignoreCase){ignoreCase===void 0&&(ignoreCase=!1);var ret={v:new Kusto.Data.Net.Common.KustoDataStreamFormat};if(Kusto.Data.Net.Common.ExtendedKustoDataStreamFormat.FastTryParse(value,ret,ignoreCase))return ret.v;throw new System.Exception("Invalid enum value: "+(value||""));},FastTryParse:function(value,ret,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);switch(value){case"0":case"KustoJsonDataStream":return ret.v=Kusto.Data.Net.Common.KustoDataStreamFormat.KustoJsonDataStream,!0;case"1":case"KustoDataStream":return ret.v=Kusto.Data.Net.Common.KustoDataStreamFormat.KustoDataStream,!0;default:break}if(ignoreCase&&!System.String.isNullOrEmpty(value))switch(value.toLowerCase()){case"kustojsondatastream":return ret.v=Kusto.Data.Net.Common.KustoDataStreamFormat.KustoJsonDataStream,!0;case"kustodatastream":return ret.v=Kusto.Data.Net.Common.KustoDataStreamFormat.KustoDataStream,!0;default:break}if(!ignoreInts){var reti={v:0};if(System.Int32.tryParse(value,reti))return ret.v=reti.v,!0}return ret.v=0,!1},FastGetDescription:function(that){switch(that){case Kusto.Data.Net.Common.KustoDataStreamFormat.KustoJsonDataStream:return"JSON representation of the Kusto Data Stream (stable).";case Kusto.Data.Net.Common.KustoDataStreamFormat.KustoDataStream:return"Binary data stream emitted by the Kusto engine. For internal use only (may change with no notice).";default:return null}}}}});Bridge.define("Kusto.Data.Net.Common.ExtendedRemoteServiceType",{statics:{methods:{FastToString:function(that){switch(that){case Kusto.Data.Net.Common.RemoteServiceType.Admin:return"Admin";case Kusto.Data.Net.Common.RemoteServiceType.Query:return"Query";case Kusto.Data.Net.Common.RemoteServiceType.UIRedirect:return"UIRedirect";case Kusto.Data.Net.Common.RemoteServiceType.DataManagement:return"DataManagement";case Kusto.Data.Net.Common.RemoteServiceType.ClusterManagement:return"ClusterManagement";case Kusto.Data.Net.Common.RemoteServiceType.Bridge:return"Bridge";case Kusto.Data.Net.Common.RemoteServiceType.Ping:return"Ping";case Kusto.Data.Net.Common.RemoteServiceType.CustomType:return"CustomType";case Kusto.Data.Net.Common.RemoteServiceType.StreamIngest:return"StreamIngest";case Kusto.Data.Net.Common.RemoteServiceType.PassiveLogin:return"PassiveLogin";case Kusto.Data.Net.Common.RemoteServiceType.ArmResourceProvider:return"ArmResourceProvider";case Kusto.Data.Net.Common.RemoteServiceType.AuthMetadata:return"AuthMetadata";case Kusto.Data.Net.Common.RemoteServiceType.Flighting:return"Flighting";case Kusto.Data.Net.Common.RemoteServiceType.HealthSuite:return"HealthSuite";case Kusto.Data.Net.Common.RemoteServiceType.Gaia:return"Gaia";case Kusto.Data.Net.Common.RemoteServiceType.Proxy:return"Proxy";case Kusto.Data.Net.Common.RemoteServiceType.AllControlCommands:return"AllControlCommands";default:break}var allFlags=Kusto.Data.Net.Common.ExtendedRemoteServiceType.FastGetFlags(that);return Bridge.toArray(allFlags).join("|")},FastIsDefined$1:function(value){var dummy={v:new Kusto.Data.Net.Common.RemoteServiceType};return Kusto.Data.Net.Common.ExtendedRemoteServiceType.FastTryParse(value,dummy,!1,!0)},FastIsDefined:function(value){switch(value){case Kusto.Data.Net.Common.RemoteServiceType.Admin:return!0;case Kusto.Data.Net.Common.RemoteServiceType.Query:return!0;case Kusto.Data.Net.Common.RemoteServiceType.UIRedirect:return!0;case Kusto.Data.Net.Common.RemoteServiceType.DataManagement:return!0;case Kusto.Data.Net.Common.RemoteServiceType.ClusterManagement:return!0;case Kusto.Data.Net.Common.RemoteServiceType.Bridge:return!0;case Kusto.Data.Net.Common.RemoteServiceType.Ping:return!0;case Kusto.Data.Net.Common.RemoteServiceType.CustomType:return!0;case Kusto.Data.Net.Common.RemoteServiceType.StreamIngest:return!0;case Kusto.Data.Net.Common.RemoteServiceType.PassiveLogin:return!0;case Kusto.Data.Net.Common.RemoteServiceType.ArmResourceProvider:return!0;case Kusto.Data.Net.Common.RemoteServiceType.AuthMetadata:return!0;case Kusto.Data.Net.Common.RemoteServiceType.Flighting:return!0;case Kusto.Data.Net.Common.RemoteServiceType.HealthSuite:return!0;case Kusto.Data.Net.Common.RemoteServiceType.Gaia:return!0;case Kusto.Data.Net.Common.RemoteServiceType.Proxy:return!0;case Kusto.Data.Net.Common.RemoteServiceType.AllControlCommands:return!0;default:return!1}},FastHasFlag$1:function(that,flag){return(that&flag)===flag},FastHasFlag:function(that,flag){return(that&flag)===flag},FastHasAllFlags:function(that,flags){return(that&flags)===flags},FastHasAnyFlags:function(that,flags){return(that&flags)!=0},FastCountIntersectionsWith:function(that,flags){var intersections=that&flags;return Kusto.Cloud.Platform.Utils.BitTwiddling.CountBits(intersections)},FastParse:function(value,ignoreCase){ignoreCase===void 0&&(ignoreCase=!1);var ret={v:new Kusto.Data.Net.Common.RemoteServiceType};if(Kusto.Data.Net.Common.ExtendedRemoteServiceType.FastTryParse(value,ret,ignoreCase))return ret.v;throw new System.Exception("Invalid enum value: "+(value||""));},FastTryParse:function(value,ret,ignoreCase,ignoreInts){var $t,reti,parts,part,partResult;ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);switch(value){case"1":case"Admin":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.Admin,!0;case"2":case"Query":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.Query,!0;case"4":case"UIRedirect":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.UIRedirect,!0;case"8":case"DataManagement":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.DataManagement,!0;case"16":case"ClusterManagement":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.ClusterManagement,!0;case"32":case"Bridge":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.Bridge,!0;case"64":case"Ping":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.Ping,!0;case"1024":case"CustomType":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.CustomType,!0;case"2048":case"StreamIngest":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.StreamIngest,!0;case"4096":case"PassiveLogin":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.PassiveLogin,!0;case"8192":case"ArmResourceProvider":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.ArmResourceProvider,!0;case"16384":case"AuthMetadata":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.AuthMetadata,!0;case"32768":case"Flighting":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.Flighting,!0;case"65536":case"HealthSuite":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.HealthSuite,!0;case"131072":case"Gaia":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.Gaia,!0;case"262144":case"Proxy":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.Proxy,!0;case"Admin | DataManagement | ClusterManagement | Bridge":case"AllControlCommands":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.AllControlCommands,!0;default:break}if(ignoreCase&&!System.String.isNullOrEmpty(value))switch(value.toLowerCase()){case"admin":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.Admin,!0;case"query":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.Query,!0;case"uiredirect":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.UIRedirect,!0;case"datamanagement":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.DataManagement,!0;case"clustermanagement":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.ClusterManagement,!0;case"bridge":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.Bridge,!0;case"ping":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.Ping,!0;case"customtype":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.CustomType,!0;case"streamingest":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.StreamIngest,!0;case"passivelogin":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.PassiveLogin,!0;case"armresourceprovider":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.ArmResourceProvider,!0;case"authmetadata":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.AuthMetadata,!0;case"flighting":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.Flighting,!0;case"healthsuite":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.HealthSuite,!0;case"gaia":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.Gaia,!0;case"proxy":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.Proxy,!0;case"allcontrolcommands":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.AllControlCommands,!0;default:break}if(!ignoreInts&&(reti={v:0},System.Int32.tryParse(value,reti)))return ret.v=reti.v,!0;if(ret.v=0,!System.String.isNullOrEmpty(value)&&System.String.contains(value,"|")){parts=System.String.split(value,System.Array.init([124],System.Char).map(function(i){return String.fromCharCode(i)}),null,1);$t=Bridge.getEnumerator(parts);try{while($t.moveNext())if(part=$t.Current,partResult={v:new Kusto.Data.Net.Common.RemoteServiceType},Kusto.Data.Net.Common.ExtendedRemoteServiceType.FastTryParse(part,partResult,ignoreCase,ignoreInts))ret.v|=partResult.v;else return ret.v=0,!1}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return!0}return!1},FastGetDescription:function(that){switch(that){case Kusto.Data.Net.Common.RemoteServiceType.Admin:return"Controls Kusto Engine.";case Kusto.Data.Net.Common.RemoteServiceType.Query:return"Queries Kusto Engine.";case Kusto.Data.Net.Common.RemoteServiceType.UIRedirect:return"Redirects to Kusto.Explorer or similar client.";case Kusto.Data.Net.Common.RemoteServiceType.DataManagement:return"Controls Kusto DM.";case Kusto.Data.Net.Common.RemoteServiceType.ClusterManagement:return"Controls Kusto CM.";case Kusto.Data.Net.Common.RemoteServiceType.Bridge:return"Controls Kusto Bridge to Geneva/Aria pipelines.";case Kusto.Data.Net.Common.RemoteServiceType.Ping:return"Load-balancer ping responder.";case Kusto.Data.Net.Common.RemoteServiceType.CustomType:return"Custom.";case Kusto.Data.Net.Common.RemoteServiceType.StreamIngest:return"Streaming ingestion into Kusto Engine.";case Kusto.Data.Net.Common.RemoteServiceType.PassiveLogin:return"Manages passive authentication flows.";case Kusto.Data.Net.Common.RemoteServiceType.ArmResourceProvider:return"Controls Kusto RP.";case Kusto.Data.Net.Common.RemoteServiceType.AuthMetadata:return"Authentication metadata information.";case Kusto.Data.Net.Common.RemoteServiceType.Flighting:return"Controls Kusto Flighting.";case Kusto.Data.Net.Common.RemoteServiceType.HealthSuite:return"Controls Kusto HealthSuite.";case Kusto.Data.Net.Common.RemoteServiceType.Gaia:return"Controls Kusto Gaia.";case Kusto.Data.Net.Common.RemoteServiceType.Proxy:return"Proxy to other services/endpoints.";case Kusto.Data.Net.Common.RemoteServiceType.AllControlCommands:return"A bitwise OR of all service types that provide control commands.";default:return null}},FastGetFlags:function(that){return new(Bridge.GeneratorEnumerable$1(Kusto.Data.Net.Common.RemoteServiceType))(Bridge.fn.bind(this,function(that){var $step=0,$jumpFromFinally,$returnValue,$async_e,$enumerator=new(Bridge.GeneratorEnumerator$1(Kusto.Data.Net.Common.RemoteServiceType))(Bridge.fn.bind(this,function(){try{for(;;)switch($step){case 0:if((that&Kusto.Data.Net.Common.RemoteServiceType.Admin)===Kusto.Data.Net.Common.RemoteServiceType.Admin){$step=1;continue}$step=3;continue;case 1:return $enumerator.current=Kusto.Data.Net.Common.RemoteServiceType.Admin,$step=2,!0;case 2:$step=3;continue;case 3:if((that&Kusto.Data.Net.Common.RemoteServiceType.Query)===Kusto.Data.Net.Common.RemoteServiceType.Query){$step=4;continue}$step=6;continue;case 4:return $enumerator.current=Kusto.Data.Net.Common.RemoteServiceType.Query,$step=5,!0;case 5:$step=6;continue;case 6:if((that&Kusto.Data.Net.Common.RemoteServiceType.UIRedirect)===Kusto.Data.Net.Common.RemoteServiceType.UIRedirect){$step=7;continue}$step=9;continue;case 7:return $enumerator.current=Kusto.Data.Net.Common.RemoteServiceType.UIRedirect,$step=8,!0;case 8:$step=9;continue;case 9:if((that&Kusto.Data.Net.Common.RemoteServiceType.DataManagement)===Kusto.Data.Net.Common.RemoteServiceType.DataManagement){$step=10;continue}$step=12;continue;case 10:return $enumerator.current=Kusto.Data.Net.Common.RemoteServiceType.DataManagement,$step=11,!0;case 11:$step=12;continue;case 12:if((that&Kusto.Data.Net.Common.RemoteServiceType.ClusterManagement)===Kusto.Data.Net.Common.RemoteServiceType.ClusterManagement){$step=13;continue}$step=15;continue;case 13:return $enumerator.current=Kusto.Data.Net.Common.RemoteServiceType.ClusterManagement,$step=14,!0;case 14:$step=15;continue;case 15:if((that&Kusto.Data.Net.Common.RemoteServiceType.Bridge)===Kusto.Data.Net.Common.RemoteServiceType.Bridge){$step=16;continue}$step=18;continue;case 16:return $enumerator.current=Kusto.Data.Net.Common.RemoteServiceType.Bridge,$step=17,!0;case 17:$step=18;continue;case 18:if((that&Kusto.Data.Net.Common.RemoteServiceType.Ping)===Kusto.Data.Net.Common.RemoteServiceType.Ping){$step=19;continue}$step=21;continue;case 19:return $enumerator.current=Kusto.Data.Net.Common.RemoteServiceType.Ping,$step=20,!0;case 20:$step=21;continue;case 21:if((that&Kusto.Data.Net.Common.RemoteServiceType.CustomType)===Kusto.Data.Net.Common.RemoteServiceType.CustomType){$step=22;continue}$step=24;continue;case 22:return $enumerator.current=Kusto.Data.Net.Common.RemoteServiceType.CustomType,$step=23,!0;case 23:$step=24;continue;case 24:if((that&Kusto.Data.Net.Common.RemoteServiceType.StreamIngest)===Kusto.Data.Net.Common.RemoteServiceType.StreamIngest){$step=25;continue}$step=27;continue;case 25:return $enumerator.current=Kusto.Data.Net.Common.RemoteServiceType.StreamIngest,$step=26,!0;case 26:$step=27;continue;case 27:if((that&Kusto.Data.Net.Common.RemoteServiceType.PassiveLogin)===Kusto.Data.Net.Common.RemoteServiceType.PassiveLogin){$step=28;continue}$step=30;continue;case 28:return $enumerator.current=Kusto.Data.Net.Common.RemoteServiceType.PassiveLogin,$step=29,!0;case 29:$step=30;continue;case 30:if((that&Kusto.Data.Net.Common.RemoteServiceType.ArmResourceProvider)===Kusto.Data.Net.Common.RemoteServiceType.ArmResourceProvider){$step=31;continue}$step=33;continue;case 31:return $enumerator.current=Kusto.Data.Net.Common.RemoteServiceType.ArmResourceProvider,$step=32,!0;case 32:$step=33;continue;case 33:if((that&Kusto.Data.Net.Common.RemoteServiceType.AuthMetadata)===Kusto.Data.Net.Common.RemoteServiceType.AuthMetadata){$step=34;continue}$step=36;continue;case 34:return $enumerator.current=Kusto.Data.Net.Common.RemoteServiceType.AuthMetadata,$step=35,!0;case 35:$step=36;continue;case 36:if((that&Kusto.Data.Net.Common.RemoteServiceType.Flighting)===Kusto.Data.Net.Common.RemoteServiceType.Flighting){$step=37;continue}$step=39;continue;case 37:return $enumerator.current=Kusto.Data.Net.Common.RemoteServiceType.Flighting,$step=38,!0;case 38:$step=39;continue;case 39:if((that&Kusto.Data.Net.Common.RemoteServiceType.HealthSuite)===Kusto.Data.Net.Common.RemoteServiceType.HealthSuite){$step=40;continue}$step=42;continue;case 40:return $enumerator.current=Kusto.Data.Net.Common.RemoteServiceType.HealthSuite,$step=41,!0;case 41:$step=42;continue;case 42:if((that&Kusto.Data.Net.Common.RemoteServiceType.Gaia)===Kusto.Data.Net.Common.RemoteServiceType.Gaia){$step=43;continue}$step=45;continue;case 43:return $enumerator.current=Kusto.Data.Net.Common.RemoteServiceType.Gaia,$step=44,!0;case 44:$step=45;continue;case 45:if((that&Kusto.Data.Net.Common.RemoteServiceType.Proxy)===Kusto.Data.Net.Common.RemoteServiceType.Proxy){$step=46;continue}$step=48;continue;case 46:return $enumerator.current=Kusto.Data.Net.Common.RemoteServiceType.Proxy,$step=47,!0;case 47:$step=48;continue;case 48:default:return!1}}catch($async_e1){$async_e=System.Exception.create($async_e1);throw $async_e;}}));return $enumerator},arguments))}}}});Bridge.define("Kusto.Data.Net.Common.KustoDataStreamFormat",{$kind:"enum",statics:{fields:{KustoJsonDataStream:0,KustoDataStream:1}}});Bridge.define("Kusto.Data.Net.Common.RemoteServiceType",{$kind:"enum",statics:{fields:{Admin:1,Query:2,UIRedirect:4,DataManagement:8,ClusterManagement:16,Bridge:32,Ping:64,CustomType:1024,StreamIngest:2048,PassiveLogin:4096,ArmResourceProvider:8192,AuthMetadata:16384,Flighting:32768,HealthSuite:65536,Gaia:131072,Proxy:262144,AllControlCommands:57}},$flags:!0});Bridge.define("Kusto.JavaScript.Client.App",{statics:{methods:{Test:function(){var intellisenseTests,parserTests;Kusto.UT.IntelliSenseRulesTests.InitializeTestClass();intellisenseTests=new Kusto.UT.IntelliSenseRulesTests;intellisenseTests.IntelliSenseCommandEntitiesTest();intellisenseTests.IntelliSenseCommandEntitiesForTablesTest();intellisenseTests.IntelliSenseCommandEntitiesUsingFunctionsTest();intellisenseTests.IntelliSenseCommandEntities_FindTest();intellisenseTests.IntelliSenseCommandEntities_SearchTest();intellisenseTests.IntelliSenseExtendTest();intellisenseTests.IntelliSenseFilterTest();intellisenseTests.IntelliSenseGetCommandContextTest();intellisenseTests.IntelliSenseJoinTest();intellisenseTests.IntelliSenseLimitTest();intellisenseTests.IntelliSenseParseOperator();intellisenseTests.IntelliSenseProjectAwayTest();intellisenseTests.IntelliSenseProjectRenameTest();intellisenseTests.IntelliSenseProjectTest();intellisenseTests.IntelliSenseQueryParametersTest();intellisenseTests.IntelliSenseRangeTest();intellisenseTests.IntelliSenseReduceTest();intellisenseTests.IntelliSenseRenderTest();intellisenseTests.IntelliSenseSummarizeTest();intellisenseTests.IntelliSenseTopTest();intellisenseTests.IntelliSenseTopNestedTest();intellisenseTests.IntelliSenseToScalarTest();intellisenseTests.IntelliSenseTimeKeywordsTest();intellisenseTests.IntelliSenseEvaluateTest();intellisenseTests.IntelliSenseClusterTest();intellisenseTests.IntelliSenseDatabaseTest();intellisenseTests.IntelliSenseFindTest();intellisenseTests.IntelliSenseSearchTest();intellisenseTests.IntelliSenseSampleTest();intellisenseTests.IntelliSenseSampleDistinctTest();intellisenseTests.IntelliSenseMakeSeriesTest();parserTests=new Kusto.UT.IntelliSenseCslCommandParserTests;parserTests.InitializeTestClass();parserTests.TestCslCommandParserEntities();Bridge.global.alert("Success")}}}});Bridge.define("Kusto.UT.AssertStub",{methods:{AreEqual:function(expected,actual){var $t,$t1;if(!Bridge.referenceEquals(expected,actual))throw new System.Exception(System.String.format("Values do not match: expected='{0}', actual='{1}'",($t=expected,$t!=null?$t:"null"),($t1=actual,$t1!=null?$t1:"null")));},AreEqual$1:function(expected,actual,errorMessage){var $t,$t1;if(!Bridge.referenceEquals(expected,actual))throw new System.Exception(System.String.format("Values do not match: expected='{0}', actual='{1}'\n{2}",($t=expected,$t!=null?$t:"null"),($t1=actual,$t1!=null?$t1:"null"),errorMessage));},Fail:function(message){throw new System.Exception(message);},IsTrue:function(condition,message){if(!condition)throw new System.Exception(message);}}});Bridge.define("Kusto.UT.IntelliSenseCslCommandParserTests",{fields:{Assert:null,m_intelliSenseProvider:null},ctors:{init:function(){this.Assert=new Kusto.UT.AssertStub}},methods:{InitializeTestClass:function(){var queryParameters=new(System.Collections.Generic.List$1(System.String).ctor),availableClusters=new(System.Collections.Generic.List$1(System.String).ctor),clusterSchema=Kusto.UT.IntelliSenseRulesTests.GenerateKustoEntities(queryParameters,availableClusters),schema=new Kusto.Data.IntelliSense.KustoIntelliSenseQuerySchema(clusterSchema,System.Linq.Enumerable.from(clusterSchema.Databases,Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity).first());this.m_intelliSenseProvider=new Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.$ctor1(clusterSchema,schema,queryParameters,availableClusters,void 0,!0,!0)},TestClsCommandsPerttifier:function(){var $t,queriesAndResults=System.Array.init([{Item1:'let ErrorCounts = (message:string) {\r\nErrorCountsByBin(message, 1d)\r\n};\r\nErrorCounts("Can not perform requested operation on nested resource. Parent resource") | extend error = "parent not found"',Item2:'let ErrorCounts = (message:string)\r\n{\r\n    ErrorCountsByBin(message, 1d)\r\n};\r\nErrorCounts("Can not perform requested operation on nested resource. Parent resource")\r\n| extend error = "parent not found"'},{Item1:"Table\r\n//| project ProjectKind, UserId, ProjectType\r\n//| join (activeTable) on UserId\r\n//| summarize dcount(UserId) by ProjectType\r\n//| sort by dcount_UserId asc\r\n| count",Item2:"Table\r\n//| project ProjectKind, UserId, ProjectType\r\n//| join (activeTable) on UserId\r\n//| summarize dcount(UserId) by ProjectType\r\n//| sort by dcount_UserId asc\r\n| count"},{Item1:"Table\r\n| join (Table) on Key",Item2:"Table\r\n| join\r\n(\r\n    Table\r\n)\r\non Key"},{Item1:'PerRequestTable | where MSODS contains "}" | take 1',Item2:'PerRequestTable\r\n| where MSODS contains "}"\r\n| take 1'},{Item1:"let variable=1;Table | count",Item2:"let variable=1;\r\nTable\r\n| count"},{Item1:"// comment\r\nKustoLogs | where Timestamp > ago(1d) and EventText contains \"[0]Kusto.DataNode.Exceptions.SemanticErrorException: Semantic error: Query 'Temp_MonRgLoad | project TIMESTAMP | consume' has the following semantic error: \" | summarize cnt() by Source",Item2:"// comment\r\nKustoLogs\r\n| where Timestamp > ago(1d) and EventText contains \"[0]Kusto.DataNode.Exceptions.SemanticErrorException: Semantic error: Query 'Temp_MonRgLoad | project TIMESTAMP | consume' has the following semantic error: \"\r\n| summarize cnt() by Source"},{Item1:"Table |   join (Table | project x ) on x | count",Item2:"Table\r\n| join\r\n(\r\n    Table\r\n    | project x\r\n)\r\non x\r\n| count"},{Item1:"Table | join kind=inner (Table | project x ) on x | count",Item2:"Table\r\n| join kind=inner\r\n(\r\n    Table\r\n    | project x\r\n)\r\non x\r\n| count"},{Item1:"let foo = (i: long) { range x from 1 to 1 step 1 }; foo()",Item2:"let foo = (i: long)\r\n{\r\n    range x from 1 to 1 step 1\r\n};\r\nfoo()"},{Item1:"let foo = (i: long) {range x from 1 to 1 step 1 | count }; foo()",Item2:"let foo = (i: long)\r\n{\r\n    range x from 1 to 1 step 1\r\n    | count\r\n};\r\nfoo()"},{Item1:'.alter function with (docstring = @\'List of UserIds that are WebSites only\', folder =@\'Filters\') UsersWithWebSiteAppsOnly() { DimAppUsage() | join kind=leftouter DimApplications() on ApplicationId | where RequestSource in ("unknown", "ibiza","ibizaaiextensionauto") | summarize by UserId = UserId }',Item2:'.alter function with (docstring = @\'List of UserIds that are WebSites only\', folder =@\'Filters\') UsersWithWebSiteAppsOnly()\r\n{\r\n    DimAppUsage()\r\n    | join kind=leftouter\r\n        DimApplications()\r\n    on ApplicationId\r\n    | where RequestSource in ("unknown", "ibiza","ibizaaiextensionauto")\r\n    | summarize by UserId = UserId\r\n}'},{Item1:'.alter function with (docstring = @\'List of UserIds that are WebSites only\', folder =@\'Filters\') UsersWithWebSiteAppsOnly()\r\n{\r\n    DimAppUsage()\r\n    | join kind=leftouter DimApplications() on ApplicationId\r\n    | where RequestSource in ("unknown", "ibiza","ibizaaiextensionauto")\r\n    | summarize by UserId = UserId\r\n}',Item2:'.alter function with (docstring = @\'List of UserIds that are WebSites only\', folder =@\'Filters\') UsersWithWebSiteAppsOnly()\r\n{\r\n    DimAppUsage()\r\n    | join kind=leftouter\r\n        DimApplications()\r\n    on ApplicationId\r\n    | where RequestSource in ("unknown", "ibiza","ibizaaiextensionauto")\r\n    | summarize by UserId = UserId\r\n}'},{Item1:"KustoLogs | where Timestamp > ago(6d) | where ClientActivityId=='KE.RunQuery;e0944367-3fd6-4f83-b2e9-ff0724d55053'",Item2:"KustoLogs\r\n| where Timestamp > ago(6d)\r\n| where ClientActivityId=='KE.RunQuery;e0944367-3fd6-4f83-b2e9-ff0724d55053'"},{Item1:"KustoLogs | make-series dusers=dcount(RequestSource) default=0 on Timestamp in range(ago(6d), now(), 1d) by userid | where stat(dusers).max>1000",Item2:"KustoLogs\r\n| make-series dusers=dcount(RequestSource) default=0 on Timestamp in range(ago(6d), now(), 1d) by userid\r\n| where stat(dusers).max>1000"},{Item1:"let a = 1;//comment\r\nprint x = a * b * c//one more comment",Item2:"let a = 1;\r\n//comment\r\nprint x = a * b * c\r\n//one more comment"},{Item1:"let a = 1;\r\n//comment\r\nprint x = a * b * c\r\n//one more comment",Item2:"let a = 1;\r\n//comment\r\nprint x = a * b * c\r\n//one more comment"},{Item1:"Table | join kind = leftouter ( Table | join (Table //comment1\r\n)    on $left.i == $right.i//comment2\r\n) on i",Item2:"Table\r\n| join kind = leftouter\r\n(\r\n    Table\r\n    | join\r\n    (\r\n        Table\r\n        //comment1\r\n    )\r\n    on $left.i == $right.i\r\n    //comment2\r\n)\r\non i"},{Item1:"Table | join kind = leftouter ( Table | join Table //comment1\r\non $left.i == $right.i//comment2\r\n) on i",Item2:"Table\r\n| join kind = leftouter\r\n(\r\n    Table\r\n    | join\r\n        Table\r\n        //comment1\r\n    on $left.i == $right.i\r\n    //comment2\r\n)\r\non i"},{Item1:"Table| join\r\n(    Table\r\n    //cmt\r\n    | extend a\r\n)\r\non a",Item2:"Table\r\n| join\r\n(\r\n    Table\r\n    //cmt\r\n    | extend a\r\n)\r\non a"}],System.Tuple$2(System.String,System.String)),testCase,input,actualResult,expectedResult;$t=Bridge.getEnumerator(queriesAndResults);try{while($t.moveNext())testCase=$t.Current,input=testCase.Item1,input=System.String.replaceAll(input,"\n",""),actualResult=Kusto.Data.Common.CslQueryParser.PrettifyQuery(input,""),expectedResult=testCase.Item2,expectedResult=System.String.replaceAll(expectedResult,"\r",""),this.Assert.AreEqual(expectedResult,actualResult)}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}},TestCslCommandParserEntities:function(){var parser=new Kusto.Data.IntelliSense.CslCommandParser;this.ValidateTokens(parser,"Table1 \r\n                | parse Field1 with * Column1:string * Column2:int\r\n                | project",Kusto.Data.IntelliSense.CslCommandToken.Kind.CalculatedColumnToken,System.Array.init(["Column1","Column2"],System.String));this.ValidateTokens(parser,"let s = now();\r\n                Table1 \r\n                | extend x = Field1 \r\n                | project",Kusto.Data.IntelliSense.CslCommandToken.Kind.TableColumnToken,System.Array.init(["Field1"],System.String));this.ValidateTokens(parser,"Table1 \r\n                | extend x = Field1 \r\n                | project",Kusto.Data.IntelliSense.CslCommandToken.Kind.TableColumnToken,System.Array.init(["Field1"],System.String))},ValidateTokens:function(parser,query,kind,expectedTokens){var $t,commands=($t=Kusto.Data.IntelliSense.CslCommand,System.Linq.Enumerable.from(parser.Parse(this.m_intelliSenseProvider,query,Kusto.Data.IntelliSense.ParseMode.TokenizeAllText),$t).toList($t)),columns=System.Linq.Enumerable.from(commands,Kusto.Data.IntelliSense.CslCommand).selectMany($asm.$.Kusto.UT.IntelliSenseCslCommandParserTests.f1).where(function(t){return t.TokenKind===kind}).select($asm.$.Kusto.UT.IntelliSenseCslCommandParserTests.f2).toList(System.String);Kusto.UT.IntelliSenseRulesTests.ValidateEntities(query,expectedTokens,columns)},TestCslCommandParserReuse:function(){var $t,parser=new Kusto.Data.IntelliSense.CslCommandParser,query;$t=Bridge.getEnumerator(System.Array.init(["let s = 1;\r\n                  let r = range x from s to 1 step 1;\r\n                  r | ","Table1 | where Field1 == 'rrr' "],System.String));try{while($t.moveNext())query=$t.Current,this.ValidateParserReuse(parser,query)}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}},ValidateParserReuse:function(parser,query){var $t,tokens=System.Linq.Enumerable.from(parser.Parse(this.m_intelliSenseProvider,query,Kusto.Data.IntelliSense.ParseMode.TokenizeAllText),Kusto.Data.IntelliSense.CslCommand).selectMany($asm.$.Kusto.UT.IntelliSenseCslCommandParserTests.f1).where($asm.$.Kusto.UT.IntelliSenseCslCommandParserTests.f3).ToArray(Kusto.Data.IntelliSense.CslCommandToken),tokens_2=System.Linq.Enumerable.from(parser.Parse(this.m_intelliSenseProvider,(query||"")+" ",Kusto.Data.IntelliSense.ParseMode.TokenizeAllText),Kusto.Data.IntelliSense.CslCommand).selectMany($asm.$.Kusto.UT.IntelliSenseCslCommandParserTests.f1).where($asm.$.Kusto.UT.IntelliSenseCslCommandParserTests.f3).ToArray(Kusto.Data.IntelliSense.CslCommandToken),tokens_21,i,tokens_3;for(this.ComapreParseResultTokens(tokens,($t=Kusto.Data.IntelliSense.CslCommandToken,System.Linq.Enumerable.from(tokens_2,$t).ToArray($t)),0,!1),tokens_21=System.Linq.Enumerable.from(parser.Parse(this.m_intelliSenseProvider,"// comment\n"+(query||""),Kusto.Data.IntelliSense.ParseMode.TokenizeAllText),Kusto.Data.IntelliSense.CslCommand).selectMany($asm.$.Kusto.UT.IntelliSenseCslCommandParserTests.f1).where($asm.$.Kusto.UT.IntelliSenseCslCommandParserTests.f3).ToArray(Kusto.Data.IntelliSense.CslCommandToken),this.Assert.AreEqual(Bridge.box(tokens.length,System.Int32),Bridge.box(tokens_21.length-1|0,System.Int32)),i=0;i<tokens.length;i=i+1|0)i<(tokens.length-1|0)&&(this.Assert.AreEqual(tokens[System.Array.index(i,tokens)].Value,tokens_21[System.Array.index(i+1|0,tokens_21)].Value),this.Assert.AreEqual(Bridge.box(tokens[System.Array.index(i,tokens)].TokenKind,Kusto.Data.IntelliSense.CslCommandToken.Kind,System.Enum.toStringFn(Kusto.Data.IntelliSense.CslCommandToken.Kind)),Bridge.box(tokens_21[System.Array.index(i+1|0,tokens_21)].TokenKind,Kusto.Data.IntelliSense.CslCommandToken.Kind,System.Enum.toStringFn(Kusto.Data.IntelliSense.CslCommandToken.Kind))));tokens_3=System.Linq.Enumerable.from(parser.Parse(this.m_intelliSenseProvider,"// comment \n"+(query||""),Kusto.Data.IntelliSense.ParseMode.TokenizeAllText),Kusto.Data.IntelliSense.CslCommand).selectMany($asm.$.Kusto.UT.IntelliSenseCslCommandParserTests.f1).where($asm.$.Kusto.UT.IntelliSenseCslCommandParserTests.f3).ToArray(Kusto.Data.IntelliSense.CslCommandToken);this.ComapreParseResultTokens(tokens_21,tokens_3,1,!1)},ComapreParseResultTokens:function(tokens,other,startIndex,fullValidation){for(var i=startIndex;i<tokens.length;i=i+1|0)i<(tokens.length-1|0)&&(fullValidation?this.Assert.AreEqual(tokens[System.Array.index(i,tokens)],other[System.Array.index(i,other)]):(this.Assert.AreEqual(tokens[System.Array.index(i,tokens)].Value,other[System.Array.index(i,other)].Value),this.Assert.AreEqual(Bridge.box(tokens[System.Array.index(i,tokens)].TokenKind,Kusto.Data.IntelliSense.CslCommandToken.Kind,System.Enum.toStringFn(Kusto.Data.IntelliSense.CslCommandToken.Kind)),Bridge.box(other[System.Array.index(i,other)].TokenKind,Kusto.Data.IntelliSense.CslCommandToken.Kind,System.Enum.toStringFn(Kusto.Data.IntelliSense.CslCommandToken.Kind)))));this.Assert.AreEqual(Bridge.box(tokens.length,System.Int32),Bridge.box(other.length,System.Int32))},TestCslCommandParserBrackets:function(){var parser=new Kusto.Data.IntelliSense.CslCommandParser;this.ValidateBracketTokens(parser,"Table1 | extend x = floor(t, 1)",System.Array.init(["(t, 1)"],System.String));this.ValidateBracketTokens(parser,"Table1 | extend x = floor(t, bin(1, 1))",System.Array.init(["(t, bin(1, 1))","(1, 1)"],System.String));this.ValidateBracketTokens(parser,"Table1 | extend x = floor(t[1], bin(1, 1))",System.Array.init(["(t[1], bin(1, 1))","(1, 1)","[1]"],System.String));this.ValidateBracketTokens(parser,"Table1 | extend x = floor(t[floor(100, 100)], bin(1, 1))",System.Array.init(["(t[floor(100, 100)], bin(1, 1))","(1, 1)","[floor(100, 100)]","(100, 100)"],System.String));this.ValidateBracketTokens(parser,"Table1 | extend x = { floor(t[1], bin(1, 1)) }",System.Array.init(["(t[1], bin(1, 1))","(1, 1)","[1]","{ floor(t[1], bin(1, 1)) }"],System.String))},ValidateBracketTokens:function(parser,query,expectedTokens){var $t,commands=($t=Kusto.Data.IntelliSense.CslCommand,System.Linq.Enumerable.from(parser.Parse(this.m_intelliSenseProvider,query,Kusto.Data.IntelliSense.ParseMode.TokenizeAllText),$t).toList($t)),columns=System.Linq.Enumerable.from(commands,Kusto.Data.IntelliSense.CslCommand).selectMany($asm.$.Kusto.UT.IntelliSenseCslCommandParserTests.f4).select($asm.$.Kusto.UT.IntelliSenseCslCommandParserTests.f2).toList(System.String);Kusto.UT.IntelliSenseRulesTests.ValidateEntities(query,expectedTokens,columns)},TestCslCommandParserApiKind:function(){var $t,requestsAndExpectedApiKinds=$asm.$.Kusto.UT.IntelliSenseCslCommandParserTests.f5(new(System.Collections.Generic.List$1(System.Tuple$2(System.String,Kusto.Data.IntelliSense.ApiKind)).ctor)),request;$t=Bridge.getEnumerator(requestsAndExpectedApiKinds);try{while($t.moveNext())request=$t.Current,this.Assert.AreEqual(Bridge.box(Kusto.Data.IntelliSense.CslCommandParser.ResolveRequestApiKind(request.Item1),Kusto.Data.IntelliSense.ApiKind,System.Enum.toStringFn(Kusto.Data.IntelliSense.ApiKind)),Bridge.box(request.Item2,Kusto.Data.IntelliSense.ApiKind,System.Enum.toStringFn(Kusto.Data.IntelliSense.ApiKind)))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}}}});Bridge.ns("Kusto.UT.IntelliSenseCslCommandParserTests",$asm.$);Bridge.apply($asm.$.Kusto.UT.IntelliSenseCslCommandParserTests,{f1:function(c){return c.Tokens},f2:function(t){return t.Value},f3:function(t){return t.TokenKind!==Kusto.Data.IntelliSense.CslCommandToken.Kind.UnknownToken},f4:function(c){return c.BracketParts},f5:function(_o1){return _o1.add({Item1:".show version",Item2:Kusto.Data.IntelliSense.ApiKind.AdminSyncCommand}),_o1.add({Item1:".ingest async into table",Item2:Kusto.Data.IntelliSense.ApiKind.AdminAsyncCommand}),_o1.add({Item1:"T",Item2:Kusto.Data.IntelliSense.ApiKind.Query}),_o1.add({Item1:"T async",Item2:Kusto.Data.IntelliSense.ApiKind.Query}),_o1.add({Item1:".long-name-command async",Item2:Kusto.Data.IntelliSense.ApiKind.AdminAsyncCommand}),_o1.add({Item1:".some command async",Item2:Kusto.Data.IntelliSense.ApiKind.AdminSyncCommand}),_o1.add({Item1:".ingest             async into table",Item2:Kusto.Data.IntelliSense.ApiKind.AdminAsyncCommand}),_o1.add({Item1:"//comment\r\n.ingest       \r\nasync into table",Item2:Kusto.Data.IntelliSense.ApiKind.AdminAsyncCommand}),_o1.add({Item1:"//comment\r\n.ingest       \r\n\r\n\r\nasync into table",Item2:Kusto.Data.IntelliSense.ApiKind.AdminAsyncCommand}),_o1.add({Item1:"//comment async\r\n.ingest into table",Item2:Kusto.Data.IntelliSense.ApiKind.AdminSyncCommand}),_o1}});Bridge.define("Kusto.UT.IntelliSenseRulesTests",{statics:{fields:{Assert:null,s_intelliSenseProvider:null,s_columnMappings:null},ctors:{init:function(){this.Assert=new Kusto.UT.AssertStub;this.s_columnMappings=new(System.Collections.Generic.Dictionary$2(System.String,System.Array.type(System.String)).ctor)}},methods:{ValidateEntities:function(command,expectedFields,entititesList){var $t,$t1,entity,entity1;Kusto.UT.IntelliSenseRulesTests.Assert.IsTrue(System.Linq.Enumerable.from(expectedFields,System.String).count()===entititesList.Count,System.String.format("Counts of expected entities ('{0}') and actual command entities ('{1}') do not match.\nExpected entities: {2}\nActual entities:   {3}\nCommand: {4}",Bridge.box(System.Linq.Enumerable.from(expectedFields,System.String).count(),System.Int32),Bridge.box(entititesList.Count,System.Int32),expectedFields.join(","),Bridge.toArray(entititesList).join(","),command));$t=Bridge.getEnumerator(entititesList);try{while($t.moveNext())entity=$t.Current,System.Linq.Enumerable.from(expectedFields,System.String).contains(entity)||Kusto.UT.IntelliSenseRulesTests.Assert.Fail(System.String.format("Entity '{0}' is not appearing on the expected list. Command: {1}",entity,command))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}$t1=Bridge.getEnumerator(expectedFields);try{while($t1.moveNext())entity1=$t1.Current,entititesList.contains(entity1)||Kusto.UT.IntelliSenseRulesTests.Assert.Fail(System.String.format("Entity '{0}' is not appearing on the resolved list. Command: {1}",entity1,command))}finally{Bridge.is($t1,System.IDisposable)&&$t1.System$IDisposable$Dispose()}},InitializeTestClass:function(){var queryParameters=new(System.Collections.Generic.List$1(System.String).ctor),availableClusters=new(System.Collections.Generic.List$1(System.String).ctor),clusterSchema=Kusto.UT.IntelliSenseRulesTests.GenerateKustoEntities(queryParameters,availableClusters),schema=new Kusto.Data.IntelliSense.KustoIntelliSenseQuerySchema(clusterSchema,System.Linq.Enumerable.from(clusterSchema.Databases,Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity).first());Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider=new Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.$ctor1(clusterSchema,schema,queryParameters,availableClusters,new Kusto.UT.IntelliSenseRulesTests.RemoteSchemaResolverMock,!0,!0)},TestIntelliSensePatterns:function(intelliSenseProvider,testPatterns){var $t,$t1,patternsWithLet=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor),testPattern,failMessage,expectedRule,failMessage1;$t=Bridge.getEnumerator(testPatterns);try{while($t.moveNext())testPattern=$t.Current,System.String.startsWith(System.String.trimStart(testPattern.Input),".")||patternsWithLet.add(($t1=new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.ctor("let variable = 1;\n"+(testPattern.Input||"")),$t1.ExpectedMatch=testPattern.ExpectedMatch,$t1.ExpectedRuleKind=testPattern.ExpectedRuleKind,$t1))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}testPatterns.AddRange(patternsWithLet);$t1=Bridge.getEnumerator(testPatterns);try{while($t1.moveNext()){var testPattern1=$t1.Current,rule={v:null},matchingSuccess=intelliSenseProvider.TryMatchAnyRule(testPattern1.Input,rule);matchingSuccess!==testPattern1.ExpectedMatch&&(failMessage=System.String.format("Input '{0}' was incorrectly intelli-sensed. Expected: {1} ({2}), actual: {3} ({4})",testPattern1.Input,testPattern1.ExpectedMatch?"MATCH":"NO-MATCH",Bridge.box(testPattern1.ExpectedRuleKind,System.Int32),matchingSuccess?"MATCH":"NO-MATCH",Bridge.box(rule.v!=null?rule.v.Kind:0,System.Int32)),Kusto.UT.IntelliSenseRulesTests.Assert.Fail(failMessage));expectedRule=Bridge.toString(testPattern1.ExpectedRuleKind);testPattern1.ExpectedMatch&&testPattern1.ExpectedRuleKind!==rule.v.Kind&&(failMessage1=System.String.format("Input '{0}' was incorrectly intelli-sensed. Expected rule: {1}, actual rule: {2}",testPattern1.Input,expectedRule,Bridge.box(rule.v.Kind,System.Int32)),Kusto.UT.IntelliSenseRulesTests.Assert.Fail(failMessage1))}}finally{Bridge.is($t1,System.IDisposable)&&$t1.System$IDisposable$Dispose()}},GetColumnsOfTable:function(tableName){return Kusto.UT.IntelliSenseRulesTests.s_columnMappings.containsKey(tableName)?Kusto.UT.IntelliSenseRulesTests.s_columnMappings.getItem(tableName):null},GenerateKustoEntities:function(queryParameters,availableClusters){var $t,$t1,result,databases,i,i1,i2,i3,table1,columns1,i4;availableClusters!=null&&availableClusters.add("other");result=new Kusto.Data.IntelliSense.KustoIntelliSenseClusterEntity;result.Plugins=System.Array.init([($t=new Kusto.Data.IntelliSense.KustoIntelliSensePluginEntity,$t.Name="test_plugin",$t)],Kusto.Data.IntelliSense.KustoIntelliSensePluginEntity);databases=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity).ctor);result.Databases=databases;var db=($t=new Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity,$t.Name="Database1",$t),tables=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity).ctor),functions=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.KustoIntelliSenseFunctionEntity).ctor);db.Tables=tables;db.Functions=functions;databases.add(db);$t=Bridge.getEnumerator(System.Array.init(["Table1","['Table.2']"],System.String));try{while($t.moveNext()){var tableName=$t.Current,table=($t1=new Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity,$t1.Name=tableName,$t1.Columns=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.KustoIntelliSenseColumnEntity).ctor),$t1),columns=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.KustoIntelliSenseColumnEntity).ctor);for(table.Columns=columns,tables.add(table),i=0;i<10;i=i+1|0)columns.add(($t1=new Kusto.Data.IntelliSense.KustoIntelliSenseColumnEntity,$t1.Name="Field"+(Bridge.toString(i)||""),$t1.TypeCode=Kusto.Data.IntelliSense.EntityDataType.String,$t1));for(i1=0;i1<10;i1=i1+1|0)columns.add(($t1=new Kusto.Data.IntelliSense.KustoIntelliSenseColumnEntity,$t1.Name="NumField"+(Bridge.toString(i1)||""),$t1.TypeCode=Kusto.Data.IntelliSense.EntityDataType.Int32,$t1));for(i2=0;i2<5;i2=i2+1|0)columns.add(($t1=new Kusto.Data.IntelliSense.KustoIntelliSenseColumnEntity,$t1.Name="DateTimeField"+(Bridge.toString(i2)||""),$t1.TypeCode=Kusto.Data.IntelliSense.EntityDataType.DateTime,$t1));for(i3=0;i3<5;i3=i3+1|0)columns.add(($t1=new Kusto.Data.IntelliSense.KustoIntelliSenseColumnEntity,$t1.Name="TimeSpanField"+(Bridge.toString(i3)||""),$t1.TypeCode=Kusto.Data.IntelliSense.EntityDataType.TimeSpan,$t1));Kusto.UT.IntelliSenseRulesTests.RegisterTableEntitiesForTest(table,columns)}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}for(table1=($t1=new Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity,$t1.Name="Table3",$t1.Columns=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.KustoIntelliSenseColumnEntity).ctor),$t1),columns1=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.KustoIntelliSenseColumnEntity).ctor),table1.Columns=columns1,tables.add(table1),i4=0;i4<2;i4=i4+1|0)columns1.add(($t1=new Kusto.Data.IntelliSense.KustoIntelliSenseColumnEntity,$t1.Name="Field"+(Bridge.toString(i4)||""),$t1.TypeCode=Kusto.Data.IntelliSense.EntityDataType.String,$t1));return Kusto.UT.IntelliSenseRulesTests.RegisterTableEntitiesForTest(table1,columns1),queryParameters!=null&&(queryParameters.add("Parameter1"),queryParameters.add("Parameter2")),functions.add(($t1=new Kusto.Data.IntelliSense.KustoIntelliSenseFunctionEntity,$t1.Name="func",$t1.Expression="let func = () { Table1 | project NumField1 };",$t1.CallName="func",$t1)),functions.add(($t1=new Kusto.Data.IntelliSense.KustoIntelliSenseFunctionEntity,$t1.Name="func1",$t1.Expression="let func1 = () { Table1 | project NumField1 };",$t1.CallName="func1",$t1)),functions.add(($t1=new Kusto.Data.IntelliSense.KustoIntelliSenseFunctionEntity,$t1.Name="func2",$t1.Expression="let func2 = () { func1 };",$t1.CallName="func2",$t1)),functions.add(($t1=new Kusto.Data.IntelliSense.KustoIntelliSenseFunctionEntity,$t1.Name="func3",$t1.Expression="let func3 = () { func1 | summarize count() by NumField2};",$t1.CallName="func3",$t1)),functions.add(($t1=new Kusto.Data.IntelliSense.KustoIntelliSenseFunctionEntity,$t1.Name="func4",$t1.Expression="let func4 = () { func | extend NumField3 = 1};",$t1.CallName="func4",$t1)),functions.add(($t1=new Kusto.Data.IntelliSense.KustoIntelliSenseFunctionEntity,$t1.Name="func5",$t1.Expression="let func5 = (x:datetime) { func | extend NumField3 = 1};",$t1.CallName="func5",$t1)),functions.add(($t1=new Kusto.Data.IntelliSense.KustoIntelliSenseFunctionEntity,$t1.Name="func6",$t1.Expression="let func6 = () { func5(1h) };",$t1.CallName="func6",$t1)),result},RegisterTableEntitiesForTest:function(table,columns){Kusto.UT.IntelliSenseRulesTests.s_columnMappings.setItem(table.Name,System.Linq.Enumerable.from(columns,Kusto.Data.IntelliSense.KustoIntelliSenseColumnEntity).select($asm.$.Kusto.UT.IntelliSenseRulesTests.f1).ToArray(System.String));Kusto.UT.IntelliSenseRulesTests.s_columnMappings.setItem("database('db1')."+(table.Name||""),System.Linq.Enumerable.from(columns,Kusto.Data.IntelliSense.KustoIntelliSenseColumnEntity).select($asm.$.Kusto.UT.IntelliSenseRulesTests.f1).ToArray(System.String));Kusto.UT.IntelliSenseRulesTests.s_columnMappings.setItem("cluster('other').database('db2')."+(table.Name||""),System.Linq.Enumerable.from(columns,Kusto.Data.IntelliSense.KustoIntelliSenseColumnEntity).select($asm.$.Kusto.UT.IntelliSenseRulesTests.f1).ToArray(System.String))}}},methods:{IntelliSenseCommandEntitiesTest:function(){this.CheckProjectedAndExtendedProperties("Table1 | project X, Y, Z | project-away X |",System.Array.init(["Y","Z"],System.String));this.CheckProjectedAndExtendedProperties("Table1 | project X, Y, Z | project-rename A=X |",System.Array.init(["A","Y","Z"],System.String));this.TestPrintOperatorEntities();this.TestParseOperatorEntities();this.CheckProjectedAndExtendedProperties("range x from 1 to 1 step 1 | \r\n            extend y = 1\r\n            | ",System.Array.init(["x","y"],System.String));this.CheckProjectedAndExtendedProperties("\r\n\r\n            // comment\r\n            Table3\r\n            | where Field1 == 'value { value'\r\n            | ",System.Array.init(["Field0","Field1"],System.String));this.CheckProjectedAndExtendedProperties("Table3\r\n            | where Field1 == 'value { value'\r\n            | ",System.Array.init(["Field0","Field1"],System.String));this.CheckProjectedAndExtendedProperties("Table3\r\n            | ",System.Array.init(["Field0","Field1"],System.String));this.CheckProjectedAndExtendedProperties("Table3\r\n            | where Field1 == 'value{value'\r\n            | ",System.Array.init(["Field0","Field1"],System.String));this.CheckProjectedAndExtendedProperties("T1 \r\n            | summarize by key1, key2\r\n            | ",System.Array.init(["key1","key2"],System.String));this.TestSummarizeOperationsOverFunctions();this.CheckProjectedAndExtendedProperties("T1 \r\n            | project x1, x2, key\r\n            | join \r\n              (T2 | project y1, y2, key) on key \r\n            | extend e1 = 1\r\n            | ",System.Array.init(["x1","x2","y1","y2","key","e1"],System.String));this.CheckProjectedAndExtendedProperties("KustoSources | project Source, Data | join (KustoLogs | summarize max(ActivityID) by Source, Timestamp ) on Source |",System.Array.init(["Source","Data","max_ActivityID","Timestamp"],System.String));this.CheckProjectedAndExtendedProperties("range x from 1 to 1 step 1\r\n            | extend y = x + 1, z = x + 2\r\n            | summarize val1 = sum(x)/sum(z), sumOfY=sum(y), sumOfZ =sum(z) |",System.Array.init(["val1","sumOfY","sumOfZ"],System.String));this.CheckProjectedAndExtendedProperties("range x from 1 to 1 step 1 | ",System.Array.init(["x"],System.String));this.CheckProjectedAndExtendedProperties("| project Field1, Field2, Field3 \r\n            | extend Duration=Field2 - Field3, Field4=xxxx |",System.Array.init(["Field1","Field2","Field3","Duration","Field4"],System.String));this.TestArgMinMaxEntities();this.TestProjectAssignmentEntities();this.TestProjectedAwayEntities();this.TestProjectedRenameEntities();this.CheckProjectedAndExtendedProperties("Table1 | project X, Y, Z | reduce by X |",System.Array.init(["Pattern","Count"],System.String));this.CheckProjectedAndExtendedProperties("Table1 | project X, Y, Z | mvexpand myCount=range(1, 2, 3) |",System.Array.init(["myCount","X","Y","Z"],System.String));this.CheckProjectedAndExtendedProperties("Table1 | project X, Y, Z | summarize myCount=count(X), mySum= sum(Y), myCount2 = count() by bin(Z, 10min), X |",System.Array.init(["myCount","mySum","myCount2","Z","X"],System.String));this.CheckProjectedAndExtendedProperties("Table1 | summarize count(), makelist(ClusterName), makeset(SubscriptionId) by LogicalServerName | ",System.Array.init(["count_","list_ClusterName","set_SubscriptionId","LogicalServerName"],System.String));this.CheckProjectedAndExtendedProperties("Table1 | summarize count(), any(ClusterName), any(SubscriptionId) by LogicalServerName, AppName, database_id, bin(TIMESTAMP, time(10m)) | ",System.Array.init(["count_","any_ClusterName","any_SubscriptionId","LogicalServerName","AppName","database_id","TIMESTAMP"],System.String));this.CheckProjectedAndExtendedProperties("Table1 | project X, Y, Z | summarize count(X), sum(Y) by bin(Z, 10min), X |",System.Array.init(["count_X","sum_Y","Z","X"],System.String));this.CheckProjectedAndExtendedProperties("Table1 | project X, Y, Z | summarize count(X), sum(Y) by bin (Z, 10min), X |",System.Array.init(["count_X","sum_Y","Z","X"],System.String));this.CheckProjectedAndExtendedProperties("Table1 | project X, Y, Z | summarize A=countif(X), countif(Y) by bin (Z, 10min), X |",System.Array.init(["A","countif_Y","Z","X"],System.String));this.CheckProjectedAndExtendedProperties("Table1 | project X, Y, Z | summarize A=sumif(X, pred1), sumif(Y, pred2) by bin (Z, 10min), X |",System.Array.init(["A","sumif_Y","Z","X"],System.String));this.CheckProjectedAndExtendedProperties("Table1 | summarize percentile(X, 10), percentiles(Y, 10, 20, 99.9, 1E-8) |",System.Array.init(["percentile_X_10","percentile_Y_10","percentile_Y_20","percentile_Y_99_9","percentile_Y_1E_8"],System.String));this.CheckProjectedAndExtendedProperties("Table1 | summarize percentile(X / 99, 10), percentiles(Y * 1000, 10, 20, 99.9, 1E-8) |",System.Array.init(["percentile_X_10","percentile_Y_10","percentile_Y_20","percentile_Y_99_9","percentile_Y_1E_8"],System.String));this.CheckProjectedAndExtendedProperties("Table1 | project Field1, Field2, Field3 \r\n            | extend Duration=Field2 - Field3, Field4=xxxx \r\n            | join (Table2 | extend FieldA=1, FieldB=22 |",System.Array.init(["FieldA","FieldB"],System.String));this.CheckProjectedAndExtendedProperties("Table1 | project Field1, Field2, Field3 \r\n            | extend Duration=Field2 - Field3, Field4=xxxx \r\n            | join (Table2 | extend FieldA=1, FieldB=22 | project FieldA | filter X",System.Array.init(["FieldA"],System.String));this.CheckProjectedAndExtendedProperties("Table1 | project Field1, Field2, Field3\r\n            | join (\r\n            Table2 | project Field1, Field2, Field3 ) on ",System.Array.init(["Field1","Field2","Field3"],System.String));this.CheckProjectedAndExtendedProperties("Table1 | extend Y=5 | project Field1, Field2, Field3, Y\r\n            | join (\r\n            Table2 | extend Y=4 | project Field1, Field2, Field3, Y  ) on ",System.Array.init(["Field1","Field2","Field3","Y"],System.String));this.CheckProjectedAndExtendedProperties("Table1 | extend X=5 | project X, timestamp, Field1\r\n                        | join (\r\n                        Table2 | make-series X=sum(Y) on timestamp in range(datetime(3000-01-01),datetime(3000-01-02),1h) by Field1) on ",System.Array.init(["X","timestamp","Field1"],System.String));this.CheckProjectedAndExtendedProperties("Table1 | make-series X=sum(Y) on timestamp in range(datetime(3000-01-01),datetime(3000-01-02),1h) by Field1\r\n                        | join (\r\n                        Table2 | extend X=5 | project X, timestamp, Field1) on ",System.Array.init(["X","timestamp","Field1"],System.String));this.CheckProjectedAndExtendedProperties("Table1 | project X, Y | summarize count(X), sum(Y)",System.Array.init(["X","Y"],System.String));this.CheckProjectedAndExtendedProperties("Table1 | summarize count(X), sum(Y) |",System.Array.init(["count_X","sum_Y"],System.String));this.CheckProjectedAndExtendedProperties("Table1 | summarize count(X), sum(Y) | project count_Z",System.Array.init(["count_X","sum_Y"],System.String));this.CheckProjectedAndExtendedProperties("Table1 | summarize count(X), sum(Y) | project count_Z |",System.Array.init(["count_Z"],System.String));this.CheckProjectedAndExtendedProperties("Table1 | top-nested 5 of P by count(X) asc, top-nested 6 of Q by sum(Y) desc, top-nested 6 of W by avg(I)|",System.Array.init(["aggregated_P","aggregated_Q","aggregated_W","P","Q","W"],System.String));this.CheckProjectedAndExtendedProperties("Table1 | top-nested 5 of P by count(X) asc, top-nested 6 of Q by AggregatedSumY = sum(Y) desc, top-nested 6 of W by AggregatedAvgI = avg(I)|",System.Array.init(["aggregated_P","AggregatedSumY","AggregatedAvgI","P","Q","W"],System.String));this.CheckProjectedAndExtendedProperties("Table1 | top-nested 5 of P by count(X) asc, top-nested 6 of Q by AggregatedSumY = sum(Y) desc, top-nested 6 of W by AggregatedAvgI = avg(I) asc, top-nested 5 of M by count(C)|",System.Array.init(["aggregated_P","AggregatedSumY","AggregatedAvgI","aggregated_M","P","Q","W","M"],System.String));this.CheckProjectedAndExtendedProperties("Table1 | top-nested 5 of A by count() | ",System.Array.init(["aggregated_A","A"],System.String));this.CheckProjectedAndExtendedProperties("Table1 | project X, Y, Z | summarize count(X), sum(Y) | ",System.Array.init(["count_X","sum_Y"],System.String));this.CheckProjectedAndExtendedProperties("Table1 | project X, Y, Z | summarize count(X), sum(Y) by Z | ",System.Array.init(["count_X","sum_Y","Z"],System.String));this.CheckProjectedAndExtendedProperties("Table1 | project X, Y, Z | summarize count(X), sum(Y) by Z, X | ",System.Array.init(["count_X","sum_Y","Z","X"],System.String));this.CheckProjectedAndExtendedProperties("Table1 | project X, Y, Z | summarize count(), sum(Y) by Z, X | ",System.Array.init(["count_","sum_Y","Z","X"],System.String));this.CheckProjectedAndExtendedProperties("Table1 | project X, Y, Z | summarize count(X), sum(Y) | extend FieldA = x | ",System.Array.init(["count_X","sum_Y","FieldA"],System.String));this.CheckProjectedAndExtendedProperties("Table1 | summarize count(X), dcount(Y) | project dcount_Y |",System.Array.init(["dcount_Y"],System.String));this.CheckProjectedAndExtendedProperties("Table1 | project X, Y | summarize countif(X), sum(Y)",System.Array.init(["X","Y"],System.String));this.CheckProjectedAndExtendedProperties("Table1 | summarize countif(X), sum(Y) |",System.Array.init(["countif_X","sum_Y"],System.String));this.CheckProjectedAndExtendedProperties("Table1 | summarize countif(X), sum(Y) | project count_Z",System.Array.init(["countif_X","sum_Y"],System.String));this.CheckProjectedAndExtendedProperties("Table1 | summarize sumif(X,Y), sum(Y) | project count_Z",System.Array.init(["sumif_X","sum_Y"],System.String));this.CheckProjectedAndExtendedProperties("Table1 | summarize countif(X), sum(Y) | project count_Z |",System.Array.init(["count_Z"],System.String));this.CheckProjectedAndExtendedProperties("Table1 | project X, Y, Z | summarize countif(X), sum(Y) | ",System.Array.init(["countif_X","sum_Y"],System.String));this.CheckProjectedAndExtendedProperties("Table1 | project X, Y, Z | summarize sumif(X,Y), sum(Y) | ",System.Array.init(["sumif_X","sum_Y"],System.String));this.CheckProjectedAndExtendedProperties("Table1 | project X, Y, Z | summarize countif(X), sum(Y) by Z | ",System.Array.init(["countif_X","sum_Y","Z"],System.String));this.CheckProjectedAndExtendedProperties("Table1 | project X, Y, Z | summarize sumif(X, Y), sum(Y) by Z | ",System.Array.init(["sumif_X","sum_Y","Z"],System.String));this.CheckProjectedAndExtendedProperties("Table1 | project X, Y, Z | summarize countif(X), sum(Y) by Z, X | ",System.Array.init(["countif_X","sum_Y","Z","X"],System.String));this.CheckProjectedAndExtendedProperties("Table1 | project X, Y, Z | summarize sumif(X, Y), sum(Y) by Z, X | ",System.Array.init(["sumif_X","sum_Y","Z","X"],System.String));this.CheckProjectedAndExtendedProperties("Table1 | project X, Y, Z | summarize countif(X), sum(Y) | extend FieldA = x | ",System.Array.init(["countif_X","sum_Y","FieldA"],System.String));this.CheckProjectedAndExtendedProperties("Table1 | project X, Y, Z | summarize sumif(X, Y), sum(Y) | extend FieldA = x | ",System.Array.init(["sumif_X","sum_Y","FieldA"],System.String));this.CheckProjectedAndExtendedProperties("Table1 | summarize countif(X), dcount(Y) | project dcount_Y |",System.Array.init(["dcount_Y"],System.String));this.CheckProjectedAndExtendedProperties("Table1 | summarize any(X), any(Y) | project any_Y |",System.Array.init(["any_Y"],System.String));this.CheckProjectedAndExtendedProperties("| project Field1, Field2, Field3 \r\n            | extend Duration=Field2 - Field3, Field4=xxxx ",System.Array.init(["Field1","Field2","Field3"],System.String));this.CheckProjectedAndExtendedProperties("| project Field1, Field2, Field3 \r\n            | extend Duration=Field2 - Field3, Field4=xxxx \r\n            | project Duration, Field4  ",System.Array.init(["Field1","Field2","Field3","Duration","Field4"],System.String));this.CheckProjectedAndExtendedProperties("| project Field1, Field2, Field3 \r\n            | extend Duration=Field2 - Field3, Field4=xxxx \r\n            | project Duration, Field4 | ",System.Array.init(["Duration","Field4"],System.String));this.CheckProjectedAndExtendedProperties("| project Field1, Field2, Field3 | extend Duration=Field2 - Field3, Field1=xxxx | \r\n            join ( xxxx | project X | extend Y=X, Z=X) on XXX \r\n            join ( yyyy | project Field1, Field2, Field3 | extend Duration=Field2 - Field3, FieldX=xxxx |",System.Array.init(["Field1","Field2","Field3","Duration","FieldX"],System.String));this.CheckProjectedAndExtendedProperties("| project Field1, Field2, Field3 | extend Duration=Field2 - Field3, Field1=xxxx | \r\n            join ( xxxx | project X | extend Y=X, Z=X) on XXX \r\n            join ( yyyy | project Field1, Field2, Field3 | extend Duration=Field2 - Field3, FieldX=xxxx ",System.Array.init(["Field1","Field2","Field3"],System.String));this.CheckProjectedAndExtendedProperties("KustoLogs \r\n            | filter EventText like 'Gateway.ExecuteQuery'\r\n            | filter Source like 'KUSKUS' or Source like 'ONESI-PROD' or Source like 'IPEPROD'\r\n            | extend op=extract('Gateway.ExecuteQuery:.*(join|summarize|filter)', 1, EventText) , is_Join=extract('Gateway.ExecuteQuery:.*(join)', 1, EventText) \r\n            | extend is_Filter=extract('Gateway.ExecuteQuery:.*(filter)', 1, EventText) \r\n            | filter ",System.Array.init(["op","is_Join","is_Filter"],System.String));this.CheckProjectedAndExtendedProperties("KustoLogs \r\n            | project Field1, Field2, Field3\r\n            | extend op=",System.Array.init(["Field1","Field2","Field3"],System.String));this.CheckProjectedAndExtendedProperties("KustoLogs \r\n            | project Field1, Field2, Field3\r\n            | extend op=Field1 - ",System.Array.init(["Field1","Field2","Field3"],System.String));this.CheckProjectedAndExtendedProperties("KustoLogs \r\n            | project Field1, Field2, Field3\r\n            | extend op=Field1 + ",System.Array.init(["Field1","Field2","Field3"],System.String));this.CheckProjectedAndExtendedProperties("KustoLogs \r\n            | project Field1, Field2, Field3\r\n            | extend op=Field1 / ",System.Array.init(["Field1","Field2","Field3"],System.String));this.CheckProjectedAndExtendedProperties("KustoLogs \r\n            | project Field1, Field2, Field3\r\n            | extend op=Field1 * ",System.Array.init(["Field1","Field2","Field3"],System.String));this.CheckProjectedAndExtendedProperties("KustoLogs \r\n            | project Field1, Field2, Field3\r\n            | extend op=Field1 + Field2, op2=",System.Array.init(["Field1","Field2","Field3"],System.String));this.CheckProjectedAndExtendedProperties("KustoLogs \r\n            | filter EventText like 'Gateway.ExecuteQuery'\r\n\r\n            | extend op=extract('Gateway.ExecuteQuery:.*(join|summarize|filter)', 1, EventText) \r\n            | extend is_Join=extract('Gateway.ExecuteQuery:.*(join)', 1, EventText) \r\n            | extend is_Filter=extract('Gateway.ExecuteQuery:.*(filter)', 1, EventText) \r\n            | filter ",System.Array.init(["op","is_Join","is_Filter"],System.String));this.CheckProjectedAndExtendedProperties("KustoLogs \r\n            | filter EventText like 'Gateway.ExecuteQuery'\r\n\r\n            | extend op=extract('Gateway.ExecuteQuery:.*(join|summarize|filter)', 1, EventText) \r\n            | extend is_Join=extract('Gateway.ExecuteQuery:.*(join)', 1, EventText) \r\n            | extend is_Filter=extract('Gateway.ExecuteQuery:.*(filter)', 1, EventText) \r\n            | filter ",System.Array.init(["op","is_Join","is_Filter"],System.String));this.CheckProjectedAndExtendedProperties("Table1 | make-series sum(Y) default=0 on Z in range(datetime(3000-01-01),datetime(3000-01-02),1h) by X |",System.Array.init(["sum_Y","Z","X"],System.String));this.CheckProjectedAndExtendedProperties("Table1 | make-series sum_of_y=sum(Y) default= 0 on Z in range(datetime(3000-01-01),datetime(3000-01-02),1h) by X |",System.Array.init(["sum_of_y","Z","X"],System.String));this.CheckProjectedAndExtendedProperties("Table1 | make-series sum_of_y=sum(Y) on Z in range(datetime(3000-01-01),datetime(3000-01-02),1h) |",System.Array.init(["sum_of_y","Z"],System.String));this.CheckProjectedAndExtendedProperties("Table1 | make-series sum(Y) on Z in range(datetime(3000-01-01),datetime(3000-01-02),1h) by X |",System.Array.init(["sum_Y","Z","X"],System.String));this.CheckProjectedAndExtendedProperties(" Table1\r\n                | sample-distinct 10 of Field1 |\r\n                ",System.Array.init(["Field1"],System.String));this.CheckProjectedAndExtendedProperties(" Table1\r\n                | sample-distinct 10 of log2(Field1) |\r\n                ",System.Array.init(["Field1"],System.String));this.CheckProjectedAndExtendedProperties("KustoLogs \r\n            | project Field1, series_stats(Field2), (rs, s)=series_fit_line(Field3) |\r\n                ",System.Array.init(["Field1","series_stats_Field2_min","series_stats_Field2_min_idx","series_stats_Field2_max","series_stats_Field2_max_idx","series_stats_Field2_avg","series_stats_Field2_stdev","series_stats_Field2_variance","rs","s"],System.String));this.CheckProjectedAndExtendedProperties("KustoLogs \r\n            | project Field1, series_stats(Field2), (a,b,c)=series_fit_line(Field3) |\r\n                ",System.Array.init(["Field1","series_stats_Field2_min","series_stats_Field2_min_idx","series_stats_Field2_max","series_stats_Field2_max_idx","series_stats_Field2_avg","series_stats_Field2_stdev","series_stats_Field2_variance","a","b","c"],System.String));this.CheckProjectedAndExtendedProperties("KustoLogs \r\n            | extend Field1, (min, min_idx)=series_stats(Field2), (rs, s)=series_fit_line(Field3), mundane=sqrt(Field3) |\r\n                ",System.Array.init(["Field1","min","min_idx","rs","s","mundane"],System.String));this.CheckProjectedAndExtendedProperties("KustoLogs \r\n            | extend Field1, series_stats(Field2), series_fit_line(Field3), mundane=sqrt(Field3) |\r\n            ",System.Array.init(["Field1","series_stats_Field2_min","series_stats_Field2_min_idx","series_stats_Field2_max","series_stats_Field2_max_idx","series_stats_Field2_avg","series_stats_Field2_stdev","series_stats_Field2_variance","series_fit_line_Field3_rsquare","series_fit_line_Field3_slope","series_fit_line_Field3_variance","series_fit_line_Field3_rvariance","series_fit_line_Field3_interception","series_fit_line_Field3_line_fit","mundane"],System.String));this.CheckProjectedAndExtendedProperties("KustoLogs \r\n            | project Field1, series_fit_2lines(Field2), mundane=sqrt(Field3) |\r\n                ",System.Array.init(["Field1","series_fit_2lines_Field2_rsquare","series_fit_2lines_Field2_split_idx","series_fit_2lines_Field2_variance","series_fit_2lines_Field2_rvariance","series_fit_2lines_Field2_line_fit","series_fit_2lines_Field2_right_rsquare","series_fit_2lines_Field2_right_slope","series_fit_2lines_Field2_right_interception","series_fit_2lines_Field2_right_variance","series_fit_2lines_Field2_right_rvariance","series_fit_2lines_Field2_left_rsquare","series_fit_2lines_Field2_left_slope","series_fit_2lines_Field2_left_interception","series_fit_2lines_Field2_left_variance","series_fit_2lines_Field2_left_rvariance","mundane"],System.String));this.CheckProjectedAndExtendedProperties("KustoLogs \r\n            | project Field1, series_stats(Field2), (min, min_idx)=series_stats(Field2) |\r\n                ",System.Array.init(["Field1","series_stats_Field2_min","series_stats_Field2_min_idx","series_stats_Field2_max","series_stats_Field2_max_idx","series_stats_Field2_avg","series_stats_Field2_stdev","series_stats_Field2_variance","min","min_idx"],System.String))},IntelliSenseCommandEntities_EscapedNamesTest:function(){this.CheckProjectedAndExtendedProperties("range x from 1 to 1 step 1 \r\n| project a.b, a.[c], a.[c][d], a.[c].[e] |",System.Array.init(["a_b","a_c","a_c_d","a_c_e"],System.String));this.CheckProjectedAndExtendedProperties("range x from 1 to 1 step 1 \r\n| project a.['b'], a.['c'], a.[\"c\"][d], a.['c'].[\"e\"] |",System.Array.init(["a_b","a_c","a_c_d","a_c_e"],System.String));this.CheckProjectedAndExtendedProperties("range x from 1 to 1 step 1 \r\n| project a.['[b]'], a.['[c]'], a.[\"[c]\"][d], a.['[c]'].[\"[e]\"] |",System.Array.init(["['a_[b]']","['a_[c]']","['a_[c]_d']","['a_[c]_[e]']"],System.String));this.CheckProjectedAndExtendedProperties("range x from 1 to 1 step 1 \r\n| project a.['b c'] |",System.Array.init(["a_b_c"],System.String));this.CheckProjectedAndExtendedProperties("Table1 | summarize percentile(X / 99, 10), percentiles(Y * 1000, 10, 20, 99.9, 1E-8) |",System.Array.init(["percentile_X_10","percentile_Y_10","percentile_Y_20","percentile_Y_99_9","percentile_Y_1E_8"],System.String));this.CheckProjectedAndExtendedProperties("range x from 1 to 1 step 1 \r\n| extend ['abc def'] = 1\r\n| summarize min(['abc def']), max(['abc def']), avg(['abc def']) |",System.Array.init(["['min_abc def']","['max_abc def']","['avg_abc def']"],System.String));this.CheckProjectedAndExtendedProperties("range x from 1 to 1 step 1 | extend ['abc def'] = 1 | ",System.Array.init(["x","['abc def']"],System.String));this.CheckProjectedAndExtendedProperties("range x from 1 to 1 step 1 | project ['abc def'] = 1 | ",System.Array.init(["['abc def']"],System.String))},IntelliSenseCommandEntities_FindTest:function(){this.TestEntitiesForFindFilterAndProjection("find where ",System.Array.init(["Field0","Field1","*"],System.String));this.TestEntitiesForFindFilterAndProjection("find in (*) where ",System.Array.init(["Field0","Field1","*"],System.String));this.TestEntitiesForFindFilterAndProjection("find in (Table1) where ",System.Array.init(["*"],System.String),!0);this.TestEntitiesForFindFilterAndProjection("find in (['Table.2']) where ",System.Array.init(["*"],System.String),!0);this.TestEntitiesForFindFilterAndProjection("find in (Table1, ['Table.2']) where ",System.Linq.Enumerable.from(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable("Table1"),System.String).intersect(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable("['Table.2']")).concat(System.Array.init(["*"],System.String)).ToArray(System.String));this.TestEntitiesForFindFilterAndProjection("find in (database('*').Table1) where ",System.Linq.Enumerable.from(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable("Table1"),System.String).concat(System.Array.init(["*"],System.String)).ToArray(System.String));this.TestEntitiesForFindFilterAndProjection("find in (database('*').*1, *1) where ",System.Linq.Enumerable.from(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable("Table1"),System.String).concat(System.Array.init(["*"],System.String)).ToArray(System.String));this.TestEntitiesForFindFilterAndProjection("find in (Table1, Table2) where ",System.Array.init(["*"],System.String));this.TestEntitiesForFindFilterAndProjection("find where 'abc' project ",System.Array.init(["Field0","Field1","pack(*)"],System.String));this.TestEntitiesForFindFilterAndProjection('find in (*) where Field0 == "abc" project ',System.Array.init(["Field0","Field1","pack(*)"],System.String));this.TestEntitiesForFindFilterAndProjection('find in (Table1) where Field0 == "abc" project ',System.Array.init(["pack(*)"],System.String),!0);this.TestEntitiesForFindFilterAndProjection("find in (['Table.2']) where Field0 == \"abc\" project ",System.Array.init(["pack(*)"],System.String),!0);this.TestEntitiesForFindFilterAndProjection("find in (Table1, ['Table.2']) where Field0 == \"abc\" project ",System.Linq.Enumerable.from(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable("Table1"),System.String).intersect(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable("['Table.2']")).concat(System.Array.init(["pack(*)"],System.String)).ToArray(System.String));this.TestEntitiesForFindFilterAndProjection("find in (database('*').Table1) where Field0 == \"abc\" project ",System.Linq.Enumerable.from(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable("Table1"),System.String).concat(System.Array.init(["pack(*)"],System.String)).ToArray(System.String));this.TestEntitiesForFindFilterAndProjection('find in (Table1, Table2) where Field0 == "abc" project ',System.Array.init(["pack(*)"],System.String));this.TestEntitiesForFindFilterAndProjection("find 'abc' project Field0, Field1\r\n            | ",System.Array.init(["source_","Field0","Field1"],System.String));this.TestEntitiesForFindFilterAndProjection("find 'abc' project Field0, Field1, pack(*)\r\n            | ",System.Array.init(["source_","Field0","Field1","pack_"],System.String));this.TestEntitiesForFindFilterAndProjection("find 'abc' project Field0, pack(*)\r\n            | ",System.Array.init(["source_","Field0","pack_"],System.String));this.TestEntitiesForFindFilterAndProjection("find 'abc' project pack(*)\r\n            | ",System.Array.init(["source_","pack_"],System.String));this.TestEntitiesForFindFilterAndProjection("find where 'abc' project Field0, Field1\r\n            | ",System.Array.init(["source_","Field0","Field1"],System.String));this.TestEntitiesForFindFilterAndProjection("find where 'abc' project Field0, Field1, pack(*)\r\n            | ",System.Array.init(["source_","Field0","Field1","pack_"],System.String));this.TestEntitiesForFindFilterAndProjection("find where 'abc' project pack(*)\r\n            | ",System.Array.init(["source_","pack_"],System.String));this.TestEntitiesForFindFilterAndProjection("find withsource=Source where 'abc' project Field0, Field1\r\n            | ",System.Array.init(["Source","Field0","Field1"],System.String));this.TestEntitiesForFindFilterAndProjection("find withsource=SourceName in (*) where 'abc' \r\n| ",System.Array.init(["SourceName","Field0","Field1","pack_"],System.String));this.TestEntitiesForFindFilterAndProjection("find withsource=SourceName in (database('db1').*, *) where 'abc'\r\n| ",System.Array.init(["SourceName","Field0","Field1","pack_"],System.String));this.TestEntitiesForFindFilterAndProjection("find withsource=SourceName in (database('db1').*) where 'abc'\r\n| ",System.Array.init(["SourceName","Field0","Field1","pack_"],System.String));this.TestEntitiesForFindFilterAndProjection("find withsource=SourceName in (Table1) where 'abc'\r\n| ",System.Linq.Enumerable.from(System.Array.init(["SourceName","pack_"],System.String),System.String).union(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable("Table1")).ToArray(System.String));this.TestEntitiesForFindFilterAndProjection("find 'abc'\r\n| ",System.Array.init(["source_","Field0","Field1","pack_"],System.String));this.TestEntitiesForFindFilterAndProjection("find in (Table1) where 'abc'\r\n| ",System.Linq.Enumerable.from(System.Array.init(["source_","pack_"],System.String),System.String).union(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable("Table1")).ToArray(System.String));this.TestEntitiesForFindFilterAndProjection("find in (Table1, ['Table.2']) where 'abc'\r\n| ",System.Linq.Enumerable.from(System.Array.init(["source_","pack_"],System.String),System.String).union(System.Linq.Enumerable.from(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable("Table1"),System.String).intersect(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable("['Table.2']"))).ToArray(System.String));this.TestEntitiesForFindFilterAndProjection("find withsource=SourceName where 'abc'\r\n| ",System.Array.init(["SourceName","Field0","Field1","pack_"],System.String));this.TestEntitiesForFindFilterAndProjection("find in (Table1, database('db1').Table1) where 'abc'\r\n| ",System.Linq.Enumerable.from(System.Array.init(["source_","pack_"],System.String),System.String).union(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable("Table1")).ToArray(System.String))},IntelliSenseCommandEntities_SearchTest:function(){var expectedOptions,unionOfAllColumns=System.Linq.Enumerable.from(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable("Table1"),System.String).union(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable("['Table.2']")).union(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable("Table3")),additionalOptions=System.Linq.Enumerable.from(System.Array.init(['""',"*"],System.String),System.String).union(Kusto.Data.IntelliSense.CslCommandParser.SortedExtendFunctions),additionalOptionsIncludingIn=additionalOptions.concat(System.Array.init(["in"],System.String)),additionalOptionsIncludingKind=additionalOptionsIncludingIn.concat(System.Array.init(["kind="],System.String));expectedOptions=unionOfAllColumns.union(additionalOptionsIncludingKind).ToArray(System.String);this.TestOptionsForSearch("search ",expectedOptions);expectedOptions=unionOfAllColumns.union(additionalOptionsIncludingIn).ToArray(System.String);this.TestOptionsForSearch("search kind=case_sensitive ",expectedOptions);expectedOptions=unionOfAllColumns.union(additionalOptions).ToArray(System.String);this.TestOptionsForSearch("search 'abc' and ",expectedOptions);expectedOptions=System.Linq.Enumerable.from(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable("Table3"),System.String).union(additionalOptions).ToArray(System.String);this.TestOptionsForSearch("Table3 | search 'abc' and ",expectedOptions);expectedOptions=System.Linq.Enumerable.from(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable("Table3"),System.String).union(additionalOptions).ToArray(System.String);this.TestOptionsForSearch("search in (Table3) 'abc' and ",expectedOptions);expectedOptions=System.Linq.Enumerable.from(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable("Table3"),System.String).union(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable("['Table.2']")).union(additionalOptions).ToArray(System.String);this.TestOptionsForSearch("search in (Table3,['Table.2']) 'abc' and ",expectedOptions);expectedOptions=System.Linq.Enumerable.from(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable("Table3"),System.String).union(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable("Table1")).union(additionalOptions).ToArray(System.String);this.TestOptionsForSearch("search in (T*) 'abc' and ",expectedOptions);expectedOptions=unionOfAllColumns.union(additionalOptions).ToArray(System.String);this.TestOptionsForSearch("search in (*) 'abc' and ",expectedOptions);expectedOptions=System.Linq.Enumerable.from(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable("Table3"),System.String).union(additionalOptions).ToArray(System.String);this.TestOptionsForSearch("search in (database('db1').Table3) 'abc' and ",expectedOptions);expectedOptions=System.Linq.Enumerable.from(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable("Table3"),System.String).union(additionalOptions).ToArray(System.String);this.TestOptionsForSearch("search in (database('db1').T*3) 'abc' and ",expectedOptions);expectedOptions=unionOfAllColumns.union(additionalOptions).ToArray(System.String);this.TestOptionsForSearch("search in (database('db1').T*) 'abc' and ",expectedOptions)},TestOptionsForSearch:function(command,expectedOptions){var context=this.GetQueryContext(command);this.ValidateSearchRules(command,context,expectedOptions)},ValidateSearchRules:function(command,tableContext,expectedOptions){var $t,rule={},actualOptions;Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider.TryMatchSpecificRule(command,tableContext,Kusto.Data.IntelliSense.RuleKind.YieldPostSearchOptions,rule)||Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider.TryMatchSpecificRule(command,tableContext,Kusto.Data.IntelliSense.RuleKind.YieldInsideSearchOptions,rule)||Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider.TryMatchSpecificRule(command,tableContext,Kusto.Data.IntelliSense.RuleKind.YieldPostSearchKindOptions,rule)||Kusto.UT.IntelliSenseRulesTests.Assert.Fail(System.String.format("No matching search rule for query '{0}'",[command]));actualOptions=($t=System.String,System.Linq.Enumerable.from(rule.v.GetOptions(tableContext),$t).toList($t));Kusto.UT.IntelliSenseRulesTests.ValidateEntities(command,expectedOptions,actualOptions)},TestProjectAssignmentEntities:function(){this.CheckProjectedAndExtendedProperties("Table1\r\n                | project x=1 |\r\n                ",System.Array.init(["x"],System.String));this.CheckProjectedAndExtendedProperties("Table1\r\n                | project y=xxxx+1, z= 33, x=xxxx/2 |\r\n                ",System.Array.init(["x","y","z"],System.String))},TestProjectedAwayEntities:function(){this.CheckProjectedAndExtendedProperties("Table1 | project X, Y, Z | project-away X |",System.Array.init(["Y","Z"],System.String));this.CheckProjectedAndExtendedProperties("Table1 | project X, Y, Z | mvexpand myCount=range(1, 2, 3) | project-away Y |",System.Array.init(["myCount","X","Z"],System.String));this.CheckProjectedAndExtendedProperties("Table1 | project X, Y, Z | summarize myCount=count(X), mySum= sum(Y), myCount2 = count() by bin(Z, 10min), X | project-away Z |",System.Array.init(["myCount","mySum","myCount2","X"],System.String));this.CheckProjectedAndExtendedProperties("Table1 | project-away ClusterName |summarize count(), any(SubscriptionId) by LogicalServerName, AppName, database_id, bin(TIMESTAMP, time(10m)) | ",System.Array.init(["count_","any_SubscriptionId","LogicalServerName","AppName","database_id","TIMESTAMP"],System.String));this.CheckProjectedAndExtendedProperties("Table1 | project-away X | summarize sum(Y) by bin(Z, 10min)|",System.Array.init(["sum_Y","Z"],System.String));this.CheckProjectedAndExtendedProperties("Table1 | project Field1, Field2, Field3 \r\n            | extend Duration=Field2 - Field3, Field4=xxxx \r\n            | join (Table2 | extend FieldA=1, FieldB=22 | project-away FieldB | filter X",System.Array.init(["FieldA"],System.String));this.CheckProjectedAndExtendedProperties("Table1 | summarize count(X), dcount(Y) | project-away count_X |",System.Array.init(["dcount_Y"],System.String));this.CheckProjectedAndExtendedProperties("Table1 | summarize any(X), any(Y) | project-away any_Y |",System.Array.init(["any_X"],System.String));this.CheckProjectedAndExtendedProperties("| project Field1, Field2, Field3 \r\n            | extend Duration=Field2 - Field3, Field4=xxxx \r\n            | project-away Duration, Field4 | ",System.Array.init(["Field1","Field2","Field3"],System.String));this.CheckProjectedAndExtendedProperties("KustoLogs \r\n            | filter EventText like 'Gateway.ExecuteQuery'\r\n            | extend fake=1\r\n            | extend op=extract('Gateway.ExecuteQuery:.*(join|summarize|filter)', 1, EventText) \r\n            | extend is_Join=extract('Gateway.ExecuteQuery:.*(join)', 1, EventText) \r\n            | extend is_Filter=extract('Gateway.ExecuteQuery:.*(filter)', 1, EventText) \r\n            | project-away fake |",System.Array.init(["op","is_Join","is_Filter"],System.String))},TestProjectedRenameEntities:function(){this.CheckProjectedAndExtendedProperties("Table1 \r\n| project X, Y, Z \r\n| project-rename A=X \r\n| ",System.Array.init(["A","Y","Z"],System.String));this.CheckProjectedAndExtendedProperties("Table1 \r\n| project X, Y, Z \r\n| project-rename B=Z, A=X \r\n| ",System.Array.init(["A","Y","B"],System.String))},TestPrintOperatorEntities:function(){this.CheckProjectedAndExtendedProperties("print Message = 'xyz' |",System.Array.init(["Message"],System.String))},TestParseOperatorEntities:function(){this.CheckProjectedAndExtendedProperties("range x from 1 to 1 step 1\r\n                | extend str = ''string''\r\n                | parse str with * \"s\" substr * |",System.Array.init(["x","str","substr"],System.String));this.CheckProjectedAndExtendedProperties("range x from 1 to 1 step 1\r\n                | extend str = ''string''\r\n                | parse str with * \"s\" substr 'abdc' substr2:string * |",System.Array.init(["x","str","substr","substr2"],System.String));this.CheckProjectedAndExtendedProperties("range x from 1 to 1 step 1\r\n                | extend str = ''string''\r\n                | parse str with * \"s\" substr 'abdc' substr2:string * num1:int |",System.Array.init(["x","str","substr","substr2","num1"],System.String))},TestArgMinMaxEntities:function(){this.CheckProjectedAndExtendedProperties("Table1\r\n                | summarize argmin(c0, c1, c2) |\r\n                ",System.Array.init(["min_c0","min_c0_c1","min_c0_c2"],System.String));this.CheckProjectedAndExtendedProperties("Table1\r\n                | summarize argmin(c0+1d, c1/c2, c2+c3) |\r\n                ",System.Array.init(["min_","min__arg1","min__arg2"],System.String));this.CheckProjectedAndExtendedProperties("Table1\r\n                | summarize argmax(c0, c1, c2) by group1, group2 |\r\n                ",System.Array.init(["max_c0","max_c0_c1","max_c0_c2","group1","group2"],System.String));this.CheckProjectedAndExtendedProperties("Table1\r\n                | summarize argmax(c0+1d, c1/c2, c2+c3) |\r\n                ",System.Array.init(["max_","max__arg1","max__arg2"],System.String));this.CheckProjectedAndExtendedProperties("Table1\r\n                | project column1, column2, column3, xyz\r\n                | summarize argmin(column1, *) by column3, column2 |\r\n                ",System.Array.init(["min_column1","min_column1_xyz","column3","column2"],System.String),System.Array.init(["column1","column2","column3","xyz"],System.String));this.CheckProjectedAndExtendedProperties("Table1 \r\n                | project column1, column2, column3, xyz\r\n                | summarize argmin(column1, [*col*]) by column3 |\r\n                ",System.Array.init(["min_column1","min_column1_column2","column3"],System.String),System.Array.init(["column1","column2","column3","xyz"],System.String));this.CheckProjectedAndExtendedProperties("Table1\r\n                | summarize arg_min(c0, c1, c2) |\r\n                ",System.Array.init(["c0","c1","c2"],System.String));this.CheckProjectedAndExtendedProperties("Table1\r\n                | summarize arg_min(c0+1d, c1/c2, c2+c3) |\r\n                ",System.Array.init(["min_","min__arg1","min__arg2"],System.String));this.CheckProjectedAndExtendedProperties("Table1\r\n                | summarize arg_min(c0+1d, c1/c2, c2) |\r\n                ",System.Array.init(["min_","min__arg1","c2"],System.String));this.CheckProjectedAndExtendedProperties("Table1\r\n                | summarize arg_max(c0, c1, c2) by group1, group2 |\r\n                ",System.Array.init(["c0","c1","c2","group1","group2"],System.String));this.CheckProjectedAndExtendedProperties("Table1\r\n                | summarize arg_max(c0+1d, c1/c2, c2+c3) |\r\n                ",System.Array.init(["max_","max__arg1","max__arg2"],System.String));this.CheckProjectedAndExtendedProperties("Table1\r\n                | summarize arg_max(c0, c1/c2, c2+c3, c2) |\r\n                ",System.Array.init(["c0","max_c0_arg1","max_c0_arg2","c2"],System.String));this.CheckProjectedAndExtendedProperties("Table1\r\n                | project column1, column2, column3, xyz\r\n                | summarize arg_min(column1, *) by column3, column2 |\r\n                ",System.Array.init(["column1","xyz","column3","column2"],System.String),System.Array.init(["column1","column2","column3","xyz"],System.String));this.CheckProjectedAndExtendedProperties("Table1 \r\n                | project column1, column2, column3, xyz\r\n                | summarize arg_min(column1, [*col*]) by column3 |\r\n                ",System.Array.init(["column1","column2","column3"],System.String),System.Array.init(["column1","column2","column3","xyz"],System.String))},TestSummarizeOperationsOverFunctions:function(){this.CheckProjectedAndExtendedProperties("range x from 1 to 1 step 1\r\n| extend y = x + 1, z = x + 2\r\n| summarize val1 = sum(x)/sum(z), sumOfY=sum(y), sumOfZ =sum(z) |",System.Array.init(["val1","sumOfY","sumOfZ"],System.String));this.CheckProjectedAndExtendedProperties("Table1\r\n                | project column1, column2, column3, xyz\r\n                | summarize argmin(column1, *) by column3, column2 |\r\n                ",System.Array.init(["min_column1","min_column1_xyz","column3","column2"],System.String),System.Array.init(["column1","column2","column3","xyz"],System.String));this.CheckProjectedAndExtendedProperties("Table1\r\n                | summarize argmax(c0, c1, c2) by group1, group2 |\r\n                ",System.Array.init(["max_c0","max_c0_c1","max_c0_c2","group1","group2"],System.String));this.CheckProjectedAndExtendedProperties("KustoSources | project Source, Data | join (KustoLogs | summarize max(ActivityID) by Source, Timestamp ) on Source |",System.Array.init(["Source","Data","max_ActivityID","Timestamp"],System.String));this.CheckProjectedAndExtendedProperties("KustoSources | project Source, Data | join (KustoLogs | summarize max(strlen(ActivityID)) by Source, Timestamp ) on Source |",System.Array.init(["Source","Data","max_","Timestamp"],System.String));this.CheckProjectedAndExtendedProperties("Table1\r\n                | summarize argmin(c0, c1, c2) |\r\n                ",System.Array.init(["min_c0","min_c0_c1","min_c0_c2"],System.String));this.CheckProjectedAndExtendedProperties("Table1\r\n                | summarize argmin(strlen(c0), c1, c2) |\r\n                ",System.Array.init(["min_","min__c1","min__c2"],System.String));this.CheckProjectedAndExtendedProperties("Table1\r\n                | summarize argmax(strlen(c0), c1, c2) |\r\n                ",System.Array.init(["max_","max__c1","max__c2"],System.String))},IntelliSenseCommandEntitiesForTablesTest:function(){this.TestTableEntities("Table1");this.TestTableEntities("['Table.2']");this.TestTableEntities("database('db1').Table1");this.TestTableEntities("database('db1').['Table.2']");this.TestTableEntities("cluster('other').database('db2').Table1");this.TestTableEntities("cluster('other').database('db2').['Table.2']")},TestTableEntities:function(tableName){var tableContext=Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider.AnalyzeCommand$1(tableName,null).Context;this.CheckQueryProperties(tableName,tableContext,Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable(tableName))},IntelliSenseCommandEntitiesForClusters:function(){this.CheckDatabases("cluster('other').database(",System.Array.init(["'db2'"],System.String));this.CheckDatabases("find in (cluster('other').database(",System.Array.init(["'db2'"],System.String));this.CheckDatabases("find in (cluster('other').database('db2').Table1, cluster('other').database(",System.Array.init(["'db2'"],System.String));this.CheckDatabases("#connect cluster('other').database(",System.Array.init(["'db2'"],System.String))},IntelliSenseCommandEntitiesForGetSchemaOperator:function(){var expected=System.Array.init(["ColumnName","ColumnOrdinal","DataType","ColumnType"],System.String);this.CheckProjectedAndExtendedProperties("Table1 | summarize count() by Source | getschema | project ",expected);this.CheckProjectedAndExtendedProperties("Table1 | union (Table2) | getschema | sort by ",expected);this.CheckProjectedAndExtendedProperties("Table1 | join (Table2) on ActivityId | getschema | project ",expected)},CheckDatabases:function(command,expectedFields){var $t,tableContext=this.GetQueryContext(command),rule={},existingFields;Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider.TryMatchSpecificRule(command,tableContext,Kusto.Data.IntelliSense.RuleKind.YieldDatabaseNamesOptions,rule)||Kusto.UT.IntelliSenseRulesTests.Assert.Fail(System.String.format("Couldn't derive 'databases' rule for the query '{0}'",[command]));existingFields=($t=System.String,System.Linq.Enumerable.from(rule.v.GetOptions(tableContext),$t).toList($t));Kusto.UT.IntelliSenseRulesTests.ValidateEntities(command,expectedFields,existingFields)},IntelliSenseCommandEntitiesUsingFunctionsTest:function(){this.CheckProjectedAndExtendedProperties("func6 | ",System.Array.init(["NumField1","NumField3"],System.String));this.CheckProjectedAndExtendedProperties("func4 | ",System.Array.init(["NumField1","NumField3"],System.String));this.CheckProjectedAndExtendedProperties("func2 | ",System.Array.init(["NumField1"],System.String));this.CheckProjectedAndExtendedProperties("func1 | ",System.Array.init(["NumField1"],System.String));this.CheckProjectedAndExtendedProperties("func3 | extend y = 111 | ",System.Array.init(["count_","NumField2","y"],System.String))},IntelliSenseEntityParserTest:function(){var command='argmax(PreciseTimeStamp, IsHealthy), max(iff(IsHealthy == 1, PreciseTimeStamp, datetime("2000-01")))',entities=System.Array.init(["argmax:PreciseTimeStamp",'max:iff(IsHealthy == 1, PreciseTimeStamp, datetime("2000-01"))'],System.String),resolvedEntities=Kusto.Data.IntelliSense.ExpressionEntityParser.ParseEntities(command),result=System.Linq.Enumerable.from(resolvedEntities,Kusto.Data.IntelliSense.ExpressionEntity).select($asm.$.Kusto.UT.IntelliSenseRulesTests.f2).toList(System.String);Kusto.UT.IntelliSenseRulesTests.ValidateEntities(command,entities,result);var command1="(Timestamp, EventText)= argmin(Timestamp, EventText), RootActivityId",entities1=System.Array.init([":Timestamp",":EventText",":RootActivityId"],System.String),resolvedEntities1=Kusto.Data.IntelliSense.ExpressionEntityParser.ParseEntities(command1),result1=System.Linq.Enumerable.from(resolvedEntities1,Kusto.Data.IntelliSense.ExpressionEntity).select($asm.$.Kusto.UT.IntelliSenseRulesTests.f2).toList(System.String);Kusto.UT.IntelliSenseRulesTests.ValidateEntities(command1,entities1,result1);var command2="makeset(ReportIndex), makeset(AlertId), File_Sha256)",entities2=System.Array.init(["makeset:ReportIndex","makeset:AlertId",":File_Sha256"],System.String),resolvedEntities2=Kusto.Data.IntelliSense.ExpressionEntityParser.ParseEntities(command2),result2=System.Linq.Enumerable.from(resolvedEntities2,Kusto.Data.IntelliSense.ExpressionEntity).select($asm.$.Kusto.UT.IntelliSenseRulesTests.f2).toList(System.String);Kusto.UT.IntelliSenseRulesTests.ValidateEntities(command2,entities2,result2)},GetQueryContext:function(command){return Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider.AnalyzeCommand$1(command,null).Context},CheckQueryProperties:function(command,tableContext,expectedFields){var $t,rule={},existingFields;Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider.TryMatchSpecificRule(command,tableContext,Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForFilterInFind,rule)||Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider.TryMatchSpecificRule((command||"")+" project ",tableContext,Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProjectInFind,rule)||Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider.TryMatchSpecificRule((command||"")+" | project ",tableContext,Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProject,rule)||Kusto.UT.IntelliSenseRulesTests.Assert.Fail(System.String.format("Couldn't derive 'find .. where', 'find .. where .. project' and 'project' rules for the query '{0}'",[command]));existingFields=($t=System.String,System.Linq.Enumerable.from(rule.v.GetOptions(tableContext),$t).toList($t));Kusto.UT.IntelliSenseRulesTests.ValidateEntities(command,expectedFields,existingFields)},CheckProjectedAndExtendedProperties:function(command,expectedFields,existingFields){var $t,flatten,analyzedCommand;existingFields===void 0&&(existingFields=null);$t=Bridge.getEnumerator(System.Array.init([!0,!1],System.Boolean));try{while($t.moveNext()){flatten=$t.Current;System.String.contains(command,"//")||(command=flatten?System.String.replaceAll(System.String.replaceAll(command,String.fromCharCode(13),String.fromCharCode(32)),String.fromCharCode(10),String.fromCharCode(32)):System.String.replaceAll(System.String.replaceAll(command,String.fromCharCode(13),String.fromCharCode(32)),String.fromCharCode(10),String.fromCharCode(32)));existingFields==null&&(analyzedCommand=Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider.AnalyzeCommand$1(command,null),existingFields=Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable(analyzedCommand.Context.Context));var entititesList=new(System.Collections.Generic.List$1(System.String).ctor),finalEntitiesList=new(System.Collections.Generic.List$1(System.String).ctor),entitiesResolveResult=Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider.ResolveEntitiesFromCommand(command,entititesList,existingFields);switch(entitiesResolveResult){case Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.ReplaceEntities:finalEntitiesList.AddRange(entititesList);break;case Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.None:existingFields!=null&&finalEntitiesList.AddRange(existingFields);break;case Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.AppendEntities:existingFields!=null&&finalEntitiesList.AddRange(existingFields);finalEntitiesList.AddRange(entititesList);break}Kusto.UT.IntelliSenseRulesTests.ValidateEntities(command,expectedFields,finalEntitiesList)}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}},TestEntitiesForFindFilterAndProjection:function(command,columns,isAdditionalColumns){columns===void 0&&(columns=null);isAdditionalColumns===void 0&&(isAdditionalColumns=!1);var tableContext=this.GetQueryContext(command);this.CheckQueryProperties(command,tableContext,isAdditionalColumns?columns==null?Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable(tableContext.Context):System.Linq.Enumerable.from(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable(tableContext.Context),System.String).concat(columns).ToArray(System.String):columns)},IntelliSenseFilterTest:function(){this.TestFilter("filter","like");this.TestFilter("filter","contains");this.TestFilter("filter","notcontains");this.TestFilter("where","like");this.TestFilter("where","contains");this.TestFilter("where","notcontains");this.TestFilter("where","==");this.TestFilter("where","!=")},TestFilter:function(filterKeyword,containsKeyword){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture("Table1 | {0}",[filterKeyword,containsKeyword]),Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture("Table1 | {0} ",[filterKeyword,containsKeyword]),Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForFilter));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture("Table1 | {0}    ",[filterKeyword,containsKeyword]),Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForFilter));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture("Table1 | {0} Field1",[filterKeyword,containsKeyword]),Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture("Table1 | {0} Field1 ",[filterKeyword,containsKeyword]),Kusto.Data.IntelliSense.RuleKind.YieldStringComparisonOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture("Table1 | {0} FieldX ",[filterKeyword,containsKeyword]),Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture("Table1 | {0} Field1 {1}",[filterKeyword,containsKeyword]),Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture("Table1 | {0} Field1 {1} ",[filterKeyword,containsKeyword]),Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture("Table1 | {0} Field1 {1} 'xxx' and ",[filterKeyword,containsKeyword]),Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForFilter));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture("Table1 | {0} Field1 {1} 'xxx' and Field2 ",[filterKeyword,containsKeyword]),Kusto.Data.IntelliSense.RuleKind.YieldStringComparisonOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture("Table1 | {0} Field1 {1} 'xxx' or ",[filterKeyword,containsKeyword]),Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForFilter));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture("Table1 | {0} Field1 {1} 'xxx' or Field2 ",[filterKeyword,containsKeyword]),Kusto.Data.IntelliSense.RuleKind.YieldStringComparisonOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture("Table1 | {0} Field1 {1} 'xxx' |",[filterKeyword,containsKeyword]),Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture("Table1 | {0} Field1 {1} 'xxx' | ",[filterKeyword,containsKeyword]),Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture("Table1 | {0} NumField1",[filterKeyword]),Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture("Table1 | {0} NumField1 ",[filterKeyword]),Kusto.Data.IntelliSense.RuleKind.YieldNumericComparisonOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture("Table1 | {0} NumField1 ==",[filterKeyword]),Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture("Table1 | {0} NumField1 == 10 and ",[filterKeyword]),Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForFilter));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture("Table1 | {0} NumField1 == 10 and NumField1 ",[filterKeyword]),Kusto.Data.IntelliSense.RuleKind.YieldNumericComparisonOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture("Table1 | {0} NumField1 == 10 or ",[filterKeyword]),Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForFilter));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture("Table1 | {0} NumField1 == 10 or NumField1 ",[filterKeyword]),Kusto.Data.IntelliSense.RuleKind.YieldNumericComparisonOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture("Table1 | xxx Field1, Field2 | {0} ",[filterKeyword]),Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForFilter));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture("Table1 | xxx Field1, Field2 {0} ",[filterKeyword]),Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture("Table1 | {0} Field1\r\n    {1}               \r\n    'dddd'  ",[filterKeyword,containsKeyword]),Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture("Table1 | filter {0}\r\n    {1}               \r\n    'dddd'  \r\n    ",[filterKeyword,containsKeyword]),Kusto.Data.IntelliSense.RuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseRangeTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("range",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("range ziv",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("range ziv ",Kusto.Data.IntelliSense.RuleKind.YieldRangeFromOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("range ziv from",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("range ziv from ",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("range ziv from datetime(",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("range ziv from datetime(2012-01-01)",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("range ziv from datetime(2012-01-01) ",Kusto.Data.IntelliSense.RuleKind.YieldRangeFromToOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("range ziv from datetime(2012-01-01) to",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("range ziv from datetime(2012-01-01) to ",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("range ziv from datetime(2012-01-01) to datetime(2013-01-01)",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("range ziv from datetime(2012-01-01) to datetime(2013-01-01) ",Kusto.Data.IntelliSense.RuleKind.YieldRangeFromToStepOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("range ziv from datetime(2012-01-01) to datetime(2013-01-01) st",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("range ziv from datetime(2012-01-01) to datetime(2013-01-01) step 123",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("range ziv from datetime(2012-01-01) to datetime(2013-01-01) step 123 ",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("range ziv from 123.4",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("range ziv from 123.4 ",Kusto.Data.IntelliSense.RuleKind.YieldRangeFromToOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("range ziv from 123.4 to",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("range ziv from 123.4 to ",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("range ziv from 123.4 to 456",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("range ziv from 123.4 to 456 ",Kusto.Data.IntelliSense.RuleKind.YieldRangeFromToStepOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("range ziv from 123.4 to 456 st",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("range ziv from 123.4 to 456 step 123",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("range ziv from 123.4 to 456 step 123 ",Kusto.Data.IntelliSense.RuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseDatabaseTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("database",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("database(",Kusto.Data.IntelliSense.RuleKind.YieldDatabaseNamesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(" database(",Kusto.Data.IntelliSense.RuleKind.YieldDatabaseNamesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("database('xyz').",Kusto.Data.IntelliSense.RuleKind.YieldTableNamesForRemoteQueryOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("cluster('foo').database",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("cluster('foo').database(",Kusto.Data.IntelliSense.RuleKind.YieldDatabaseNamesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("cluster('foo').database('xyz').",Kusto.Data.IntelliSense.RuleKind.YieldTableNamesForRemoteQueryOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("cluster('foo').database('xyz').xx",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("find in (database(",Kusto.Data.IntelliSense.RuleKind.YieldDatabaseNamesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("find in (cluster('foo').database(",Kusto.Data.IntelliSense.RuleKind.YieldDatabaseNamesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("find in (cluster('foo').database('db1').Table1, database(",Kusto.Data.IntelliSense.RuleKind.YieldDatabaseNamesOptions));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseClusterTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("cluster",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("cluster(",Kusto.Data.IntelliSense.RuleKind.YieldClusterNamesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(" cluster(",Kusto.Data.IntelliSense.RuleKind.YieldClusterNamesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("cluster('foo').cluster",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("cluster('foo').cluster(",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("cluster('foo').database('some')",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("cluster('foo').",Kusto.Data.IntelliSense.RuleKind.YieldDatabaseFunctionOption));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseSummarizeTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize ",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize res",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize res=",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize res =",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize res= ",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize res=count(",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize count(",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize countif(",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize dcount(",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize dcountif(",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize max(",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize min(",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize avg(",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize stdev(",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize variance(",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize sum(",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize sum( ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize sumif(",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForTwoParamFunctions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize sum(Filed1)",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize sum(Filed1) ",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize sum(Filed1)+",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize sum(Filed1) +",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize sum(Filed1) + ",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize sum(Filed1) / ",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize sum(Filed1) - ",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize sum(Filed1) * ",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize sum(Filed1)+count(",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize sum(Filed1)+max(",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize sum(Filed1)+min(",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize sum(Filed1)+avg(",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize sum(Filed1)+any(",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize sum(Filed1)+sum(",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize sum(Filed1)+sum( ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize sum(Filed1)+sum(Filed1)",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize sum(Filed1)+sum(Filed1) ",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize sum(Filed1) ",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize sum(Filed1), ",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize sum(Filed1), count(",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize sum(Filed1), count(Filed2)",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize sum(Filed1), count(Filed2) ",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize sum(Filed1)+",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize sum(Filed1) +",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize sum(Filed1) + ",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize sum(Filed1) / ",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize sum(Filed1) - ",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize sum(Filed1) * ",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize sum(Filed1) - ",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize sum(Filed1) ",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize sum(Filed1), ",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize sum(Filed1), count(",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize sum(Filed1), count(Filed2)",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize sum(Filed1), count(Filed2) ",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize sum(Filed1), count(Filed2) by",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize sum(Filed1), count(Filed2) by ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize sum(Filed1), count(Filed2) by Field1",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize sum(Filed1), count(Filed2) by Field1 ",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize sum(Filed1), count(Filed2) by Field1 ,",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize sum(Filed1), count(Filed2) by Field1 , ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize sum(Filed1), count(Filed2) by Field1, ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize sum(Filed1), count(Filed2) by Field1, Filed2",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize sum(Filed1), count(Filed2) by Field1, Filed2 ",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize sum(Filed1), count(Filed2) by Field1, Filed2, ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize sum(Filed1), count(Filed2) by Field1, Filed2 | count by ",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize sum(Filed1), count(Filed2) by Field1, Filed2 | summarize by ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize sum(Filed1), count(Filed2) by Field1, Filed2 | summarize by Feild1",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize sum(Filed1), count(Filed2) by Field1, Filed2 | summarize by Feild1,",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize sum(Filed1), count(Filed2) by Field1, Filed2 | summarize by Feild1, ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize sum(Filed1), count(Filed2) by Field1, Filed2 | summarize by iff(1==0, Feild1, Field2),",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize sum(Filed1), count(Filed2) by Field1, Filed2 | summarize by iff(1==0, Feild1, Field2), ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize sum(Filed1), count(Filed2) by Field1, Filed2 | summarize count() by bin(",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForTwoParamFunctions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize sum(Filed1), count(Filed2) by Field1, Filed2 | summarize count() by bin( ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForTwoParamFunctions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize sum(Filed1), count(Filed2) by Field1, Filed2 | summarize count() by bin(Field1,",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize sum(Filed1), count(Filed2) by Field1, Filed2 | summarize count() by bin(Field1, ",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize sum(Filed1), count(Filed2) by Field1, Filed2 | summarize count() by bin(Field1, 1), ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize percentile(",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForTwoParamFunctions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize percentile(Field1,",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize percentiles(",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForManyParamFunctions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize percentiles(Field1,",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize percentilew(",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForThreeParamFunctions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize percentilew(Field1,",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize percentilesw(",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForManyParamFunctions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize percentilesw(Field1,",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForManyParamFunctions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize arg_min(",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForManyParamFunctions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize arg_max(",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForManyParamFunctions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize arg_min(Field1,",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForManyParamFunctions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | summarize arg_max(Field1,",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForManyParamFunctions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | xxx Field1, Field2 | summarize ",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | xxx Field1, Field2 summarize ",Kusto.Data.IntelliSense.RuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseMakeSeriesTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series ",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series res",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series res=",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series res =",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series res= ",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series 100*",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series x= 100*",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series res=count(",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series count(",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series countif(",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series dcount(",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series dcountif(",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series max(",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series min(",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series avg(",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series stdev(",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series variance(",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series sum(",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series sum( ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series sumif(",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForTwoParamFunctions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series sum(Filed1)",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series sum(Filed1) ",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForDefaultOrOn));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series x=sum(Filed1) ",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForDefaultOrOn));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series x = sum(Filed1) ",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForDefaultOrOn));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series x=100*sum(Filed1) ",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForDefaultOrOn));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series x= sum(Filed1) ",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForDefaultOrOn));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series x=sum(Filed1), avg(field2) ",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForDefaultOrOn));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series sum(Filed1), x=avg(field2) ",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForDefaultOrOn));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series sum(Filed1), avg(field2) ",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForDefaultOrOn));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series x= sum(Filed1)",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series x=sum(Filed1), avg(field2)",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series sum(Filed1) default=10 ",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForOn));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series x=sum(Filed1) default=10 ",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForOn));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series x = sum(Filed1) default=10 ",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForOn));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series x = sum(Filed1) default=10,y=sum(field2) default=10 ",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForOn));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series x = sum(Filed1), y=sum(field2) default=10 ",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForOn));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series x = sum(Filed1) default=10,y=sum(field2) default=10",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series sum(Filed1) default=10",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series x=sum(Filed1) default=",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series x=sum(Filed1) default= ",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series sum(Filed1) default=0 on ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForMakeSeries));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series sum(Filed1) on ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForMakeSeries));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series x=sum(Filed1) default=0, y=count() on ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForMakeSeries));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series x=sum(Filed1) default=0, y=count() default=0 on ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForMakeSeries));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series sum(Filed1) default=0 on",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series x=sum(Filed1) default= 0 on timestamp ",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForRange));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series x= sum(Filed1) default=0 on timestamp ",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForRange));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series x= sum(Filed1) on timestamp ",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForRange));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series x= sum(Filed1),y=avg(duration) default=0 on timestamp ",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForRange));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series sum(Filed1),y=avg(duration) default=0 on timestamp ",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForRange));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series sum(Filed1) default=0, y=count() on timestamp ",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForRange));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series sum(Filed1) default=0 on timestamp ",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForRange));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series x=sum(Filed1) default=0 on timestamp",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series sum(Filed1) default=0 on timestamp in range(",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForThreeParamFunctions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series sum(Filed1) on timestamp in range(",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForThreeParamFunctions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series x=sum(Filed1) on timestamp in range(",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForThreeParamFunctions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series sum(Filed1) default=0 on timestamp in range(ago(1d), now(),1h) ",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForBy));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series sum(Filed1) on timestamp in range(ago(1d), now(),1h) ",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForBy));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series x=sum(Filed1) on timestamp in range(ago(1d), now(),1h) ",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForBy));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series x=sum(Filed1) on timestamp in range(ago(1d), now(),1h)",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series sum(Filed1) default=0 on timestamp in range(ago(1d), now(),1h) by ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForMakeSeries));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series sum(Filed1) default=0 on timestamp in range(ago(1d), now(),1h) by field1, ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForMakeSeries));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series sum(Filed1) default=0 on timestamp in range(ago(1d), now(),1h) by ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForMakeSeries));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series sum(Filed1) default=0, y=count() on timestamp in range(ago(1d), now(),1h) by ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForMakeSeries));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series sum(Filed1), y=count() default=0 on timestamp in range(ago(1d), now(),1h) by field1, ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForMakeSeries));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series sum(Filed1) default=0 on timestamp in range(ago(1d), now(),1h) by",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | make-series sum(Filed1) default=0 on timestamp in range(ago(1d), now(),1h) by field1,",Kusto.Data.IntelliSense.RuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseDistinctTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | distinct",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | distinct ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | distinct Field1",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | distinct Field1 ",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | distinct Field1 ,",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | distinct Field1, ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | distinct Field1 , ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | distinct Field1, Field2",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | distinct Field1, Field2 ",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | distinct Field1, Field2, ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | distinct Field1, Field2 ",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | distinct sum(",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | distinct sum(Filed1), count(Field2)",Kusto.Data.IntelliSense.RuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseTopNestedTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top-nested",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top-nested ",Kusto.Data.IntelliSense.RuleKind.YieldNumericScalarOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top-nested 1",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top-nested 1 ",Kusto.Data.IntelliSense.RuleKind.YieldTopNestedOfKeywordOption));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top-nested 1 of",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top-nested 1 of ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForOrdering));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top-nested 1 of A",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top-nested 1 of A ",Kusto.Data.IntelliSense.RuleKind.YieldTopNestedOthersOption));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top-nested 1 of A by",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top-nested 1 of A by ",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top-nested 1 of A by 1",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top-nested 1 of A by 1 + ",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top-nested 1 of A by 1+ ",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top-nested 1 of A by 1+",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top-nested 1 of A by 1 * ",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top-nested 1 of A by 1 - ",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top-nested 1 of A by avg(A)",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top-nested 1 of A by avg(A) ",Kusto.Data.IntelliSense.RuleKind.YieldAscendingDescendingOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top-nested 1 of A by avg(",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top-nested 1 of A by avg(A), ",Kusto.Data.IntelliSense.RuleKind.YieldTopNestedKeywordOption));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top-nested 1 of A by avg(A), top-nested",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top-nested 1 of A by avg(A), top-nested ",Kusto.Data.IntelliSense.RuleKind.YieldNumericScalarOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top-nested 1 of A by avg(A), top-nested 1",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top-nested 1 of A by avg(A), top-nested 1 ",Kusto.Data.IntelliSense.RuleKind.YieldTopNestedOfKeywordOption));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top-nested 1 of A by avg(A) asc, top-nested 1 of",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top-nested 1 of A by avg(A), top-nested 1 of ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForOrdering));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top-nested 1 of A by avg(A) desc, top-nested 1 of A",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top-nested 1 of A by avg(A), top-nested 1 of A ",Kusto.Data.IntelliSense.RuleKind.YieldTopNestedOthersOption));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top-nested 1 of A by avg(A), top-nested 1 of A by",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top-nested 1 of A by avg(A), top-nested 1 of A by ",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top-nested 1 of bin(",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForTwoParamFunctions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top-nested 1 of bin(A,1m)",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top-nested 1 of bin(A,1m) ",Kusto.Data.IntelliSense.RuleKind.YieldByKeywordOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top-nested 1 of bin(A,1m) by",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top-nested 1 of bin(A,1m) by ",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top-nested 1 of bin(A,1m) with others = 12 by ",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top-nested 1 of bin(A,1m) by avg(A) ",Kusto.Data.IntelliSense.RuleKind.YieldAscendingDescendingOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top-nested 1 of bin(A,1m) with others = 15 by avg(A) ",Kusto.Data.IntelliSense.RuleKind.YieldAscendingDescendingOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top-nested 1 of bin(A,1m) by avg(A) asc",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top-nested 1 of bin(A,1m) by avg(A), ",Kusto.Data.IntelliSense.RuleKind.YieldTopNestedKeywordOption));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top-nested 1 of bin(A,1m) with others = 12 ",Kusto.Data.IntelliSense.RuleKind.YieldByKeywordOptions));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseTopHittersTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top-hitters",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top-hitters ",Kusto.Data.IntelliSense.RuleKind.YieldNumericScalarOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top-hitters 1",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top-hitters 1 ",Kusto.Data.IntelliSense.RuleKind.YieldTopNestedOfKeywordOption));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top-hitters 1 of",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top-hitters 1 of ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForOrdering));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top-hitters 1 of A",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top-hitters 1 of A ",Kusto.Data.IntelliSense.RuleKind.YieldByKeywordOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top-hitters 1 of A by",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top-hitters 1 of A by ",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top-hitters 1 of A by 1",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top-hitters 1 of A by 1 + ",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top-hitters 1 of A by 1+ ",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top-hitters 1 of A by 1+",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top-hitters 1 of A by 1 * ",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top-hitters 1 of A by 1 - ",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top-hitters 1 of A by avg(A)",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top-hitters 1 of A by avg(",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseProjectTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | project",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | project ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProject));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | project Fiel",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | project Field1",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | project Field1,",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | project Field1, ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProject));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | project Field1, Field2",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | project Field1, Field2 ",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | project Field1, Field2,",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | project Field1, Field2, ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProject));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | project Field1, Field2 | , ",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | xxx Field1, Field2 | project ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProject));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | xxx Field1, Field2 project ",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | project x=",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | project x= ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | project x= Fiel",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | project x= Field1,",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | project x= Field1, ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProject));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | project x= Field1, y",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | project x= Field1, y=",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseProjectAwayTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | project-away",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | project-away ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProjectAway));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | project-away Fiel",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | project-away Field1",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | project-away Field1,",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | project-away Field1, ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProjectAway));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | project-away Field1, Field2",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | project-away Field1, Field2 ",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | project-away Field1, Field2,",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | project-away Field1, Field2, ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProjectAway));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | project-away Field1, Field2 | , ",Kusto.Data.IntelliSense.RuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseProjectRenameTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | project-rename",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | project-rename ",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | project-rename Fiel",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | project-rename Field1",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | project-rename Field1 =",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProjectRename));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | project-rename Field1 = ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProjectRename));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | project-rename Field1 = z,",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | project-rename Field1 = z, ",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | project-rename Field1 = z, Feild2=",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProjectRename));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | project-rename Field1 = z, Feild2= ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProjectRename));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseLimitTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | limit",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | limit ",Kusto.Data.IntelliSense.RuleKind.YieldNumericScalarOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | limit 1",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | limit 2",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | limit 1 ",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | take",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | take ",Kusto.Data.IntelliSense.RuleKind.YieldNumericScalarOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | take 1",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | take 2",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | take 1 ",Kusto.Data.IntelliSense.RuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseSampleTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | sample",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | sample ",Kusto.Data.IntelliSense.RuleKind.YieldNumericScalarOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | sample 1",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | sample 2",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | sample 1 ",Kusto.Data.IntelliSense.RuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseSampleDistinctTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | sample-distinct",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | sample-distinct ",Kusto.Data.IntelliSense.RuleKind.YieldNumericScalarOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | sample-distinct 1",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | sample-distinct 1 ",Kusto.Data.IntelliSense.RuleKind.YieldTopNestedOfKeywordOption));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | sample-distinct 1 of",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | sample-distinct 1 of ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | sample-distinct 1 of A",Kusto.Data.IntelliSense.RuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseShowCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".show",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".show ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1("\n.show ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(" .show ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".show xxx | .show ",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".show principal ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowPrincipalCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".alter policies ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldMultiplePoliciesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".delete policies ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDeleteMultiplePoliciesOptions));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseClientDirectivesTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("#",Kusto.Data.IntelliSense.RuleKind.YieldClientDirectivesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("#connect",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("#connect ",Kusto.Data.IntelliSense.RuleKind.YieldClientDirective_ConnectOptions));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseAppendCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".append",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".append ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".set-or-append",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".set-or-append ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseReplaceCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".set-or-replace",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".set-or-replace ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseExtendTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | extend",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | extend ",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | extend newop",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | extend newop=",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | extend newop=xx",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | extend newop=xx ",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | extend newop=xx ,",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | extend newop=xx+",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | extend newop=xx-",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | extend newop=xx/",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | extend newop=xx*",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | extend newop=xx +",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | extend newop=xx -",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | extend newop=xx /",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | extend newop=xx *",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | extend newop=xx+ ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | extend newop=xx- ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | extend newop=xx/ ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | extend newop=xx* ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | extend newop=xx + ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | extend newop=xx / ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | extend newop=xx * ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | extend newop=xx+yy",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | extend newop=xx+yy,",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | extend newop=xx+yy,newop1=",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | extend newop=xx+yy,newop1=strlen(",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | extend newop=xx+yy,newop1=tostring(",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | extend newop=xx+yy,newop1=strcat(",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForManyParamFunctions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | extend newop=xx+yy,newop1=toupper(",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | extend newop=xx+yy,newop1=iff(",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForThreeParamFunctions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | extend newop=xx+yy | summarize count(newop) by newop bin=",Kusto.Data.IntelliSense.RuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseParseOperator:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | parse ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForParse));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | parse kind",Kusto.Data.IntelliSense.RuleKind.YieldParseKeywordKindsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | parse kind = simple ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForParse));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | parse kind = regex ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForParse));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | parse kind = relaxed ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForParse));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | parse kind = relaxed flags = iU ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForParse));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | parse kind = simple column ",Kusto.Data.IntelliSense.RuleKind.YieldWithKeywordOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | parse kind = simple flags = iU column ",Kusto.Data.IntelliSense.RuleKind.YieldWithKeywordOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | parse kind = regex column ",Kusto.Data.IntelliSense.RuleKind.YieldWithKeywordOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | parse kind = relaxed column ",Kusto.Data.IntelliSense.RuleKind.YieldWithKeywordOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | parse kind = simple column with ",Kusto.Data.IntelliSense.RuleKind.YieldStarOption));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | parse kind = regex column with ",Kusto.Data.IntelliSense.RuleKind.YieldStarOption));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | parse kind = relaxed column with ",Kusto.Data.IntelliSense.RuleKind.YieldStarOption));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | parse kind = simple column with extendedCol1:",Kusto.Data.IntelliSense.RuleKind.YieldParseTypesKeywordOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | parse kind = regex column with extendedCol1:",Kusto.Data.IntelliSense.RuleKind.YieldParseTypesKeywordOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | parse kind = relaxed column with extendedCol1:",Kusto.Data.IntelliSense.RuleKind.YieldParseTypesKeywordOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | parse  column with extendedCol1:long ",Kusto.Data.IntelliSense.RuleKind.YieldStarOption));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2('Table1 | parse kind = simple column with extendedCol1:long "someDelemiter" ',Kusto.Data.IntelliSense.RuleKind.YieldStarOption));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | parse kind = relaxed column with extendedCol1:long | ",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | parse kind = regex column with extendedCol1:long | ",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | parse column with extendedCol1:long | ",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | parse column with * 'someDelemiter' * 'someDelemiter2' * 'SomeDelemiter3' SomeStringColumn | ",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | parse column with ",Kusto.Data.IntelliSense.RuleKind.YieldStarOption));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | parse column with * s:",Kusto.Data.IntelliSense.RuleKind.YieldParseTypesKeywordOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | parse column with * s:int ",Kusto.Data.IntelliSense.RuleKind.YieldStarOption));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | parse column with * s:int 'someDelimiter' ",Kusto.Data.IntelliSense.RuleKind.YieldStarOption));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseShowTableCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".show table",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".show table ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".show table xxx",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".show table xxx ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowTableEntitiesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".show table xxx extents",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".show table xxx extents ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowExtentsByEntityOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".show table xxx extents where",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".show table xxx extents where tags",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".show table xxx extents where tags ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowExtentsByEntityWithTagsFiltersOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".show table xxx extents hot",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".show table xxx extents hot ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowExtentsByEntityOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".show table xxx principals",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".show table xxx policy",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".show table xxx policy ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTablePoliciesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(".show table xxx | ",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".show tables (xxx,yyy) extents",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".show tables (xxx,yyy) extents ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowExtentsByEntityOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".show tables (xxx,yyy) extents where",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".show tables (xxx,yyy) extents where tags",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".show tables (xxx,yyy) extents where tags ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowExtentsByEntityWithTagsFiltersOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".show tables (xxx,yyy) extents hot",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".show tables (xxx,yyy) extents hot ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowExtentsByEntityOptions));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseAlterTableCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".alter table",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".alter table ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".alter table xxx",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".alter table xxx ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterTableEntitiesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".alter-merge table",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".alter-merge table ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".alter-merge table xxx",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".alter-merge table xxx ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterTableEntitiesOptions));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseDeleteTableCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".delete table",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".delete table ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".delete table xxx",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".delete table xxx ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDeleteTableEntitiesOptions));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseDropTableCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".drop table",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".drop table ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".drop table xxx",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".drop table xxx ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDropTableEntitiesOptions));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseAlterFunctionCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".alter function",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".alter function xxx",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".alter function ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldFunctionNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".alter function xxx ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterFunctionEntitiesOptions));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseShowDatabaseCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".show database",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".show database ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDatabaseNames));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".show database xxx",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".show database xxx ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowDatabasePrincipalsPoliciesAndSchemaOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".show database xxx extents",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".show database xxx extents ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowExtentsByEntityOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".show database xxx extents hot",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".show database xxx extents hot ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowExtentsByEntityOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".show database xxx principals",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".show database xxx policy ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDatabasePoliciesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".show database xxx policy",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(".show database xxx principals | ",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".show database xxx schema",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(".show database xxx schema | ",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".show database xxx extents where",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".show database xxx extents where tags",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".show database xxx extents where tags ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowExtentsByEntityWithTagsFiltersOptions));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseShowDatabasesCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".show databases",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".show databases ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowDatabasesOptions));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseShowClusterCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".show cluster",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".show cluster ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowClusterPrincipalsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".show cluster extents",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".show cluster extents ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowExtentsByEntityOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".show cluster extents hot",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".show cluster extents hot ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowExtentsByEntityOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".show cluster principals",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".show cluster policy ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldClusterPoliciesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".show cluster policy",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(".show cluster principals | ",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseShowBasicAuthUsersCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".show basicauth",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".show basicauth ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowBasicAuthOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".show basicauth users",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseIngestionDuplicateCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".dup-next-ingest",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".dup-next-ingest ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldIngestionDuplicationOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".dup-next-ingest into",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".dup-next-ingest into ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".dup-next-ingest into ttt",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".dup-next-ingest into ttt to h@'container'",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".dup-next-failed-ingest",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".dup-next-failed-ingest ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldIngestionDuplicationOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".dup-next-failed-ingest into",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".dup-next-failed-ingest into ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".dup-next-failed-ingest into ttt",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".dup-next-failed-ingest into ttt to h@'container'",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseColumnCommandTest:function(){var $t,policiesCommands=System.Array.init(["show","alter","alter-merge","delete"],System.String),testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor),policyCommand;$t=Bridge.getEnumerator(policiesCommands);try{while($t.moveNext())policyCommand=$t.Current,testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(".{0} column",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.None)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(".{0} column xxx",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.None)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(".{0} column xxx ",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPoliciesOptions)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(".{0} column xxx policy",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.None)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(".{0} column xxx policy ",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldColumnPoliciesOptions))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseDatabasePoliciesCommandTest:function(){var $t,policiesCommands=System.Array.init(["alter","alter-merge","delete"],System.String),testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor),policyCommand,expectedMatchingRule;$t=Bridge.getEnumerator(policiesCommands);try{while($t.moveNext())policyCommand=$t.Current,testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(".{0} database",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.None)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(".{0} database xxx",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.None)),expectedMatchingRule=System.String.equals(policyCommand,"alter")?Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterDatabaseCommandOptions:Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPoliciesOptions,testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(".{0} database xxx ",[policyCommand]),expectedMatchingRule)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(".{0} database xxx policy",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.None)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(".{0} database xxx policy ",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDatabasePoliciesOptions)),System.String.equals(policyCommand,"alter-merge")&&(testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(".{0} database xxx policy retention ",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterMergePolicyRetentionOptions)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(".{0} database xxx policy retention softdelete = ",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterTimeSpanPolicyOptions)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(".{0} database xxx policy retention harddelete = ",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterTimeSpanPolicyOptions)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(".{0} database xxx policy retention softdelete = xxx",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.None)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(".{0} database xxx policy retention softdelete = xxx ",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterMergePolicyRetentionSoftDeleteDefinedOptions)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(".{0} database xxx policy retention harddelete = xxx",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.None)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(".{0} database xxx policy retention harddelete = xxx ",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.None)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(".{0} database xxx policy retention softdelete = xxx harddelete = xxx",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.None)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(".{0} database xxx policy retention softdelete = xxx harddelete = xxx ",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.None)))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseTablePoliciesCommandTest:function(){var $t,policiesCommands=System.Array.init(["alter","alter-merge","delete"],System.String),testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor),policyCommand;$t=Bridge.getEnumerator(policiesCommands);try{while($t.moveNext())policyCommand=$t.Current,testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(".{0} table xxx policy",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.None)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(".{0} table xxx policy ",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTablePoliciesOptions)),System.String.equals(policyCommand,"alter-merge")&&(testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(".{0} table xxx policy retention ",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterMergePolicyRetentionOptions)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(".{0} table xxx policy retention softdelete = ",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterTimeSpanPolicyOptions)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(".{0} table xxx policy retention harddelete = ",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterTimeSpanPolicyOptions)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(".{0} table xxx policy retention softdelete = xxx",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.None)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(".{0} table xxx policy retention softdelete = xxx ",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterMergePolicyRetentionSoftDeleteDefinedOptions)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(".{0} table xxx policy retention harddelete = xxx",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.None)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(".{0} table xxx policy retention harddelete = xxx ",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.None)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(".{0} table xxx policy retention softdelete = xxx harddelete = xxx",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.None)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(".{0} table xxx policy retention softdelete = xxx harddelete = xxx ",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.None)))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseClusterPoliciesCommandTest:function(){var $t,policiesCommands=System.Array.init(["alter","alter-merge","delete"],System.String),testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor),policyCommand;$t=Bridge.getEnumerator(policiesCommands);try{while($t.moveNext())policyCommand=$t.Current,testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(".{0} cluster",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.None)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(".{0} cluster ",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPoliciesOptions)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(".{0} cluster policy",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.None)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(".{0} cluster policy ",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldClusterPoliciesOptions))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseSetDatabaseUsersAdminsViewersPrettyNameCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".set",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".set ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".set database",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".set database ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDatabaseNames));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".set database xxx",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".set database xxx ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetDatabaseAdminsUsersViewersPrettyNameOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".set database xxx users",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".set database xxx admins",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".set database xxx viewers",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".set database xxx ingestors",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".set database xxx prettyname",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".set database xxx users ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetDatabaseUsersNoneOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".set database xxx admins ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetDatabaseAdminsNoneOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".set database xxx viewers ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetDatabaseViewersNoneOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".set database xxx ingestors ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetDatabaseIngestorsNoneOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".set database xxx prettyname",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(".set database xxx users | ",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(".set database xxx admins | ",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(".set database xxx viewers| ",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(".set database xxx ingestors | ",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(".set database xxx prettyname | ",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseSetClusterUsersAdminsViewersCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".set",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".set ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".set cluster",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".set cluster ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetClusterAdminsUsersViewersDatabaseCreatorsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".set cluster users",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".set cluster admins",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".set cluster viewers",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".set cluster databasecreators",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".set cluster users ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetClusterUsersNoneOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".set cluster admins ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetClusterAdminsNoneOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".set cluster viewers ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetClusterViewersNoneOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".set cluster databasecreators ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetClusterDatabaseCreatorsNoneOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(".set cluster users | ",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(".set cluster admins | ",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(".set cluster viewers| ",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(".set cluster databasecreators| ",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseSetTableAdminsCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".set",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".set ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".set table",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".set table ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".set table xxx",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".set table xxx ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetTableAdminsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".set table xxx admins",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".set table xxx ingestors",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".set table xxx admins ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetTableAdminsNoneOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".set table xxx ingestors ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetTableIngestorsNoneOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(".set table xxx admins | ",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(".set table xxx ingestors | ",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseAddDatabaseUsersAdminsViewersCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".add",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".add ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAddCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".add database",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".add database ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDatabaseNames));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".add database xxx",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".add database xxx ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAddDatabaseAdminsUsersViewersOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".add database xxx users",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".add database xxx admins",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".add database xxx viewers",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".add database xxx ingestors",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(".add database xxx users | ",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(".add database xxx admins | ",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(".add database xxx viewers | ",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(".add database xxx ingestors | ",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseAddClusterUsersAdminsViewersCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".add",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".add ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAddCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".add cluster",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".add cluster ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAddClusterAdminsUsersViewersDatabaseCreatorsBlockedPrincipalsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".add cluster users",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".add cluster admins",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".add cluster viewers",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".add cluster databasecreators",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(".add cluster users | ",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(".add cluster admins | ",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(".add cluster viewers | ",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(".add cluster databasecreators | ",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseAddTableAdminsCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".add",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".add ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAddCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".add table",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".add table ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".add table xxx",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".add table xxx ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAddTableAdminsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(".add table xxx admins",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(".add table xxx ingestors",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(".add table xxx admins | ",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(".add table xxx ingestors | ",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseDropDatabaseUsersAdminsViewersCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".drop",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".drop ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDropCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".drop database",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".drop database ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDatabaseNames));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".drop database xxx",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".drop database xxx ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDropDatabaseOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".drop database xxx users",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".drop database xxx admins",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".drop database xxx viewers",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".drop database xxx ingestors",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".drop database xxx prettyname",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(".drop database xxx users | ",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(".drop database xxx admins | ",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(".drop database xxx viewers | ",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(".drop database xxx ingestors | ",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseDropTableAdminsColumnsCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".drop",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".drop ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDropCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".drop table",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".drop table ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".drop table xxx",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".drop table xxx ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDropTableEntitiesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(".drop table xxx admins",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(".drop table xxx ingestors",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(".drop table xxx admins | ",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(".drop table xxx ingestors | ",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".drop table xxx columns ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDropTableColumnsSyntaxOptions));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseDropExtentTagsCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".drop",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".drop ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDropCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".drop extent",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".drop extent ",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".drop extent tags ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDropExtentTagsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".drop extent tags from ",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".drop extent tags from table ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".drop extent tags from table ttt",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".drop extent tags from table ttt ",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseAlterExtentTagsCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".alter",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".alter ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".alter extent",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".alter extent ",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".alter extent tags ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterExtentTagsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".alter extent tags xxx ",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseExtentsAttachCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".attach",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".attach ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAttachCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".attach extents",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".attach extents ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAttachExtentsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".attach extents into table",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".attach extents into table ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".attach extents into table ttt",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".attach extents into table ttt ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAttachExtentsIntoTableOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".attach extents into table ttt by",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".attach extents into table ttt by ",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".attach extents into table ttt by metadata",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".attach extents into table ttt by metadata ",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".attach extents into table ttt by metadata <|",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".attach async",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".attach async ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAttachCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".attach async extents",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".attach async extents ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAttachExtentsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".attach async extents into table",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".attach async extents into table ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".attach async extents into table ttt",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".attach async extents into table ttt ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAttachExtentsIntoTableOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".attach async extents into table ttt by",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".attach async extents into table ttt by ",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".attach async extents into table ttt by metadata",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".attach async extents into table ttt by metadata ",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".attach async extents into table ttt by metadata <|",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseExtentsMoveCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".move",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".move ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldMoveCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".move extents",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".move extents ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldMoveExtentsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".move extents (00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000)",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".move extents (00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000) ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldMoveSpecifiedExtentsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".move extents to table",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".move extents to table ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".move extents to table ttt",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".move extents to table ttt ",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".move extents all",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".move extents all ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldMoveSpecifiedExtentsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".move extents all from",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".move extents all from ",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".move extents all from table",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".move extents all from table ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".move extents all from table ttt",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".move extents all from table ttt ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldMoveExtentsToTableOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".move extents all from table ttt to",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".move extents all from table ttt to ",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".move extents all from table ttt to table",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".move extents all from table ttt to table ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".move extents all from table ttt to table abc",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".move extents all from table ttt to table abc ",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".move async",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".move async ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldMoveCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".move async extents",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".move async extents ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldMoveExtentsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".move async extents (00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000)",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".move async extents (00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000) ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldMoveSpecifiedExtentsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".move async extents to table",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".move async extents to table ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".move async extents to table ttt",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".move async extents to table ttt ",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".move async extents all",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".move async extents all ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldMoveSpecifiedExtentsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".move async extents all from",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".move async extents all from ",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".move async extents all from table",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".move async extents all from table ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".move async extents all from table ttt",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".move async extents all from table ttt ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldMoveExtentsToTableOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".move async extents all from table ttt to",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".move async extents all from table ttt to ",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".move async extents all from table ttt to table",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".move async extents all from table ttt to table ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".move async extents all from table ttt to table abc",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".move async extents all from table ttt to table abc ",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseExtentsReplaceCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".replace",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".replace ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldReplaceCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".replace extents",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".replace extents ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldReplaceExtentsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".replace extents in table",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".replace extents in table ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".replace extents in table ttt",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".replace extents in table ttt ",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".replace async",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".replace async ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldReplaceCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".replace async extents",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".replace async extents ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldReplaceExtentsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".replace async extents in table",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".replace async extents in table ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".replace async extents in table ttt",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".replace async extents in table ttt ",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseCreateDatabaseAdminCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".create database",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".create database ",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".create database SomeName",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".create database SomeName ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDatabaseCreatePersistencyOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".create database SomeName volatile",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".create database SomeName volatile ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldCreateIfNotExistsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".create database SomeName volatile  ",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".create database SomeName persist",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".create database SomeName persist ",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".create database SomeName persist (h@'', h@'')",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".create database SomeName persist (h@'', h@'') ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldCreateIfNotExistsOptions));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseAlterDatabaseMetadataAdminCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".alter database",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".alter database ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDatabaseNames));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".alter database xxx",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".alter database xxx ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterDatabaseCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".alter database xxx persist",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".alter database xxx persist ",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".alter database xxx persist metadata",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".alter database xxx persist metadata ",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".alter database xxx persist metadata h@''",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseCreateAddAlterDropAdminsCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".drop",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".drop ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDropCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".create",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".create ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldCreateCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".alter",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".alter ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".alter-merge",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".alter-merge ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterMergeCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".add",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".add ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAddCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".delete",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".delete ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDeleteCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".create-or-alter ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldCreateOrAlterOptions));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseDropClusterUsersAdminsViewersCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".drop",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".drop ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDropCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".drop cluster",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".drop cluster ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDropClusterAdminsUsersViewersDatabaseCreatorsBlockedPrincipalsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".drop cluster users",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".drop cluster admins",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".drop cluster viewers",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".drop cluster databasecreators",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(".drop cluster users | ",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(".drop cluster admins | ",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(".drop cluster viewers| ",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(".drop cluster databasecreators| ",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseQueryParametersTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("[",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("{",Kusto.Data.IntelliSense.RuleKind.YieldQueryParameters));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2('"{',Kusto.Data.IntelliSense.RuleKind.YieldQueryParameters));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2('"{q',Kusto.Data.IntelliSense.RuleKind.YieldQueryParameters));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2('"{q}',Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2('"{q}{',Kusto.Data.IntelliSense.RuleKind.YieldQueryParameters));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2('"{q}{ ',Kusto.Data.IntelliSense.RuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseJoinTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1| join",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1| join ",Kusto.Data.IntelliSense.RuleKind.YieldPostJoinOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1| join Table2 ",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1| join Table2 on ",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1| join (",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1| join ( ",Kusto.Data.IntelliSense.RuleKind.YieldTableNames));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1| join (Table2) on",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1| join (Table2) on ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForJoin));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1| join (Table2 | limit 10 ) on ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForJoin));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1| join (Table2) on  ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForJoin));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1| join kind",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1| join kind=",Kusto.Data.IntelliSense.RuleKind.YieldKindFlavorsForJoin));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1| join kind= ",Kusto.Data.IntelliSense.RuleKind.YieldKindFlavorsForJoin));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1| join kind=xxx",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1| join kind=xxx ",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1| join kind=xxx kind=",Kusto.Data.IntelliSense.RuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseRenderTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("render",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("|render",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("|render ",Kusto.Data.IntelliSense.RuleKind.YieldRenderOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("| render ",Kusto.Data.IntelliSense.RuleKind.YieldRenderOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("| render timechart",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("| render timechart ",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("| render areachart",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("| render areachart ",Kusto.Data.IntelliSense.RuleKind.YieldRenderKindKeywordOption));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("| render barchart ",Kusto.Data.IntelliSense.RuleKind.YieldRenderKindKeywordOption));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("| render columnchart ",Kusto.Data.IntelliSense.RuleKind.YieldRenderKindKeywordOption));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("| render areachart kind",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("| render areachart kind=",Kusto.Data.IntelliSense.RuleKind.YieldRenderKindOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("| render barchart kind=",Kusto.Data.IntelliSense.RuleKind.YieldRenderKindOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("| render columnchart kind=",Kusto.Data.IntelliSense.RuleKind.YieldRenderKindOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("| render timepivot",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("| render timepivot ",Kusto.Data.IntelliSense.RuleKind.YieldByKeywordOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("| render timepivot by",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("| render timepivot by ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForRender));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("| render timepivot by Column1",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("| render timepivot by Column1,",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("| render timepivot by Column1, ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForRender));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("| render timepivot by Column1, Column2",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("| render timepivot by Column1, Column2,",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("| render timepivot by Column1, Column2, ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForRender));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseTopTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top ",Kusto.Data.IntelliSense.RuleKind.YieldNumericScalarOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top by",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top by ",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top x by ",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top 10",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top 10 ",Kusto.Data.IntelliSense.RuleKind.YieldByKeywordOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top 10 by",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top 10 by ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForOrdering));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top 10 by Column1",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top 10 by Column1 ",Kusto.Data.IntelliSense.RuleKind.YieldAscendingDescendingOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top 10 by Column1 asc",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top 10 by Column1 asc ",Kusto.Data.IntelliSense.RuleKind.YieldNullsFirstNullsLastOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top 10 by Column1 asc\r\n",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top 10 by Column1 asc nulls first",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | top 10 by Column1 ,",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | sort",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | sort ",Kusto.Data.IntelliSense.RuleKind.YieldByKeywordOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | sort by",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | sort by ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForOrdering));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | sort by Column1",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | sort by Column1 ",Kusto.Data.IntelliSense.RuleKind.YieldAscendingDescendingOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | sort by Column1 asc",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | sort by Column1 asc ",Kusto.Data.IntelliSense.RuleKind.YieldNullsFirstNullsLastOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | sort by Column1 asc\r\n",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | sort by Column1 asc nulls first",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | sort by Column1 ,",Kusto.Data.IntelliSense.RuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseReduceTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | reduce",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | reduce by ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForOrdering));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | reduce by (Table2)",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | reduce kind",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | reduce kind=",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | reduce by Column kind=",Kusto.Data.IntelliSense.RuleKind.YieldKindFlavorsForReduceBy));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | reduce by Column kind =",Kusto.Data.IntelliSense.RuleKind.YieldKindFlavorsForReduceBy));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | reduce by Column kind = ",Kusto.Data.IntelliSense.RuleKind.YieldKindFlavorsForReduceBy));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseToScalarTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("toscalar",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("toscalar(",Kusto.Data.IntelliSense.RuleKind.YieldTableNames));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("toscalar( ",Kusto.Data.IntelliSense.RuleKind.YieldTableNames));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("toscalar(Table",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("toscalar(Table ",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("toscalar(Table | ",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("toscalar(Table | count)",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("rand x from 1 to toscalar(",Kusto.Data.IntelliSense.RuleKind.YieldTableNames));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("rand x from 1 to toscalar(1) step toscalar(",Kusto.Data.IntelliSense.RuleKind.YieldTableNames));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseTimeKeywordsTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | where DateTimeField1 >",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | where DateTimeField1 > ",Kusto.Data.IntelliSense.RuleKind.YieldDateTimeOperatorsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | where DateTimeField1 < ",Kusto.Data.IntelliSense.RuleKind.YieldDateTimeOperatorsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | where DateTimeField1 == ",Kusto.Data.IntelliSense.RuleKind.YieldDateTimeOperatorsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | where DateTimeField1 != ",Kusto.Data.IntelliSense.RuleKind.YieldDateTimeOperatorsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | where DateTimeField1 >= ",Kusto.Data.IntelliSense.RuleKind.YieldDateTimeOperatorsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | where DateTimeField1 <= ",Kusto.Data.IntelliSense.RuleKind.YieldDateTimeOperatorsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | where Field1 == 'ff' and DateTimeField1 > ",Kusto.Data.IntelliSense.RuleKind.YieldDateTimeOperatorsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | where Field1 == 'ff' or DateTimeField1 > ",Kusto.Data.IntelliSense.RuleKind.YieldDateTimeOperatorsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("aago(",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("ago(",Kusto.Data.IntelliSense.RuleKind.YieldTimespanOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("ago( ",Kusto.Data.IntelliSense.RuleKind.YieldTimespanOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(" ago(",Kusto.Data.IntelliSense.RuleKind.YieldTimespanOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("nnow(",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("now(",Kusto.Data.IntelliSense.RuleKind.YieldTimespanOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("now( ",Kusto.Data.IntelliSense.RuleKind.YieldTimespanOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(" now( ",Kusto.Data.IntelliSense.RuleKind.YieldTimespanOptions));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseEvaluateTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | evaluate ",Kusto.Data.IntelliSense.RuleKind.YieldEvaluateOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2('Table1 | evaluate diffpatterns("split= ',Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForDiffPatternsPluginSplitParameter));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2('Table1 | evaluate diffpatterns("bsplit= ',Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("Table1 | extend split=",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseExportCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".export",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".export ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldExportCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".export  ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldExportCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".export async",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".export compressed",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".export async compressed",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".export compressed async",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".export async ",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".export compressed ",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".export async compressed ",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".export compressed async ",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".export to ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldExportCommandNoModifiersAndOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".export async to ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldExportCommandWithModifiersAndOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".export compressed to ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldExportCommandWithModifiersAndOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".export async compressed to ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldExportCommandWithModifiersAndOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".export async to ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldExportCommandWithModifiersAndOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".export to",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".export async compressed to",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSensePurgeCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".purge",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".purge ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".purge whatif = ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeWhatIfOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".purge whatif = info",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".purge whatif = info ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeWithPropertiesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".purge whatif = info table",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".purge whatif = info table ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".purge whatif = info table TTT",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".purge whatif = info table TTT ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeTableOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".purge whatif = info table TTT records",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".purge whatif = info table TTT records ",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".purge maxRecords = ",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".purge maxRecords = 111",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".purge maxRecords = 111 ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeWithPropertiesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".purge maxRecords = 111 table",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".purge maxRecords = 111 table ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".purge maxRecords = 111 table TTT",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".purge maxRecords = 111 table TTT ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeTableOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".purge maxRecords = 111 table TTT records",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".purge maxRecords = 111 table TTT records ",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".purge whatif = info maxRecords = 111",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".purge whatif = info maxRecords = 111 ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeWithPropertiesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".purge whatif = info maxRecords = 111 table ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".purge whatif = info maxRecords = 111 table TTT",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".purge whatif = info maxRecords = 111 table TTT ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeTableOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".purge whatif = info maxRecords = 111 table TTT records",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".purge whatif = info maxRecords = 111 table TTT records ",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".purge async",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".purge async ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".purge async whatif = ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeWhatIfOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".purge async whatif = info",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".purge async whatif = info ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeWithPropertiesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".purge async whatif = info table",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".purge async whatif = info table ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".purge async whatif = info table TTT",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".purge async whatif = info table TTT ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeTableOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".purge async whatif = info table TTT records",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".purge async whatif = info table TTT records ",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".purge async maxRecords = ",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".purge async maxRecords = 111",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".purge async maxRecords = 111 ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeWithPropertiesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".purge async maxRecords = 111 table",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".purge async maxRecords = 111 table ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".purge async maxRecords = 111 table TTT",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".purge async maxRecords = 111 table TTT ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeTableOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".purge async maxRecords = 111 table TTT records",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".purge async maxRecords = 111 table TTT records ",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".purge async whatif = info maxRecords = 111",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".purge async whatif = info maxRecords = 111 ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeWithPropertiesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".purge async whatif = info maxRecords = 111 table ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".purge async whatif = info maxRecords = 111 table TTT",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".purge async whatif = info maxRecords = 111 table TTT ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeTableOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".purge async whatif = info maxRecords = 111 table TTT records",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".purge async whatif = info maxRecords = 111 table TTT records ",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSensePurgeCleanupCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".purge-cleanup",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".purge-cleanup ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeCleanupOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".purge-cleanup async",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".purge-cleanup async ",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeCleanupOptions));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseCreateRowstoreAdminCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".create rowstore",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(".create rowstore ",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseSearchTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("search",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("search ",Kusto.Data.IntelliSense.RuleKind.YieldPostSearchOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("search kind",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("search kind=",Kusto.Data.IntelliSense.RuleKind.YieldSearchKindOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("search kind= ",Kusto.Data.IntelliSense.RuleKind.YieldSearchKindOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("search kind = ",Kusto.Data.IntelliSense.RuleKind.YieldSearchKindOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("search kind=case_sensitive",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("search kind=case_sensitive ",Kusto.Data.IntelliSense.RuleKind.YieldPostSearchKindOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("search kind=case_insensitive ",Kusto.Data.IntelliSense.RuleKind.YieldPostSearchKindOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2('search "ff" or',Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2('search "ff" or ',Kusto.Data.IntelliSense.RuleKind.YieldInsideSearchOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2('search "ff" and ',Kusto.Data.IntelliSense.RuleKind.YieldInsideSearchOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2('search in (Table1) "ff" and ',Kusto.Data.IntelliSense.RuleKind.YieldInsideSearchOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("search in (Table1, ['Table.2']) \"ff\" or ",Kusto.Data.IntelliSense.RuleKind.YieldInsideSearchOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2('search kind=case_sensitive  "ff" and ',Kusto.Data.IntelliSense.RuleKind.YieldInsideSearchOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("search in (Table1)",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("search in (Table1) ",Kusto.Data.IntelliSense.RuleKind.YieldInsideSearchOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("search kind=case_sensitive in (Table1) ",Kusto.Data.IntelliSense.RuleKind.YieldInsideSearchOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("search in (Table1, ['Table.2'])",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("search in (Table1, ['Table.2']) ",Kusto.Data.IntelliSense.RuleKind.YieldInsideSearchOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("search in (Table1, database('*').*)",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("search in (Table1, database('*').*) ",Kusto.Data.IntelliSense.RuleKind.YieldInsideSearchOptions));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseFindTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("find",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("find ",Kusto.Data.IntelliSense.RuleKind.YieldPostFindOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("find withsource=SourceTable",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("find withsource=SourceTable ",Kusto.Data.IntelliSense.RuleKind.YieldPostFindOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("find withsource = SourceTable ",Kusto.Data.IntelliSense.RuleKind.YieldPostFindOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("find in",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("find in ",Kusto.Data.IntelliSense.RuleKind.YieldPostFindInOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("find withsource=SourceTable in",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("find withsource=SourceTable in ",Kusto.Data.IntelliSense.RuleKind.YieldPostFindInOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("find in (",Kusto.Data.IntelliSense.RuleKind.YieldTableNamesForFindIn));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("find withsource=SourceTable in (",Kusto.Data.IntelliSense.RuleKind.YieldTableNamesForFindIn));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("find in (Table1, Table2,",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("find in (Table1, Table2, ",Kusto.Data.IntelliSense.RuleKind.YieldTableNamesForFindIn));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("find withsource=SourceTable in (Table1, Table2,",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("find withsource=SourceTable in (Table1, Table2, ",Kusto.Data.IntelliSense.RuleKind.YieldTableNamesForFindIn));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("find in (Table1, ['Table.2']",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("find in (Table1, ['Table.2'] ",Kusto.Data.IntelliSense.RuleKind.YieldEndOrContinueFindInOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("find withsource=SourceTable in (Table1, Table2",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("find withsource=SourceTable in (Table1, Table2 ",Kusto.Data.IntelliSense.RuleKind.YieldEndOrContinueFindInOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("find in (Table1, ['Table.2'])",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("find in (Table1, ['Table.2']) ",Kusto.Data.IntelliSense.RuleKind.YieldPostFindInListOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("find withsource=SourceTable in (Table1, Table2)",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("find withsource=SourceTable in (Table1, Table2) ",Kusto.Data.IntelliSense.RuleKind.YieldPostFindInListOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("find in (Table1, database('*').*)",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("find in (Table1, database('*').*) ",Kusto.Data.IntelliSense.RuleKind.YieldPostFindInListOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("find withsource=SourceTable in (Table1, database('*').*)",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("find withsource=SourceTable in (Table1, database('*').*) ",Kusto.Data.IntelliSense.RuleKind.YieldPostFindInListOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("find in (Table1, ['Table.2']) where",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("find in (Table1, ['Table.2']) where ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForFilterInFind));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("find withsource=SourceTable in (Table1, ['Table.2']) where",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("find withsource=SourceTable in (Table1, ['Table.2']) where ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForFilterInFind));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("find in (Table1, ['Table.2']) where Field1 == 'abc' and",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("find in (Table1, ['Table.2']) where Field1 == 'abc' and ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForFilterInFind));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("find in (*, database('*').*) where * has 'abc' and",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("find in (*, database('*').*) where * has 'abc' and ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForFilterInFind));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("find in (*, database('*').*) where 'abc' and",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("find in (*, database('*').*) where 'abc' and ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForFilterInFind));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("find withsource=SourceTable in (Table1, ['Table.2']) where Field1 == 'abc' and",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("find withsource=SourceTable in (Table1, ['Table.2']) where Field1 == 'abc' and ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForFilterInFind));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("find in (Table1, ['Table.2']) where Field3 == 'abc' project",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("find in (Table1, ['Table.2']) where Field3 == 'abc' project ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProjectInFind));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("find withsource=SourceTable in (Table1, ['Table.2']) where Field0 == 'abc' and DateTimeField1 > ago(1h) project",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("find withsource=SourceTable in (Table1, ['Table.2']) where Field0 == 'abc' and DateTimeField1 > ago(1h) project ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProjectInFind));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("find in (Table1, ['Table.2']) where Field0 == 'abc' project DateTimeField1",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("find withsource=SourceTable in (Table1, ['Table.2']) where Field0 == 'abc' and DateTimeField1 > ago(1h) project NumField1",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("find in (Table1, ['Table.2']) where Field8 == 'abc' project NumField2,",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("find in (Table1, ['Table.2']) where Field8 == 'abc' project NumField2, ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProjectInFind));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("find withsource=SourceTable in (Table1, ['Table.2']) where Field3 == 'abc' and DateTimeField0 > ago(1h) project Field0,",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("find withsource=SourceTable in (Table1, ['Table.2']) where Field3 == 'abc' and DateTimeField0 > ago(1h) project Field0, ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProjectInFind));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("find in (Table1, ['Table.2']) where Field8 == 'abc' project-smart",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("find in (Table1, ['Table.2']) where Field8 == 'abc' project-smart ",Kusto.Data.IntelliSense.RuleKind.YieldFindProjectSmartOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("find in (Table1, ['Table.2']) where Field8 == 'abc' project NumField2 | where",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("find in (Table1, ['Table.2']) where Field8 == 'abc' project NumField2 | where ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForFilter));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2("find in (Table1, ['Table.2']) where Field8 == 'abc' project NumField2 | project ",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProject));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseGetCommandContextTest:function(){var $t,$t1,commands=$asm.$.Kusto.UT.IntelliSenseRulesTests.f3(new(System.Collections.Generic.Dictionary$2(System.String,System.String).ctor)),flatten,kvp,command,context;$t=Bridge.getEnumerator(System.Array.init([!1,!0],System.Boolean));try{while($t.moveNext()){flatten=$t.Current;$t1=Bridge.getEnumerator(commands);try{while($t1.moveNext())kvp=$t1.Current,command=kvp.key,command=flatten?System.String.replaceAll(System.String.replaceAll(command,String.fromCharCode(10),String.fromCharCode(32)),String.fromCharCode(13),String.fromCharCode(32)):System.String.replaceAll(System.String.replaceAll(command,String.fromCharCode(10),String.fromCharCode(32)),String.fromCharCode(13),String.fromCharCode(32)),context=Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider.AnalyzeCommand$1(command,null).Context,Kusto.UT.IntelliSenseRulesTests.Assert.AreEqual$1(kvp.value,context.Context,Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture("Command context was not resolved correctly for command '{0}'",[command]))}finally{Bridge.is($t1,System.IDisposable)&&$t1.System$IDisposable$Dispose()}}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}}}});Bridge.ns("Kusto.UT.IntelliSenseRulesTests",$asm.$);Bridge.apply($asm.$.Kusto.UT.IntelliSenseRulesTests,{f1:function(c){return c.Name},f2:function(e){return(e.Operator||"")+":"+(e.Name||"")},f3:function(_o1){return _o1.add("database('","database('"),_o1.add("database('someDB')","database('someDB')"),_o1.add("database('someDB').","database('someDB')."),_o1.add("database('someDB').Table","database('someDB').Table"),_o1.add("database('someDB with space')","database('someDB with space')"),_o1.add("database('someDB with space').","database('someDB with space')."),_o1.add("database('someDB with space').Table","database('someDB with space').Table"),_o1.add('database("someDB with space")','database("someDB with space")'),_o1.add('database("someDB with space").','database("someDB with space").'),_o1.add('database("someDB with space").Table','database("someDB with space").Table'),_o1.add("cluster('abc').database('","cluster('abc').database('"),_o1.add("cluster('abc').database('someDB')","cluster('abc').database('someDB')"),_o1.add("cluster('abc').database('someDB').","cluster('abc').database('someDB')."),_o1.add("cluster('abc').database('someDB').Table","cluster('abc').database('someDB').Table"),_o1.add("cluster('https://abc.kusto.windows.net').database('","cluster('https://abc.kusto.windows.net').database('"),_o1.add("cluster('https://abc.kusto.windows.net').database('someDB')","cluster('https://abc.kusto.windows.net').database('someDB')"),_o1.add("cluster('https://abc.kusto.windows.net').database('someDB').","cluster('https://abc.kusto.windows.net').database('someDB')."),_o1.add("cluster('https://abc.kusto.windows.net').database('someDB').Table","cluster('https://abc.kusto.windows.net').database('someDB').Table"),_o1.add('cluster("https://abc.kusto.windows.net").database(\'','cluster("https://abc.kusto.windows.net").database(\''),_o1.add("cluster(\"https://abc.kusto.windows.net\").database('someDB')","cluster(\"https://abc.kusto.windows.net\").database('someDB')"),_o1.add("cluster(\"https://abc.kusto.windows.net\").database('someDB').","cluster(\"https://abc.kusto.windows.net\").database('someDB')."),_o1.add("cluster(\"https://abc.kusto.windows.net\").database('someDB').Table","cluster(\"https://abc.kusto.windows.net\").database('someDB').Table"),_o1.add("let x = toscalar(Table1 | ","Table1"),_o1.add("range x from toscalar(Table1 | count) to toscalar(Table2 | ","Table2"),_o1.add("set querytrace;\r\n Table2 | ","Table2"),_o1.add('union\r\n(Table1 | where body has keyword and body has "Google" | summarize posts=dcount(link_id) | extend context = "Google"),\r\n(Table2 | where  ',"Table2"),_o1.add("union (Table1), (Table2  ","Table2"),_o1.add("union\n (Table ","Table"),_o1.add("union (Table ","Table"),_o1.add("let x = () {request};\n let y = x;\n y ","request"),_o1.add("let x = request;\n x ","request"),_o1.add("let x = request | count;\n x ","request"),_o1.add("let x = request;\n x | count ","request"),_o1.add("let x = request;\n let y = x;\n y ","request"),_o1.add("let x = () {request | limit 100};\n let y = x;\n y ","request"),_o1.add(".show database XYZ ",".show database XYZ"),_o1.add("Table1 | count","Table1"),_o1.add("Table1 | join (Table2 | ","Table2"),_o1.add("let x = 1;\n Table2 | ","Table2"),_o1.add("range xyz from 1 to 1 step 1| ","range"),_o1.add("let x = () { request | where ","request"),_o1.add("let x = request | where ","request"),_o1.add("cluster('lxprdscu02').database('Analytics Billing').ApplicationHourlyEntryCount\r\n| where StartTime >= ago(rangeInDaysForBililngData)\r\n| where DataSource == 'AI'\r\n| where Database in (longtailDatabases)\r\n| summarize totalGB=1.0*sum(SizeInBytes)/1024/1024/1024 by bin(StartTime, 1d), ApplicationName , InstrumentationKey , ClusterName, DatabasePrettyName, Database, ProfileId\r\n| top-nested  of ClusterName by count(), top-nested  of DatabasePrettyName by count(), top-nested  of Database by count(),top-nested topAppCountByData of ProfileId by avg_totalGB = avg(totalGB) desc, top-nested of ApplicationName by count(), top-nested of InstrumentationKey by count()\r\n| project ClusterName, DatabasePrettyName , Database, ProfileId , ApplicationName ,InstrumentationKey, avg_totalGB\r\n| order by ClusterName , avg_totalGB desc ","cluster('lxprdscu02').database('Analytics Billing').ApplicationHourlyEntryCount"),_o1.add("database('Analytics Billing').ApplicationHourlyEntryCount\r\n| where StartTime >= ago(rangeInDaysForBililngData)\r\n| where DataSource == 'AI'\r\n| where Database in (longtailDatabases)\r\n| summarize totalGB=1.0*sum(SizeInBytes)/1024/1024/1024 by bin(StartTime, 1d), ApplicationName , InstrumentationKey , ClusterName, DatabasePrettyName, Database, ProfileId\r\n| top-nested  of ClusterName by count(), top-nested  of DatabasePrettyName by count(), top-nested  of Database by count(),top-nested topAppCountByData of ProfileId by avg_totalGB = avg(totalGB) desc, top-nested of ApplicationName by count(), top-nested of InstrumentationKey by count()\r\n| project ClusterName, DatabasePrettyName , Database, ProfileId , ApplicationName ,InstrumentationKey, avg_totalGB\r\n| order by ClusterName , avg_totalGB desc ","database('Analytics Billing').ApplicationHourlyEntryCount"),_o1.add("find 'abc'","*"),_o1.add("find in (database('*').*) 'abc'","database('*').*"),_o1.add("find in (database(\"*\").*) 'abc'",'database("*").*'),_o1.add("find in (Table) where","Table"),_o1.add("find in (['Table']) where","['Table']"),_o1.add("find in (database('Office*').*, T*, cluster('somecluster').database('x').T*) 'abc'","database('Office*').*, T*, cluster('somecluster').database('x').T*"),_o1.add("find withsource=X 'abc'","*"),_o1.add("find withsource=X in (database('*').*) 'abc'","database('*').*"),_o1.add("find withsource=X in (database(\"*\").*) 'abc'",'database("*").*'),_o1.add("find withsource=X in (Table) where","Table"),_o1.add("find withsource=X in (['Table']) where","['Table']"),_o1.add("find withsource=X in (database('Office*').*, T*, cluster('somecluster').database('x').T*) 'abc'","database('Office*').*, T*, cluster('somecluster').database('x').T*"),_o1.add("search 'abc'","*"),_o1.add("Table1 | search 'abc'","Table1"),_o1.add("search in (database('*').*) 'abc'","database('*').*"),_o1.add("search in (database(\"*\").*) 'abc'",'database("*").*'),_o1.add("search in (Table) where","Table"),_o1.add("search in (Table1, Table2) where","Table1, Table2"),_o1.add("search in (['Table']) where","['Table']"),_o1.add("search in (database('Office*').*, T*, cluster('somecluster').database('x').T*) 'abc'","database('Office*').*, T*, cluster('somecluster').database('x').T*"),_o1}});Bridge.define("Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern",{$kind:"nested class",props:{Input:null,ExpectedMatch:!1,ExpectedRuleKind:0},ctors:{ctor:function(input){this.$initialize();this.Input=input;this.ExpectedRuleKind=Kusto.Data.IntelliSense.RuleKind.None;this.ExpectedMatch=!1},$ctor2:function(input,matchingRule){this.$initialize();this.Input=input;this.ExpectedRuleKind=matchingRule;this.ExpectedMatch=matchingRule!==Kusto.Data.IntelliSense.RuleKind.None},$ctor1:function(input,matchingRule){this.$initialize();this.Input=input;this.ExpectedRuleKind=matchingRule;this.ExpectedMatch=matchingRule!==Kusto.Data.IntelliSense.AdminEngineRuleKind.None}}});Bridge.define("Kusto.Charting.DataChartsHelper.ChartMetaData",{inherits:[Kusto.Charting.IChartMetaData],$kind:"nested class",props:{ArgumentColumnType:0,ArgumentDataColumnIndex:0,GeospatialColumnIndexes:{get:function(){return this.GeospatiaColumnlIndexesList}},SeriesIndexes:{get:function(){return this.SeriesIndexesList}},DataIndexes:{get:function(){return this.DataIndexesList}},IsDataFormedAsSeries:!1,SeriesIndexesList:null,DataIndexesList:null,GeospatiaColumnlIndexesList:null,UnusedIndexes:null},alias:["ArgumentColumnType","Kusto$Charting$IChartMetaData$ArgumentColumnType","ArgumentDataColumnIndex","Kusto$Charting$IChartMetaData$ArgumentDataColumnIndex","GeospatialColumnIndexes","Kusto$Charting$IChartMetaData$GeospatialColumnIndexes","SeriesIndexes","Kusto$Charting$IChartMetaData$SeriesIndexes","DataIndexes","Kusto$Charting$IChartMetaData$DataIndexes","IsDataFormedAsSeries","Kusto$Charting$IChartMetaData$IsDataFormedAsSeries","UnusedIndexes","Kusto$Charting$IChartMetaData$UnusedIndexes"],ctors:{init:function(){this.ArgumentDataColumnIndex=-1;this.IsDataFormedAsSeries=!1;this.SeriesIndexesList=new(System.Collections.Generic.List$1(System.Int32).ctor);this.DataIndexesList=new(System.Collections.Generic.List$1(System.Int32).ctor);this.GeospatiaColumnlIndexesList=new(System.Collections.Generic.List$1(System.Int32).ctor);this.UnusedIndexes=new(System.Collections.Generic.List$1(System.Int32).ctor)},ctor:function(argumentColumnType){this.$initialize();this.ArgumentColumnType=argumentColumnType}}});Bridge.define("Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider",{inherits:[Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase],statics:{fields:{s_lineWithDotBeginningRegex:null,s_showCommandRegex:null,s_rotateCommandRegex:null,s_generateCommandRegex:null,s_publishCommandRegex:null,s_unPublishCommandRegex:null,s_afterPipeRegex:null,s_alterCommandRegex:null,s_removeCommandRegex:null,s_setCommandRegex:null,s_createCommandRegex:null,s_deleteCommandRegex:null,s_detachCommandRegex:null,s_checkCommandRegex:null,s_addCommandRegex:null,s_dropCommandRegex:null,s_moveCommandRegex:null,s_uninstallCommandRegex:null,s_registerCommandRegex:null,s_exportCommandRegex:null,s_exportPackageForOptionsRegex:null,s_exportPackageForProductVersionOptionsRegex:null,s_executeCommandRegex:null,s_executeJobCommandRegex:null,s_activationCommandRegex:null,s_serviceCommandRegex:null,s_ingestLogsIntoCommandRegex:null,s_showClusterOptionsCommandRegex:null,s_operationsCommandRegex:null,s_showAccountCommandRegex:null,s_moveAccountCommandRegex:null,s_moveDatabaseCommandRegex:null,s_moveDatabaseFromServiceCommandRegex:null,s_moveAccountSubscriptionCommandRegex:null,s_moveServiceConfigurationCommandRegex:null,s_showTargetServiceCommandRegex:null,s_keysCommandRegex:null,s_alterServiceStorageAccountsCommandRegex:null,s_toKeywordCommandRegex:null,s_storageAccountsKeywordRegex:null,s_regenerateServiceKeywordRegex:null,s_keyTypesKeywordRegex:null,s_fromServiceKeywordRegex:null,s_fromAccountKeywordRegex:null,s_showCmServiceCommandRegex:null,s_showClusterClientRegex:null,s_showClusterClientSubscriptionCommandRegex:null,s_showClusterClusterNamePrincipalCommandRegex:null,s_showAuditLogCommandRegex:null,s_showAuditLogFromCommandRegex:null,s_configurationKeywordRegex:null,s_showPrincipalRolesCommandRegex:null,s_showAccountsKeywordRegex:null,s_dmServiceAddKeywordRegex:null,s_dmServiceAlterKeywordRegex:null,s_dmServiceAlterSettingsRegex:null,s_dmServiceDropKeywordRegex:null,s_dmServiceShowKeywordRegex:null,s_configurationPropertySetKeywordRegex:null,s_toStringKeywordRegex:null,s_configurationPropertyWithConsentKeywordRegex:null,s_addKeywordRegex:null,s_configurationPropertyDropKeywordRegex:null,s_accountRenameOperationsKeywordRegex:null,s_accountAlterOperationsKeywordRegex:null,s_accountSubscriptionAlterKeywordRegex:null,s_accountAddOperationsKeywordRegex:null,s_accountRemoveOperationsKeywordRegex:null,s_accountSetOperationsKeywordRegex:null,s_serviceAlterOperationsKeywordRegex:null,s_serviceRotateOperationsKeywordRegex:null,s_servicePublishOperationsKeywordRegex:null,s_serviceUnPublishOperationsKeywordRegex:null,s_serviceUnPublishFromRegistryOperationsKeywordRegex:null,s_inServiceKeywordRegex:null,s_createDatabaseCommandRegex:null,s_createServiceCommandRegex:null,s_createExternalCommandRegex:null,s_accountNamesCommandRegex:null,s_servicesNamesToAppendOptionsCommandRegex:null,s_rotateServicesNamesToAppendOptionsCommandRegex:null,s_moveServicesNamesToAppendOptionsCommandRegex:null,s_alterServicesNamesToAppendOptionsCommandRegex:null,s_publishServicesNamesToAppendOptionsCommandRegex:null,s_unPublishServicesNamesToAppendOptionsCommandRegex:null,s_removeServicesNamesToAppendOptionsCommandRegex:null,s_servicesNamesCommandRegex:null,s_withPropertiesSuffixRegex:null,s_withEventHubPropertiesSuffixRegex:null,s_addServiceServiceNameRegex:null,s_databaseOrAccountNameMetadataKeywordRegex:null,s_metadataKeywordRegex:null,s_summaryOrMetadataKeywordRegex:null,s_summaryKeywordRegex:null,s_versionKeywordRegex:null,s_cloudCreateCommandRegex:null,s_regionCreateCommandRegex:null,s_serviceInstallCommandRegex:null,s_serviceDeployCommandRegex:null,s_serviceReinstallCommandRegex:null,s_serviceUninstallCommandRegex:null,s_serviceMigrateCommandRegex:null,s_addClusterPrincipalsCommandRegex:null,s_addClusterJitPrincipalCommandRegex:null,s_dropClusterJitPrincipalCommandRegex:null,s_setClusterPrincipalsCommandRegex:null,s_dropClusterPrincipalsCommandRegex:null,s_setClusterPrincipalsNoneCommandRegex:null,s_dropAccountPrincipalsCommandRegex:null,s_alterServiceConfigurationDetailsKeywordRegex:null,s_alterServiceConfigurationPropertiesKeywordRegex:null,s_loadBalancerKeywordRegex:null,s_yieldPipeOptionRegex:null,s_cancelServiceOperationRegex:null,s_showSubscriptionCommandRegex:null,s_showServiceSecurityRulesOperationRegex:null,s_notifyCmCommandRegex:null,s_setSkuAvailabilityRegex:null,s_setSkuAvailabilityValuesRegex:null,s_setSkuAvailabilityWithOptionsRegex:null,s_sharedIdentityRegex:null,s_setRegionVisibilityWithOptionsRegex:null,s_registerFeatureRegex:null,s_createResourcesForBillingServiceRegex:null,s_adminOperationOptions:null,s_operatorOptions:null,s_showCommandOptions:null,s_rotateCommandOptions:null,s_registerCommandOptions:null,s_generateCommandOptions:null,s_publishCommandOptions:null,s_unPublishCommandOptions:null,s_uninstallCommandOptions:null,s_alterCommandOptions:null,s_addCommandOptions:null,s_removeCommandOptions:null,s_dropCommandOptions:null,s_setCommandOptions:null,s_createCommandOptions:null,s_createExternalCommandOptions:null,s_deleteCommandOptions:null,s_moveCommandOptions:null,s_exportCommandOptions:null,s_detachCommandOptions:null,s_pccodeKeywordOptions:null,s_checkCommandOptions:null,s_serviceKeywordOptions:null,s_serviceOrClusterKeywordOptions:null,s_ingestLogsIntoCommandOptions:null,s_showClusterKeywordOptions:null,s_operationsKeywordOptions:null,s_showPrincipalRolesKeywordOptions:null,s_showServiceCommandOptions:null,s_alterServiceCommandOptions:null,s_removeServiceCommandOptions:null,s_showCmServiceCommandOptions:null,s_showClusterClusterNameOptions:null,s_showClusterClientSubscriptionOptions:null,s_showAccountCommandOptions:null,s_moveAccountCommandOptions:null,s_moveAccountSubscriptionCommandOptions:null,s_showTargetServiceCommandOptions:null,s_fromKeywordOptions:null,s_alterServiceConfigurationKeywordOptions:null,s_toKeywordOptions:null,s_moveServiceOptions:null,s_addSetDropPrincipalsKeywordOptions:null,s_addDropJitPrincipalsKeywordOptions:null,s_dropAccountPrincipalsKeywordOptions:null,s_setNoneKeywordOptions:null,s_showServicesCompletionKeywordsOptions:null,s_showAccountsKeywordOptions:null,s_dmServiceAddKeywordOptions:null,s_dmServiceShowKeywordOptions:null,s_dmServiceAlterKeywordOptions:null,s_dmServiceDropKeywordOptions:null,s_keysKeywordOptions:null,s_keyTypesKeywordOptions:null,s_notifyCmKeywordOptions:null,s_executeCommandOptions:null,s_executeJobCommandOptions:null,s_serviceConfigurationPropertyDropKeywordOptions:null,s_serviceConfigurationPropertySetKeywordOptions:null,s_withConsentKeywordOptions:null,s_storageAccountsKeywordOptions:null,s_serviceRegenerateKeywordOptions:null,s_accountAlterOperationsOptions:null,s_accountRenameOperationsOptions:null,s_accountAddOperationsOptions:null,s_accountRemoveOperationsOptions:null,s_accountSetOperationsOptions:null,s_serviceAlterOperationsOptions:null,s_serviceRotateOperationsOptions:null,s_servicePublishOperationsOptions:null,s_serviceUnPublishOperationsOptions:null,s_inServiceKeywordOptions:null,s_addServiceServiceNameOptions:null,s_metadataKeywordOptions:null,s_summaryKeywordOptions:null,s_summaryOrMetadataKeywordOptions:null,s_versionKeywordOptions:null,s_withPropertiesSuffixOptions:null,s_alterServiceStorageAccountsSuffixOptions:null,s_withEventHubProperties:null,s_withSkuAvailabilityProperties:null,s_regionVisibilityProperties:null,s_installCommandOptions:null,s_uninstallRunnersCommandOptions:null,s_migrateServiceCommandOptions:null,s_fromServiceKeywordOptions:null,s_toServiceKeywordOptions:null,s_createDatabaseCommandOptions:null,s_createServiceCommandOptions:null,s_addKeywordOptions:null,s_alterServiceConfigurationPropertiesOptions:null,s_alterServiceConfigurationCommandOptions:null,s_loadBalancerKeywordOptions:null,s_operationKeywordOptions:null,s_showSubscriptionCommandOptions:null,s_showServiceSecurityRulesCommandOptions:null,s_trueFalseKeywordOptions:null,s_skuAvailabilityKeywordOptions:null,s_exportPackageForOptions:null,s_exportPackageForServiceTypeOptions:null,s_sharedIdentityOptions:null,s_registerFeatureCommandOptions:null},ctors:{init:function(){this.s_lineWithDotBeginningRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.show\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_rotateCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.rotate\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_generateCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.generate\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_publishCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.publish\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_unPublishCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.unpublish\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_afterPipeRegex=new System.Text.RegularExpressions.Regex.ctor("\\|\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.alter\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_removeCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.remove\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.set\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_createCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.create\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_deleteCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.delete\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_detachCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.detach\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_checkCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.check\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_addCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.add\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_dropCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.drop\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_moveCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.move\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_uninstallCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.uninstall\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_registerCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.register\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_exportCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.export\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_exportPackageForOptionsRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.export\\s+package\\s+for\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_exportPackageForProductVersionOptionsRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.export\\s+package\\s+for\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_executeCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.execute\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_executeJobCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.execute\\s+job\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_activationCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.(resume|suspend)\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_serviceCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.(reallocate|restart|reimage|rebuild|stop|install|deploy|reinstall|recycle|ingest|migrate|cancel|regenerate)\\s+$|^\\s*\\.ingest\\s+service\\s+\\S+\\s+storage\\s+logs\\s+into\\s$|^\\s*\\.show\\s+cm\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_ingestLogsIntoCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.ingest\\s+service\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showClusterOptionsCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.show\\s+cluster\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_operationsCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.show\\s+(running|completed|failed)\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showAccountCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.show\\s+account\\s+\\[.*?\\]\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_moveAccountCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.move\\s+account\\s+\\[[^\\]]*?\\]\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_moveDatabaseCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.move\\s+database\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_moveDatabaseFromServiceCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.move\\s+database\\s+\\S+\\s+from\\s+service\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_moveAccountSubscriptionCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.move\\s+account\\s+(\\S+|\\[.*?\\])\\s+subscription\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_moveServiceConfigurationCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.move\\s+service\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showTargetServiceCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.show\\s+service\\s(?!versions|model|(packages configuration)\\b)\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_keysCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.show\\s+service\\s+\\S+\\s+storage\\s+accounts\\s+$|^\\s*\\.regenerate\\s+service\\s+\\S+\\s+storage\\s+accounts\\s+(primary|secondary)\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterServiceStorageAccountsCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.alter\\s+service\\s+\\S+\\s+storage\\s+accounts\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_toKeywordCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.alter\\s+service\\s+\\S+\\s+storage\\s+accounts\\s+keys\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_storageAccountsKeywordRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.recycle\\s+service\\s+\\S+\\s+$|^\\s*\\.add\\s+service\\s+\\S+\\s+database\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_regenerateServiceKeywordRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.regenerate\\s+service\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_keyTypesKeywordRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.regenerate\\s+service\\s+\\S+\\s+storage\\s+accounts\\s+$|^\\s*\\.alter\\s+service\\s+\\S+\\s+storage\\s+accounts\\s+keys\\s+to\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_fromServiceKeywordRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.alter\\s+service\\s+((?!packages)\\S+|\\[.*?\\])\\s+configuration\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_fromAccountKeywordRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.alter\\s+account\\s+(\\S+|\\[.*?\\])\\s+configuration\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showCmServiceCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.show\\s+cm\\s+service\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showClusterClientRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.show\\s+cluster\\s+((?!monitoring\\b)(?!principals\\b)\\S+|\\[.*?\\])\\s$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showClusterClientSubscriptionCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.show\\s+cluster\\s+(\\S+|\\[.*?\\])\\s+client\\s$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showClusterClusterNamePrincipalCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.show\\s+cluster\\s+(\\S+|\\[.*?\\])\\s+principal\\s+(\\S+|\\[.*?\\])\\s$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showAuditLogCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.show\\s+(service|account)\\s+\\S+\\s+audit\\s+log\\s+$|^\\s*\\.show\\s+audit\\s+log\\s+by\\s+clientactivityid\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showAuditLogFromCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.show\\s+(service|account)\\s+\\S+\\s+audit\\s+log\\s+from\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_configurationKeywordRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.show\\s+services\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showPrincipalRolesCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.show\\s+principal\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showAccountsKeywordRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.show\\s+accounts\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_dmServiceAddKeywordRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.add\\s+dm\\s+service\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_dmServiceAlterKeywordRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.alter\\s+dm\\s+service\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_dmServiceAlterSettingsRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.alter\\s+dm\\s+service\\s+\\S+\\s+settings\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_dmServiceDropKeywordRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.drop\\s+dm\\s+service\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_dmServiceShowKeywordRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.show\\s+dm\\s+service\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_configurationPropertySetKeywordRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.set\\s+service\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_toStringKeywordRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.set\\s+service\\s+\\S+\\s+\\S+\\s+$|^\\s*\\.set\\s+account\\s+\\[.*?\\]\\s+(division|servicetree)\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_configurationPropertyWithConsentKeywordRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.set\\s+service\\s+\\S+\\s+(?i)InstancesCount\\s+(auto|to\\s+\\S+)\\s+$|^\\s*\\.set\\s+service\\s+\\S+\\s+(?i)VmSize\\s+to\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_addKeywordRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.set\\s+service\\s+\\S+\\s+NumberOfDatabaseStorageAccounts\\s+to\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_configurationPropertyDropKeywordRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.drop\\s+service\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_accountRenameOperationsKeywordRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.rename\\s+account\\s+(\\S+|\\[.*?\\])\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_accountAlterOperationsKeywordRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.alter\\s+account\\s+\\[.*?\\]\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_accountSubscriptionAlterKeywordRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.alter\\s+account\\s+\\[.*?\\]\\s+subscription\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_accountAddOperationsKeywordRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.add\\s+account\\s+\\[.*?\\]\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_accountRemoveOperationsKeywordRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.remove\\s+account\\s+\\[.*?\\]\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_accountSetOperationsKeywordRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.set\\s+account\\s+\\[.*?\\]\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_serviceAlterOperationsKeywordRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.alter\\s+service\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_serviceRotateOperationsKeywordRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.rotate\\s+service\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_servicePublishOperationsKeywordRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.publish\\s+service\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_serviceUnPublishOperationsKeywordRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.unpublish\\s+service\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_serviceUnPublishFromRegistryOperationsKeywordRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.unpublish\\s+service\\s+\\S+\\s+from\\s+registry\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_inServiceKeywordRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.delete\\s+database\\s+\\S+\\s+$|^\\s*\\.create\\s+database\\s+\\S+\\s+ifNotExists\\s+$|^\\s*\\.detach\\s+follower\\s+database\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_createDatabaseCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.create\\s+database\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_createServiceCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.create\\s+service\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_createExternalCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.create\\s+external\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_accountNamesCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.(add|remove|alter|rename|show|detach|move|set|drop)\\s+account\\s+$|^\\s*\\.move\\s+account\\s+(\\S+|\\[.*?\\])\\s+subscription\\s+\\S+\\s+to\\s+account\\s+$|^\\s*\\.rename\\s+account\\s+(\\S+|\\[.*?\\])\\s+to\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_servicesNamesToAppendOptionsCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.show\\s+service\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_rotateServicesNamesToAppendOptionsCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.rotate\\s+service\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_moveServicesNamesToAppendOptionsCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.move\\s+service\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterServicesNamesToAppendOptionsCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.alter\\s+service\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_publishServicesNamesToAppendOptionsCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.publish\\s+service\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_unPublishServicesNamesToAppendOptionsCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.unpublish\\s+service\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_removeServicesNamesToAppendOptionsCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.remove\\s+service\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_servicesNamesCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.delete\\s+database\\s+\\S+\\s+in\\s+service\\s+$|^\\s*\\.create\\s+database\\s+\\S+\\s+(ifNotExists\\s+)?in\\s+service\\s+$|^\\s*\\.detach\\s+follower\\s+database\\s+\\S+\\s+in\\s+service\\s+$|^\\s*\\.(reallocate|restart|reimage|rebuild|stop|uninstall|install|deploy|reinstall|recycle|set|add|ingest|drop|migrate|cancel|regenerate)\\s+service\\s+$|^\\s*\\.(resume|suspend|delete)\\s+(service|cluster)\\s+$|^\\s*\\.(add|drop|alter|show)\\s+dm\\s+service\\s+$|^\\s*\\.ingest\\s+service\\s+\\S+\\s+storage\\s+logs\\s+into\\s+service\\s+$|^\\s*\\.move\\s+database\\s+\\S+\\s+from\\s+service\\s+$|^\\s*\\.move\\s+database\\s+\\S+\\s+from\\s+service\\s+\\S+\\s+to\\s+service\\s+$|^\\s*\\.move\\s+service\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_withPropertiesSuffixRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.delete\\s+database\\s+\\S+\\s+in\\s+service\\s+\\S+\\s+$|^\\s*\\.create\\s+database\\s+\\S+\\s+(ifNotExists\\s+)?in\\s+service\\s+\\S+\\s+$|^\\s*\\.detach\\s+follower\\s+database\\s+\\S+\\s+in\\s+service\\s+\\S+\\s+$|^\\s*\\.(delete|reallocate|restart|rebuild|reimage|reinstall)\\s+service\\s+\\S+\\s+$|^\\s*\\.create\\s+service\\s+\\S+\\s+ifNotExists\\s+$|^\\s*\\.create\\s+external\\s+cluster\\s+\\S+\\s+$|^\\s*\\.delete\\s+cluster\\s+\\S+\\s+$|^\\s*\\.(add|drop)\\s+dm\\s+service\\s+\\S+\\s+(data obtainer|storage accounts)\\s+$|^\\s*\\.alter\\s+dm\\s+service\\s+\\S+\\s+storage\\s+account\\s+\\S+\\s+$|^\\s*\\.alter\\s+dm\\s+service\\s+\\S+\\s+eventhub\\s+ingestion\\s+source\\s+\\S+\\s+$|^\\s*\\.alter\\s+service\\s+packages\\s+configuration\\s+$|^\\s*\\.remove\\s+service\\s+package\\s+configuration\\s+$|^\\s*\\.alter\\s+sandbox\\s+packages\\s+configuration\\s+$|^\\s*\\.add\\s+account\\s\\[.*?\\]\\s+contact\\s+$|^\\s*\\.add\\s+service\\s+\\S+\\s+database\\s+\\S+\\s+storage\\s+accounts\\s+$|^\\s*\\.alter\\s+service\\s+\\S+\\s+storage\\s+accounts\\s+$|^\\s*\\.ingest\\s+service\\s+\\S+\\s+storage\\s+logs\\s+into\\s+service\\s+\\S+\\s+$|^\\s*\\.ingest\\s+service\\s+\\S+\\s+dsc\\s+logs\\s+$|^\\s*\\.install\\s+service\\s+\\S+\\s+runners\\s+$|^\\s*\\.migrate\\s+service\\s+\\S+\\s+to\\s+(AzurePaas1|AzureVMSS)\\s+$|^\\s*\\.move\\s+database\\s+\\S+\\s+from\\s+service\\s+\\S+\\s+to\\s+service\\s+\\S+\\s+$|^\\s*\\.add\\s+cluster\\s+((?!admins\\b)(?!viewers\\b)(?!jitmanagers\\b)\\S+|\\S)\\s+principal\\s+\\S+\\s$|^\\s*\\.drop\\s+cluster\\s+((?!admins\\b)(?!viewers\\b)(?!jitmanagers\\b)\\S+|\\S)\\s+principal\\s+\\S+\\s$|^\\s*\\.execute\\s+job\\s+\\S+\\s+$|^\\s*\\.add\\s+region\\s+(\\S+|\\[.*?\\])\\s$|^\\s*\\.remove\\s+region\\s+(\\S+|\\[.*?\\])\\s$|^\\s*\\.add\\s+service\\s+\\S+\\s+storage\\s+accounts\\s+$|^\\s*\\.add\\s+subscriptions\\s+AutomaticOSUpgradePolicy\\s+$|^\\s*\\.alter\\s+region\\s+(\\S+|\\[.*?\\])\\s$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_withEventHubPropertiesSuffixRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.add\\s+dm\\s+service\\s+\\S+\\s+eventhub\\s+(obtainer|ingestion source)\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_addServiceServiceNameRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.add\\s+service\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_databaseOrAccountNameMetadataKeywordRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.show\\s+service\\s+\\S+\\s+(database|account)\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_metadataKeywordRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.show\\s+service\\s+\\S+\\s+account\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_summaryOrMetadataKeywordRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.show\\s+service\\s+\\S+\\s+database\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_summaryKeywordRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.show\\s+service\\s+\\S+\\s+databases\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_versionKeywordRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.show\\s+service\\s+\\S+\\s+(database|account)\\s+\\S+\\s+metadata\\s+$|^\\s*\\.show\\s+service\\s+\\S+\\s+metadata\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_cloudCreateCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.create\\s+cloud\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_regionCreateCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.create\\s+region\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_serviceInstallCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.install\\s+service\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_serviceDeployCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.deploy\\s+service\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_serviceReinstallCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.reinstall\\s+service\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_serviceUninstallCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.uninstall\\s+service\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_serviceMigrateCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.migrate\\s+service\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_addClusterPrincipalsCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.add\\s+cluster\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_addClusterJitPrincipalCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.add\\s+cluster\\s+((?!admins\\b)(?!viewers\\b)(?!jitmanagers\\b)\\S+|\\S)\\s$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_dropClusterJitPrincipalCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.drop\\s+cluster\\s+((?!admins\\b)(?!viewers\\b)(?!jitmanagers\\b)\\S+|\\S)\\s$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setClusterPrincipalsCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.set\\s+cluster\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_dropClusterPrincipalsCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.drop\\s+cluster\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setClusterPrincipalsNoneCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.set\\s+cluster\\s+(admins|viewers)\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_dropAccountPrincipalsCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.drop\\s+account\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterServiceConfigurationDetailsKeywordRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.alter\\s+service\\s+((?!packages)\\S+|\\[.*?\\])\\s+configuration\\s+(details\\s+)?$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterServiceConfigurationPropertiesKeywordRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.alter\\s+service\\s+(\\S+|\\[.*?\\])\\s+configuration\\s+(details\\s+)?\\((\\s*\\S+\\s*=\\s*['\"].*?['\"]\\s*)?\\s*(,(\\s*\\S+\\s*=\\s*['\"].*?['\"]\\s*))*\\)\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_loadBalancerKeywordRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.add\\s+service\\s+\\S+\\s+to\\s+$|^\\s*\\.drop\\s+service\\s+\\S+\\s+from\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_yieldPipeOptionRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.show\\s+((ame|corp)\\s+)?resources\\s+$|^\\s*\\.show\\s+(account|subscription|service|tenant)\\s+\\S+\\s+((ame|corp)\\s+)?resources\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_cancelServiceOperationRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.cancel\\s+service\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showSubscriptionCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.show\\s+subscription\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showServiceSecurityRulesOperationRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.show\\s+service\\s+\\S+\\s+securityrules\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_notifyCmCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.notify\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setSkuAvailabilityRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.set\\s+sku\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setSkuAvailabilityValuesRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.set\\s+sku\\s+\\S+\\s+availability\\s+to\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setSkuAvailabilityWithOptionsRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.set\\s+sku\\s+\\S+\\s+availability\\s+to\\s+'(true|false)'\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_sharedIdentityRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*(\\.assign|\\.remove)\\s+service\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setRegionVisibilityWithOptionsRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.set\\s+region\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_registerFeatureRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.register\\s+feature\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_createResourcesForBillingServiceRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.create\\s+resources\\s+for\\s+billing\\s+service\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_adminOperationOptions=System.Array.init(["show","set","reallocate","restart","reimage","rebuild","create","alter","install","reinstall","add","remove","check","recycle","stop","uninstall","detach","delete","ingest","drop","move","migrate","suspend","resume","cancel","regenerate","notify","execute","generate","publish","unpublish","export","rotate","register"],System.String);this.s_operatorOptions=System.Array.init(["where","count","extend","limit","order","project","project-away","project-rename","sort","summarize","take","top","mv-expand"],System.String);this.s_showCommandOptions=System.Array.init(["service","services","account","accounts","operations","running","completed","failed","version","diagnostics","cluster","unallocated subscriptions","subscription","tenant","principal","resources","ame resources","corp resources","sandbox packages configuration","cm","skus availability","dm service","audit log by clientactivityid","regions","client subscriptions","sharedidentity","arm manifest","arm manifest publish","ephemeral registry"],System.String);this.s_rotateCommandOptions=System.Array.init(["service"],System.String);this.s_registerCommandOptions=System.Array.init(["feature"],System.String);this.s_generateCommandOptions=System.Array.init(["arm manifest"],System.String);this.s_publishCommandOptions=System.Array.init(["arm manifest","service"],System.String);this.s_unPublishCommandOptions=System.Array.init(["service"],System.String);this.s_uninstallCommandOptions=System.Array.init(["service","runners"],System.String);this.s_alterCommandOptions=System.Array.init(["service","dm service","account","client subscriptions","region"],System.String);this.s_addCommandOptions=System.Array.init(["account","service","dm service","unallocated subscription","cluster","region","client subscriptions","subscriptions AutomaticOSUpgradePolicy"],System.String);this.s_removeCommandOptions=System.Array.init(["account","unallocated subscription","region","service"],System.String);this.s_dropCommandOptions=System.Array.init(["dm service","service","cluster","account"],System.String);this.s_setCommandOptions=System.Array.init(["service","account","cluster","sku","region"],System.String);this.s_createCommandOptions=System.Array.init(["database","service","account","external","resources for billing service"],System.String);this.s_createExternalCommandOptions=System.Array.init(["cluster"],System.String);this.s_deleteCommandOptions=System.Array.init(["cluster","database","service"],System.String);this.s_moveCommandOptions=System.Array.init(["account","database","service"],System.String);this.s_exportCommandOptions=System.Array.init(["service","package for"],System.String);this.s_detachCommandOptions=System.Array.init(["account","follower database"],System.String);this.s_pccodeKeywordOptions=System.Array.init(["pccode"],System.String);this.s_checkCommandOptions=System.Array.init(["service name availability"],System.String);this.s_serviceKeywordOptions=System.Array.init(["service"],System.String);this.s_serviceOrClusterKeywordOptions=System.Array.init(["service","cluster"],System.String);this.s_ingestLogsIntoCommandOptions=System.Array.init(["storage logs into","dsc logs"],System.String);this.s_showClusterKeywordOptions=System.Array.init(["principals","monitoring"],System.String);this.s_operationsKeywordOptions=System.Array.init(["operations"],System.String);this.s_showPrincipalRolesKeywordOptions=System.Array.init(["roles","@'principal' roles"],System.String);this.s_showServiceCommandOptions=System.Array.init(["versions","model","packages configuration"],System.String);this.s_alterServiceCommandOptions=System.Array.init(["packages configuration"],System.String);this.s_removeServiceCommandOptions=System.Array.init(["package configuration"],System.String);this.s_showCmServiceCommandOptions=System.Array.init(["in region"],System.String);this.s_showClusterClusterNameOptions=System.Array.init(["client","principal"],System.String);this.s_showClusterClientSubscriptionOptions=System.Array.init(["subscription"],System.String);this.s_showAccountCommandOptions=System.Array.init(["configuration","services","service configurations","subscriptions","principals","contacts","audit log","resources","ame resources","corp resources"],System.String);this.s_moveAccountCommandOptions=System.Array.init(["subscription"],System.String);this.s_moveAccountSubscriptionCommandOptions=System.Array.init(["to account"],System.String);this.s_showTargetServiceCommandOptions=System.Array.init(["configuration","fabriclocks","storage objects","storage account","storage accounts","database","databases","account","metadata","audit log","resources","ame resources","corp resources","securityrules","routetable","virtualnetwork","deployments","deployment"],System.String);this.s_fromKeywordOptions=System.Array.init(["from"],System.String);this.s_alterServiceConfigurationKeywordOptions=System.Array.init(["details","(KEY='VALUE')"],System.String);this.s_toKeywordOptions=System.Array.init(["to"],System.String);this.s_moveServiceOptions=System.Array.init(["to cm","engine to v3","to account"],System.String);this.s_addSetDropPrincipalsKeywordOptions=System.Array.init(["admins","viewers","jitmanagers"],System.String);this.s_addDropJitPrincipalsKeywordOptions=System.Array.init(["principal"],System.String);this.s_dropAccountPrincipalsKeywordOptions=System.Array.init(["admins"],System.String);this.s_setNoneKeywordOptions=System.Array.init(["none"],System.String);this.s_showServicesCompletionKeywordsOptions=System.Array.init(["configuration","in nonregistered subscriptions"],System.String);this.s_showAccountsKeywordOptions=System.Array.init(["configuration","subscriptions"],System.String);this.s_dmServiceAddKeywordOptions=System.Array.init(["data obtainer","storage accounts","eventhub ingestion source"],System.String);this.s_dmServiceShowKeywordOptions=System.Array.init(["eventhub ingestion sources","geneva ingestion sources","eventgrid ingestion sources"],System.String);this.s_dmServiceAlterKeywordOptions=System.Array.init(["storage account","eventhub ingestion source"],System.String);this.s_dmServiceDropKeywordOptions=System.Array.init(["data obtainer"],System.String);this.s_keysKeywordOptions=System.Array.init(["keys"],System.String);this.s_keyTypesKeywordOptions=System.Array.init(["primary","secondary"],System.String);this.s_notifyCmKeywordOptions=System.Array.init(["cm"],System.String);this.s_executeCommandOptions=System.Array.init(["job"],System.String);this.s_executeJobCommandOptions=System.Array.init(["runAll","addResourceGroupToSAs","commitNames","moveClientSubscriptionsToAccountLevel","migrateSAsToArmJob","regenerateArmDetails","fixEngineUriJob","certificateRotationForSuspendedClustersJob","addMissingZonesInClientSubscriptionsJob"],System.String);this.s_serviceConfigurationPropertyDropKeywordOptions=System.Array.init(["AutoscaleSetting","FeatureFlags","from","TableFreshnessTestSettings","uncommitted changes"],System.String);this.s_serviceConfigurationPropertySetKeywordOptions=System.Array.init(["InstancesCount","InstancesCount auto","VmSize","AutoscaleSetting","DeploymentRing","DeploymentFreezeEnabled","DeploymentFreezeExpiresOn","FeatureFlags","MonitoringAccount","TableFreshnessTestSettings","Environment","CustomerType","Certificates","DoNotCreateIcmIncidents","DoNotDeploy","DoNotDeployRunners","AdditionalSubscriptions","AriaBridgeConfiguration","AutomaticallyDetachCorruptDatabases","CmSettings","DmSettings","EnableTracePush","SecuritySettings.EnableUnauthenticatedAccess","SecuritySettings.RequireMfa","JitStorageAccountName","KustoExplorerDownloadUri","KustoServiceSettings","ManagementCertificate","ScaleChangesRequireCustomerConsent","EnableSSE","NumberOfDatabaseStorageAccounts"],System.String);this.s_withConsentKeywordOptions=System.Array.init(["with consent"],System.String);this.s_storageAccountsKeywordOptions=System.Array.init(["storage accounts"],System.String);this.s_serviceRegenerateKeywordOptions=System.Array.init(["storage accounts","clusteridmap","arm details"],System.String);this.s_accountAlterOperationsOptions=System.Array.init(["configuration","subscription","tenantId"],System.String);this.s_accountRenameOperationsOptions=System.Array.init(["to"],System.String);this.s_accountAddOperationsOptions=System.Array.init(["contact","admins"],System.String);this.s_accountRemoveOperationsOptions=System.Array.init(["contact"],System.String);this.s_accountSetOperationsOptions=System.Array.init(["division","admins","servicetree"],System.String);this.s_serviceAlterOperationsOptions=System.Array.init(["configuration","storage account","storage accounts","configuration details"],System.String);this.s_serviceRotateOperationsOptions=System.Array.init(["certificate"],System.String);this.s_servicePublishOperationsOptions=System.Array.init(["to registry"],System.String);this.s_serviceUnPublishOperationsOptions=System.Array.init(["from registry"],System.String);this.s_inServiceKeywordOptions=System.Array.init(["in service"],System.String);this.s_addServiceServiceNameOptions=System.Array.init(["database","to","storage accounts"],System.String);this.s_metadataKeywordOptions=System.Array.init(["metadata"],System.String);this.s_summaryKeywordOptions=System.Array.init(["summary"],System.String);this.s_summaryOrMetadataKeywordOptions=System.Array.init(["summary","metadata"],System.String);this.s_versionKeywordOptions=System.Array.init(["version"],System.String);this.s_withPropertiesSuffixOptions=System.Array.init(["with(KEY='VALUE')"],System.String);this.s_alterServiceStorageAccountsSuffixOptions=System.Array.init(["with(KEY='VALUE')","keys"],System.String);this.s_withEventHubProperties=System.Array.init(["with(CreateEventHub='true', PartitionCount='VALUE', TargetDatabase='VALUE')","with(EventHubName='VALUE', EventHubNamespaceConnectionString='VALUE', EventHubConsumerGroupName='VALUE', TargetDatabase='VALUE')","with(IngestionSourceType='IotHub', EventHubName='VALUE', EventHubNamespaceConnectionString='VALUE', EventHubConsumerGroupName='VALUE', PartitionCount='VALUE', TargetDatabase='VALUE')"],System.String);this.s_withSkuAvailabilityProperties=System.Array.init(["with(location='VALUE')"],System.String);this.s_regionVisibilityProperties=System.Array.init(["visibility true","visibility false except subscription"],System.String);this.s_installCommandOptions=System.Array.init(["with(KEY='VALUE')","runners"],System.String);this.s_uninstallRunnersCommandOptions=System.Array.init(["with(KEY='VALUE')","runners"],System.String);this.s_migrateServiceCommandOptions=System.Array.init(["to AzurePaas1","to AzureVMSS"],System.String);this.s_fromServiceKeywordOptions=System.Array.init(["from service"],System.String);this.s_toServiceKeywordOptions=System.Array.init(["to service"],System.String);this.s_createDatabaseCommandOptions=System.Array.init(["in service","ifNotExists"],System.String);this.s_createServiceCommandOptions=System.Array.init(["with(KEY='VALUE')","ifNotExists"],System.String);this.s_addKeywordOptions=System.Array.init(["add"],System.String);this.s_alterServiceConfigurationPropertiesOptions=System.Array.init(["(PropertyPath='PropertyValue')"],System.String);this.s_alterServiceConfigurationCommandOptions=System.Array.init(["with(KEY='VALUE')","applynow"],System.String);this.s_loadBalancerKeywordOptions=System.Array.init(["load balancer"],System.String);this.s_operationKeywordOptions=System.Array.init(["operation"],System.String);this.s_showSubscriptionCommandOptions=System.Array.init(["resources","ame resources","corp resources"],System.String);this.s_showServiceSecurityRulesCommandOptions=System.Array.init(["inbound","outbound"],System.String);this.s_trueFalseKeywordOptions=System.Array.init(["'true'","'false'"],System.String);this.s_skuAvailabilityKeywordOptions=System.Array.init(["availability to"],System.String);this.s_exportPackageForOptions=System.Array.init(["Engine","DataManagement","ClusterManagement","Bridge","ResourceProvider","Billing","Gaia","HealthSuite","Flighting"],System.String);this.s_exportPackageForServiceTypeOptions=System.Array.init(["ProductVersion=''"],System.String);this.s_sharedIdentityOptions=System.Array.init(["sharedidentity"],System.String);this.s_registerFeatureCommandOptions=System.Array.init(["subscriptions"],System.String)}}},ctors:{$ctor1:function(accounts,services,connectionContext){connectionContext===void 0&&(connectionContext=null);var $t;this.$initialize();Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.ctor.call(this);this.Locker;(this.CommandRules==null||this.GeneralRules==null)&&this.LoadRulesUnderLock(accounts,services);this.CommandToolTips==null&&this.LoadCommandToolTips();this.ContextConnection=($t=connectionContext,$t!=null?$t:"")},ctor:function(other){var $t;this.$initialize();Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.ctor.call(this);this.ContextConnection=other.ContextConnection;this.Initialize();other.Locker;Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$1(Kusto.Data.IntelliSense.IntelliSenseRule,other.CommandRules)&&this.CommandRules.AddRange(other.CommandRules);Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$1(Kusto.Data.IntelliSense.IntelliSenseRule,other.GeneralRules)&&this.GeneralRules.AddRange(other.GeneralRules);Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(Kusto.Data.IntelliSense.IntelliSenseCommandTip,other.CommandToolTips)&&(this.CommandToolTips=($t=Kusto.Data.IntelliSense.IntelliSenseCommandTip,System.Linq.Enumerable.from(other.CommandToolTips,$t).toList($t)));Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$1(Kusto.Data.IntelliSense.IntelliSenseRule,other.QueryParametersRules)&&this.QueryParametersRules.AddRange(other.QueryParametersRules)}},methods:{ResetState:function(){},AnalyzeCommand$1:function(statement,cachedReference){var $t;return $t=new Kusto.Data.IntelliSense.AnalyzedCommand,$t.Command=statement,$t.Context=Kusto.Data.IntelliSense.KustoCommandContext.Empty,$t},AnalyzeCommand:function(command,appendingPart){var $t;return $t=new Kusto.Data.IntelliSense.AnalyzedCommand,$t.Command=(command.Command||"")+(appendingPart||""),$t.Context=Kusto.Data.IntelliSense.KustoCommandContext.Empty,$t},UpdateProviderAvailableEntities:function(command,commandContext){},Clone:function(){return new Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.ctor(this)},LoadRulesUnderLock:function(accounts,services){var $t,$t1,accountNames,servicesNames,servicesAndOptionsTokens,alterServicesAndOptionsTokens,removeServicesAndOptionsTokens;this.CommandRules=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseRule).ctor);this.GeneralRules=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseRule).ctor);this.QueryParametersRules=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseRule).ctor);accountNames=System.Linq.Enumerable.from(accounts,Kusto.Data.IntelliSense.KustoIntelliSenseAccountEntity).select($asm.$.Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.f1).toList(System.String);accountNames.Sort();servicesNames=System.Linq.Enumerable.from(services,Kusto.Data.IntelliSense.KustoIntelliSenseServiceEntity).select($asm.$.Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.f2).toList(System.String);servicesNames.Sort();this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldAdminCommandsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_lineWithDotBeginningRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Command,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_adminOperationOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldOperatorsAfterPipe,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_afterPipeRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Operator,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_operatorOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldShowCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldRotateCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_rotateCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_rotateCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldServicesNames,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_rotateServicesNamesToAppendOptionsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,servicesNames),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldRotateServiceCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_serviceRotateOperationsKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_serviceRotateOperationsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldServicesNames,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_moveServicesNamesToAppendOptionsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,servicesNames),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldGenerateCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_generateCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_generateCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldPublishCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_publishCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_publishCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldServicesNames,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_publishServicesNamesToAppendOptionsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,servicesNames),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldPublishServiceCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_servicePublishOperationsKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_servicePublishOperationsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldUnPublishCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_unPublishCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_unPublishCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldServicesNames,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_unPublishServicesNamesToAppendOptionsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,servicesNames),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldUnPublishServiceCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_serviceUnPublishOperationsKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_serviceUnPublishOperationsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldWithPropertiesSuffix,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_serviceUnPublishFromRegistryOperationsKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_withPropertiesSuffixOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldAlterCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_alterCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_alterCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldSetCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_setCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_setCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldRemoveCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_removeCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_removeCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldAddServiceServiceNameOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_addServiceServiceNameRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_addServiceServiceNameOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldMetadataKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_metadataKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_metadataKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldSummaryOrMetadataKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_summaryOrMetadataKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_summaryOrMetadataKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldSummaryKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_summaryKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_summaryKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldDatabaseOrAccountMetadataKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_databaseOrAccountNameMetadataKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_metadataKeywordOptions),$t.DefaultBeforeApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text="[] ",$t1),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=" ",$t1.OffsetPosition=-11,$t1),$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldVersionKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_versionKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_versionKeywordOptions),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=" ''",$t1.OffsetPosition=-1,$t1),$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldDatabaseMoveCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_moveDatabaseCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_fromServiceKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldDatabaseMoveFromServiceCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_moveDatabaseFromServiceCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_toServiceKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldDatabaseCreateCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_createDatabaseCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_createDatabaseCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldServiceCreateCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_createServiceCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_createServiceCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldAddCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_addCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_addCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldDropCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_dropCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_dropCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldMoveCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_moveCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_moveCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldExportCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_exportCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_exportCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldExportPackageForOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_exportPackageForOptionsRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_exportPackageForOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldExportPackageForServiceTypeOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_exportPackageForProductVersionOptionsRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_exportPackageForServiceTypeOptions),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text="",$t1.OffsetPosition=-1,$t1),$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldOperationKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_cancelServiceOperationRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_operationKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldIngestLogsIntoKeywordsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_ingestLogsIntoCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_ingestLogsIntoCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldCreateCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_createCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_createCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldCreateExternalCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_createExternalCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_createExternalCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldExecuteCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_executeCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_executeCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldExecuteJobCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_executeJobCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_executeJobCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldDeleteCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_deleteCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_deleteCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldDetachCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_detachCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_detachCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldRegisterCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_registerCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_registerCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldCheckCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_checkCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_checkCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldServiceKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_serviceCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_serviceKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldServiceOrClusterKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_activationCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_serviceOrClusterKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldShowClusterKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showClusterOptionsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showClusterKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldOperationsKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_operationsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_operationsKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldShowAccountCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showAccountCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showAccountCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldMoveAccountCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_moveAccountCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_moveAccountCommandOptions),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=" @''",$t1.OffsetPosition=-1,$t1),$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldMoveAccountSubscriptionCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_moveAccountSubscriptionCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_moveAccountSubscriptionCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldMoveServiceConfigurationCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_moveServiceConfigurationCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_moveServiceOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldFromServiceKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_fromServiceKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_alterServiceConfigurationKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldAlterServiceConfigurationPropertiesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_alterServiceConfigurationDetailsKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_alterServiceConfigurationPropertiesOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldAlterServiceConfigurationCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_alterServiceConfigurationPropertiesKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_alterServiceConfigurationCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldFromAccountKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_fromAccountKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_fromKeywordOptions),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=" @''",$t1),$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldShowAuditLogCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showAuditLogCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_fromKeywordOptions),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=System.String.format(" @'{0:yyyy-MM-dd}'",[Bridge.box(System.DateTime.getUtcNow(),System.DateTime,System.DateTime.format)]),$t1),$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldShowAuditLogFromCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showAuditLogFromCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_toKeywordOptions),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=System.String.format(" @'{0:yyyy-MM-dd}'",[Bridge.box(System.DateTime.getUtcNow(),System.DateTime,System.DateTime.format)]),$t1),$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldShowServicesCompletionKeywordsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_configurationKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showServicesCompletionKeywordsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldShowAccountsKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showAccountsKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showAccountsKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldDmServiceAddKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_dmServiceAddKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_dmServiceAddKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldDmServiceShowKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_dmServiceShowKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_dmServiceShowKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldDmServiceDropKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_dmServiceDropKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_dmServiceDropKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldDmServiceAlterKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_dmServiceAlterKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_dmServiceAlterKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldDmServiceAlterSettingsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_dmServiceAlterSettingsRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_toKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldConfigurationPropertySetKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_configurationPropertySetKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_serviceConfigurationPropertySetKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldToStringKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_toStringKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_toKeywordOptions),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=" @''",$t1.OffsetPosition=-1,$t1),$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldConfigurationPropertyWithConsentKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_configurationPropertyWithConsentKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_withConsentKeywordOptions),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=" @''",$t1.OffsetPosition=-1,$t1),$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldAddKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_addKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_addKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldConfigurationPropertyDropKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_configurationPropertyDropKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_serviceConfigurationPropertyDropKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldAccountAlterOperationsKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_accountAlterOperationsKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_accountAlterOperationsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldAccountRenameOperationsKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_accountRenameOperationsKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_accountRenameOperationsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldAccountAddOperationsKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_accountAddOperationsKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_accountAddOperationsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldAccountRemoveOperationsKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_accountRemoveOperationsKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_accountRemoveOperationsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldAccountSetOperationsKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_accountSetOperationsKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_accountSetOperationsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldPcCodeKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_accountSubscriptionAlterKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_pccodeKeywordOptions),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=" @''",$t1.OffsetPosition=-1,$t1),$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldServiceAlterOperationsKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_serviceAlterOperationsKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_serviceAlterOperationsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldInServiceKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_inServiceKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_inServiceKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldStorageAccountsKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_storageAccountsKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_storageAccountsKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldServiceRegenerateSuffix,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_regenerateServiceKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_serviceRegenerateKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldAccountNames,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_accountNamesCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,accountNames),$t.DefaultBeforeApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text="[",$t1),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text="] ",$t1),$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldServicesNames,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_servicesNamesCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Service,servicesNames),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldWithPropertiesSuffix,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_withPropertiesSuffixRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_withPropertiesSuffixOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldWithEventHubPropertiesSuffix,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_withEventHubPropertiesSuffixRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_withEventHubProperties),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldShowPrincipalRolesCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showPrincipalRolesCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showPrincipalRolesKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));servicesAndOptionsTokens=System.Linq.Enumerable.from(Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showServiceCommandOptions,System.String).union(servicesNames);this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldServicesNamesCombinedWithOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_servicesNamesToAppendOptionsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,servicesAndOptionsTokens),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));alterServicesAndOptionsTokens=System.Linq.Enumerable.from(Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_alterServiceCommandOptions,System.String).union(servicesNames);this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldServicesNamesCombinedWithOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_alterServicesNamesToAppendOptionsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,alterServicesAndOptionsTokens),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));removeServicesAndOptionsTokens=System.Linq.Enumerable.from(Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_removeServiceCommandOptions,System.String).union(servicesNames);this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldServicesNamesCombinedWithOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_removeServicesNamesToAppendOptionsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,removeServicesAndOptionsTokens),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldSharedIdentity,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_sharedIdentityRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_sharedIdentityOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldTargetServiceOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showTargetServiceCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showTargetServiceCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldShowCmServiceCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showCmServiceCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showCmServiceCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldShowClusterClusterNamePrincipalCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showClusterClusterNamePrincipalCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_withPropertiesSuffixOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldShowClusterClientOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showClusterClientRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showClusterClusterNameOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldShowClusterClientSubscriptionCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showClusterClientSubscriptionCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showClusterClientSubscriptionOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldWithPropertiesSuffix,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_cloudCreateCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_withPropertiesSuffixOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldWithPropertiesSuffix,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_regionCreateCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_withPropertiesSuffixOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldInstallCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_serviceInstallCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_installCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldWithPropertiesSuffix,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_serviceDeployCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_withPropertiesSuffixOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldReinstallCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_serviceReinstallCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_withPropertiesSuffixOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldUninstallServiceCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_serviceUninstallCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_uninstallRunnersCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldUninstallCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_uninstallCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_uninstallCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldMigrateServiceCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_serviceMigrateCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_migrateServiceCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldSetClusterPrincipalsNoneOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_setClusterPrincipalsNoneCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_setNoneKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldSetClusterPrincipalsCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_setClusterPrincipalsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_addSetDropPrincipalsKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldAddClusterPrincipalsCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_addClusterPrincipalsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_addSetDropPrincipalsKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldDropClusterPrincipalsCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_dropClusterPrincipalsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_addSetDropPrincipalsKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldDropAccountPrincipalsCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_dropAccountPrincipalsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_dropAccountPrincipalsKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldAddClusterJitPrincipalsCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_addClusterJitPrincipalCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_addDropJitPrincipalsKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldDropClusterJitPrincipalsCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_dropClusterJitPrincipalCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_addDropJitPrincipalsKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldAddServiceServiceNameOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_addServiceServiceNameRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_addServiceServiceNameOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldLoadBalancerKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_loadBalancerKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_loadBalancerKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldPipeOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_yieldPipeOptionRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,System.Array.init(["|"],System.String)),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldShowSubscriptionCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showSubscriptionCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showSubscriptionCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldShowServiceSecurityRulesCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showServiceSecurityRulesOperationRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showServiceSecurityRulesCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldKeysCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_keysCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_keysKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldKeyTypesCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_keyTypesKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_keyTypesKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldAlterServiceStorageAccountsCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_alterServiceStorageAccountsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_alterServiceStorageAccountsSuffixOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldToKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_toKeywordCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_toKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldCmNotifyCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_notifyCmCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_notifyCmKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldSkuAvailabilityPrefix,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_setSkuAvailabilityRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_skuAvailabilityKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldSkuAvailabilityCommandValues,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_setSkuAvailabilityValuesRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_trueFalseKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldSkuAvailabilityPropertiesSuffix,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_setSkuAvailabilityWithOptionsRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_withSkuAvailabilityProperties),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldSetRegionVisibility,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_setRegionVisibilityWithOptionsRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_regionVisibilityProperties),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldRegisterFeature,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_registerFeatureRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_registerFeatureCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldBillingServiceCreateResources,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_createResourcesForBillingServiceRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_withPropertiesSuffixOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t))},LoadCommandToolTips:function(){var $t,toolTipCommands=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTip).ctor),command1,command2,command3,command4,command5,command6,command7,command8,command9,command10,command11,command12,command13,command14,command15,command16,command17,command18,command19,command20,command21;this.CommandToolTips=toolTipCommands;var internalCmDocumentationRoot="https://kusto.azurewebsites.net/internaldocs/controlCommands/controlcommands_CM_internal.html",externalCmDocumentationRoot="https://kusto.azurewebsites.net/docs/controlCommands/cm.html",command=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=".restart",$t.NameSuffix=" service",$t.Summary="<a href=https://kusto.azurewebsites.net/docs/controlCommands/cm.html#restart-service>Click to see documentation<\/a>",$t.Usage="<i>.restart service<\/i> Engine-KustoDev\n<i>.restart service<\/i> Engine-KustoDev with(instancename='Kusto.Azure.Svc_IN_11')",$t);toolTipCommands.add(command);command1=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=".reimage",$t.NameSuffix=" service",$t.Summary="<a href=https://kusto.azurewebsites.net/docs/controlCommands/cm.html#reimage-service>Click to see documentation<\/a>",$t.Usage="<i>.reimage service<\/i> Engine-KustoDev\n<i>.reimage service<\/i> Engine-KustoDev with(instancename='Kusto.Azure.Svc_IN_11')",$t);toolTipCommands.add(command1);command2=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=".rebuild",$t.NameSuffix=" service",$t.Summary="<a href=https://kusto.azurewebsites.net/docs/controlCommands/cm.html#rebuild-service>Click to see documentation<\/a>",$t.Usage="<i>.rebuild service<\/i> Engine-KustoDev\n<i>.rebuild service<\/i> Engine-KustoDev with(instancename='Kusto.Azure.Svc_IN_11')",$t);toolTipCommands.add(command2);command3=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=".reallocate",$t.NameSuffix=" service",$t.Summary="<a href=https://kusto.azurewebsites.net/docs/controlCommands/cm.html#reallocate-service>Click to see documentation<\/a>",$t.Usage="<i>.reallocate service<\/i> Engine-KustoDev\n<i>.reallocate service<\/i> Engine-KustoDev with(instancename='Kusto.Azure.Svc_IN_11')",$t);toolTipCommands.add(command3);command4=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=".uninstall",$t.NameSuffix=" service | service runners",$t.Summary="Click to see documentation for:\n<a href="+(externalCmDocumentationRoot||"")+"#uninstall-service>.uninstall service<\/a>\n<a href="+(internalCmDocumentationRoot||"")+"#uninstall-service-runners>.uninstall service runners<\/a>",$t);toolTipCommands.add(command4);command5=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=".stop",$t.NameSuffix=" service",$t.Summary="<a href=https://kusto.azurewebsites.net/docs/controlCommands/cm.html#stop-service>Click to see documentation<\/a>",$t.Usage="<i>.stop service<\/i> Engine-KustoDev",$t);toolTipCommands.add(command5);command6=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=".install",$t.NameSuffix=" service | service runners",$t.Summary="Click to see documentation for:\n<a href="+(externalCmDocumentationRoot||"")+"#install-service>.install service<\/a>\n<a href="+(internalCmDocumentationRoot||"")+"#install-service-runners>.install service runners<\/a>",$t);toolTipCommands.add(command6);command7=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=".delete",$t.NameSuffix=" cluster | service | database",$t.Summary="Click to see documentation for:\n<a href="+(internalCmDocumentationRoot||"")+"#delete-cluster>Click to see documentation<\/a>\n<a href="+(internalCmDocumentationRoot||"")+"#delete-service>Click to see documentation<\/a>\n<a href="+(externalCmDocumentationRoot||"")+"#delete-database>.delete database<\/a>",$t);toolTipCommands.add(command7);command8=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=".check",$t.NameSuffix=" service name availability",$t.Summary="<a href=https://kusto.azurewebsites.net/docs/controlCommands/cm.html#check-service-name-availability>Click to see documentation<\/a>",$t.Usage="<i>.check service name availability<\/i> MyCoolName",$t);toolTipCommands.add(command8);command9=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=".create",$t.NameSuffix=" service | database | account",$t.Summary="Click to see documentation for:\n<a href="+(externalCmDocumentationRoot||"")+"#create-database>.create database<\/a>\n<a href="+(externalCmDocumentationRoot||"")+"#create-service>.create service<\/a>\n<a href="+(internalCmDocumentationRoot||"")+"#create-account>.create account<\/a>",$t);toolTipCommands.add(command9);command10=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=".detach",$t.NameSuffix=" account",$t.Summary="<a href=https://kusto.azurewebsites.net/internaldocs/controlCommands/controlcommands_CM_internal.html#detach-account>Click to see documentation<\/a>",$t.Usage="<i>.detach account<\/i> [Kusto Test]",$t);toolTipCommands.add(command10);command11=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=".alter",$t.NameSuffix=" service | account",$t.Summary="Click to see documentation for:\n<a href="+(externalCmDocumentationRoot||"")+"#alter-service-configuration>.alter service configuration<\/a>\n<a href="+(internalCmDocumentationRoot||"")+"#alter-account-configuration>.alter account configuration<\/a>\n<a href="+(internalCmDocumentationRoot||"")+"#alter-account-admins>.alter account admins<\/a>\n<a href="+(internalCmDocumentationRoot||"")+"#alter-account-subscription-pccode>.alter account subscription pccode<\/a>",$t);toolTipCommands.add(command11);command12=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=".add",$t.NameSuffix=" account | service | database storage accounts | unallocated subscription",$t.Summary="Click to see documentation for:\n<a href="+(internalCmDocumentationRoot||"")+"#add-account-contact>.add account contact<\/a>\n<a href="+(internalCmDocumentationRoot||"")+"#add-dm-service-storage-accounts>.add dm service storage accounts<\/a>\n<a href="+(externalCmDocumentationRoot||"")+"#add-database-storage-accounts>.add database storage accounts<\/a>\n<a href="+(internalCmDocumentationRoot||"")+"#add-unallocated-subscription>.add unallocated subscription<\/a>",$t);toolTipCommands.add(command12);command13=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=".remove",$t.NameSuffix=" account contact | unallocated subscription",$t.Summary="Click to see documentation for:\n<a href="+(internalCmDocumentationRoot||"")+"#remove-account-contact>.remove account contact<\/a>\n<a href="+(internalCmDocumentationRoot||"")+"#remove-unallocated-subscription>.remove unallocated subscription<\/a>",$t);toolTipCommands.add(command13);command14=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=".set service",$t.NameSuffix=" property to value",$t.Summary="<a href=https://kusto.azurewebsites.net/docs/controlCommands/cm.html#set-service-configuration-property>Click to see documentation<\/href>",$t.Usage="<i>.set<\/i> service Engine-KustoDev InstancesCount to '10'",$t);toolTipCommands.add(command14);command15=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=".recycle",$t.NameSuffix=" service storage accounts",$t.Summary="<a href=https://kusto.azurewebsites.net/internaldocs/controlCommands/controlcommands_CM_internal.html#recycle-service-storage-accounts>Click to see documentation<\/href>",$t.Usage="<i>.recycle<\/i> service Engine-Aria storage accounts (kuariadb0,kuariadb1) with(storageaccountbasename='kuariadbnew')\n\n<i>.recycle<\/i> service Engine-Aria storage accounts (kuariadb0,kuariadb1) with(storageaccountbasename='kuariadbnew',startindex='1')",$t);toolTipCommands.add(command15);command16=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=".ingest",$t.NameSuffix=" service storage logs",$t.Summary="<a href=https://kusto.azurewebsites.net/internaldocs/controlCommands/controlcommands_CM_internal.html#ingest-service-storage-logs>Click to see documentation<\/href>",$t.Usage="<i>.ingest service<\/i> Engine-Aria storage logs into service Engine-KustoDev with(starttime='2016-02-02', storageservice='queue')\n\n<i>.ingest service<\/i> Mgmt-Aria storage logs into service Engine-KustoDev with(starttime='2016-1-1 11:05:00.0', endtime='2016-1-1 23:59:59.9', storageservice='blob')",$t);toolTipCommands.add(command16);command17=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=".show",$t.NameSuffix=" service [ServiceName] (configuration | fabriclocks | storage objects | database [DatabaseName] metadata | audit log)",$t.Summary="Click to see documentation for:\n<a href="+(externalCmDocumentationRoot||"")+"#show-service>.show service [ServiceName] configuration<\/a>\n<a href="+(internalCmDocumentationRoot||"")+"#show-service-fabricklocks>.show service [ServiceName] fabriclocks<\/a>\n<a href="+(externalCmDocumentationRoot||"")+"#show-service-storage-objects>.show service [ServiceName] storage objects<\/a>\n<a href="+(externalCmDocumentationRoot||"")+"#show-service-metadata>.show service [ServiceName] database [DatabaseName] metadata<\/a>\n<a href="+(externalCmDocumentationRoot||"")+"#show-service-audit-log>.show service [ServiceName] audit log from '<StartDate>' to '<EndDate>'<\/a>\n<a href="+(internalCmDocumentationRoot||"")+"#show-unallocated-subscriptions>.show unallocated subscriptions<\/a>",$t.Usage="<i>.show<\/i> service Engine-Aria configuration\n<i>.show<\/i> service Engine-Aria fabriclocks\n<i>.show<\/i> service Engine-Aria storage objects\n<i>.show<\/i> service Engine-Aria database aria metadata\n<i>.show<\/i> service Engine-Aria audit log from '2017-01-15T12:00' to '2017-01-30T12:30'",$t);toolTipCommands.add(command17);command18=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=".drop",$t.NameSuffix=" dm service [ServiceName] data obtainer [DataObtainerName]",$t.Summary="<a href=https://kusto.azurewebsites.net/internaldocs/controlCommands/controlcommands_CM_internal.html#drop-dm-service-data-obtainer>Click to see documentation<\/href>",$t.Usage="<i>.drop<\/i> dm service Ingest-Playground data obtainer SomeObtainerName",$t);toolTipCommands.add(command18);command19=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=".register",$t.NameSuffix=" feature [FeatureName] subscriptions ([SubscriptionIDs])",$t.Summary="Click to see documentation for:\n<a href="+(internalCmDocumentationRoot||"")+"#register-feature-subscriptions>.register feature<\/a>",$t);toolTipCommands.add(command19);command20=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=".alter",$t.NameSuffix=" dm service [ServiceName] settings [SettingsJsonPath] to [NewSettingsValue]",$t.Summary="Click to see documentation for:\n<a href="+(internalCmDocumentationRoot||"")+"#alter-dm-service-settings>.alter dm service settings<\/a>",$t);toolTipCommands.add(command20);command21=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=".create",$t.NameSuffix=" resources for billing service [BillingServiceName]",$t.Summary="Click to see documentation for:\n<a href="+(internalCmDocumentationRoot||"")+"#create-resources-for-billing-service>.create resources for billing service<\/a>",$t);toolTipCommands.add(command21)}}});Bridge.ns("Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider",$asm.$);Bridge.apply($asm.$.Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider,{f1:function(account){return account.Name},f2:function(service){return service.Name}});Bridge.define("Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule",{inherits:[Kusto.Data.IntelliSense.IntelliSenseRule],props:{MatchingRegex:null,AdditionalOptions:null,ContextualOptions:null,OverrideOptions:null,OptionsKind:0,RequiresFullCommand:{get:function(){return!0}},IsContextual:{get:function(){return!0}}},methods:{IsMatch:function(context,input){return this.MatchingRegex.isMatch(input)},GetOptions:function(context){if(this.AdditionalOptions==null||Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(Kusto.Data.IntelliSense.CompletionOptionCollection,this.AdditionalOptions))return this.GetContextOptions(context);var result=new(System.Collections.Generic.List$1(System.String).$ctor1)(this.GetContextOptions(context));return System.Linq.Enumerable.from(result,System.String).union(System.Linq.Enumerable.from(this.AdditionalOptions,Kusto.Data.IntelliSense.CompletionOptionCollection).selectMany($asm.$.Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule.f1))},GetContextOptions:function(context){if(Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$1(System.Collections.Generic.KeyValuePair$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)),this.OverrideOptions)&&this.OverrideOptions.containsKey(context))return this.OverrideOptions.getItem(context);else{var contextWithoutOpertaion=new Kusto.Data.IntelliSense.KustoCommandContext(context.Context);if(Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$1(System.Collections.Generic.KeyValuePair$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)),this.ContextualOptions)&&this.ContextualOptions.containsKey(contextWithoutOpertaion))return this.ContextualOptions.getItem(contextWithoutOpertaion)}return System.Array.init([],System.String)},GetCompletionOptions:function(context){var contextualOptionsCollection,sortedCollections;return this.AdditionalOptions==null||Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(Kusto.Data.IntelliSense.CompletionOptionCollection,this.AdditionalOptions)?System.Linq.Enumerable.from(this.GetContextOptions(context),System.String).select(Bridge.fn.bind(this,$asm.$.Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule.f2)).ToArray(Kusto.Data.IntelliSense.CompletionOption):(contextualOptionsCollection=new Kusto.Data.IntelliSense.CompletionOptionCollection(this.OptionsKind,this.GetContextOptions(context)),sortedCollections=System.Linq.Enumerable.from(function(_o1){return _o1.add(contextualOptionsCollection),_o1}(new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CompletionOptionCollection).ctor)),Kusto.Data.IntelliSense.CompletionOptionCollection).concat(this.AdditionalOptions).orderByDescending($asm.$.Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule.f3),sortedCollections.selectMany($asm.$.Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule.f4))}}});Bridge.ns("Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule",$asm.$);Bridge.apply($asm.$.Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,{f1:function(o){return o.Values},f2:function(o){return new Kusto.Data.IntelliSense.CompletionOption(this.OptionsKind,o)},f3:function(o){return o.Priority},f4:function(c){return c.GetCompletionOptions()}});Bridge.define("Kusto.Data.IntelliSense.ContextualTokensWithRegexIntelliSenseRule",{inherits:[Kusto.Data.IntelliSense.IntelliSenseRule],statics:{methods:{GetHashStringForContextAndToken:function(context,token){return(context||"")+";"+(token||"")}}},props:{MatchingRegex:null,MatchingTokens:null,GroupNameToUseAfterMatch:null,Options:null,RequiresFullCommand:{get:function(){return!0}},IsContextual:{get:function(){return!0}}},methods:{IsMatch:function(context,input){var m,matchedString;return this.MatchingTokens==null||!System.Linq.Enumerable.from(this.MatchingTokens,System.String).any()||System.String.isNullOrEmpty(this.GroupNameToUseAfterMatch)?!1:(m=this.MatchingRegex.match(input),!m.getSuccess()||m.getGroups().getCount()<1)?!1:(matchedString=Kusto.Data.IntelliSense.ContextualTokensWithRegexIntelliSenseRule.GetHashStringForContextAndToken(context.Context,m.getGroups().getByName(this.GroupNameToUseAfterMatch).toString()),this.MatchingTokens.contains(matchedString))},GetOptions:function(context){return this.Options.Values},GetCompletionOptions:function(context){return this.Options.GetCompletionOptions()}}});Bridge.define("Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider",{inherits:[Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase],statics:{fields:{s_afterPipeRegex:null,s_renderRegex:null,s_renderMultiChartsRegex:null,s_renderKindOptionsRegex:null,s_evaluateRegex:null,s_makeSeriesRequestingAggregatorsRegex:null,s_makeSeriesBeforeDefaultOrOnRegex:null,s_makeSeriesBeforeOnRegex:null,s_makeSeriesBeforeRangeRegex:null,s_makeSeriesBeforeByRegex:null,s_joinRegex:null,s_diffPatternsPluginSplitParameterRegex:null,s_startOfLineWithSpaceOrAfterJoinRegex:null,s_startOfCommandWithClusterRegex:null,s_tablesScopeRegex:null,s_startOfCommandWithDatabaseRegex:null,s_clusterFunctionRegex:null,s_databaseFunctionInFindRegex:null,s_databaseFunctionRegex:null,s_operatorContextForFilterColumnRegex:null,s_operatorContextForProject:null,s_operatorContextForProjectAway:null,s_operatorContextForProjectRename:null,s_operatorContextForFilterColumnInFindRegex:null,s_operatorContextForFindProject:null,s_singleParamFunctions:null,s_singleParamFunctionsColumnContextRegex:null,s_twoParamFunctions:null,s_twoParamFunctionsColumnContextRegex:null,s_threeParamFunctions:null,s_threeParamFunctionsColumnContextRegex:null,s_manyParamFunctions:null,s_manyParamFunctionsColumnContextRegex:null,s_operatorContextForExtend_ColumnAndFunctionRegex:null,s_entitiesForJoin_ColumnsRegex:null,s_joinFlavorsForJoin_Regex:null,s_parseKindChoose_Regex:null,s_parseWith_Regex:null,s_parseTypesSuggest_Regex:null,s_parseStarOption_Regex:null,m_commandsRequestingAggregators:null,s_lineWithDotBeginningRegex:null,s_topOrLimitOrTakeOrSampleRegex:null,s_agoContextRegex:null,s_nowContextRegex:null,s_operatorContextForTopNestedAndTopHitters:null,s_operatorContextForSampleDistinct:null,s_topNestedKeywordPrefixRegex:null,s_topNestedWithOthersOption:null,s_topHittersKeywordPrefixRegex:null,s_yieldByKeywordRegex:null,s_parseColumnContextRegex:null,s_renderTimePivotColumnContextRegex:null,s_topSortOrderReduceByRegex:null,s_topTopNestedSortOrderByAscDescRegex:null,s_findContextRegex:null,s_findInRegex:null,s_findInStartOrContinueListRegex:null,s_FindInEndOrContinueListRegex:null,s_findWhereRegex:null,s_findProjectSmartRegex:null,s_reduceByColumnContextRegex:null,s_topNestedSuggestingColumnsRegex:null,s_topHittersSuggestingColumnsRegex:null,s_sampleDistinctSuggestingColumnsRegex:null,s_topOrOrderAscendingDescendingRegex:null,s_topNestedAscendingDescendingRegex:null,s_rangeFromRegex:null,s_rangeFromToRegex:null,s_rangeFromToStepRegex:null,s_filteredColumnString:null,s_filteredColumnRegex:null,s_filterPredicateRightValueRegex:null,s_makeSeriesByRegex:null,s_searchPrefixRegex:null,s_searchContextRegex:null,s_searchKindRegex:null,s_searchAfterKindContextRegex:null,s_searchMoreContextRegex:null,s_searchKind_Regex:null,s_clientDirective_Regex:null,s_clientDirectiveConnect_Regex:null,s_operatorOptions:null,s_renderOptions:null,s_renderKindOptions:null,s_aggregateOperationOptions:null,s_makeSeriesAggregateOperationOptions:null,s_extendOperationOptions:null,s_databaseFunctionOptions:null,s_stringOperatorOptions:null,s_numericOperatorOptions:null,s_numericScalarsOptions:null,s_byKeywordOptions:null,s_kindChooseKeywordOptions:null,s_withOthersKeywordOptions:null,s_ofKeywordOptions:null,s_withKeywordOptions:null,s_parseSuggestedTypesKeywordOptions:null,s_parseStarOption:null,s_ascDescKeywordOptions:null,s_nullsLastFirstKeywordOptions:null,s_ascDescOrNullsLastNullsFirstKeywordOptions:null,s_rangeFromOptions:null,s_rangeFromToOptions:null,s_rangeFromToStepOptions:null,s_joinFlavorsOptions:null,s_postJoinOptions:null,s_kindKeywordOptions:null,s_searchInKeywordOptions:null,s_searchLiteralsOptions:null,s_reduceByFlavorsOptions:null,s_datetimeOptions:null,s_timespanOptions:null,s_negativeTimespanOptions:null,s_postFindInOptions:null,s_findInEndOrContinueOptions:null,s_findWhereInOptions:null,s_findInPostListOptions:null,s_makeSeriesDefaultOrOnOptions:null,s_makeSeriesOnOptions:null,s_makeSeriesInRangeOptions:null,s_searchKindOptions:null,s_clientDirectivesOptions:null,MultiColumnFunctionResultSuffixes:null,s_afterFunctionsApplyPolicies:null,s_filterKeywords:null,s_projectKeywords:null,s_projectAwayKeywords:null,s_projectRenameKeywords:null,s_projectExtendKeywords:null,s_joinKeywords:null,s_topSortOrderReduceKeywords:null,s_operatorsUsingByKeywordKeywords:null,s_topSortOrderKeywords:null,s_topTopNestedSortOrderKeywords:null,s_reduceKeywords:null,s_parseKeywords:null,s_renderKeywords:null,s_topLimitTakeSampleKeywords:null,s_evaluateKeywords:null,s_summarizeKeywords:null,s_distinctKeywords:null,s_topNestedKeywords:null,s_topHittersKeywords:null,s_sampleDistinctKeywords:null,s_operatorsRequestingAggregators:null,s_databaseKeywords:null,s_findKeywords:null,s_searchKeywords:null,s_makeSeriesKeywords:null,s_remoteContextRegex:null,s_queryParametersRegex:null,s_joinClosureRegex:null,s_joinWithMakeSeriesClosureRegex:null,s_makeSeriesStartRegex:null,s_findSubClausesRegex:null,s_searchSubClausesRegex:null,s_rangeEntitiesRegex:null,s_parsedEntitiesRegex:null,s_removeStringLiteralsRegex:null,s_removeStringLiteralsSurroundedBySpacesRegex:null,s_removeCommentsRegex:null,s_fieldInvalidCharacters:null,s_fieldQuotableCharacters:null,s_aggregateOperatorToColumnPrefixMapping:null,s_lastCommandSegmentRegex:null,s_incompleteJoinRegex:null,s_commandClausesRegex:null,s_operatorsReplacingEntities:null,s_withsourceExtractRegex:null,s_findProjectionRegex:null,s_packRgx:null,s_topNestedLevelExtractRegex:null,s_sampleDistinctEntityExtractRegex:null,s_aggregateOperatorsHash:null,s_byKeywordRegex:null,s_byAndOnKeywordRegex:null,s_makeSeriesDropNonFieldsRegex:null,s_fieldMatchingRegex:null,s_numericSuffixRegex:null,s_defaultContextPattern:null,s_commandContext_Join:null,s_commandContext_Union:null,s_commandContext_ToScalar:null,s_commandContext_Show:null,s_commandContext_Range:null,s_commandContext_Callable:null,s_commandContext_Let:null,s_commandContext_ConnectDirective:null,s_commandContext_Find:null,s_commandContext_Search:null,s_commandDefaultContext:null,s_twoOrMoreSpacesRegex:null,s_showCommandFixRegex:null,s_commandContextRegexes:null,s_nonDefaultContextKeywordsRegex:null,s_letVariableRegex:null,s_letStatementRegexList:null},props:{Operators:{get:function(){return Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_operatorOptions}}},ctors:{init:function(){this.s_afterPipeRegex=new System.Text.RegularExpressions.Regex.ctor("\\|\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_renderRegex=new System.Text.RegularExpressions.Regex.ctor("(^|\\|\\s*?)render\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_renderMultiChartsRegex=new System.Text.RegularExpressions.Regex.ctor("(^|\\|\\s*?)render\\s+(areachart|barchart|columnchart)\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_renderKindOptionsRegex=new System.Text.RegularExpressions.Regex.ctor("(^|\\|\\s*?)render\\s+(areachart|barchart|columnchart)\\s+kind\\s*=\\s*$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_evaluateRegex=new System.Text.RegularExpressions.Regex.ctor("(^|\\|\\s*?)evaluate\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_makeSeriesRequestingAggregatorsRegex=new System.Text.RegularExpressions.Regex.ctor("(^|\\|\\s*?)make-series\\s+(\\w+\\s*?=\\s*?)?$|(^|\\|\\s*?)make-series\\s+(?!.*\\b(by|on|range|in)\\b).*?,\\s+(\\w+\\s*?=\\s*?)?$|(^|\\|\\s*?)make-series\\s+(?!.*\\b(by|on|range|in)\\b).*[+*/\\-]\\s*$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_makeSeriesBeforeDefaultOrOnRegex=new System.Text.RegularExpressions.Regex.ctor("(^|\\|\\s*?)make-series(?!.*\\b(by|on|range|in).*)(.*\\))\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_makeSeriesBeforeOnRegex=new System.Text.RegularExpressions.Regex.ctor("(^|\\|\\s*?)make-series\\s+(?!.*\\b(range|on).*)(.*\\bdefault\\b\\s*\\=\\s*\\w+)\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_makeSeriesBeforeRangeRegex=new System.Text.RegularExpressions.Regex.ctor("(^|\\|\\s*?)make-series(?!.*\\b(range).*)(.*\\bon\\b\\s+.*)\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_makeSeriesBeforeByRegex=new System.Text.RegularExpressions.Regex.ctor("(^|\\|\\s*?)make-series(?!.*\\b(by).*)(.*\\bin\\s+range\\b\\s*\\(.*,.*,.*\\))\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_joinRegex=new System.Text.RegularExpressions.Regex.ctor("(^|\\|\\s*?)join\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_diffPatternsPluginSplitParameterRegex=new System.Text.RegularExpressions.Regex.ctor('diffpatterns\\("split=\\s*$',Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_startOfLineWithSpaceOrAfterJoinRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*$|join\\s+.*?\\(\\s+$|^\\s*let\\s+\\w+\\s*=\\s+$|toscalar\\(\\s*$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_startOfCommandWithClusterRegex=new System.Text.RegularExpressions.Regex.ctor("(^\\s*|join\\s+.*?\\(\\s+|^\\s*let\\s+\\w+\\s*=\\s+|toscalar\\(\\s*|;\\s+)cluster\\($",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_tablesScopeRegex="(((cluster\\([^\\)]+\\)\\.)?(database\\([^\\)]+\\)\\.)?(\\[.+?\\]|[\\w\\d\\*]+),\\s*)*((cluster\\([^\\)]+\\)\\.)?(database\\([^\\)]+\\)\\.)?(\\[.+?\\]|[\\w\\d\\*]+)))";this.s_startOfCommandWithDatabaseRegex=new System.Text.RegularExpressions.Regex.ctor("(^\\s*|join\\s+.*?\\(\\s+|find\\s+in\\s*\\(|find\\s+in\\s*\\("+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_tablesScopeRegex||"")+",\\s*|^\\s*let\\s+\\w+\\s*=\\s+|toscalar\\(\\s*|;\\s+|cluster\\([^\\)]+?\\)\\.)database\\($",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_clusterFunctionRegex=new System.Text.RegularExpressions.Regex.ctor("cluster\\([^\\)]+\\)\\.$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_databaseFunctionInFindRegex=new System.Text.RegularExpressions.Regex.ctor("find\\s+in\\s*\\([^\\|]*database\\([^\\)]+\\)\\.$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_databaseFunctionRegex=new System.Text.RegularExpressions.Regex.ctor("database\\([^\\)]+\\)\\.$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_operatorContextForFilterColumnRegex=new System.Text.RegularExpressions.Regex.ctor("(^|\\|\\s*?)(filter|where)\\s+$|(^|\\|\\s*?)(filter|where)\\s+[^\\|]+(and|or)\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_operatorContextForProject=new System.Text.RegularExpressions.Regex.ctor("(^|\\|\\s*?)project\\s+$|(^|\\|\\s*?)project\\s+[^\\|]*,\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_operatorContextForProjectAway=new System.Text.RegularExpressions.Regex.ctor("(^|\\|\\s*?)project-away\\s+$|(^|\\|\\s*?)project-away\\s+[^\\|]*,\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_operatorContextForProjectRename=new System.Text.RegularExpressions.Regex.ctor("(^|\\|\\s*?)project-rename\\s+[^\\|]*?\\=\\s*$|(^|\\|\\s*?)project-rename\\s+[^\\|]*,\\s+[^\\|]*?\\=\\s*$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_operatorContextForFilterColumnInFindRegex=new System.Text.RegularExpressions.Regex.ctor("(^|\\s*)find\\s+[^\\|]*where\\s+$|(^|\\s*)find\\s+[^\\|]+(and|or)\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_operatorContextForFindProject=new System.Text.RegularExpressions.Regex.ctor("(^|\\s*)find\\s+[^\\|]+project\\s+$|(^|\\s*)find\\s+[^\\|]+project\\s+[^\\|]*,\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_singleParamFunctions=Bridge.toArray(System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslCommandParser.SingleParameterFunctionsTokens,System.String).union(Kusto.Data.IntelliSense.CslCommandParser.SummarizeAggregationSingleParameterTokens)).join("\\(|");this.s_singleParamFunctionsColumnContextRegex=new System.Text.RegularExpressions.Regex.ctor("\\b("+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_singleParamFunctions||"")+"\\()\\s*$|(^|\\|\\s*?)summarize\\s+[^\\|]*?by\\s+$|(^|\\|\\s*?)summarize\\s+[^\\|]*\\)\\s*,\\s+$|(^|\\|\\s*?)summarize\\s+[^\\|]*?by\\s+(?!bin)[^\\|]+,\\s+$|(^|\\|\\s*?)distinct\\s+([^\\|]+,\\s+)?$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_twoParamFunctions=Bridge.toArray(System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslCommandParser.TwoParameterFunctionsTokens,System.String).union(Kusto.Data.IntelliSense.CslCommandParser.SummarizeAggregationTwoParametersTokens)).join("\\(|");this.s_twoParamFunctionsColumnContextRegex=new System.Text.RegularExpressions.Regex.ctor("("+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_twoParamFunctions||"")+"\\()\\s*$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_threeParamFunctions=Bridge.toArray(System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslCommandParser.ThreeParameterFunctionsTokens,System.String).union(Kusto.Data.IntelliSense.CslCommandParser.SummarizeAggregationThreeParametersTokens)).join("\\(|");this.s_threeParamFunctionsColumnContextRegex=new System.Text.RegularExpressions.Regex.ctor("("+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_threeParamFunctions||"")+"\\()\\s*$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_manyParamFunctions=Bridge.toArray(System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslCommandParser.ManyParametersFunctionsTokens,System.String).union(Kusto.Data.IntelliSense.CslCommandParser.SummarizeAggregationManyParametersTokens)).join("(\\(|[^\\)]+,)|");this.s_manyParamFunctionsColumnContextRegex=new System.Text.RegularExpressions.Regex.ctor("("+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_manyParamFunctions||"")+"\\()\\s*$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_operatorContextForExtend_ColumnAndFunctionRegex=new System.Text.RegularExpressions.Regex.ctor("(^|\\|\\s*?)extend\\s+[^\\|]*?[\\=\\-\\+\\/\\*]\\s*$|(^|\\|\\s*?)project\\s+[^\\|]*?\\=\\s*$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_entitiesForJoin_ColumnsRegex=new System.Text.RegularExpressions.Regex.ctor("(^|\\|\\s*?)join\\s+.*\\(.+\\)\\s+on\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_joinFlavorsForJoin_Regex=new System.Text.RegularExpressions.Regex.ctor("(^|\\|\\s*?)join\\s+kind\\s*=\\s*$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_parseKindChoose_Regex=new System.Text.RegularExpressions.Regex.ctor("(^|\\|\\s*?)parse\\s+kind\\s*$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_parseWith_Regex=new System.Text.RegularExpressions.Regex.ctor('(^|\\|\\s*?)parse\\s*(kind\\s*=\\s*\\w+(\\s*flags\\s*=\\s*\\w+)?\\s*)?\\s*(\\w+|".*?")\\s*$',Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_parseTypesSuggest_Regex=new System.Text.RegularExpressions.Regex.ctor("(^|\\|\\s*?)parse\\s+.*\\swith\\s+.*\\s*:\\s*$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_parseStarOption_Regex=new System.Text.RegularExpressions.Regex.ctor("(^|\\|\\s*?)parse(.+?)with(.+?[^\\*\\s])?\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.m_commandsRequestingAggregators=new System.Text.RegularExpressions.Regex.ctor("(^|\\|\\s*?)summarize\\s+(\\w+\\s*?=\\s*?)?$|(^|\\|\\s*?)summarize\\s+(?!.*\\bby\\b).*,\\s+(\\w+\\s*?=\\s*?)?$|(^|\\|\\s*?)summarize\\s+(?!.*\\bby\\b).*[+*/\\-]\\s*$|(^|\\|\\s*?).*top-(nested|hitters).*\\s+by\\s+(\\w+\\s*?=\\s*\\s*?)?$|(^|\\|\\s*?).*top-(nested|hitters).*\\s+by\\s+.*?[+*/\\-]\\s*$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_lineWithDotBeginningRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_topOrLimitOrTakeOrSampleRegex=new System.Text.RegularExpressions.Regex.ctor("(^|\\|\\s*?)(top|.*top-hitters|limit|take|.*top-nested|sample|sample-distinct)\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_agoContextRegex=new System.Text.RegularExpressions.Regex.ctor("\\bago\\(\\s*$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_nowContextRegex=new System.Text.RegularExpressions.Regex.ctor("\\bnow\\(\\s*$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_operatorContextForTopNestedAndTopHitters=new System.Text.RegularExpressions.Regex.ctor("(^|\\|\\s*?).*top-(nested|hitters)\\s+\\d+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_operatorContextForSampleDistinct=new System.Text.RegularExpressions.Regex.ctor("(^|\\|\\s*?).*sample-distinct\\s+\\d+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_topNestedKeywordPrefixRegex=new System.Text.RegularExpressions.Regex.ctor("(^|\\|\\s*?)top-nested.*by.*(\\d|\\)|asc|desc)\\s*,\\s*$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_topNestedWithOthersOption=new System.Text.RegularExpressions.Regex.ctor("(^|\\|\\s*?)top-nested.*?of\\s+\\w+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_topHittersKeywordPrefixRegex=new System.Text.RegularExpressions.Regex.ctor("(^|\\|\\s*?)top-hitters.*by.*(\\d|\\))\\s*,\\s*$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_yieldByKeywordRegex=new System.Text.RegularExpressions.Regex.ctor("(^|\\|\\s*?)(top\\s+\\d+|.*top-hitters.*of\\s+\\w+|.*top-nested.*of\\s+[\\w,\\(\\)]+\\s*(with others\\s*=\\s*\\w+\\s*)?|distinct|sort|order|reduce|render\\s+timepivot)\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_parseColumnContextRegex=new System.Text.RegularExpressions.Regex.ctor("(^|\\|\\s*?)parse\\s+(kind\\s*=\\s*\\w+\\s*(flags\\s*=\\s*\\w+\\s*)?\\s*)?\\s*$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_renderTimePivotColumnContextRegex=new System.Text.RegularExpressions.Regex.ctor("(^|\\|\\s*?)render\\s+timepivot\\s+by(.*,)?\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_topSortOrderReduceByRegex=new System.Text.RegularExpressions.Regex.ctor("(^|\\|\\s*?)(top\\s+\\d+|sort|order|reduce)\\s+by\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_topTopNestedSortOrderByAscDescRegex=new System.Text.RegularExpressions.Regex.ctor("(^|\\|\\s*?)((top\\s+\\d+|sort|order).*?by.*?(asc|desc))[ ]+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_findContextRegex=new System.Text.RegularExpressions.Regex.ctor("(^|\\s*)find\\s+(withsource\\s*\\=\\s*\\w+\\s+)?$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_findInRegex=new System.Text.RegularExpressions.Regex.ctor("(^|\\s*)find\\s+(withsource\\s*\\=\\s*[^\\|\\(\\)]*\\s+)?in\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_findInStartOrContinueListRegex=new System.Text.RegularExpressions.Regex.ctor("(^|\\s*)find\\s+[^\\|\\(\\)]*in\\s*\\(\\s*("+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_tablesScopeRegex||"")+",\\s+)?\\s*$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_FindInEndOrContinueListRegex=new System.Text.RegularExpressions.Regex.ctor("(^|\\s*)find\\s+(withsource\\s*\\=\\s*\\w+\\s+)?in\\s*\\("+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_tablesScopeRegex||"")+"\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_findWhereRegex=new System.Text.RegularExpressions.Regex.ctor("(^|\\s*)find\\s+[^\\|\\(\\)]*in\\s*\\("+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_tablesScopeRegex||"")+"\\)\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_findProjectSmartRegex=new System.Text.RegularExpressions.Regex.ctor("(^|\\s*)find\\s+[^\\|]*\\s+project\\-smart\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_reduceByColumnContextRegex=new System.Text.RegularExpressions.Regex.ctor("(^|\\|\\s*?)reduce\\s+by\\s+\\w+\\s+kind\\s*=\\s*$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_topNestedSuggestingColumnsRegex=new System.Text.RegularExpressions.Regex.ctor("(^|\\|\\s*?).*top-nested.*of\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_topHittersSuggestingColumnsRegex=new System.Text.RegularExpressions.Regex.ctor("(^|\\|\\s*?).*top-hitters.*of\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_sampleDistinctSuggestingColumnsRegex=new System.Text.RegularExpressions.Regex.ctor("(^|\\|\\s*?).*sample-distinct.*of\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_topOrOrderAscendingDescendingRegex=new System.Text.RegularExpressions.Regex.ctor("(^|\\|\\s*?)(top\\s+\\d+|sort|order)\\s+by\\s+\\w+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_topNestedAscendingDescendingRegex=new System.Text.RegularExpressions.Regex.ctor("(^|\\|\\s*?).*top-nested.*by\\s+.*(\\)|\\d)\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_rangeFromRegex=new System.Text.RegularExpressions.Regex.ctor("(^\\s*|join\\s+\\(\\s+|;\\s*)range\\s+\\w+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_rangeFromToRegex=new System.Text.RegularExpressions.Regex.ctor("(^\\s*|join\\s+\\(\\s+|;\\s*)range\\s+\\w+\\s+from(?!.*\\bto)\\s+[^|]*[\\w\\)]+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_rangeFromToStepRegex=new System.Text.RegularExpressions.Regex.ctor("(^\\s*|join\\s+\\(\\s+|;\\s*)range(?!.*step)\\s+\\w+\\s+from\\s+[^|]+to\\s+[^|]+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_filteredColumnString="((^|\\|\\s*?)(filter|where)|\\b(and|or))\\s+(?<MatchingString>\\S+?)\\s+";this.s_filteredColumnRegex=new System.Text.RegularExpressions.Regex.ctor((Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_filteredColumnString||"")+"$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_filterPredicateRightValueRegex=new System.Text.RegularExpressions.Regex.ctor((Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_filteredColumnString||"")+"(\\=\\=|\\!\\=|\\>|\\<|\\<\\=|\\>\\=)\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_makeSeriesByRegex=new System.Text.RegularExpressions.Regex.ctor("(^|\\|\\s*?)(make-series\\s+[^\\|]*\\bon\\s+[^\\|]+\\s+in\\s+range\\b\\([^\\|]+,[^\\|]+\\,[^\\|]+\\))\\s+by\\s+$|(^|\\|\\s*?)(make-series\\s+[^\\|]*\\bon\\s+[^\\|]+\\s+in\\s+range\\b\\([^\\|]+,[^\\|]+\\,[^\\|]+\\))\\s+by\\s+[^\\|]+?,\\s+$|(^|\\|\\s*?)(make-series\\s+[^\\|]*\\bon\\b)\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_searchPrefixRegex="(^|;|\\|)\\s*search\\s+";this.s_searchContextRegex=new System.Text.RegularExpressions.Regex.ctor((Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchPrefixRegex||"")+"$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_searchKindRegex="(kind\\s*=\\s*(case_sensitive|case_insensitive)\\s+)";this.s_searchAfterKindContextRegex=new System.Text.RegularExpressions.Regex.ctor((Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchPrefixRegex||"")+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchKindRegex||"")+"$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_searchMoreContextRegex=new System.Text.RegularExpressions.Regex.ctor((Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchPrefixRegex||"")+"[^\\|]+(and|or)\\s+$|"+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchPrefixRegex||"")+"[^\\|\\(\\)]*in\\s*\\("+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_tablesScopeRegex||"")+"\\)\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_searchKind_Regex=new System.Text.RegularExpressions.Regex.ctor((Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchPrefixRegex||"")+"kind\\s*=\\s*$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_clientDirective_Regex=new System.Text.RegularExpressions.Regex.ctor("^\\s*#$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_clientDirectiveConnect_Regex=new System.Text.RegularExpressions.Regex.ctor("^\\s*#connect\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_operatorOptions=Kusto.Data.IntelliSense.CslCommandParser.PromotedOperatorCommandTokens;this.s_renderOptions=Kusto.Data.IntelliSense.CslCommandParser.ChartRenderTypesTokens;this.s_renderKindOptions=Kusto.Data.IntelliSense.CslCommandParser.ChartRenderKindTokens;this.s_aggregateOperationOptions=Kusto.Data.IntelliSense.CslCommandParser.SortedSummarizeAggregators;this.s_makeSeriesAggregateOperationOptions=Kusto.Data.IntelliSense.CslCommandParser.SortedMakeSeriesAggregationTokens;this.s_extendOperationOptions=Kusto.Data.IntelliSense.CslCommandParser.SortedExtendFunctions;this.s_databaseFunctionOptions=System.Array.init(["database()"],System.String);this.s_stringOperatorOptions=System.Array.init(["==","!=","has","contains","startswith","matches regex","endswith","!has","!contains","=~","!~","in","!in","has_cs","!has_cs","contains_cs","!contains_cs","!startswith","!endswith","hasprefix","!hasprefix","hassuffix","!hassuffix"],System.String);this.s_numericOperatorOptions=System.Array.init(["==","!=",">","<","<=",">="],System.String);this.s_numericScalarsOptions=System.Array.init(["1","10","100","1000"],System.String);this.s_byKeywordOptions=System.Array.init(["by"],System.String);this.s_kindChooseKeywordOptions=System.Array.init(["= simple","= regex","= relaxed"],System.String);this.s_withOthersKeywordOptions=System.Array.init(["with others = "],System.String);this.s_ofKeywordOptions=System.Array.init(["of"],System.String);this.s_withKeywordOptions=System.Array.init(["with"],System.String);this.s_parseSuggestedTypesKeywordOptions=System.Array.init(["long","int64","real","double","string","time","timespan","date","datetime","int"],System.String);this.s_parseStarOption=System.Array.init(["*"],System.String);this.s_ascDescKeywordOptions=System.Array.init(["asc","desc"],System.String);this.s_nullsLastFirstKeywordOptions=System.Array.init(["nulls last","nulls first"],System.String);this.s_ascDescOrNullsLastNullsFirstKeywordOptions=System.Array.init(["asc","desc","nulls last","nulls first"],System.String);this.s_rangeFromOptions=System.Array.init(["from"],System.String);this.s_rangeFromToOptions=System.Array.init(["to"],System.String);this.s_rangeFromToStepOptions=System.Array.init(["step"],System.String);this.s_joinFlavorsOptions=Kusto.Data.IntelliSense.CslCommandParser.JoinKindTokens;this.s_postJoinOptions=System.Array.init(["(","kind="],System.String);this.s_kindKeywordOptions=System.Array.init(["kind="],System.String);this.s_searchInKeywordOptions=System.Array.init(["in"],System.String);this.s_searchLiteralsOptions=System.Array.init(['""',"*"],System.String);this.s_reduceByFlavorsOptions=Kusto.Data.IntelliSense.CslCommandParser.ReduceByKindTokens;this.s_datetimeOptions=Kusto.Data.IntelliSense.CslCommandParser.SortedDatetimeFunctions;this.s_timespanOptions=System.Array.init(["30m","1h","12h","1d","3d","7d"],System.String);this.s_negativeTimespanOptions=System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_timespanOptions,System.String).select($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f1).ToArray(System.String);this.s_postFindInOptions=System.Array.init(["("],System.String);this.s_findInEndOrContinueOptions=System.Array.init([")",","],System.String);this.s_findWhereInOptions=System.Array.init(["where","in"],System.String);this.s_findInPostListOptions=System.Array.init(["where"],System.String);this.s_makeSeriesDefaultOrOnOptions=System.Array.init(["on","default="],System.String);this.s_makeSeriesOnOptions=System.Array.init(["on"],System.String);this.s_makeSeriesInRangeOptions=System.Array.init(["in range()"],System.String);this.s_searchKindOptions=System.Array.init(["case_sensitive","case_insensitive"],System.String);this.s_clientDirectivesOptions=System.Array.init(["connect"],System.String);this.MultiColumnFunctionResultSuffixes=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f2(new(System.Collections.Generic.Dictionary$2(System.String,System.Array.type(System.String)).ctor));this.s_afterFunctionsApplyPolicies=System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslCommandParser.SortedExtendFunctions,System.String).toDictionary($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f3,$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f4,System.String,Kusto.Data.IntelliSense.ApplyPolicy);this.s_filterKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f5(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_projectKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f6(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_projectAwayKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f7(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_projectRenameKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f8(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_projectExtendKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f9(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_joinKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f10(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_topSortOrderReduceKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f11(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_operatorsUsingByKeywordKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f12(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_topSortOrderKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f13(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_topTopNestedSortOrderKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f14(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_reduceKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f15(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_parseKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f16(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_renderKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f17(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_topLimitTakeSampleKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f18(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_evaluateKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f19(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_summarizeKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f20(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_distinctKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f21(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_topNestedKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f22(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_topHittersKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f23(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_sampleDistinctKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f24(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_operatorsRequestingAggregators=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f25(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_databaseKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f26(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_findKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f27(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_searchKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f28(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_makeSeriesKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f29(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_remoteContextRegex=new System.Text.RegularExpressions.Regex.ctor("^(?<HasClusterReference>cluster\\((?<Cluster>[^\\)]+?)\\)\\.?)?((?<HasDatabaseReference>database)\\((?<Database>[^\\)]*)\\))?(\\.(?<Context>(\\[.+?\\]|[\\w\\*]+))?)?",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.DefaultRegexOptions);this.s_queryParametersRegex=new System.Text.RegularExpressions.Regex.ctor("{\\w*$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_joinClosureRegex=new System.Text.RegularExpressions.Regex.ctor("\\)\\s*on\\b",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_joinWithMakeSeriesClosureRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*make-series\\s+.*?\\b(on)\\b.*?\\)\\s*on\\b");this.s_makeSeriesStartRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*make-series");this.s_findSubClausesRegex=new System.Text.RegularExpressions.Regex.ctor("(^|\\s*?|;)find\\s+[^\\|]*(where|project)\\s+[^\\|]*$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_searchSubClausesRegex=new System.Text.RegularExpressions.Regex.ctor("(^|\\s*?|;\\s*)search\\s+[^\\|]*$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_rangeEntitiesRegex=new System.Text.RegularExpressions.Regex.ctor("^(?<Field>[\\w_]+)\\s+",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_parsedEntitiesRegex=new System.Text.RegularExpressions.Regex.ctor(".*?with\\s+(?<Entities>.+)",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_removeStringLiteralsRegex=new System.Text.RegularExpressions.Regex.ctor("('.*?'|\".*?\")",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_removeStringLiteralsSurroundedBySpacesRegex=new System.Text.RegularExpressions.Regex.ctor("\\s('.*?'|\".*?\")\\s",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_removeCommentsRegex=new System.Text.RegularExpressions.Regex.ctor("//.+[\\r\\n]+",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.DefaultRegexOptions);this.s_fieldInvalidCharacters=new System.Text.RegularExpressions.Regex.ctor("[^\\w \\-\\.]",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.DefaultRegexOptions);this.s_fieldQuotableCharacters=new System.Text.RegularExpressions.Regex.ctor("[ \\-\\.\\[\\]]",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.DefaultRegexOptions);this.s_aggregateOperatorToColumnPrefixMapping=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f30(new(System.Collections.Generic.Dictionary$2(System.String,System.String).ctor));this.s_lastCommandSegmentRegex=new System.Text.RegularExpressions.Regex.ctor("union(\\s*\\(.*?\\)\\s*,)+\\s*\\((?<LastSegment>.*$)",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_incompleteJoinRegex=new System.Text.RegularExpressions.Regex.ctor("join(?!.+\\bon\\b)",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_commandClausesRegex=new System.Text.RegularExpressions.Regex.ctor("(^\\s*(?<Clause>.*?)join|\\s*\\((?<Clause>.+?)\\)\\s+on\\s+\\w+)",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_operatorsReplacingEntities=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f31(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_withsourceExtractRegex=new System.Text.RegularExpressions.Regex.ctor("withsource\\s*=\\s*(?<tableNameColumn>\\w+)",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_findProjectionRegex=new System.Text.RegularExpressions.Regex.ctor("project\\s+(?<projectedList>[^\\|]+)\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_packRgx=new System.Text.RegularExpressions.Regex.ctor("(,)?\\s*pack\\s*\\(\\s*\\*\\s*\\)\\s*",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_topNestedLevelExtractRegex=new System.Text.RegularExpressions.Regex.ctor("(top-nested)?\\s*\\d+\\s+of\\s+(?<InputColumn>[\\w_]+)\\s+by\\s+((?<ReanmingColumn>[\\w_]+)\\s*=\\s*)?(?<Aggregator>.+?(,)?)",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_sampleDistinctEntityExtractRegex=new System.Text.RegularExpressions.Regex.ctor("(sample-distinct)?\\s*\\d+\\s+of\\s+(?<InputColumn>[\\w_\\(\\), ]+)\\s",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_aggregateOperatorsHash=new(System.Collections.Generic.HashSet$1(System.String).$ctor1)(System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslCommandParser.SummarizeAggregationTokens,System.String).union(Kusto.Data.IntelliSense.CslCommandParser.SummarizeAggregationAliasesTokens));this.s_byKeywordRegex=new System.Text.RegularExpressions.Regex.ctor("\\bby\\b",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.DefaultRegexOptions);this.s_byAndOnKeywordRegex=new System.Text.RegularExpressions.Regex.ctor("\\b(by|on)\\b",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.DefaultRegexOptions);this.s_makeSeriesDropNonFieldsRegex=new System.Text.RegularExpressions.Regex.ctor("(\\b(default\\s*\\=\\s*\\S+)\\b)|(\\bin\\s+range\\s*\\(\\s*\\S+\\s*,\\s*\\S+\\s*,\\s*\\S+\\s*\\))",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.DefaultRegexOptions);this.s_fieldMatchingRegex=new System.Text.RegularExpressions.Regex.ctor("(?<Field>[\\w_]+)",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.DefaultRegexOptions);this.s_numericSuffixRegex=new System.Text.RegularExpressions.Regex.ctor("(?<suffix>\\d+)$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.DefaultRegexOptions);this.s_defaultContextPattern="(?<Context>(((cluster.+?)?database\\([^\\)]*\\)?\\.?(\\[.+?\\]|[\\w|\\d|*]+)?|\\[.+?\\])|[\\w\\d\\*]+))";this.s_commandContext_Join=new System.Text.RegularExpressions.Regex.ctor(".*join\\s.*?\\(\\s*"+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_defaultContextPattern||"")+"\\b",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_commandContext_Union=new System.Text.RegularExpressions.Regex.ctor("union\\s.*\\(\\s*"+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_defaultContextPattern||"")+"\\b",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_commandContext_ToScalar=new System.Text.RegularExpressions.Regex.ctor("toscalar\\s*\\(\\s*"+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_defaultContextPattern||"")+"\\b",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_commandContext_Show=new System.Text.RegularExpressions.Regex.ctor("^(?<Context>\\.show\\s+\\w+(\\s+\\w+)*)\\b",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_commandContext_Range=new System.Text.RegularExpressions.Regex.ctor("^(?<Context>range)\\b",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_commandContext_Callable=new System.Text.RegularExpressions.Regex.ctor("\\{\\s+"+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_defaultContextPattern||"")+"\\b",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_commandContext_Let=new System.Text.RegularExpressions.Regex.ctor("^let\\s.*?=\\s*(\\(.*?\\)\\s*\\{\\s*)?"+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_defaultContextPattern||"")+"\\b",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_commandContext_ConnectDirective=new System.Text.RegularExpressions.Regex.ctor("^\\s*#connect\\s+(?<Context>cluster\\(.+?\\)(.database\\(.+\\))?)",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_commandContext_Find=new System.Text.RegularExpressions.Regex.ctor("(^|.*;)((find\\s+[^\\|]*in\\s*\\((?<Context>("+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_tablesScopeRegex||"")+"))\\))|(find\\s+[^\\|]*in\\s*\\(("+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_tablesScopeRegex||"")+"\\s*,\\s*)?(((?<Context>((cluster.+\\.)?database\\([^\\)]*\\)))\\.)|(database\\((?<Context>))|((?<Context>(cluster.+\\.database\\())))))",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_commandContext_Search=new System.Text.RegularExpressions.Regex.ctor("(^|.*;)((search\\s+[^\\|]*in\\s*\\((?<Context>("+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_tablesScopeRegex||"")+"))\\))|(search\\s+[^\\|]*in\\s*\\(("+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_tablesScopeRegex||"")+"\\s*,\\s*)?(((?<Context>((cluster.+\\.)?database\\([^\\)]*\\)))\\.)|(database\\((?<Context>))|((?<Context>(cluster.+\\.database\\())))))",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_commandDefaultContext=new System.Text.RegularExpressions.Regex.ctor("^\\s*"+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_defaultContextPattern||""),Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_twoOrMoreSpacesRegex=new System.Text.RegularExpressions.Regex.ctor("\\s\\s+",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showCommandFixRegex=new System.Text.RegularExpressions.Regex.ctor("(.show)(.*)(extents)",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_commandContextRegexes=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f32(new(System.Collections.Generic.Dictionary$2(System.String,System.Tuple$2(System.Text.RegularExpressions.Regex,System.Text.RegularExpressions.Regex)).ctor));this.s_nonDefaultContextKeywordsRegex=new System.Text.RegularExpressions.Regex.ctor(Bridge.toArray(System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_commandContextRegexes.Keys,System.String).orderByDescending($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f33).select($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f34)).join("|"),Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.DefaultRegexOptions);this.s_letVariableRegex=new System.Text.RegularExpressions.Regex.ctor("(^|;)\\s*let\\s+(?<LetExpressionName>\\w+)\\s*=",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_letStatementRegexList=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f35(new(System.Collections.Generic.List$1(System.Text.RegularExpressions.Regex).ctor))}},methods:{MapColumnsToTables:function(tables){var $t,$t1,result=new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).ctor),resultsUnordered,t,key,kvp;if(Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity,tables))return result;resultsUnordered=new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.IEnumerable$1(System.String)).ctor);$t=Bridge.getEnumerator(tables,Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity);try{while($t.moveNext())t=$t.Current,key=new Kusto.Data.IntelliSense.KustoCommandContext(t.Name),resultsUnordered.containsKey(key)||resultsUnordered.add(key,System.Linq.Enumerable.from(t.Columns,Kusto.Data.IntelliSense.KustoIntelliSenseColumnEntity).select($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f36))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}$t1=Bridge.getEnumerator(resultsUnordered);try{while($t1.moveNext())kvp=$t1.Current,result.setItem(kvp.key,System.Linq.Enumerable.from(kvp.value,System.String).orderBy($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f37).toList(System.String))}finally{Bridge.is($t1,System.IDisposable)&&$t1.System$IDisposable$Dispose()}return result},ParseCommandClauses:function(command){var $t,matches,clauses,m,clause;if(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_incompleteJoinRegex.isMatch(command))return System.Array.init([command],System.String);if(matches=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_commandClausesRegex.matches(command),matches.getCount()===0)return System.Array.init([command],System.String);clauses=new(System.Collections.Generic.List$1(System.String).ctor);$t=Bridge.getEnumerator(matches);try{while($t.moveNext())m=Bridge.cast($t.Current,System.Text.RegularExpressions.Match),clause=(m.getGroups().getByName("Clause").toString()||"")+" | ",System.String.isNullOrWhiteSpace(clause)||clauses.add(clause)}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return clauses.add(command),clauses},BuildOpEntitiesMap:function(command){var $t,operatorEntitiesMap=new(System.Collections.Generic.Dictionary$2(System.String,System.String).ctor),pipeParts=System.Linq.Enumerable.from(Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.ParseAsStatements(command,124,!1),System.String).reverse(),part,opAnRest,op,entities;$t=Bridge.getEnumerator(pipeParts);try{while($t.moveNext())if(part=$t.Current,!System.String.isNullOrWhiteSpace(part)){if(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_joinClosureRegex.isMatch(part))if(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_makeSeriesStartRegex.isMatch(part)){if(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_joinWithMakeSeriesClosureRegex.isMatch(part))continue}else continue;if(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchSubClausesRegex.isMatch(part)){operatorEntitiesMap.containsKey("search")||operatorEntitiesMap.add("search","");continue}if((System.String.endsWith(part,"|")||Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_findSubClausesRegex.isMatch(part))&&(opAnRest=System.String.split(part,System.Array.init([32,13,10],System.Char).map(function(i){return String.fromCharCode(i)}),2,1),opAnRest.length===2)&&(op=opAnRest[System.Array.index(0,opAnRest)],entities=Bridge.referenceEquals(op,"find")?opAnRest[System.Array.index(1,opAnRest)]:Kusto.Cloud.Platform.Utils.ExtendedString.TrimEnd(opAnRest[System.Array.index(1,opAnRest)],"|"),operatorEntitiesMap.containsKey(op)?operatorEntitiesMap.setItem(op,(operatorEntitiesMap.getItem(op)||"")+","+(entities||"")):operatorEntitiesMap.add(op,entities),Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_operatorsReplacingEntities.contains(op)))break}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return operatorEntitiesMap},HandleParseEntities:function(entitiesList,result,opEntitiesMap,knownEntities){var $t,list={v:null},wasAdded,match,parsedColumnsString,parsedColumns,columnCandidate,col;if(!opEntitiesMap.tryGetValue("parse",list))return result;if(wasAdded=!1,match=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_parsedEntitiesRegex.match(list.v),match.getSuccess()){parsedColumnsString=match.getGroups().getByName("Entities").toString();parsedColumns=System.String.split(parsedColumnsString,System.Array.init([42,32],System.Char).map(function(i){return String.fromCharCode(i)}),null,1);$t=Bridge.getEnumerator(parsedColumns);try{while($t.moveNext())(columnCandidate=$t.Current,col=columnCandidate.trim(),!System.String.isNullOrEmpty(col)&&System.Char.isLetter(col.charCodeAt(0)))&&(col=Kusto.Cloud.Platform.Utils.ExtendedString.SplitFirst(col,58),wasAdded=!!(wasAdded|Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddEscapedEntityName(entitiesList,col)))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}}return wasAdded?Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.AppendEntities:result},HandleReduceByEntities:function(entitiesList,result,opEntitiesMap,knownEntities){var lastPipePart={v:null};return opEntitiesMap.tryGetValue("reduce",lastPipePart)?(entitiesList.AddRange(System.Array.init(["Pattern","Count"],System.String)),Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.ReplaceEntities):result},HandleGetSchemaEntities:function(entitiesList,result,opEntitiesMap,knownEntities){var lastPipePart={v:null};return opEntitiesMap.tryGetValue("getschema",lastPipePart)?(entitiesList.AddRange(System.Array.init(["ColumnName","ColumnOrdinal","DataType","ColumnType"],System.String)),Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.ReplaceEntities):result},HandleRangeEntities:function(entitiesList,result,opEntitiesMap,knownEntities){var entitites={v:null},match,field;return opEntitiesMap.tryGetValue("range",entitites)?(match=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_rangeEntitiesRegex.match(entitites.v),match.getSuccess()&&(field=match.getGroups().getByName("Field").toString(),entitiesList.contains(field)||(entitiesList.add(field),result=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.AppendEntities)),result):result},HandlePrintEntities:function(entitiesList,result,opEntitiesMap,knownEntities){var entitites={v:null},match,field;return opEntitiesMap.tryGetValue("print",entitites)?(match=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_rangeEntitiesRegex.match(entitites.v),match.getSuccess()&&(field=match.getGroups().getByName("Field").toString(),entitiesList.contains(field)||(entitiesList.add(field),result=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.AppendEntities)),result):result},HandleProjectEntities:function(entitiesList,result,opEntitiesMap,knownEntities){var list={v:null},wasAdded;return opEntitiesMap.tryGetValue("project",list)?(wasAdded=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveEntitiesFromListWithImplicitColumns(entitiesList,list.v),wasAdded&&(result=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.ReplaceEntities),result):result},HandleProjectAwayEntities:function(entitiesList,result,opEntitiesMap,knownEntities){var $t,$t1,list={v:null},entities,fields,entity,field,safeKnownEntities,field1;if(!opEntitiesMap.tryGetValue("project-away",list))return result;entities=Kusto.Data.IntelliSense.ExpressionEntityParser.ParseEntities(list.v);fields=new(System.Collections.Generic.List$1(System.String).ctor);$t=Bridge.getEnumerator(entities);try{while($t.moveNext())entity=$t.Current,field=entity.Name,entitiesList.contains(field)?entitiesList.remove(field):fields.add(field)}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}if(System.Linq.Enumerable.from(fields,System.String).any()&&Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$1(System.String,entitiesList)){safeKnownEntities=knownEntities!=null?knownEntities:new(System.Collections.Generic.List$1(System.String).ctor);$t1=Bridge.getEnumerator(System.Linq.Enumerable.from(safeKnownEntities,System.String).except(fields).ToArray(System.String));try{while($t1.moveNext())field1=$t1.Current,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddEscapedEntityName(entitiesList,field1)}finally{Bridge.is($t1,System.IDisposable)&&$t1.System$IDisposable$Dispose()}}return Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.ReplaceEntities},HandleMvexpandEntities:function(entitiesList,result,opEntitiesMap,knownEntities){var list={v:null},wasAdded;return!opEntitiesMap.tryGetValue("mvexpand",list)&&!opEntitiesMap.tryGetValue("mv-expand",list)?result:(wasAdded=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveEntitiesFromList(entitiesList,list.v),result===Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.None&&wasAdded&&(result=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.AppendEntities),result)},HandleTopNestedEntities:function(entitiesList,result,opEntitiesMap,knownEntities){var $t,list={v:null},changed=!1,matches,extendedColumnName;if(!opEntitiesMap.tryGetValue("top-nested",list))return result;matches=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topNestedLevelExtractRegex.matches(list.v);matches.getCount()>0&&(changed=!0);$t=Bridge.getEnumerator(matches);try{while($t.moveNext()){var match=$t.Current,convertedMatch=Bridge.as(match,System.Text.RegularExpressions.Match),columnName=convertedMatch.getGroups().getByName("InputColumn").toString();Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddEscapedEntityName(entitiesList,columnName);extendedColumnName=convertedMatch.getGroups().getByName("ReanmingColumn").toString();System.String.isNullOrEmpty(extendedColumnName)&&(extendedColumnName="aggregated_"+(columnName||""));Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddEscapedEntityName(entitiesList,extendedColumnName)}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return changed&&(result=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.ReplaceEntities),result},HandleExtendEntities:function(entitiesList,result,opEntitiesMap,knownEntities){var list={v:null},wasAdded;return opEntitiesMap.tryGetValue("extend",list)?(wasAdded=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveEntitiesFromListWithImplicitColumns(entitiesList,list.v),result===Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.None&&wasAdded&&(result=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.AppendEntities),result):result},HandleSampleDistinctEntities:function(entitiesList,result,opEntitiesMap,knownEntities){var list={v:null},match,inputColumn;return opEntitiesMap.tryGetValue("sample-distinct",list)?(match=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_sampleDistinctEntityExtractRegex.match(list.v),!match.getSuccess())?Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.None:(inputColumn=match.getGroups().getByName("InputColumn").toString(),Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.HandleAggregationEntities(entitiesList,inputColumn,knownEntities)):result},GenerateImplicitEntitiesForFunction:function(funcName,$arguments,explicitlySpecifiedResultColumnCount,resultEntities){var $t,$t1,resultSuffixes,argName,added,suffix,generatedName;if(explicitlySpecifiedResultColumnCount!==0||Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(Kusto.Data.IntelliSense.ExpressionEntity,$arguments)||!Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.MultiColumnFunctionResultSuffixes.containsKey(funcName)||(resultSuffixes=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.MultiColumnFunctionResultSuffixes.getItem(funcName),resultSuffixes.length<explicitlySpecifiedResultColumnCount))return!1;argName=System.Linq.Enumerable.from($arguments,Kusto.Data.IntelliSense.ExpressionEntity).first().Name;added=!1;$t=Bridge.getEnumerator(System.Linq.Enumerable.from(resultSuffixes,System.String).skip(explicitlySpecifiedResultColumnCount));try{while($t.moveNext())suffix=$t.Current,generatedName=Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture("{0}_{1}_{2}",[funcName,argName,suffix]),resultEntities.add(($t1=new Kusto.Data.IntelliSense.ExpressionEntity,$t1.Name=generatedName,$t1.IsGenerated=!0,$t1)),added=!0}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return added},ResolveEntitiesFromListWithImplicitColumns:function(entitiesList,input){var $t,wasAdded=!1,entities=Kusto.Data.IntelliSense.ExpressionEntityParser.ParseEntities$1(input,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.GenerateImplicitEntitiesForFunction),entity;$t=Bridge.getEnumerator(entities);try{while($t.moveNext())entity=$t.Current,wasAdded=!!(wasAdded|entity.IsGenerated?Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddFieldRenameIfPresent(entitiesList,entity.Name):Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddFieldIfNotPresent(entitiesList,entity.Name))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return wasAdded},ResolveEntitiesFromList:function(entitiesList,input,generateImplicitColumnNames){var $t,wasAdded,entities,entity;generateImplicitColumnNames===void 0&&(generateImplicitColumnNames=!1);wasAdded=!1;entities=Kusto.Data.IntelliSense.ExpressionEntityParser.ParseEntities(input);$t=Bridge.getEnumerator(entities);try{while($t.moveNext())entity=$t.Current,wasAdded=!!(wasAdded|Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddFieldIfNotPresent(entitiesList,entity.Name))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return wasAdded},HandleSummarizeEntities:function(entitiesList,result,opEntitiesMap,knownEntities){var list={v:null},entities;return opEntitiesMap.tryGetValue("summarize",list)?(entities=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_byKeywordRegex.replace(list.v,", "),Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.HandleAggregationEntities(entitiesList,entities,knownEntities)):result},HandleMakeSeriesEntities:function(entitiesList,result,opEntitiesMap,knownEntities){var list={v:null},entities;return opEntitiesMap.tryGetValue("make-series",list)?(entities=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_byAndOnKeywordRegex.replace(list.v,", "),entities=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_makeSeriesDropNonFieldsRegex.replace(entities,""),Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.HandleAggregationEntities(entitiesList,entities,knownEntities)):result},HandleAggregationEntities:function(entitiesList,entities,knownEntities){var $t,$t1,argMinMaxEntities=null,parsedEntities=Kusto.Data.IntelliSense.ExpressionEntityParser.ParseEntities(entities),entity,correctedOp,preserveNames;$t=Bridge.getEnumerator(parsedEntities);try{while($t.moveNext()){var parsedEntity=$t.Current,op=parsedEntity.Operator,field=($t1=parsedEntity.Name,$t1!=null?$t1:""),arg0=field,wasAdded=!1;!System.String.isNullOrEmpty(op)&&Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_aggregateOperatorsHash.contains(op)&&(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_aggregateOperatorToColumnPrefixMapping.containsKey(op)&&(op=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_aggregateOperatorToColumnPrefixMapping.getItem(op)),entity=(op||"")+"_"+(field||""),System.String.equals(op,"percentile",4)?wasAdded=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.HandlePercentileAggregateEntities(entitiesList,parsedEntity,entity,knownEntities):System.String.equals(op,"argmin",4)||System.String.equals(op,"argmax",4)||System.String.equals(op,"arg_min",4)||System.String.equals(op,"arg_max",4)?(argMinMaxEntities==null&&(argMinMaxEntities=new(System.Collections.Generic.List$1(System.String).ctor)),correctedOp=op.substr(op.length-3|0,3),preserveNames=System.String.equals(op,"arg_max",4)||System.String.equals(op,"arg_min",4),entity=preserveNames?field:(correctedOp||"")+"_"+(field||""),wasAdded=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.HandleArgMinMaxAggregateEntities(argMinMaxEntities,parsedEntity,correctedOp,arg0,entity,preserveNames,knownEntities)):Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_fieldInvalidCharacters.isMatch(entity)&&(entity=(op||"")+"_"),field=entity);wasAdded||Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddEscapedEntityName(entitiesList,field)}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.FinalizeSummarizeEntitiesList(argMinMaxEntities,entitiesList),Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.ReplaceEntities},AddEscapedEntityName:function(entitiesList,entity){return(entity=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.EscapeEntityNameIfNeeded(entity),!entitiesList.contains(entity))?(entitiesList.add(entity),!0):!1},EscapeEntityNameIfNeeded:function(entity){return Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_fieldQuotableCharacters.isMatch(entity)&&(entity="['"+(entity||"")+"']"),entity},FinalizeSummarizeEntitiesList:function(argMinMaxEntities,entitiesList){var regexExpression,regex;if(argMinMaxEntities!=null&&argMinMaxEntities.Count!==0){if(entitiesList.Count===0){entitiesList.AddRange(argMinMaxEntities);return}regexExpression=System.String.format("^(min|max)_.+?_({0})$",[Bridge.toArray(entitiesList).join("|")]);try{regex=new System.Text.RegularExpressions.Regex.ctor(regexExpression,Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.DefaultRegexOptions);System.Linq.Enumerable.from(argMinMaxEntities,System.String).where(function(en){return!regex.isMatch(en)}).forEach(function(field){return Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddFieldIfNotPresent(entitiesList,field)})}catch($e1){if($e1=System.Exception.create($e1),Bridge.is($e1,System.ArgumentException))return;else throw $e1;}}},HandlePercentileAggregateEntities:function(entitiesList,parsedEntity,field,knownEntities){var $t,wasAdded=!1,correctedField=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_fieldMatchingRegex.match(field).getGroups().getByName("Field").toString(),$arguments=parsedEntity.Arguments,arg,fieldname;if(Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(System.String,$arguments))return wasAdded;$t=Bridge.getEnumerator($arguments,System.String);try{while($t.moveNext())arg=$t.Current,fieldname=(correctedField||"")+"_"+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_fieldQuotableCharacters.replace(arg,"_")||""),wasAdded=!!(wasAdded|Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddFieldIfNotPresent(entitiesList,fieldname))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return wasAdded},HandleArgMinMaxAggregateEntities:function(entitiesList,parsedEntity,op,arg0,field,preserveNames,knownEntities){var $t,$t1,wasAdded=!1,fieldReplaced=!1,$arguments,argCount,arg,fieldname,wildCardMatch,matchingEntities,en,fieldname1,fieldname2;if(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_fieldInvalidCharacters.isMatch(field)&&(field=(op||"")+"_",fieldReplaced=!0),wasAdded=!!(wasAdded|Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddFieldIfNotPresent(entitiesList,field)),$arguments=parsedEntity.Arguments,Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(System.String,$arguments))return wasAdded;argCount=1;$t=Bridge.getEnumerator(parsedEntity.Arguments,System.String);try{while($t.moveNext()){if(arg=$t.Current,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_fieldInvalidCharacters.isMatch(arg))if(Kusto.Cloud.Platform.Utils.ExtendedRegex.IsWildCardPattern(arg)){if(knownEntities!=null&&System.Linq.Enumerable.from(knownEntities,System.String).any()&&(wildCardMatch={v:Kusto.Cloud.Platform.Utils.ExtendedRegex.TryTransformWildCardPatternToRegex(arg)},wildCardMatch.v!=null&&(matchingEntities=System.Linq.Enumerable.from(knownEntities,System.String).where(function($me,wildCardMatch){return function(en){return!Bridge.referenceEquals(en,arg0)&&wildCardMatch.v.isMatch(en)}}(this,wildCardMatch)).toList(System.String),System.Linq.Enumerable.from(matchingEntities,System.String).any()))){$t1=Bridge.getEnumerator(matchingEntities);try{while($t1.moveNext())en=$t1.Current,fieldname1=preserveNames?en:(field||"")+"_"+(en||""),wasAdded=!!(wasAdded|Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddFieldIfNotPresent(entitiesList,fieldname1))}finally{Bridge.is($t1,System.IDisposable)&&$t1.System$IDisposable$Dispose()}}}else fieldname2=System.String.format("{0}_{1}_arg{2}",op,preserveNames&&!fieldReplaced&&!System.String.isNullOrWhiteSpace(field)?field:"",Bridge.box(argCount,System.Int32)),wasAdded=!!(wasAdded|Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddFieldIfNotPresent(entitiesList,fieldname2));else fieldname=preserveNames?arg:(field||"")+"_"+(arg||""),wasAdded=!!(wasAdded|Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddFieldIfNotPresent(entitiesList,fieldname));argCount=argCount+1|0}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return wasAdded},AddFieldIfNotPresent:function(entitiesList,field){return System.String.isNullOrEmpty(field)?!1:Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddEscapedEntityName(entitiesList,field)},AddFieldRenameIfPresent:function(entitiesList,field){var escapedField,match,suffix;if(System.String.isNullOrEmpty(field))return!1;for(escapedField=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.EscapeEntityNameIfNeeded(field),entitiesList.contains(escapedField)&&(field=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_numericSuffixRegex.replace(field,""),escapedField=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.EscapeEntityNameIfNeeded(field)),entitiesList.contains(escapedField)&&(field=(field||"")+"1",escapedField=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.EscapeEntityNameIfNeeded(field));entitiesList.contains(escapedField);)if(match=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_numericSuffixRegex.match(field),match.getSuccess())suffix=System.Int32.parse(match.getGroups().getByName("suffix").getValue()),suffix=suffix+1|0,field=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_numericSuffixRegex.replace(field,Bridge.toString(suffix)),escapedField=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.EscapeEntityNameIfNeeded(field);else return!1;return entitiesList.add(escapedField),!0},GetLatestMatch:function(matchesKeywords){var $t,lastMatch=null,m;$t=Bridge.getEnumerator(matchesKeywords);try{while($t.moveNext())(m=Bridge.cast($t.Current,System.Text.RegularExpressions.Match),m.getSuccess())&&(lastMatch==null?lastMatch=m:lastMatch.getIndex()<m.getIndex()&&(lastMatch=m))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return lastMatch},ResolveContextUsingRegex:function(command,contextMatchRegex,startat){if(System.String.startsWith(System.String.trimStart(command.substr(startat)),"|"))return null;var matchingRegex=contextMatchRegex.Item1,transformationRegex=contextMatchRegex.Item2,tableContext=null,contextMatch=matchingRegex.match(command,startat);return contextMatch.getSuccess()&&(tableContext=contextMatch.getGroups().getByName("Context").toString(),transformationRegex!=null&&(tableContext=transformationRegex.replace(tableContext,$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f38)),tableContext=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_twoOrMoreSpacesRegex.replace(tableContext," ")),tableContext},ResolveLetVariable:function(letStatement){if(System.String.isNullOrEmpty(letStatement))return"";var letMatch=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_letVariableRegex.match(letStatement);return letMatch.getSuccess()?letMatch.getGroups().getByName("LetExpressionName").toString():""},ResolveLetExpressions:function(statements){var $t,$t1,result=new(System.Collections.Generic.Dictionary$2(System.String,System.String).ctor),regex,letMatches;$t=Bridge.getEnumerator(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_letStatementRegexList);try{while($t.moveNext()){regex=$t.Current;letMatches=regex.matches(statements);$t1=Bridge.getEnumerator(letMatches);try{while($t1.moveNext()){var m=Bridge.cast($t1.Current,System.Text.RegularExpressions.Match),variable=m.getGroups().getByName("LetExpressionName").toString(),statement=m.getGroups().getByName("Expression").toString();result.containsKey(variable)||result.add(variable,statement)}}finally{Bridge.is($t1,System.IDisposable)&&$t1.System$IDisposable$Dispose()}}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return result}}},fields:{s_afterjoinOperatorApplyPolicies:null,s_afterRenderApplyPolicies:null,s_afterEvaluatePluginPolicies:null,s_afterFindApplyPolicies:null,s_afterFindInApplyPolicies:null,s_afterFindInEndOrContinuePolicies:null,s_afterSearchApplyPolicies:null,m_queryParameters:null,m_remoteSchemaResolver:null,m_remoteColumnMappingsToTables:null,m_remoteDatabaseMappingToClusters:null,m_availableClusters:null,m_allowClientDirectives:!1,m_contextCache:null},props:{TableNames:null,FunctionMappings:null,ColumnMappingsToTables:null,ColumnMappingsToWildcardedTables:null,OverridingColumnMapping:null,OverridingDatabaseMapping:null,OverridingTablesMapping:null,RemoteTableNames:{get:function(){return this.OverridingTablesMapping!=null?System.Linq.Enumerable.from(this.OverridingTablesMapping,System.Collections.Generic.KeyValuePair$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String))).selectMany($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f46):null}},FunctionNames:{get:function(){return this.FunctionMappings!=null?System.Linq.Enumerable.from(this.FunctionMappings.Keys,System.String).orderBy($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f47):System.Linq.Enumerable.empty()}},AllowQueryParameters:!1,Cluster:null,DatabaseSchema:null,Database:{get:function(){return this.DatabaseSchema!=null?this.DatabaseSchema.Database:null}},Databases:{get:function(){return this.Cluster!=null?this.Cluster.Databases:null}},Tables:{get:function(){return this.DatabaseSchema!=null&&this.DatabaseSchema.Database!=null?this.DatabaseSchema.Database.Tables:null}},Functions:{get:function(){return this.DatabaseSchema!=null&&this.DatabaseSchema.Database!=null?this.DatabaseSchema.Database.Functions:null}},ContextCache:{get:function(){return this.m_contextCache},set:function(value){this.m_contextCache=value}}},ctors:{init:function(){this.s_afterjoinOperatorApplyPolicies=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f39(new(System.Collections.Generic.Dictionary$2(System.String,Kusto.Data.IntelliSense.ApplyPolicy).ctor));this.s_afterRenderApplyPolicies=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f40(new(System.Collections.Generic.Dictionary$2(System.String,Kusto.Data.IntelliSense.ApplyPolicy).ctor));this.s_afterEvaluatePluginPolicies=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f41(new(System.Collections.Generic.Dictionary$2(System.String,Kusto.Data.IntelliSense.ApplyPolicy).ctor));this.s_afterFindApplyPolicies=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f42(new(System.Collections.Generic.Dictionary$2(System.String,Kusto.Data.IntelliSense.ApplyPolicy).ctor));this.s_afterFindInApplyPolicies=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f43(new(System.Collections.Generic.Dictionary$2(System.String,Kusto.Data.IntelliSense.ApplyPolicy).ctor));this.s_afterFindInEndOrContinuePolicies=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f44(new(System.Collections.Generic.Dictionary$2(System.String,Kusto.Data.IntelliSense.ApplyPolicy).ctor));this.s_afterSearchApplyPolicies=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f45(new(System.Collections.Generic.Dictionary$2(System.String,Kusto.Data.IntelliSense.ApplyPolicy).$ctor1)(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_afterFunctionsApplyPolicies));this.m_remoteColumnMappingsToTables=new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String))).ctor);this.m_remoteDatabaseMappingToClusters=new(System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.String)).ctor);this.m_contextCache=new(System.Collections.Generic.Dictionary$2(System.Int32,Kusto.Data.IntelliSense.KustoCommandContext).ctor)},$ctor1:function(cluster,databaseSchema,queryParameters,availableClusters,schemaResolver,allowQueryParameters,allowClientDirectives){this.$initialize();Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.ctor.call(this);this.Cluster=cluster;this.DatabaseSchema=databaseSchema;this.m_queryParameters=queryParameters;this.m_remoteSchemaResolver=schemaResolver;this.m_availableClusters=availableClusters;this.m_allowClientDirectives=allowClientDirectives;this.AllowQueryParameters=allowQueryParameters;this.Initialize();this.LoadRules()},ctor:function(other){var $t;this.$initialize();Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.ctor.call(this);this.Cluster=other.Cluster.Clone();this.DatabaseSchema=other.DatabaseSchema.Clone();this.m_queryParameters=Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(System.String,other.m_queryParameters)?($t=System.String,System.Linq.Enumerable.from(other.m_queryParameters,$t).ToArray($t)):null;this.m_remoteSchemaResolver=other.m_remoteSchemaResolver;this.m_availableClusters=other.m_availableClusters;this.m_allowClientDirectives=other.m_allowClientDirectives;this.AllowQueryParameters=other.AllowQueryParameters;this.Initialize();this.LoadRules()}},methods:{ResetState:function(){Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$1(System.Collections.Generic.KeyValuePair$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)),this.OverridingColumnMapping)&&this.OverridingColumnMapping.clear();Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$1(System.Collections.Generic.KeyValuePair$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)),this.OverridingDatabaseMapping)&&this.OverridingDatabaseMapping.clear();Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$1(System.Collections.Generic.KeyValuePair$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)),this.OverridingTablesMapping)&&this.OverridingTablesMapping.clear()},Clone:function(){return new Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ctor(this)},UpdateProviderAvailableEntities:function(command,commandContext){var knownEntities=this.ResolveKnownEntitiesFromContext(commandContext),commandEntities=new(System.Collections.Generic.List$1(System.String).ctor),entitiesResolveResult=this.ResolveEntitiesFromCommand(command,commandEntities,knownEntities);switch(entitiesResolveResult){case Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.ReplaceEntities:this.RegisterCommandEntities(commandContext,commandEntities,!0);break;case Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.None:case Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.AppendEntities:this.RegisterCommandEntities(commandContext,commandEntities,!1);break}},ResolveKnownEntitiesFromContext:function(commandContext){var $t,$t1,$t2,outputColumns={v:null},remoteColumnMappingsToTables=new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).ctor),dbNames=new(System.Collections.Generic.List$1(System.String).ctor),localWildcardedTablesColumns={v:null},performUnion=commandContext.Operation===Kusto.Data.IntelliSense.ContextOperation.Union,contextParts=commandContext.Flatten(),columnMappingsToTables,mapping,columns,partDbs,wildCardMatch,intersection,contextWithNoOperation;$t=Bridge.getEnumerator(contextParts,Kusto.Data.IntelliSense.KustoCommandContext);try{while($t.moveNext()){var kustoCommandContextPart=$t.Current,clusterUriOrAlias={},databaseNameOrAlias={},remoteContext={},matchingEntities={v:null};if(this.ResolveRemoteContext(kustoCommandContextPart.Context,clusterUriOrAlias,databaseNameOrAlias,remoteContext)){if(columnMappingsToTables=this.UpdateColumnsList(kustoCommandContextPart,clusterUriOrAlias.v,databaseNameOrAlias.v,remoteContext.v),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$1(System.Collections.Generic.KeyValuePair$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)),columnMappingsToTables)){$t1=Bridge.getEnumerator(columnMappingsToTables);try{while($t1.moveNext())mapping=$t1.Current,columns={},remoteColumnMappingsToTables.tryGetValue(mapping.key,columns)||(columns.v=new(System.Collections.Generic.List$1(System.String).ctor)),remoteColumnMappingsToTables.setItem(mapping.key,System.Linq.Enumerable.from(columns.v,System.String).union(mapping.value).toList(System.String))}finally{Bridge.is($t1,System.IDisposable)&&$t1.System$IDisposable$Dispose()}matchingEntities.v=System.Linq.Enumerable.from(columnMappingsToTables.Values,System.Collections.Generic.List$1(System.String)).selectMany($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f48).toList(System.String)}this.UpdateDatabaseList(kustoCommandContextPart,clusterUriOrAlias.v,databaseNameOrAlias.v);partDbs={};this.OverridingDatabaseMapping.tryGetValue(kustoCommandContextPart,partDbs)&&(dbNames=System.Linq.Enumerable.from(dbNames,System.String).union(partDbs.v).toList(System.String))}else if(Kusto.Cloud.Platform.Utils.ExtendedRegex.IsWildCardPattern(kustoCommandContextPart.Context)){if(this.ColumnMappingsToWildcardedTables.tryGetValue(kustoCommandContextPart,matchingEntities),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$1(System.String,matchingEntities.v)&&(wildCardMatch={v:Kusto.Cloud.Platform.Utils.ExtendedRegex.TryTransformWildCardPatternToRegex(kustoCommandContextPart.Context)},wildCardMatch.v!=null)){if(Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity,this.Tables)){var matchedTables=System.Linq.Enumerable.from(this.Tables,Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity).where(function($me,wildCardMatch){return function(t){return!t.IsInvisible&&wildCardMatch.v.isMatch(t.Name)}}(this,wildCardMatch)),matchedTableNames={v:new(System.Collections.Generic.HashSet$1(System.String).$ctor1)(matchedTables.select($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f49))},entitiesTables=System.Linq.Enumerable.from(this.ColumnMappingsToTables,System.Collections.Generic.KeyValuePair$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String))).where(function($me,matchedTableNames){return function(t){return matchedTableNames.v.contains(t.key.Context)}}(this,matchedTableNames));performUnion?matchingEntities.v=entitiesTables.selectMany($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f50).distinct().toList(System.String):(intersection=Kusto.Cloud.Platform.Utils.ExtendedEnumerable.Intersect(System.String,entitiesTables.select($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f50)),matchingEntities.v=intersection!=null?($t2=System.String,System.Linq.Enumerable.from(intersection,$t2).toList($t2)):new(System.Collections.Generic.List$1(System.String).ctor))}else matchingEntities.v=new(System.Collections.Generic.List$1(System.String).ctor);this.ColumnMappingsToWildcardedTables.setItem(kustoCommandContextPart,System.Linq.Enumerable.from(matchingEntities.v,System.String).orderBy($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f37).toList(System.String));this.PerformGroupActionOrInit(localWildcardedTablesColumns,this.ColumnMappingsToWildcardedTables.getItem(kustoCommandContextPart),performUnion)}}else contextWithNoOperation=new Kusto.Data.IntelliSense.KustoCommandContext(kustoCommandContextPart.Context),this.ColumnMappingsToTables.tryGetValue(contextWithNoOperation,matchingEntities);this.PerformGroupActionOrInit(outputColumns,matchingEntities.v,performUnion)}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return!this.m_remoteColumnMappingsToTables.containsKey(commandContext)&&Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$1(System.Collections.Generic.KeyValuePair$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)),remoteColumnMappingsToTables)&&this.m_remoteColumnMappingsToTables.setItem(commandContext,remoteColumnMappingsToTables),!this.OverridingDatabaseMapping.containsKey(commandContext)&&Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$1(System.String,dbNames)&&this.OverridingDatabaseMapping.setItem(commandContext,dbNames),this.ColumnMappingsToWildcardedTables.containsKey(commandContext)||this.ColumnMappingsToWildcardedTables.setItem(commandContext,(localWildcardedTablesColumns.v!=null?System.Linq.Enumerable.from(localWildcardedTablesColumns.v,System.String).orderBy($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f37).toList(System.String):null)||new(System.Collections.Generic.List$1(System.String).ctor)),outputColumns.v!=null?System.Linq.Enumerable.from(outputColumns.v,System.String).orderBy($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f37).toList(System.String):null},PerformGroupActionOrInit:function(target,source,performUnion){if(Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$1(System.String,source)&&(source=new(System.Collections.Generic.List$1(System.String).ctor)),target.v==null){target.v=new(System.Collections.Generic.HashSet$1(System.String).$ctor1)(source);return}performUnion?target.v.unionWith(source):target.v.intersectWith(source)},UpdateColumnsList:function(commandContext,clusterUriOrAlias,databaseNameOrAlias,tableName){var dbSchemas,allTables,columnMappingsToTables;return System.String.isNullOrEmpty(databaseNameOrAlias)||this.m_remoteColumnMappingsToTables.containsKey(commandContext)||this.m_remoteSchemaResolver!=null&&(dbSchemas=this.m_remoteSchemaResolver.Kusto$Data$IntelliSense$IKustoIntelliSenseSchemaResolver$ResolveDatabaseSchema$1(clusterUriOrAlias,databaseNameOrAlias,tableName),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity,dbSchemas)?(allTables=System.Linq.Enumerable.from(dbSchemas,Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity).selectMany($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f51).toList(Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity),this.UpdateRemoteColumnMappingToTables(commandContext,tableName,allTables),this.OverridingTablesMapping.setItem(commandContext,System.Linq.Enumerable.from(allTables,Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity).select($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f49).toList(System.String))):(this.OverridingTablesMapping.setItem(commandContext,new(System.Collections.Generic.List$1(System.String).ctor)),this.m_remoteColumnMappingsToTables.setItem(commandContext,new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).ctor)))),columnMappingsToTables={},this.m_remoteColumnMappingsToTables.tryGetValue(commandContext,columnMappingsToTables),columnMappingsToTables.v||new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).ctor)},UpdateRemoteColumnMappingToTables:function(commandContext,tableName,allTables){var columnsToTablesMapping,performUnion,outputColumns,orderedColumns;allTables.Count===1?columnsToTablesMapping=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.MapColumnsToTables(allTables):(performUnion=commandContext.Operation===Kusto.Data.IntelliSense.ContextOperation.Union,outputColumns=null,outputColumns=performUnion?System.Linq.Enumerable.from(allTables,Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity).selectMany($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f52).distinct().toList(System.String):Kusto.Cloud.Platform.Utils.ExtendedEnumerable.Intersect(System.String,System.Linq.Enumerable.from(allTables,Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity).select($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f52)),orderedColumns=outputColumns!=null?System.Linq.Enumerable.from(outputColumns,System.String).orderBy($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f37).toList(System.String):new(System.Collections.Generic.List$1(System.String).ctor),columnsToTablesMapping=function(_o1){return _o1.add(new Kusto.Data.IntelliSense.KustoCommandContext(tableName,commandContext.Operation),orderedColumns),_o1}(new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).ctor)));this.m_remoteColumnMappingsToTables.setItem(commandContext,columnsToTablesMapping)},UpdateDatabaseList:function(commandContext,clusterUriOrAlias,databaseNameOrAlias){var targetCluster=clusterUriOrAlias,dbNames,wildCardMatch;System.String.isNullOrEmpty(targetCluster)&&(targetCluster=this.Cluster!=null?this.Cluster.Alias:null);System.String.isNullOrEmpty(targetCluster)||this.OverridingDatabaseMapping.containsKey(commandContext)||this.m_remoteSchemaResolver!=null&&(dbNames=this.m_remoteSchemaResolver.Kusto$Data$IntelliSense$IKustoIntelliSenseSchemaResolver$ResolveDatabaseNames(targetCluster),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(System.String,dbNames)&&!System.String.isNullOrEmpty(databaseNameOrAlias)&&Kusto.Cloud.Platform.Utils.ExtendedRegex.IsWildCardPattern(databaseNameOrAlias)&&(wildCardMatch=Kusto.Cloud.Platform.Utils.ExtendedRegex.TryTransformWildCardPatternToRegex(databaseNameOrAlias),wildCardMatch!=null&&(dbNames=System.Linq.Enumerable.from(dbNames,System.String).where(function(db){return wildCardMatch.isMatch(db)}))),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(System.String,dbNames)?this.OverridingDatabaseMapping.setItem(commandContext,System.Linq.Enumerable.from(dbNames,System.String).select($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f53).toList(System.String)):this.OverridingDatabaseMapping.setItem(commandContext,new(System.Collections.Generic.List$1(System.String).ctor)))},ResolveRemoteContext:function(commandContext,clusterUriOrAlias,databaseNameOrAlias,remoteTableContext){var match,hasClusterReference,hasDatabaseReference;return(clusterUriOrAlias.v="",databaseNameOrAlias.v="",remoteTableContext.v="",System.String.isNullOrEmpty(commandContext))?!1:(match=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_remoteContextRegex.match(commandContext),!match.getSuccess())?!1:(hasClusterReference=!System.String.isNullOrEmpty(match.getGroups().getByName("HasClusterReference").toString()),hasClusterReference?Kusto.Cloud.Platform.Text.StringLiteral.TryParseStringLiteral(match.getGroups().getByName("Cluster").toString(),clusterUriOrAlias):(clusterUriOrAlias.v=this.Cluster!=null?this.Cluster.Alias:"",clusterUriOrAlias.v==null&&(clusterUriOrAlias.v="")),Kusto.Cloud.Platform.Text.StringLiteral.TryParseStringLiteral(match.getGroups().getByName("Database").toString(),databaseNameOrAlias),hasDatabaseReference=!System.String.isNullOrEmpty(match.getGroups().getByName("HasDatabaseReference").toString()),remoteTableContext.v=match.getGroups().getByName("Context").toString(),!hasDatabaseReference&&System.String.isNullOrEmpty(databaseNameOrAlias.v)&&(!hasClusterReference||System.String.isNullOrEmpty(clusterUriOrAlias.v)))?!1:!0},Initialize:function(){Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.prototype.Initialize.call(this);this.ContextConnection="";this.Cluster==null||System.String.isNullOrWhiteSpace(this.Cluster.Alias)||(this.ContextConnection="cluster('"+(this.Cluster.Alias||"")+"')");this.Database==null||System.String.isNullOrWhiteSpace(this.Database.Name)||(this.ContextConnection=(this.ContextConnection||"")+".database('"+(this.DatabaseSchema.Database.Name||"")+"')");this.OverridingColumnMapping=new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).ctor);this.ColumnMappingsToTables=new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).ctor);this.ColumnMappingsToWildcardedTables=new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).ctor);this.TableNames=new(System.Collections.Generic.List$1(System.String).ctor);this.FunctionMappings=new(System.Collections.Generic.Dictionary$2(System.String,System.Tuple$2(System.String,System.Text.RegularExpressions.Regex)).ctor);this.CommandRules=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseRule).ctor);this.GeneralRules=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseRule).ctor);this.QueryParametersRules=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseRule).ctor)},LoadRules:function(){var $t,localDatabases,rule,pluginOptions;this.ColumnMappingsToTables=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.MapColumnsToTables(this.Tables);this.OverridingColumnMapping=new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).ctor);this.ColumnMappingsToWildcardedTables=new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).ctor);this.OverridingDatabaseMapping=new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).ctor);this.OverridingTablesMapping=new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).ctor);this.AddClientDirectiveRules();this.AddFindOperator();this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_afterPipeRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Operator,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_operatorOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.m_commandsRequestingAggregators,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.FunctionAggregation,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_aggregateOperationOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_operatorsRequestingAggregators,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpaceAfterBracketPolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldDatabaseFunctionOption,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_clusterFunctionRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Database,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_databaseFunctionOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpaceStepBackPolicy,$t));Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(System.String,this.m_availableClusters)&&this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldClusterNamesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_startOfCommandWithClusterRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Service,System.Linq.Enumerable.from(this.m_availableClusters,System.String).select($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f54).ToArray(System.String)),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.NullApplyPolicy,$t));localDatabases=new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).ctor);Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity,this.Databases)&&localDatabases.add(Kusto.Data.IntelliSense.KustoCommandContext.Empty,System.Linq.Enumerable.from(this.Databases,Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity).select($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f55).toList(System.String));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldDatabaseNamesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_startOfCommandWithDatabaseRegex,$t.ContextualOptions=localDatabases,$t.OverrideOptions=this.OverridingDatabaseMapping,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.NullApplyPolicy,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Database,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldTableNamesForRemoteQueryOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_databaseFunctionInFindRegex,$t.ContextualOptions=null,$t.OverrideOptions=this.OverridingTablesMapping,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Table,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_findKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendCommaPolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldTableNamesForRemoteQueryOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_databaseFunctionRegex,$t.ContextualOptions=null,$t.OverrideOptions=this.OverridingTablesMapping,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Table,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendPipePolicy,$t));Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity,this.Tables)&&(this.TableNames=System.Linq.Enumerable.from(this.Tables,Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity).where($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f56).select($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f49).orderBy($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f57).toList(System.String),rule=($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldTableNames,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_startOfLineWithSpaceOrAfterJoinRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Table,this.TableNames),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendPipePolicy,$t),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldTableNamesForFindIn,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_findInStartOrContinueListRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Table,this.TableNames),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_findKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.NullApplyPolicy,$t)),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(Kusto.Data.IntelliSense.KustoIntelliSenseFunctionEntity,this.Functions)&&(rule.AdditionalOptions=System.Array.init([new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.FunctionServerSide,System.Linq.Enumerable.from(this.Functions,Kusto.Data.IntelliSense.KustoIntelliSenseFunctionEntity).select($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f58).orderBy($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f33).ToArray(System.String))],Kusto.Data.IntelliSense.CompletionOptionCollection),rule.AfterApplyPolicies=System.Linq.Enumerable.from(this.Functions,Kusto.Data.IntelliSense.KustoIntelliSenseFunctionEntity).toDictionary($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f58,$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f59,System.String,Kusto.Data.IntelliSense.ApplyPolicy)),this.GeneralRules.add(rule),this.DefaultRule=rule);Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity,this.Tables)&&this.AddColumnRules();this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldTimespanOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_agoContextRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Literal,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_timespanOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.MoveAfterTheBracketPolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldTimespanOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_nowContextRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Literal,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_negativeTimespanOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.MoveAfterTheBracketPolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldKindFlavorsForJoin,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_joinFlavorsForJoin_Regex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.OptionKind,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_joinFlavorsOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_joinKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendJoinClauseWithOpenningBracketPolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldPostJoinOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_joinRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.None,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_postJoinOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_joinKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t.AfterApplyPolicies=this.s_afterjoinOperatorApplyPolicies,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldRenderOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_renderRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.OptionRender,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_renderOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_renderKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldRenderKindKeywordOption,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_renderMultiChartsRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.OptionRender,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_kindKeywordOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_renderKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.NullApplyPolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldRenderKindOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_renderKindOptionsRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.OptionRender,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_renderKindOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_renderKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldNumericScalarOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topOrLimitOrTakeOrSampleRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Literal,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_numericScalarsOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topLimitTakeSampleKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldParseKeywordKindsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_parseKindChoose_Regex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.OptionKind,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_kindChooseKeywordOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_parseKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldWithKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_parseWith_Regex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_withKeywordOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_parseKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldStarOption,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_parseStarOption_Regex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_parseStarOption),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_parseKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldParseTypesKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_parseTypesSuggest_Regex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.DataType,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_parseSuggestedTypesKeywordOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_parseKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldTopNestedOfKeywordOption,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_operatorContextForTopNestedAndTopHitters,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.None,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_ofKeywordOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topNestedKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldTopNestedOfKeywordOption,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_operatorContextForTopNestedAndTopHitters,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.None,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_ofKeywordOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topHittersKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldTopNestedOfKeywordOption,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_operatorContextForSampleDistinct,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.None,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_ofKeywordOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_sampleDistinctKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldTopNestedKeywordOption,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topNestedKeywordPrefixRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Operator,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topNestedKeywords),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topNestedKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldTopHittersKeywordOption,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topHittersKeywordPrefixRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Operator,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topHittersKeywords),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topHittersKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldTopNestedOthersOption,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topNestedWithOthersOption,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.OptionKind,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_withOthersKeywordOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topNestedKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldByKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_yieldByKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_byKeywordOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_operatorsUsingByKeywordKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldAscendingDescendingOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topNestedAscendingDescendingRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_ascDescKeywordOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topNestedKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldAscendingDescendingOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topOrOrderAscendingDescendingRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_ascDescOrNullsLastNullsFirstKeywordOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topSortOrderKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldNullsFirstNullsLastOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topTopNestedSortOrderByAscDescRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_nullsLastFirstKeywordOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topTopNestedSortOrderKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.Cluster!=null&&Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(Kusto.Data.IntelliSense.KustoIntelliSensePluginEntity,this.Cluster.Plugins)&&(pluginOptions=System.Linq.Enumerable.from(this.Cluster.Plugins,Kusto.Data.IntelliSense.KustoIntelliSensePluginEntity).select($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f60).orderBy($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f61).ToArray(System.String),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldEvaluateOperatorOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_evaluateRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.FunctionScalar,pluginOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_evaluateKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpaceAfterBracketPolicy,$t.AfterApplyPolicies=this.s_afterEvaluatePluginPolicies,$t)));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_makeSeriesRequestingAggregatorsRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.FunctionAggregation,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_makeSeriesAggregateOperationOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_makeSeriesKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpaceAfterBracketPolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForDefaultOrOn,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_makeSeriesBeforeDefaultOrOnRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Literal,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_makeSeriesDefaultOrOnOptions),$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForOn,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_makeSeriesBeforeOnRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Literal,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_makeSeriesOnOptions),$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForRange,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_makeSeriesBeforeRangeRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Literal,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_makeSeriesInRangeOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpaceStepBackPolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForBy,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_makeSeriesBeforeByRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Literal,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_byKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldSearchKindOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchKind_Regex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.OptionKind,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchKindOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.AddRangeOperator();Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(Kusto.Data.IntelliSense.KustoIntelliSenseFunctionEntity,this.Functions)&&(this.FunctionMappings=System.Linq.Enumerable.from(this.Functions,Kusto.Data.IntelliSense.KustoIntelliSenseFunctionEntity).toDictionary($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f62,$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f63,System.String,System.Tuple$2(System.String,System.Text.RegularExpressions.Regex)));this.AddQueryParameterRule(this.m_queryParameters)},AddClientDirectiveRules:function(){var $t;this.m_allowClientDirectives&&(this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldClientDirectivesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_clientDirective_Regex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.ClientDirective,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_clientDirectivesOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t)),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(System.String,this.m_availableClusters)&&this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldClientDirective_ConnectOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_clientDirectiveConnect_Regex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Service,System.Linq.Enumerable.from(this.m_availableClusters,System.String).select($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f64)),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.NullApplyPolicy,$t)))},AddColumnRules:function(){var $t,columns=System.Linq.Enumerable.from(this.Tables,Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity).selectMany($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f65).ToArray(System.Object),columnNamesWithStringTypes,matchingTokens,afterApplyPolicies,columnNamesWithNonStringTypes,columnNamesWithTypeDateTime;System.Linq.Enumerable.from(columns,System.Object).count()!==0&&(this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForFilterInFind,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_operatorContextForFilterColumnInFindRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_findKeywords,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.AdditionalOptions=System.Array.init([new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Column,System.Array.init(["*"],System.String))],Kusto.Data.IntelliSense.CompletionOptionCollection),$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldPostSearchOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchContextRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchKeywords,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.AdditionalOptions=System.Array.init([new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Literal,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchLiteralsOptions,1),new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.None,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchInKeywordOptions,1),new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.FunctionScalar,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_extendOperationOptions),new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_kindKeywordOptions)],Kusto.Data.IntelliSense.CompletionOptionCollection),$t.AfterApplyPolicies=this.s_afterSearchApplyPolicies,$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldPostSearchKindOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchAfterKindContextRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchKeywords,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.AdditionalOptions=System.Array.init([new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Literal,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchLiteralsOptions,1),new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.None,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchInKeywordOptions,1),new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.FunctionScalar,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_extendOperationOptions)],Kusto.Data.IntelliSense.CompletionOptionCollection),$t.AfterApplyPolicies=this.s_afterSearchApplyPolicies,$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldInsideSearchOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchMoreContextRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchKeywords,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.AdditionalOptions=System.Array.init([new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Literal,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchLiteralsOptions,1),new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.FunctionScalar,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_extendOperationOptions)],Kusto.Data.IntelliSense.CompletionOptionCollection),$t.AfterApplyPolicies=this.s_afterSearchApplyPolicies,$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForFilter,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_operatorContextForFilterColumnRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_filterKeywords,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.AdditionalOptions=System.Array.init([new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Column,System.Array.init(["*"],System.String))],Kusto.Data.IntelliSense.CompletionOptionCollection),$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProjectInFind,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_operatorContextForFindProject,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_findKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.NullApplyPolicy,$t.AdditionalOptions=System.Array.init([new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Column,System.Array.init(["pack(*)"],System.String))],Kusto.Data.IntelliSense.CompletionOptionCollection),$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProject,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_operatorContextForProject,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_projectKeywords,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProjectAway,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_operatorContextForProjectAway,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_projectAwayKeywords,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProjectRename,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_operatorContextForProjectRename,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_projectRenameKeywords,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_singleParamFunctionsColumnContextRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.MoveAfterTheBracketPolicy,$t.AdditionalOptions=System.Array.init([new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.FunctionScalar,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_extendOperationOptions)],Kusto.Data.IntelliSense.CompletionOptionCollection),$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.AfterApplyPolicies=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_afterFunctionsApplyPolicies,$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForTwoParamFunctions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_twoParamFunctionsColumnContextRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendCommaPolicy,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.AdditionalOptions=System.Array.init([new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.FunctionScalar,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_extendOperationOptions)],Kusto.Data.IntelliSense.CompletionOptionCollection),$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForThreeParamFunctions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_threeParamFunctionsColumnContextRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendDoubleCommaPolicy,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.AdditionalOptions=System.Array.init([new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.FunctionScalar,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_extendOperationOptions)],Kusto.Data.IntelliSense.CompletionOptionCollection),$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForManyParamFunctions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_manyParamFunctionsColumnContextRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendCommaPolicy,$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_operatorContextForExtend_ColumnAndFunctionRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_projectExtendKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpaceAfterBracketPolicy,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.AdditionalOptions=System.Array.init([new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.FunctionScalar,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_extendOperationOptions)],Kusto.Data.IntelliSense.CompletionOptionCollection),$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForJoin,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_entitiesForJoin_ColumnsRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_joinKeywords,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForOrdering,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topSortOrderReduceByRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topSortOrderReduceKeywords,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForOrdering,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topNestedSuggestingColumnsRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topNestedKeywords,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForOrdering,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topHittersSuggestingColumnsRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topHittersKeywords,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_sampleDistinctSuggestingColumnsRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.AdditionalOptions=System.Array.init([new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.FunctionScalar,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_extendOperationOptions)],Kusto.Data.IntelliSense.CompletionOptionCollection),$t.OverrideOptions=this.OverridingColumnMapping,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_sampleDistinctKeywords,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldKindFlavorsForReduceBy,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_reduceByColumnContextRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_reduceKeywords,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForParse,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_parseColumnContextRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_parseKeywords,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForRender,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_renderTimePivotColumnContextRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_renderKeywords,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForDiffPatternsPluginSplitParameter,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_diffPatternsPluginSplitParameterRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_evaluateKeywords,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.NullApplyPolicy,$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForMakeSeries,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_makeSeriesByRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_makeSeriesKeywords,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.NullApplyPolicy,$t)),columnNamesWithStringTypes=System.Linq.Enumerable.from(columns,System.Object).where($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f66).select($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f67),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(System.String,columnNamesWithStringTypes)&&(columnNamesWithStringTypes=columnNamesWithStringTypes.union(System.Linq.Enumerable.from(this.Tables,Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity).select($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f68)),matchingTokens=new(System.Collections.Generic.HashSet$1(System.String).$ctor1)(columnNamesWithStringTypes),afterApplyPolicies=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f69(new(System.Collections.Generic.Dictionary$2(System.String,Kusto.Data.IntelliSense.ApplyPolicy).ctor)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualTokensWithRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldStringComparisonOptions,$t.GroupNameToUseAfterMatch="MatchingString",$t.MatchingTokens=matchingTokens,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_filteredColumnRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.FunctionFilter,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_stringOperatorOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.StringComparisonPolicy,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_filterKeywords,$t.AfterApplyPolicies=afterApplyPolicies,$t))),columnNamesWithNonStringTypes=System.Linq.Enumerable.from(columns,System.Object).where($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f70).select($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f67),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(System.String,columnNamesWithNonStringTypes)&&this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualTokensWithRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldNumericComparisonOptions,$t.GroupNameToUseAfterMatch="MatchingString",$t.MatchingTokens=new(System.Collections.Generic.HashSet$1(System.String).$ctor1)(columnNamesWithNonStringTypes),$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_filteredColumnRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.FunctionFilter,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_numericOperatorOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_filterKeywords,$t)),columnNamesWithTypeDateTime=System.Linq.Enumerable.from(columns,System.Object).where($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f71).select($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f67),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(System.String,columnNamesWithTypeDateTime)&&this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualTokensWithRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldDateTimeOperatorsOptions,$t.GroupNameToUseAfterMatch="MatchingString",$t.MatchingTokens=new(System.Collections.Generic.HashSet$1(System.String).$ctor1)(columnNamesWithTypeDateTime),$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_filterPredicateRightValueRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.FunctionScalar,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_datetimeOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpaceAfterBracketPolicy,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_filterKeywords,$t)))},SetQueryParametersRule:function(queryParameters){this.Locker;this.QueryParametersRules.clear();this.AddQueryParameterRule(queryParameters)},AddQueryParameterRule:function(queryParameters){var $t,$t1;queryParameters!=null&&System.Linq.Enumerable.from(queryParameters,System.String).any()&&this.QueryParametersRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldQueryParameters,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_queryParametersRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Parameter,queryParameters),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text="}",$t1),$t))},AddRangeOperator:function(){var $t;this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldRangeFromOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_rangeFromRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_rangeFromOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldRangeFromToOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_rangeFromToRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_rangeFromToOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldRangeFromToStepOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_rangeFromToStepRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_rangeFromToStepOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t))},AddFindOperator:function(){var $t;this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldPostFindOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_findContextRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.None,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_findWhereInOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_findKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t.AfterApplyPolicies=this.s_afterFindApplyPolicies,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldPostFindInOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_findInRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.None,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_postFindInOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_findKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t.AfterApplyPolicies=this.s_afterFindInApplyPolicies,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldEndOrContinueFindInOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_FindInEndOrContinueListRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.None,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_findInEndOrContinueOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_findKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t.AfterApplyPolicies=this.s_afterFindInEndOrContinuePolicies,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldPostFindInListOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_findWhereRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.None,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_findInPostListOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_findKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldFindProjectSmartOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_findProjectSmartRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.None,System.Array.init(["|"],System.String)),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_findKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t))},RegisterCommandEntities:function(commandContext,extendedEntities,replaceEntities){var context=new Kusto.Data.IntelliSense.KustoCommandContext(commandContext.Context),columnMappingsToTables=this.ColumnMappingsToTables;if(this.m_remoteColumnMappingsToTables.containsKey(commandContext)){var cluster={},database={},remoteTableContext={};this.ResolveRemoteContext(commandContext.Context,cluster,database,remoteTableContext)&&(context=new Kusto.Data.IntelliSense.KustoCommandContext(remoteTableContext.v));columnMappingsToTables=this.m_remoteColumnMappingsToTables.getItem(commandContext)}replaceEntities||columnMappingsToTables.containsKey(context)&&extendedEntities.AddRange(columnMappingsToTables.getItem(context));this.OverridingColumnMapping.setItem(commandContext,System.Linq.Enumerable.from(extendedEntities,System.String).orderBy($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f57).toList(System.String))},ResolveEntitiesFromCommand:function(input,entitiesList,knownEntities){var $t,result={v:Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.None},command=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_removeStringLiteralsSurroundedBySpacesRegex.replace(input," "),unionCommandSegments,commandClauses,unifiedEntities,clause,clauseEntities;if(command=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_removeCommentsRegex.replace(command,""),unionCommandSegments=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_lastCommandSegmentRegex.match(command),unionCommandSegments.getSuccess()&&(command=unionCommandSegments.getGroups().getByName("LastSegment").toString()),commandClauses=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ParseCommandClauses(command),System.Linq.Enumerable.from(commandClauses,System.String).count()===1)return this.ResolveEntitiesFromClause(entitiesList,knownEntities,result,command);unifiedEntities=new(System.Collections.Generic.HashSet$1(System.String).ctor);$t=Bridge.getEnumerator(commandClauses,System.String);try{while($t.moveNext())clause=$t.Current,clauseEntities=new(System.Collections.Generic.List$1(System.String).ctor),result.v=this.ResolveEntitiesFromClause(clauseEntities,knownEntities,result,clause),unifiedEntities.unionWith(clauseEntities)}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return entitiesList.AddRange(unifiedEntities),result.v},InjectFunctionsAsLetStatementsIfNeeded:function(input,usedFunctions){var $t,funcitonStatementsBuilder,funcitonAdditions,moreFunctions;if(Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$1(System.Collections.Generic.KeyValuePair$2(System.String,System.Tuple$2(System.String,System.Text.RegularExpressions.Regex)),this.FunctionMappings)){funcitonStatementsBuilder=new System.Text.StringBuilder;$t=Bridge.getEnumerator(this.FunctionMappings);try{while($t.moveNext()){var kvp=$t.Current,funcName=kvp.key,isFuncPresentRegex=kvp.value.Item2,funcExpression=kvp.value.Item1;!usedFunctions.contains(funcName)&&isFuncPresentRegex.isMatch(input)&&(funcitonStatementsBuilder.appendLine(funcExpression),usedFunctions.add(funcName))}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}funcitonStatementsBuilder.getLength()>0&&(funcitonAdditions=funcitonStatementsBuilder.toString(),moreFunctions=this.InjectFunctionsAsLetStatementsIfNeeded(funcitonAdditions,usedFunctions),input=(moreFunctions||"")+(input||""))}return input},ResolveEntitiesFromClause:function(entitiesList,knownEntities,result,input){var statements=this.InjectFunctionsAsLetStatementsIfNeeded(input,new(System.Collections.Generic.HashSet$1(System.String).ctor)),analyzeResult=this.AnalyzeStatementsImpl(statements,!1),command=analyzeResult.Command,opEntitiesMap;return System.String.isNullOrWhiteSpace(command)?result.v:(opEntitiesMap=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.BuildOpEntitiesMap(command),result.v=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.HandleRangeEntities(entitiesList,result.v,opEntitiesMap,knownEntities),result.v=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.HandlePrintEntities(entitiesList,result.v,opEntitiesMap,knownEntities),result.v=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.HandleProjectEntities(entitiesList,result.v,opEntitiesMap,knownEntities),result.v=this.HandleFindEntities(entitiesList,result.v,opEntitiesMap,knownEntities),result.v=this.HandleSearchEntities(entitiesList,result.v,opEntitiesMap,knownEntities),result.v=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.HandleExtendEntities(entitiesList,result.v,opEntitiesMap,knownEntities),result.v=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.HandleMvexpandEntities(entitiesList,result.v,opEntitiesMap,knownEntities),result.v=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.HandleSummarizeEntities(entitiesList,result.v,opEntitiesMap,knownEntities),result.v=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.HandleMakeSeriesEntities(entitiesList,result.v,opEntitiesMap,knownEntities),result.v=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.HandleTopNestedEntities(entitiesList,result.v,opEntitiesMap,knownEntities),result.v=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.HandleReduceByEntities(entitiesList,result.v,opEntitiesMap,knownEntities),result.v=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.HandleParseEntities(entitiesList,result.v,opEntitiesMap,knownEntities),result.v=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.HandleGetSchemaEntities(entitiesList,result.v,opEntitiesMap,knownEntities),result.v=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.HandleSampleDistinctEntities(entitiesList,result.v,opEntitiesMap,knownEntities),result.v===Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.ReplaceEntities?knownEntities=entitiesList:result.v===Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.AppendEntities&&(knownEntities=Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(System.String,knownEntities)?entitiesList:System.Linq.Enumerable.from(knownEntities,System.String).union(entitiesList).toList(System.String)),result.v=this.HandleProjectRenameEntities(entitiesList,result.v,opEntitiesMap,knownEntities),result.v=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.HandleProjectAwayEntities(entitiesList,result.v,opEntitiesMap,knownEntities),result.v)},HandleFindEntities:function(entitiesList,result,opEntitiesMap,knownEntities){var $t,$t1,$t2,list={v:null},wasAdded,hasPipe,projectionMatch,projectedList,projectedListCopy,entities,knownProjectedEntities,entity,entity1,withsourceMatch,tableNameColumn,entity2;if(!opEntitiesMap.tryGetValue("find",list))return result;if(wasAdded=!1,hasPipe=System.String.endsWith(list.v,"|"),list.v=Kusto.Cloud.Platform.Utils.ExtendedString.TrimEnd(list.v,"|"),hasPipe){if(projectionMatch=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_findProjectionRegex.match(list.v),projectionMatch.getSuccess()){if(projectedList=projectionMatch.getGroups().getByName("projectedList").getValue(),projectedListCopy=projectedList,projectedList=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_packRgx.replace(projectedList,""),Bridge.referenceEquals(projectedList,projectedListCopy)||(wasAdded=!!(wasAdded|Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddFieldIfNotPresent(entitiesList,"pack_"))),entities=new(System.Collections.Generic.List$1(System.String).ctor),Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveEntitiesFromList(entities,projectedList)){knownProjectedEntities=Kusto.Cloud.Platform.Utils.ExtendedEnumerable.IntersectWith(System.String,entities,knownEntities);$t=Bridge.getEnumerator(knownProjectedEntities,System.String);try{while($t.moveNext())entity=$t.Current,wasAdded=!!(wasAdded|Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddFieldIfNotPresent(entitiesList,entity))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}}}else{if(knownEntities!=null){$t1=Bridge.getEnumerator(knownEntities,System.String);try{while($t1.moveNext())entity1=$t1.Current,wasAdded=!!(wasAdded|Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddFieldIfNotPresent(entitiesList,entity1))}finally{Bridge.is($t1,System.IDisposable)&&$t1.System$IDisposable$Dispose()}}wasAdded=!!(wasAdded|Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddFieldIfNotPresent(entitiesList,"pack_"))}withsourceMatch=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_withsourceExtractRegex.match(list.v);tableNameColumn=withsourceMatch.getSuccess()?withsourceMatch.getGroups().getByName("tableNameColumn").getValue():"source_";wasAdded=!!(wasAdded|Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddFieldIfNotPresent(entitiesList,tableNameColumn));projectionMatch.getSuccess()||(wasAdded=!!(wasAdded|Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddFieldIfNotPresent(entitiesList,"pack_")))}else if(knownEntities!=null){$t2=Bridge.getEnumerator(knownEntities,System.String);try{while($t2.moveNext())entity2=$t2.Current,wasAdded=!!(wasAdded|Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddFieldIfNotPresent(entitiesList,entity2))}finally{Bridge.is($t2,System.IDisposable)&&$t2.System$IDisposable$Dispose()}}return wasAdded&&(result=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.ReplaceEntities),result},HandleSearchEntities:function(entitiesList,result,opEntitiesMap,knownEntities){var $t,list={v:null},wasAdded,entity;if(!opEntitiesMap.tryGetValue("search",list))return result;if(wasAdded=!1,knownEntities!=null){$t=Bridge.getEnumerator(knownEntities,System.String);try{while($t.moveNext())entity=$t.Current,wasAdded=!!(wasAdded|Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddFieldIfNotPresent(entitiesList,entity))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}}return wasAdded&&(result=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.ReplaceEntities),result},HandleProjectRenameEntities:function(entitiesList,result,opEntitiesMap,knownEntities){var $t,$t1,list={v:null},isOriginalEntitiesListEmpty,pair,tuple,targetName,sourceName,field;if(!opEntitiesMap.tryGetValue("project-rename",list))return result;var removedEntities=new(System.Collections.Generic.List$1(System.String).ctor),wasChanged=!1,entities=System.String.split(list.v,System.Array.init([44],System.Char).map(function(i){return String.fromCharCode(i)}),null,1);if(Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$1(System.String,entities))return result;isOriginalEntitiesListEmpty=Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$1(System.String,entitiesList);$t=Bridge.getEnumerator(entities);try{while($t.moveNext())(pair=$t.Current,tuple=System.String.split(pair,System.Array.init([61],System.Char).map(function(i){return String.fromCharCode(i)}),null,1),tuple.length===2)&&((targetName=Kusto.Data.IntelliSense.ExpressionEntityParser.UnescapeEntityName(tuple[System.Array.index(0,tuple)]),sourceName=Kusto.Data.IntelliSense.ExpressionEntityParser.UnescapeEntityName(tuple[System.Array.index(1,tuple)]),System.String.isNullOrEmpty(targetName)||System.String.isNullOrEmpty(sourceName)||System.String.equals(targetName,sourceName,4))||(removedEntities.add(sourceName),entitiesList.contains(sourceName)&&(entitiesList.remove(sourceName),wasChanged=!0),entitiesList.contains(targetName)||(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddEscapedEntityName(entitiesList,targetName),wasChanged=!0)))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}if(System.Linq.Enumerable.from(removedEntities,System.String).any()&&isOriginalEntitiesListEmpty&&Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(System.String,knownEntities)){$t1=Bridge.getEnumerator(System.Linq.Enumerable.from(knownEntities,System.String).except(removedEntities).ToArray(System.String));try{while($t1.moveNext())field=$t1.Current,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddEscapedEntityName(entitiesList,field)}finally{Bridge.is($t1,System.IDisposable)&&$t1.System$IDisposable$Dispose()}}return wasChanged&&(result=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.ReplaceEntities),result},AnalyzeCommand$1:function(statement,cachedReference){var input=this.InjectFunctionsAsLetStatementsIfNeeded(statement,new(System.Collections.Generic.HashSet$1(System.String).ctor)),result;return(cachedReference!=null&&cachedReference.ContextCache!=null&&(this.ContextCache=new(System.Collections.Generic.Dictionary$2(System.Int32,Kusto.Data.IntelliSense.KustoCommandContext).$ctor1)(cachedReference.ContextCache)),System.String.indexOf(input,String.fromCharCode(59))<0)?(result=new Kusto.Data.IntelliSense.AnalyzedCommand,result.Command=statement,result.Context=this.ResolveContextFromCommand(input),result):this.AnalyzeStatementsImpl(input,!0)},AnalyzeCommand:function(analyzedCommand,appendingPart){var $t,appendedCommand;return System.String.isNullOrWhiteSpace(appendingPart)?analyzedCommand:analyzedCommand==null||System.String.isNullOrEmpty(analyzedCommand.Command)?this.AnalyzeCommand$1(appendingPart,null):(appendedCommand=(analyzedCommand.Command||"")+(appendingPart||""),System.String.indexOf(appendingPart,String.fromCharCode(59))>=0||System.String.endsWith(analyzedCommand.Command.trim(),";")||Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_nonDefaultContextKeywordsRegex.isMatch(appendingPart))?this.AnalyzeCommand$1(appendedCommand,null):($t=new Kusto.Data.IntelliSense.AnalyzedCommand,$t.Command=appendedCommand,$t.Context=analyzedCommand.Context,$t)},ResolveContextFromCommand:function(command){var $t,commandWithoutStringLiterals,hashCode,keyword,contextMatchRegex,defaultContextMatcher,commandContext;if(System.String.isNullOrWhiteSpace(command))return Kusto.Data.IntelliSense.KustoCommandContext.Empty;if(commandWithoutStringLiterals=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_removeStringLiteralsSurroundedBySpacesRegex.replace(command," "),commandWithoutStringLiterals=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_removeCommentsRegex.replace(commandWithoutStringLiterals,""),commandWithoutStringLiterals=commandWithoutStringLiterals.trim(),hashCode=Bridge.getHashCode(commandWithoutStringLiterals),this.m_contextCache.containsKey(hashCode))return this.m_contextCache.getItem(hashCode);var tableContext="",contextOperation=Kusto.Data.IntelliSense.ContextOperation.Intersect,matchesKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_nonDefaultContextKeywordsRegex.matches(commandWithoutStringLiterals),lastMatch=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.GetLatestMatch(matchesKeywords),isFind=!1,isSearch=!1;return lastMatch!=null&&(keyword=lastMatch.getGroups().get(0).toString(),contextMatchRegex={},Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_commandContextRegexes.tryGetValue(keyword,contextMatchRegex)&&(tableContext=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveContextUsingRegex(commandWithoutStringLiterals,contextMatchRegex.v,lastMatch.getIndex())),isFind=Bridge.referenceEquals(keyword,"find"),isSearch=Bridge.referenceEquals(keyword,"search"),isSearch&&!System.String.isNullOrEmpty(tableContext)&&(contextOperation=Kusto.Data.IntelliSense.ContextOperation.Union)),isFind&&Bridge.referenceEquals(tableContext,"")&&(tableContext="database('*')"),System.String.isNullOrEmpty(tableContext)&&(isFind?tableContext="*":(defaultContextMatcher={Item1:Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_commandDefaultContext,Item2:null},tableContext=($t=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveContextUsingRegex(commandWithoutStringLiterals,defaultContextMatcher,0),$t!=null?$t:""),isSearch&&System.String.equals(tableContext,"search")&&(tableContext="*",contextOperation=Kusto.Data.IntelliSense.ContextOperation.Union))),commandContext=System.String.isNullOrEmpty(tableContext)?Kusto.Data.IntelliSense.KustoCommandContext.Empty:new Kusto.Data.IntelliSense.KustoCommandContext(tableContext,contextOperation),this.m_contextCache.setItem(hashCode,commandContext),commandContext},AnalyzeStatementsImpl:function(statements,requireContext){var result=new Kusto.Data.IntelliSense.AnalyzedCommand,letStatements=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveLetExpressions(statements),expression,replaceRegex;if(result.Command=Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.FindLastStatement(statements),(requireContext||letStatements.Count>0)&&(result.Context=this.ResolveContextFromCommand(result.Command)),letStatements.Count===0)return result;while(letStatements.containsKey(result.Context.Context))expression=letStatements.getItem(result.Context.Context),replaceRegex=new System.Text.RegularExpressions.Regex.ctor("\\b"+(result.Context.Context||"")+"\\b(\\(.*?\\))?"),result.Command=replaceRegex.replace(result.Command,expression),letStatements.remove(result.Context.Context),result.Context=this.ResolveContextFromCommand(expression);return result},GetKnownEntities:function(command,context,mapOfOriginallyKnownEntities,knownEntities,originallyKnownEntities){var $t,$t1,$t2,rule={};return this.TryMatchSpecificRule(command,context,Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForFilterInFind,rule)?(knownEntities.v=($t=System.String,System.Linq.Enumerable.from(rule.v.GetOptions(context),$t).toList($t)),mapOfOriginallyKnownEntities.containsKey(context)||mapOfOriginallyKnownEntities.setItem(context,knownEntities.v),originallyKnownEntities.v=mapOfOriginallyKnownEntities.getItem(context),!0):this.TryMatchSpecificRule((command||"")+" project ",context,Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProjectInFind,rule)?(knownEntities.v=($t1=System.String,System.Linq.Enumerable.from(rule.v.GetOptions(context),$t1).toList($t1)),mapOfOriginallyKnownEntities.containsKey(context)||mapOfOriginallyKnownEntities.setItem(context,knownEntities.v),originallyKnownEntities.v=mapOfOriginallyKnownEntities.getItem(context),!0):(command=(command||"")+" | project ",this.TryMatchSpecificRule(command,context,Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProject,rule))?(knownEntities.v=($t2=System.String,System.Linq.Enumerable.from(rule.v.GetOptions(context),$t2).toList($t2)),mapOfOriginallyKnownEntities.containsKey(context)||mapOfOriginallyKnownEntities.setItem(context,knownEntities.v),originallyKnownEntities.v=mapOfOriginallyKnownEntities.getItem(context),!0):!1},LoadCommandToolTips:function(){var $t,toolTipCommands=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTip).ctor),command,parameters,command1,parameters1,command2,parameters2,command3,parameters3,command4,parameters4,command5,parameters5,command6,parameters6,command7,parameters7,command8,parameters8,command9,parameters9,command10,parameters10,command11,parameters11,command12,parameters12,command13,parameters13,command14,parameters14,command15,parameters15,command16,parameters16,command17,parameters17,command18,command19,parameters18,command20,parameters19,command21,parameters20;this.CommandToolTips=toolTipCommands;command=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name="tostring",$t.Summary="Converts the given value to string",$t.Usage="... | extend str = <i>tostring<\/i>(Column1)",$t);parameters=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command.Parameters=parameters;parameters.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType="T",$t.Name="value",$t.Description="The value to convert to string",$t));toolTipCommands.add(command);command1=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name="strlen",$t.Summary="Returns the length of the given string",$t.Usage="... | extend length = <i>strlen<\/i>(Column1)",$t);parameters1=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command1.Parameters=parameters1;parameters1.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType="string",$t.Name="value",$t.Description="The string being measured for length",$t));toolTipCommands.add(command1);command2=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name="hash",$t.Summary="Returns the xxhash value of a scalar value",$t.Usage="... | extend hash = <i>hash<\/i>(Column1, 100)",$t);parameters2=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command2.Parameters=parameters2;parameters2.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType="Every scalar type <\/b><i>except<\/i><b> Dynamic",$t.Name="target",$t.Description="The value the hash is calculated on",$t));parameters2.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType="long",$t.Name="modulo",$t.Description="The modulo value to be applied on the hash result",$t));toolTipCommands.add(command2);command3=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name="iff",$t.Summary="Returns one of two values, depending on whether the Boolean expression evaluates to true or false",$t.Usage="... | extend val = <i>iff<\/i>(strlen(Column1) > 10, 'long', 'short')",$t);parameters3=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command3.Parameters=parameters3;parameters3.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType="bool",$t.Name="expression",$t.Description="The Boolean expression you want to evaluate",$t));parameters3.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType="T",$t.Name="trueValue",$t.Description=" Returned if 'expression' evaluates to True",$t));parameters3.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType="T",$t.Name="falseValue",$t.Description="Returned if 'expression' evaluates to False",$t));toolTipCommands.add(command3);command4=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name="extract",$t.Summary="Produces a scalar using a regular expression (<a href=https://re2.googlecode.com/hg/doc/syntax.html>RE2 reference<\/a>)",$t.Usage="... | extend number = <i>extract<\/i>(@'(\\d+)', 1, Column1, typeof(int))",$t);parameters4=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command4.Parameters=parameters4;parameters4.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType="string",$t.Name="regex",$t.Description="The regular expression to be applied",$t));parameters4.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType="int",$t.Name="groupIndex",$t.Description="The index of the matching group (1 = 1st matching group in regex, 2 = 2nd matching group, etc.)",$t));parameters4.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType="column",$t.Name="columnName",$t.Description="Specify column to operate on (can be calculated column)",$t));parameters4.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType="typename typeof(T)",$t.Name="type",$t.Description="Optional type to convert the result to",$t.Optional=!0,$t));toolTipCommands.add(command4);command5=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name="replace",$t.Summary="Replace a string with another string using a regular expression (<a href=https://re2.googlecode.com/hg/doc/syntax.html>RE2 reference<\/a>)",$t.Usage="... | replace str = <i>replace<\/i>(@'foo', @'bar', Column1)",$t);parameters5=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command5.Parameters=parameters5;parameters5.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType="string",$t.Name="matchingPattern",$t.Description="String or regular expression to be applied for matching",$t));parameters5.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType="string",$t.Name="rewritePattern",$t.Description="String or regular expression to be used for rewrite (\\1 = 1st matching group in regex, \\2 = 2nd matching group, etc.)",$t));parameters5.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType="column",$t.Name="columnName",$t.Description="Specify column to operate on (can be calculated column)",$t));toolTipCommands.add(command5);command6=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name="extractjson",$t.Summary="Produces a scalar using a JSONPath expression (<a href=http://goessner.net/articles/JsonPath/>JSONPath reference<\/a>)",$t.Usage="... | extend number = <I>extractjson<\/I>(@'$.Object.Property', Column1, typeof(int))",$t);parameters6=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command6.Parameters=parameters6;parameters6.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType="string",$t.Name="jsonPath",$t.Description="The JSON Path expression to be used",$t));parameters6.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType="column",$t.Name="columnName",$t.Description="Specify column to operate on (can be calculated column)",$t));parameters6.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType="typename typeof(T)",$t.Name="type",$t.Description="Optional type to convert the result to",$t.Optional=!0,$t));toolTipCommands.add(command6);command7=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name="parsejson",$t.Summary="Converts a JSON string into a value of type 'dynamic' (an object), whose properties can be further accessed using dot or bracket notation",$t.Usage="... | extend obj = <I>parsejson<\/I>(Column1)",$t);parameters7=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command7.Parameters=parameters7;parameters7.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType="string",$t.Name="columnName",$t.Description="Any valid query expression that returns a string (e.g. a column name)",$t));toolTipCommands.add(command7);command8=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name="toupper",$t.Summary="Converts the given string to upper case",$t.Usage="... | extend upper = <I>topupper<\/I>(Column1)",$t);parameters8=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command8.Parameters=parameters8;parameters8.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType="string",$t.Name="value",$t.Description="The string to be converted to upper case",$t));toolTipCommands.add(command8);command9=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name="tolower",$t.Summary="Converts the given string to lower case",$t.Usage="... | extend lower = <I>tolower<\/I>(Column1)",$t);parameters9=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command9.Parameters=parameters9;parameters9.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType="string",$t.Name="value",$t.Description="The string to be converted to lower case",$t));toolTipCommands.add(command9);command10=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name="substring",$t.Summary="Retrieves a substring from the given string",$t.Usage="... | extend substr = <I>substring<\/I>(Column1,1,3)",$t);parameters10=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command10.Parameters=parameters10;parameters10.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType="string",$t.Name="value",$t.Description="The string to be substringed",$t));parameters10.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType="long",$t.Name="startIndex",$t.Description="The zero-based starting character position of a substring in this instance",$t));parameters10.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType="long",$t.Name="count",$t.Description="The number of characters in the substring",$t.Optional=!0,$t));toolTipCommands.add(command10);command11=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name="split",$t.Summary="Retrieves a string array that contains the substrings of the given source string that are delimited by the given delimiter",$t.Usage='... | extend split = <I>split<\/I>(Column1,";")',$t);parameters11=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command11.Parameters=parameters11;parameters11.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType="string",$t.Name="source",$t.Description="The string to be splitted",$t));parameters11.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType="string",$t.Name="delimiter",$t.Description="The delimiter on which the split will be based on",$t));parameters11.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType="integer",$t.Name="index",$t.Description="The index of the requested substring",$t.Optional=!0,$t));toolTipCommands.add(command11);command12=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name="strcat",$t.Summary="Concatenates several strings together (up-to 16 parameters)",$t.Usage="... | extend s = <I>strcat<\/I>('KU', 'S', 'TO')",$t);parameters12=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command12.Parameters=parameters12;parameters12.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType="string",$t.Name="value",$t.Description="First part",$t));parameters12.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType="string",$t.Name="values",$t.Description="Other parts",$t.IsArgsArray=!0,$t.Optional=!0,$t));toolTipCommands.add(command12);command13=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name="countof",$t.Summary="Returns the number of pattern matches in the given string",$t.Usage="... | extend matches = <i>countof<\/i>(Expression, Pattern, Type)",$t);parameters13=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command13.Parameters=parameters13;parameters13.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType="string",$t.Name="Expression",$t.Description="The string to match the pattern to",$t));parameters13.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType="string",$t.Name="Pattern",$t.Description="The pattern to match the expression to. Can be a regular expression",$t));parameters13.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType="string",$t.Name="Type",$t.Description="For substring count leave empty or specifiy 'normal', for regular expression count specify 'regex'",$t));toolTipCommands.add(command13);command14=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name="percentile",$t.Summary="Returns the estimated value for the given percentile over source values",$t.Usage="... | summarize <i>percentile<\/i>(source, percent) ...",$t);parameters14=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command14.Parameters=parameters14;parameters14.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType="numeric <\/b><i>or<\/i><b> DateTime <\/b><i>or<\/i><b> TimeSpan",$t.Name="Source",$t.Description="Range of values over which to estimate percentile",$t));parameters14.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType="real",$t.Name="percent",$t.Description="Value in the range [0..100] giving the percentile to estimate",$t));toolTipCommands.add(command14);command15=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name="percentiles",$t.Summary="Returns the estimated value for each of the given percentiles over source values",$t.Usage="... | summarize <i>percentiles<\/i>(source, percent, ...) ...",$t);parameters15=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command15.Parameters=parameters15;parameters15.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType="numeric <\/b><i>or<\/i><b> DateTime <\/b><i>or<\/i><b> TimeSpan",$t.Name="Source",$t.Description="Range of values over which to estimate percentile",$t));parameters15.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType="real",$t.Name="percent",$t.Description="Value in the range [0..100] giving the percentile to estimate",$t.IsArgsArray=!0,$t));toolTipCommands.add(command15);command16=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name="percentilew",$t.Summary="Returns the estimated value for the given percentile over weighted source values",$t.Usage="... | summarize <i>percentilew<\/i>(source, weight, percent) ...",$t);parameters16=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command16.Parameters=parameters16;parameters16.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType="numeric <\/b><i>or<\/i><b> DateTime <\/b><i>or<\/i><b> TimeSpan",$t.Name="Source",$t.Description="Range of values over which to estimate percentile",$t));parameters16.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType="integer",$t.Name="Weight",$t.Description="Range of weights to give to each source value",$t));parameters16.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType="real",$t.Name="percent",$t.Description="Value in the range [0..100] giving the percentile to estimate",$t));toolTipCommands.add(command16);command17=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name="percentilesw",$t.Summary="Returns the estimated value for each of the given percentiles over weighted source values",$t.Usage="... | summarize <i>percentilesw<\/i>(source, weight, percent, ...) ...",$t);parameters17=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command17.Parameters=parameters17;parameters17.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType="numeric <\/b><i>or<\/i><b> DateTime <\/b><i>or<\/i><b> TimeSpan",$t.Name="Source",$t.Description="Range of values over which to estimate percentile",$t));parameters17.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType="integer",$t.Name="Weight",$t.Description="Range of weights to give to each source value",$t));parameters17.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType="real",$t.Name="percent",$t.Description="Value in the range [0..100] giving the percentile to estimate",$t.IsArgsArray=!0,$t));toolTipCommands.add(command17);command18=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name="ingestion_time",$t.Summary="returns a datetime value specifying when the record was first available for query",$t.Usage="... | extend length = <i>ingestiontime<\/i>()",$t);command18.Parameters=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);toolTipCommands.add(command18);command19=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name="countif",$t.Summary="Returns the number of rows that matches the predicate",$t.Usage="... | summarize <i>countif<\/i>(Predicate)",$t);parameters18=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command19.Parameters=parameters18;parameters18.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType="boolean",$t.Name="Predicate",$t.Description="Boolean expression used as predicate",$t));toolTipCommands.add(command19);command20=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name="dcountif",$t.Summary="Returns the number of unique values of Expression in rows that matches the predicate",$t.Usage="... | summarize <i>dcountif<\/i>(Expression, Predicate, Accuracy)",$t);parameters19=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command20.Parameters=parameters19;parameters19.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType="T",$t.Name="Expression",$t.Description="The unique values to count",$t));parameters19.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType="boolean",$t.Name="Predicate",$t.Description="Boolean expression used as predicate",$t));parameters19.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType="integer",$t.Name="Accuracy",$t.Description="Optional. Controls the balance between speed and accuracy",$t));toolTipCommands.add(command20);command21=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name="sumif",$t.Summary="Returns the sum of rows that matches the predicate",$t.Usage="... | summarize <i>sumif<\/i>(Predicate, Column)",$t);parameters20=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command21.Parameters=parameters20;parameters20.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType="boolean",$t.Name="Predicate",$t.Description="Boolean expression used as predicate",$t));parameters20.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType="numeric <\/b><i>or<\/i><b> DateTime <\/b><i>or<\/i><b> TimeSpan",$t.Name="Column",$t.Description="Column or other scalar funciton to calculate the sum of",$t));toolTipCommands.add(command21)}}});Bridge.define("$AnonymousType$1",$asm,{$kind:"anonymous",ctors:{ctor:function(name,parentTableName,typeCode){this.Name=name;this.ParentTableName=parentTableName;this.TypeCode=typeCode}},methods:{equals:function(o){return Bridge.is(o,$asm.$AnonymousType$1)?Bridge.equals(this.Name,o.Name)&&Bridge.equals(this.ParentTableName,o.ParentTableName)&&Bridge.equals(this.TypeCode,o.TypeCode):!1},getHashCode:function(){return Bridge.addHash([7550196186,this.Name,this.ParentTableName,this.TypeCode])},toJSON:function(){return{Name:this.Name,ParentTableName:this.ParentTableName,TypeCode:this.TypeCode}}},statics:{methods:{$metadata:function(){return{m:[{a:2,n:"Name",t:16,rt:System.String,g:{a:2,n:"get_Name",t:8,rt:System.String,fg:"Name"},fn:"Name"},{a:2,n:"ParentTableName",t:16,rt:System.String,g:{a:2,n:"get_ParentTableName",t:8,rt:System.String,fg:"ParentTableName"},fn:"ParentTableName"},{a:2,n:"TypeCode",t:16,rt:Kusto.Data.IntelliSense.EntityDataType,g:{a:2,n:"get_TypeCode",t:8,rt:Kusto.Data.IntelliSense.EntityDataType,fg:"TypeCode",box:function($v){return Bridge.box($v,Kusto.Data.IntelliSense.EntityDataType,System.Enum.toStringFn(Kusto.Data.IntelliSense.EntityDataType))}},fn:"TypeCode"}]}}}}});Bridge.ns("Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider",$asm.$);Bridge.apply($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider,{f1:function(f){return"-"+(f||"")},f2:function(_o1){return _o1.add("series_stats",System.Array.init(["min","min_idx","max","max_idx","avg","stdev","variance"],System.String)),_o1.add("series_fit_line",System.Array.init(["rsquare","slope","variance","rvariance","interception","line_fit"],System.String)),_o1.add("series_fit_2lines",System.Array.init(["rsquare","split_idx","variance","rvariance","line_fit","right_rsquare","right_slope","right_interception","right_variance","right_rvariance","left_rsquare","left_slope","left_interception","left_variance","left_rvariance"],System.String)),_o1.add("series_periods_detect",System.Array.init(["periods","scores"],System.String)),_o1.add("series_periods_validate",System.Array.init(["periods","scores"],System.String)),_o1},f3:function(func){return func},f4:function(func){return Kusto.Data.IntelliSense.ApplyPolicy.AppendSpaceStepBackPolicy},f5:function(_o9){return _o9.add("filter"),_o9.add("where"),_o9},f6:function(_o10){return _o10.add("project"),_o10},f7:function(_o11){return _o11.add("project-away"),_o11},f8:function(_o12){return _o12.add("project-rename"),_o12},f9:function(_o13){return _o13.add("project"),_o13.add("extend"),_o13},f10:function(_o14){return _o14.add("join"),_o14},f11:function(_o15){return _o15.add("top"),_o15.add("top-hitters"),_o15.add("order"),_o15.add("sort"),_o15.add("reduce"),_o15.add("top-nested"),_o15},f12:function(_o16){return _o16.add("top"),_o16.add("top-hitters"),_o16.add("order"),_o16.add("sort"),_o16.add("reduce"),_o16.add("top-nested"),_o16.add("render"),_o16},f13:function(_o17){return _o17.add("top"),_o17.add("order"),_o17.add("sort"),_o17},f14:function(_o18){return _o18.add("top"),_o18.add("top-hitters"),_o18.add("order"),_o18.add("sort"),_o18.add("top-nested"),_o18},f15:function(_o19){return _o19.add("reduce"),_o19},f16:function(_o20){return _o20.add("parse"),_o20},f17:function(_o21){return _o21.add("render"),_o21},f18:function(_o22){return _o22.add("top"),_o22.add("limit"),_o22.add("take"),_o22.add("top-nested"),_o22.add("top-hitters"),_o22.add("sample"),_o22.add("sample-distinct"),_o22},f19:function(_o23){return _o23.add("evaluate"),_o23},f20:function(_o24){return _o24.add("summarize"),_o24},f21:function(_o25){return _o25.add("distinct"),_o25},f22:function(_o26){return _o26.add("top-nested"),_o26},f23:function(_o27){return _o27.add("top-hitters"),_o27},f24:function(_o28){return _o28.add("sample-distinct"),_o28},f25:function(_o29){return _o29.add("top-nested"),_o29.add("top-hitters"),_o29.add("summarize"),_o29.add("distinct"),_o29},f26:function(_o30){return _o30.add("database"),_o30},f27:function(_o31){return _o31.add("find"),_o31},f28:function(_o32){return _o32.add("search"),_o32},f29:function(_o33){return _o33.add("make-series"),_o33},f30:function(_o34){return _o34.add("cnt","count"),_o34.add("percentiles","percentile"),_o34.add("percentilew","percentile"),_o34.add("percentilesw","percentile"),_o34.add("makelist","list"),_o34.add("makeset","set"),_o34.add("make_list","list"),_o34.add("make_set","set"),_o34.add("make_dictionary","dictionary"),_o34.add("make_bag","bag"),_o34},f31:function(_o35){return _o35.add("join"),_o35.add("project"),_o35.add("summarize"),_o35.add("reduce"),_o35.add("getschema"),_o35.add("distinct"),_o35},f32:function(_o36){return _o36.add("join",{Item1:Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_commandContext_Join,Item2:null}),_o36.add(".show",{Item1:Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_commandContext_Show,Item2:Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_showCommandFixRegex}),_o36.add("range",{Item1:Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_commandContext_Range,Item2:null}),_o36.add("toscalar",{Item1:Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_commandContext_ToScalar,Item2:null}),_o36.add("{",{Item1:Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_commandContext_Callable,Item2:null}),_o36.add("let",{Item1:Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_commandContext_Let,Item2:null}),_o36.add("union",{Item1:Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_commandContext_Union,Item2:null}),_o36.add("find",{Item1:Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_commandContext_Find,Item2:null}),_o36.add("search",{Item1:Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_commandContext_Search,Item2:null}),_o36.add("#connect",{Item1:Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_commandContext_ConnectDirective,Item2:null}),_o36},f33:function(s){return s},f34:function(s){return System.Text.RegularExpressions.Regex.escape(s)},f35:function(_o37){return _o37.add(new System.Text.RegularExpressions.Regex.ctor("\\blet\\s+(?<LetExpressionName>\\w+)\\s*=.*?\\{(?<Expression>.+?)\\}",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions)),_o37.add(new System.Text.RegularExpressions.Regex.ctor("\\blet\\s+(?<LetExpressionName>\\w+)\\s*=\\s*(?<Expression>.+?);",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions)),_o37},f36:function(c){return c.Name},f37:function(c){return c},f38:function(m){return(m.getGroups().get(1).getValue()||"")+" "+(m.getGroups().get(3).getValue()||"")},f39:function(_o2){return _o2.add("kind=",Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy),_o2.add("(",Kusto.Data.IntelliSense.ApplyPolicy.AppendJoinClauseWithoutOpenningBracketPolicy),_o2},f40:function(_o3){var $t;return _o3.add("timechart",($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=" with 'cats' ",$t)),_o3.add("barchart",($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=" with 'dogs' ",$t)),_o3},f41:function(_o4){var $t;return _o4.add("autocluster",($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text="()",$t.OffsetToken=")",$t.OffsetPosition=0,$t)),_o4.add("diffpatterns",($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text='("split= ")',$t.OffsetToken="=",$t.OffsetPosition=2,$t)),_o4.add("basket",($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text="()",$t.OffsetToken=")",$t.OffsetPosition=0,$t)),_o4.add("extractcolumns",($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text="()",$t.OffsetToken=")",$t.OffsetPosition=0,$t)),_o4},f42:function(_o5){return _o5.add("where",Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy),_o5.add("in",Kusto.Data.IntelliSense.ApplyPolicy.AppendFindInClausePolicy),_o5},f43:function(_o6){return _o6.add("(",Kusto.Data.IntelliSense.ApplyPolicy.AppendFindInClauseWithoutOpenningBracketPolicy),_o6},f44:function(_o7){var $t;return _o7.add(")",($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=" where ",$t)),_o7.add(",",Kusto.Data.IntelliSense.ApplyPolicy.AppendFindInClauseWithoutOpenningBracketPolicy),_o7},f45:function(_o8){return _o8.add('""',Kusto.Data.IntelliSense.ApplyPolicy.AppendSpaceStepBackPolicy),_o8.add("kind=",Kusto.Data.IntelliSense.ApplyPolicy.NullApplyPolicy),_o8.add("in",Kusto.Data.IntelliSense.ApplyPolicy.AppendSearchInClausePolicy),_o8},f46:function(kvp){return kvp.value},f47:function(f){return f.toLowerCase()},f48:function(vals){return vals},f49:function(t){return t.Name},f50:function(t){return t.value},f51:function(db){return db.Tables},f52:function(t){return System.Linq.Enumerable.from(t.Columns,Kusto.Data.IntelliSense.KustoIntelliSenseColumnEntity).select($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f36)},f53:function(n){return"'"+(n||"")+"'"},f54:function(c){return"'"+(c||"")+"'"},f55:function(db){return"'"+(db.Name||"")+"'"},f56:function(t){return!t.IsInvisible},f57:function(n){return n},f58:function(f){return f.CallName},f59:function(f){return Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy},f60:function(p){return(p.Name||"")+"()"},f61:function(p){return p},f62:function(f){return f.Name},f63:function(f){return{Item1:Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_removeCommentsRegex.replace(f.Expression,""),Item2:new System.Text.RegularExpressions.Regex.ctor("\\b"+(f.Name||"")+"\\b",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.DefaultRegexOptions)}},f64:function(c){return"cluster('"+(c||"")+"')"},f65:function(t){return System.Linq.Enumerable.from(t.Columns,Kusto.Data.IntelliSense.KustoIntelliSenseColumnEntity).select(function(c){return new $asm.$AnonymousType$1(c.Name,t.Name,c.TypeCode)})},f66:function(c){return c.TypeCode===Kusto.Data.IntelliSense.EntityDataType.String},f67:function(e){return Kusto.Data.IntelliSense.ContextualTokensWithRegexIntelliSenseRule.GetHashStringForContextAndToken(e.ParentTableName,e.Name)},f68:function(t){return Kusto.Data.IntelliSense.ContextualTokensWithRegexIntelliSenseRule.GetHashStringForContextAndToken(t.Name,"*")},f69:function(_o1){return _o1.add("in",Kusto.Data.IntelliSense.ApplyPolicy.AppendStringLiteralArrayPolicy),_o1.add("!in",Kusto.Data.IntelliSense.ApplyPolicy.AppendStringLiteralArrayPolicy),_o1},f70:function(c){return c.TypeCode!==Kusto.Data.IntelliSense.EntityDataType.String},f71:function(c){return c.TypeCode===Kusto.Data.IntelliSense.EntityDataType.DateTime}});Bridge.define("Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider",{inherits:[Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase],statics:{fields:{s_dmRuleKinds:null,s_ingestionQueueTypes:null,s_lineWithDotBeginningRegex:null,s_showCommandRegex:null,s_showClusterCommandRegex:null,s_showClusterSettingsCommandRegex:null,s_showClusterSettingsVersionsCommandRegex:null,s_showClusterSettingsWithEncryptedSecretsCommandRegex:null,s_showPrincipalRolesCommandRegex:null,s_alterCommandRegex:null,s_alterClusterSettingsCommandRegex:null,s_alterClusterSettingsFromCommandRegex:null,s_alterMergeCommandRegex:null,s_alterObtainerQueuesCommandRegex:null,s_addOrAlterlterEventHubIngestionSourceCommandRegex:null,s_createCommandRegex:null,s_dropCommandRegex:null,s_addCommandRegex:null,s_addOrAlterCommandRegex:null,s_addDataObtainerCommandRegex:null,s_addDataObtainerInitializeCommandRegex:null,s_addDataObtainerInitializeWithCommandRegex:null,s_getCommandRegex:null,s_getIngestionQueuesCommandRegex:null,s_getIngestionQueuesTypeCommandRegex:null,s_flushCommandRegex:null,s_initializeCommandRegex:null,s_initializeClusterConfigCommandRegex:null,s_initializeClusterConfigEncryptionCommandRegex:null,s_resetCommandRegex:null,s_setCommandRegex:null,s_showPurgesCommandRegex:null,s_showPurgesFromCommandRegex:null,s_showPurgesToCommandRegex:null,s_showPurgeTableCommandRegex:null,s_showPurgeTableInDatabaseCommandRegex:null,s_showPurgeRetryCommandRegex:null,s_showPurgesFromRetryCommandRegex:null,s_showPurgesToRetryCommandRegex:null,s_cancelPurgeCommandRegex:null,s_refeshPolicyCacheRegex:null,s_adminOperationOptions:null,s_showCommandOptions:null,s_showClustersKeywordOptions:null,s_showClusterSettingsKeywordOptions:null,s_showClusterSettingsVersionsKeywordOptions:null,s_showClusterSettingsWithEncryptedSecretsOption:null,s_showPrincipalRolesKeywordOptions:null,s_alterClusterSettingsFromKeywordOptions:null,s_alterCommandOptions:null,s_createCommandOptions:null,s_dropCommandOptions:null,s_addCommandOptions:null,s_addOrAlterCommandOptions:null,s_addDataObtainerCommandOptions:null,s_addDataObtainerInitializeCommandOptions:null,s_addDataObtainerInitializeWithCommandOptions:null,s_getCommandOptions:null,s_getIngestionQueuesCommandOptions:null,s_getIngestionQueuesTypeCommandOptions:null,s_flushCommandOptions:null,s_initializeCommandOptions:null,s_initializeClusterConfigurationCommandOptions:null,s_initializeClusterConfigurationEncryptionCommandOptions:null,s_resetCommandOptions:null,s_setCommandOptions:null,s_alterObtainerQueuesOptions:null,s_addOrAlterEventHubIngestionSourceOptions:null,s_showPurgeCommandOptions:null,s_showPurgeFromCommandOptions:null,s_showPurgeToCommandOptions:null,s_showPurgeTableCommandOptions:null,s_showPurgeTableInDatabaseCommandOptions:null,s_showPurgeRetryCommandOptions:null,s_showPurgeFromRetryCommandOptions:null,s_showPurgeToRetryCommandOptions:null,s_showPurgeCancelCommandOptions:null,s_refeshPolicyCacheOptions:null},ctors:{init:function(){this.s_dmRuleKinds=System.Enum.getNames(Kusto.Data.DmSettingsType);this.s_ingestionQueueTypes=System.Linq.Enumerable.from(System.Enum.getNames(Kusto.Data.IngestionQueueType),System.String).select($asm.$.Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.f1).ToArray(System.String);this.s_lineWithDotBeginningRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.show\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showClusterCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.show\\s+cluster\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showClusterSettingsCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.show\\s+cluster\\s+settings\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showClusterSettingsVersionsCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.show\\s+cluster\\s+settings\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showClusterSettingsWithEncryptedSecretsCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.show\\s+cluster\\s+settings\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showPrincipalRolesCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.show\\s+principal\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.alter\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterClusterSettingsCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.alter\\s+cluster\\s+settings\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterClusterSettingsFromCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.alter\\s+cluster\\s+settings\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterMergeCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.alter-merge\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterObtainerQueuesCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.(alter|alter-merge|drop)\\s+obtainer\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_addOrAlterlterEventHubIngestionSourceCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.add-or-alter\\s+eventhub\\s+ingestion\\s+source\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_createCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.create\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_dropCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.drop\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_addCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.add\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_addOrAlterCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.add-or-alter\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_addDataObtainerCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.add\\s+data\\s+obtainer\\s+\\S+\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_addDataObtainerInitializeCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.add\\s+data\\s+obtainer\\s+\\S+\\s+\\S+\\s+initialize\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_addDataObtainerInitializeWithCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.add\\s+data\\s+obtainer\\s+\\S+\\s+\\S+\\s+initialize\\s+with\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_getCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.get\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_getIngestionQueuesCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.(get|show)\\s+ingestion\\s+queues\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_getIngestionQueuesTypeCommandRegex=new System.Text.RegularExpressions.Regex.ctor('^\\s*\\.(get|show)\\s+ingestion\\s+queues\\s+"(.*?)"\\s+$',Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_flushCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.flush\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_initializeCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.initialize\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_initializeClusterConfigCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.initialize\\s+cluster\\s+configuration\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_initializeClusterConfigEncryptionCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.initialize\\s+cluster\\s+configuration\\s+\\S+\\s+encryption\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_resetCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.reset\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.set\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showPurgesCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.show\\s+purges\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showPurgesFromCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.show\\s+purges\\s+from\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showPurgesToCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.show\\s+purges\\s+from\\s+\\S+\\s+to\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showPurgeTableCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.purge\\s+table\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showPurgeTableInDatabaseCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.purge\\s+table\\s+\\S+\\s+in\\s+database\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showPurgeRetryCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.retry\\s+purges\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showPurgesFromRetryCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.retry\\s+purges\\s+from\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showPurgesToRetryCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.retry\\s+purges\\s+from\\s+\\S+\\s+to\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_cancelPurgeCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.cancel\\s+purge\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_refeshPolicyCacheRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.refresh\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_adminOperationOptions=System.Array.init(["show","get","alter","alter-merge","add","add-or-alter","create","drop","flush","initialize","reset","set","purge table","retry purges","cancel purge","refresh"],System.String);this.s_showCommandOptions=System.Array.init(["version","diagnostics","cluster","query service uri","lagging queues","ingestion queues","ingestion source types","ingestion resources","ingestions status tables","Geneva ingestion sources settings","EventHub ingestion sources settings","EventGrid ingestion sources settings","principal","purges"],System.String);this.s_showClustersKeywordOptions=System.Array.init(["principals","settings","monitoring"],System.String);this.s_showClusterSettingsKeywordOptions=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_dmRuleKinds;this.s_showClusterSettingsVersionsKeywordOptions=System.Array.init(["version","versions"],System.String);this.s_showClusterSettingsWithEncryptedSecretsOption=System.Array.init(["with encrypted secrets"],System.String);this.s_showPrincipalRolesKeywordOptions=System.Array.init(["roles","@'principal' roles"],System.String);this.s_alterClusterSettingsFromKeywordOptions=System.Array.init(["from"],System.String);this.s_alterCommandOptions=System.Array.init(["cluster settings","aggregator storage accounts","obtainer","obtainers","Geneva ingestion source"],System.String);this.s_createCommandOptions=System.Array.init(["tempstorage","ingestions status table"],System.String);this.s_dropCommandOptions=System.Array.init(["cluster admins","cluster users","cluster ingestors","obtainer","aggregator storage accounts","obtainers","Geneva ingestion source"],System.String);this.s_addCommandOptions=System.Array.init(["ingestion interval for","data obtainer","cluster admins","cluster users"],System.String);this.s_addOrAlterCommandOptions=System.Array.init(["eventhub ingestion source"],System.String);this.s_addDataObtainerCommandOptions=System.Array.init(["initialize"],System.String);this.s_addDataObtainerInitializeCommandOptions=System.Array.init(["with"],System.String);this.s_addDataObtainerInitializeWithCommandOptions=System.Array.init(["encryption certificate"],System.String);this.s_getCommandOptions=System.Array.init(["lagging queues","ingestion queues","source containers","ingestion resources","ingestions status tables"],System.String);this.s_getIngestionQueuesCommandOptions=System.Linq.Enumerable.from(System.Array.init(["lengths","withsas"],System.String),System.String).concat(Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_ingestionQueueTypes).ToArray(System.String);this.s_getIngestionQueuesTypeCommandOptions=System.Array.init(["withsas","withencryptedkeys"],System.String);this.s_flushCommandOptions=System.Array.init(["configuration"],System.String);this.s_initializeCommandOptions=System.Array.init(["cluster configuration"],System.String);this.s_initializeClusterConfigurationCommandOptions=System.Array.init(["encryption"],System.String);this.s_initializeClusterConfigurationEncryptionCommandOptions=System.Array.init(["certificate"],System.String);this.s_resetCommandOptions=System.Array.init(["cluster configuration"],System.String);this.s_setCommandOptions=System.Array.init(["cluster as secondary"],System.String);this.s_alterObtainerQueuesOptions=System.Array.init([System.Enum.toString(Kusto.Data.IngestionQueueType,Kusto.Data.IngestionQueueType.InternalQueue),System.Enum.toString(Kusto.Data.IngestionQueueType,Kusto.Data.IngestionQueueType.InputQueue)],System.String);this.s_addOrAlterEventHubIngestionSourceOptions=System.Array.init(["settings with (Configuration='', EncryptionCertificateThumbprint='')"],System.String);this.s_showPurgeCommandOptions=System.Array.init(["from","<OperationId>","in database <DatabaseName>"],System.String);this.s_showPurgeFromCommandOptions=System.Array.init(["to","in database <DatabaseName>"],System.String);this.s_showPurgeToCommandOptions=System.Array.init(["in database <DatabaseName>"],System.String);this.s_showPurgeTableCommandOptions=System.Array.init(["in database"],System.String);this.s_showPurgeTableInDatabaseCommandOptions=System.Array.init(["allrecords","<| where"],System.String);this.s_showPurgeRetryCommandOptions=System.Array.init(["from","dryrun"],System.String);this.s_showPurgeFromRetryCommandOptions=System.Array.init(["to","dryrun"],System.String);this.s_showPurgeToRetryCommandOptions=System.Array.init(["dryrun"],System.String);this.s_showPurgeCancelCommandOptions=System.Array.init(["<OperationId>"],System.String);this.s_refeshPolicyCacheOptions=System.Array.init(["policy cache"],System.String)}}},ctors:{ctor:function(connectionContext){connectionContext===void 0&&(connectionContext=null);var $t;this.$initialize();Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.ctor.call(this);this.Locker;(this.CommandRules==null||this.GeneralRules==null)&&this.LoadRulesUnderLock();this.CommandToolTips==null&&this.LoadCommandToolTips();this.ContextConnection=($t=connectionContext,$t!=null?$t:"")}},methods:{LoadRulesUnderLock:function(){var $t,$t1;this.CommandRules=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseRule).ctor);this.GeneralRules=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseRule).ctor);this.QueryParametersRules=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseRule).ctor);this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldAdminCommandsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_lineWithDotBeginningRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_adminOperationOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldShowCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldShowClustersKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showClusterCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showClustersKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldShowClustersSettingsKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showClusterSettingsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showClusterSettingsKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldShowClustersSettingsVersionKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showClusterSettingsVersionsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showClusterSettingsVersionsKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldShowClustersSettingsVersionKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showClusterSettingsWithEncryptedSecretsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showClusterSettingsWithEncryptedSecretsOption),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldShowPrincipalRolesCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showPrincipalRolesCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showPrincipalRolesKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldAlterCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_alterCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_alterCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldAlterMergeCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_alterMergeCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_alterCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldAlterObtainerQueuesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_alterObtainerQueuesCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_alterObtainerQueuesOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldAddOrAlterEventHubIngestionSourceSettingsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_addOrAlterlterEventHubIngestionSourceCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_addOrAlterEventHubIngestionSourceOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldAlterClustersSettingsKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_alterClusterSettingsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showClusterSettingsKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldAlterClustersSettingsFromKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_alterClusterSettingsFromCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_alterClusterSettingsFromKeywordOptions),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=" @''",$t1),$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldCreateCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_createCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_createCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldDropCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_dropCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_dropCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldAddCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_addCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_addCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldAddOrAlterCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_addOrAlterCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_addOrAlterCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldAddDataObtainerKeyworkOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_addDataObtainerCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_addDataObtainerCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldAddDataObtainerInitializeKeyworkOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_addDataObtainerInitializeCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_addDataObtainerInitializeCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldAddDataObtainerInitializeWithKeyworkOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_addDataObtainerInitializeWithCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_addDataObtainerInitializeWithCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldGetCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_getCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_getCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldGetIngestionQueuesCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_getIngestionQueuesCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_getIngestionQueuesCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldGetIngestionQueuesTypeCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_getIngestionQueuesTypeCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_getIngestionQueuesTypeCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldFlushCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_flushCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_flushCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldInitializeCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_initializeCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_initializeCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldInitializeClusterConfigCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_initializeClusterConfigCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_initializeClusterConfigurationCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldInitializeClusterConfigEncryptionCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_initializeClusterConfigEncryptionCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_initializeClusterConfigurationEncryptionCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldResetCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_resetCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_resetCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldSetCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_setCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_setCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldPurgeShowCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showPurgesCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showPurgeCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldPurgeShowCommandFromKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showPurgesFromCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showPurgeFromCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldPurgeShowCommandToKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showPurgesToCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showPurgeToCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldPurgeTableCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showPurgeTableCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showPurgeTableCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldPurgeTableInDatabaseCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showPurgeTableInDatabaseCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showPurgeTableInDatabaseCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldPurgeRetryCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showPurgeRetryCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showPurgeRetryCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldPurgeShowCommandFromKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showPurgesFromRetryCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showPurgeFromCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldPurgeRetryCommandToKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showPurgesToRetryCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showPurgeToRetryCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldPurgeCancelCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_cancelPurgeCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showPurgeCancelCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.RefreshPolicyCacheCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_refeshPolicyCacheRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_refeshPolicyCacheOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t))},AnalyzeCommand$1:function(statement,cachedReference){var $t;return $t=new Kusto.Data.IntelliSense.AnalyzedCommand,$t.Command=statement,$t.Context=Kusto.Data.IntelliSense.KustoCommandContext.Empty,$t},AnalyzeCommand:function(command,appendingPart){var $t;return $t=new Kusto.Data.IntelliSense.AnalyzedCommand,$t.Command=(command.Command||"")+(appendingPart||""),$t.Context=Kusto.Data.IntelliSense.KustoCommandContext.Empty,$t},ResetState:function(){},LoadCommandToolTips:function(){this.CommandToolTips=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTip).ctor)},UpdateProviderAvailableEntities:function(command,commandContext){}}});Bridge.ns("Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider",$asm.$);Bridge.apply($asm.$.Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider,{f1:function(a){return'"'+(a||"")+'"'}});Bridge.define("Kusto.Data.IntelliSense.RegexIntelliSenseRule",{inherits:[Kusto.Data.IntelliSense.IntelliSenseRule],props:{MatchingRegex:null,Options:null,AdditionalOptions:null,RequiresFullCommand:{get:function(){return!1}},IsContextual:{get:function(){return!1}}},methods:{IsMatch:function(context,input){var isMatch=this.MatchingRegex.isMatch(input);return isMatch?!0:!1},GetOptions:function(context){var result=this.Options.Values;return Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(Kusto.Data.IntelliSense.CompletionOptionCollection,this.AdditionalOptions)?result:System.Linq.Enumerable.from(result,System.String).union(System.Linq.Enumerable.from(this.AdditionalOptions,Kusto.Data.IntelliSense.CompletionOptionCollection).selectMany($asm.$.Kusto.Data.IntelliSense.RegexIntelliSenseRule.f1))},GetCompletionOptions:function(context){var sortedCollections;return Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(Kusto.Data.IntelliSense.CompletionOptionCollection,this.AdditionalOptions)?this.Options.GetCompletionOptions():(sortedCollections=System.Linq.Enumerable.from(Bridge.fn.bind(this,$asm.$.Kusto.Data.IntelliSense.RegexIntelliSenseRule.f2)(new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CompletionOptionCollection).ctor)),Kusto.Data.IntelliSense.CompletionOptionCollection).concat(this.AdditionalOptions).orderByDescending($asm.$.Kusto.Data.IntelliSense.RegexIntelliSenseRule.f3),sortedCollections.selectMany($asm.$.Kusto.Data.IntelliSense.RegexIntelliSenseRule.f4))}}});Bridge.ns("Kusto.Data.IntelliSense.RegexIntelliSenseRule",$asm.$);Bridge.apply($asm.$.Kusto.Data.IntelliSense.RegexIntelliSenseRule,{f1:function(o){return o.Values},f2:function(_o1){return _o1.add(this.Options),_o1},f3:function(o){return o.Priority},f4:function(c){return c.GetCompletionOptions()}});Bridge.define("Kusto.UT.IntelliSenseRulesTests.RemoteSchemaResolverMock",{inherits:[Kusto.Data.IntelliSense.IKustoIntelliSenseSchemaResolver],$kind:"nested class",fields:{s_dbMap:null,s_clusterDatabasesMap:null},alias:["ResolveDatabaseNames","Kusto$Data$IntelliSense$IKustoIntelliSenseSchemaResolver$ResolveDatabaseNames","ResolveDatabaseSchema","Kusto$Data$IntelliSense$IKustoIntelliSenseSchemaResolver$ResolveDatabaseSchema","ResolveDatabaseSchema$1","Kusto$Data$IntelliSense$IKustoIntelliSenseSchemaResolver$ResolveDatabaseSchema$1"],ctors:{ctor:function(){var $t,dbSchema,context,key;this.$initialize();this.s_dbMap=new(System.Collections.Generic.Dictionary$2(System.String,Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity).ctor);this.s_clusterDatabasesMap=new(System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.String)).ctor);dbSchema=Kusto.UT.IntelliSenseRulesTests.GenerateKustoEntities(null,null);$t=Bridge.getEnumerator(System.Array.init([{Item1:"",Item2:"db1"},{Item1:"other",Item2:"db2"}],System.Tuple$2(System.String,System.String)));try{while($t.moveNext())context=$t.Current,key=(context.Item1||"")+":"+(context.Item2||""),this.s_dbMap.setItem(key,System.Linq.Enumerable.from(dbSchema.Databases,Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity).first()),this.s_clusterDatabasesMap.containsKey(context.Item1)||this.s_clusterDatabasesMap.setItem(context.Item1,new(System.Collections.Generic.List$1(System.String).ctor)),this.s_clusterDatabasesMap.getItem(context.Item1).add(context.Item2)}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}}},methods:{ResolveDatabaseNames:function(clusterUriOrAlias){var result={};return this.s_clusterDatabasesMap.tryGetValue(clusterUriOrAlias,result),result.v},ResolveDatabaseSchema:function(clusterUriOrAlias,databaseNameOrAlias){var key=(clusterUriOrAlias||"")+":"+(databaseNameOrAlias||"");return this.s_dbMap.containsKey(key)?this.s_dbMap.getItem(key):null},ResolveDatabaseSchema$1:function(clusterUriOrAlias,databaseNameOrAlias,tableName){var key=(clusterUriOrAlias||"")+":"+(databaseNameOrAlias||""),databases=System.Linq.Enumerable.from(this.s_dbMap,System.Collections.Generic.KeyValuePair$2(System.String,Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity)).where(function(db){return System.String.startsWith(db.key,(clusterUriOrAlias||"")+":")}),keyMatcher,dbMatcher,tableMatcher,result;return(Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(System.Collections.Generic.KeyValuePair$2(System.String,Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity),databases)&&(Kusto.Cloud.Platform.Utils.ExtendedRegex.IsWildCardPattern(databaseNameOrAlias)?(keyMatcher=Kusto.Cloud.Platform.Utils.ExtendedRegex.TryTransformWildCardPatternToRegex(key),dbMatcher=Kusto.Cloud.Platform.Utils.ExtendedRegex.TryTransformWildCardPatternToRegex(databaseNameOrAlias),dbMatcher!=null&&(databases=databases.where(function(db){return keyMatcher.isMatch(db.key)||dbMatcher.isMatch(db.value.Name)||dbMatcher.isMatch(db.value.Alias)}))):databases=databases.where(function(db){return System.String.equals(key,db.key,5)||System.String.equals(databaseNameOrAlias,db.value.Name,5)||System.String.equals(databaseNameOrAlias,db.value.Alias,5)})),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(System.Collections.Generic.KeyValuePair$2(System.String,Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity),databases))?null:(tableMatcher=null,System.String.isNullOrEmpty(tableName)||Kusto.Cloud.Platform.Utils.ExtendedRegex.IsWildCardPattern(tableName)&&(tableMatcher=Kusto.Cloud.Platform.Utils.ExtendedRegex.TryTransformWildCardPatternToRegex(tableName)),result=databases.select(function(db){var filteredDb=new Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity;return filteredDb.Name=db.value.Name,filteredDb.Alias=db.value.Alias,filteredDb.Tables=System.Linq.Enumerable.from(db.value.Tables,Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity).where(function(t){return System.String.isNullOrEmpty(tableName)||tableMatcher==null&&Bridge.referenceEquals(tableName,t.Name)||tableMatcher!=null&&tableMatcher.isMatch(t.Name)}),filteredDb.Functions=db.value.Functions,filteredDb.IsInitialized=db.value.IsInitialized,filteredDb}),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity,result))?null:result}}});Bridge.define("Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider",{inherits:[Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider],statics:{fields:{s_showCommandRegex:null,s_setCommandRegex:null,s_addCommandRegex:null,s_alterCommandRegex:null,s_alterMergeCommandRegex:null,s_deleteCommandRegex:null,s_createCommandRegex:null,s_dropCommandRegex:null,s_moveCommandRegex:null,s_attachCommandRegex:null,s_replaceCommandRegex:null,s_ingestionDuplicationCommandRegex:null,s_createOrAlterCommandRegex:null,s_purgeCommandRegex:null,s_purgeCleanupCommandRegex:null,s_runCommandRegex:null,s_suspendCommandRegex:null,s_createDatabaseCommandRegex:null,s_createDatabaseCommandEndingRegex:null,s_showDatabaseCommandRegex:null,s_showBasicAuthCommandRegex:null,s_showDatabasePrincipalsCommandRegex:null,s_showDatabasesCommandRegex:null,s_showClusterCommandRegex:null,s_showPrincipalCommandRegex:null,s_showFabricCommandRegex:null,s_suspendFabricNodeCommandRegex:null,s_suspendFabricNodeCommandWithDurationRegex:null,s_addClusterAdminsUsersViewersDatabaseCreatorsBlockedPrincipalsCommandRegex:null,s_setClusterAdminsUsersViewersDatabaseCreatorsBlockedPrincipalsCommandRegex:null,s_addClusterBlockedPrincipalsCommandRegex:null,s_setClusterAdminsNoneCommandRegex:null,s_setClusterUsersNoneCommandRegex:null,s_setClusterViewersNoneCommandRegex:null,s_setClusterDatabaseCreatorsNoneCommandRegex:null,s_dropClusterAdminsUsersViewersDatabaseCreatorsCommandRegex:null,s_showTableOptionsCommandRegex:null,s_setDatabaseCommandRegex:null,s_addDatabaseCommandRegex:null,s_dropDatabaseCommandRegex:null,s_anySimpleSyntaxActionTableCommandRegex:null,s_anySimpleSyntaxActionFunctionCommandRegex:null,s_dropExtentTagsCommandRegex:null,s_alterExtentTagsCommandRegex:null,s_attachExtentsCommandRegex:null,s_attachExtentsIntoTableCommandRegex:null,s_attachExtentsIntoSpecifiedTableCommandRegex:null,s_moveExtentsCommandRegex:null,s_moveSpecifiedExtentsCommandRegex:null,s_moveExtentsFromSpecifiedTableCommandRegex:null,s_moveExtentsFromTableCommandRegex:null,s_moveExtentsToTableCommandRegex:null,s_replaceExtentsCommandRegex:null,s_replaceExtentsInTableCommandRegex:null,s_showExtentsInSpecifiedEntityCommandRegex:null,s_showExtentsInSpecifiedEntityWithTagFiltersCommandRegex:null,s_dropExtentTagsFromTableCommandRegex:null,s_setDatabaseAdminsUsersViewersPrettyNameCommandRegex:null,s_addDatabaseAdminsUsersViewersCommandRegex:null,s_dropDatabasePropertyCommandRegex:null,s_setTableAdminsCommandRegex:null,s_addTableAdminsCommandRegex:null,s_createTableEntitiesCommandRegex:null,s_alterTableEntitiesCommandRegex:null,s_alterMergeTableEntitiesCommandRegex:null,s_dropTableEntitiesCommandRegex:null,s_deleteTableEntitiesCommandRegex:null,s_dropTableColumnsSyntaxCommandRegex:null,s_alterFunctionEntitiesCommandRegex:null,s_setDatabaseAdminsNoneCommandRegex:null,s_setDatabaseUsersNoneCommandRegex:null,s_setDatabaseViewersNoneCommandRegex:null,s_setDatabaseIngestorsNoneCommandRegex:null,s_setTableAdminsNoneCommandRegex:null,s_setTableIngestorsNoneCommandRegex:null,s_appendTableCommandRegex:null,s_setOrAppendReplaceTableCommandRegex:null,s_clusterPolicyRegex:null,s_alterDatabaseRegex:null,s_databasePolicyRegex:null,s_tablePolicyRegex:null,s_columnPolicyRegex:null,s_policyCommandOnDatabase:null,s_policyCommand:null,s_alterMultiplePoliciesRegex:null,s_deleteMultiplePoliciesRegex:null,s_exportCommandRegex:null,s_exportCommandWithModifiersToRegex:null,s_exportCommandNoModifiersToRegex:null,s_duplicateIngestionIntoRegex:null,s_purgeWhatIfRegex:null,s_purgeWithPropertiesRegex:null,s_purgeTableRegex:null,s_purgeSpecifiedTableRegex:null,s_alterMergePolicyRetentionRegex:null,s_alterMergePolicyRetentionSoftDeleteDefinedRegex:null,s_alterMergePolicyRetentionOptionsRegex:null,s_createRowstoreCommandRegex:null,s_createRowstoreCommandEndingRegex:null,s_adminOperationOptions:null,s_showCommandOptions:null,s_clusterShowKeywordOptions:null,s_tableShowKeywordOptions:null,s_setAddCommandsOptions:null,s_dropCommandsOptions:null,s_runCommandOptions:null,s_suspendCommandOptions:null,s_attachCommandsOptions:null,s_moveCommandsOptions:null,s_replaceCommandsOptions:null,s_dropExtentTagsCommandsOptions:null,s_attachExtentsCommandsOptions:null,s_attachExtentsIntoSpecifedTableCommandsOptions:null,s_moveExtentsCommandsOptions:null,s_moveSpecifiedExtentsCommandsOptions:null,s_moveExtentsFromTableCommandsOptions:null,s_showExtentsByEntityCommandsOptions:null,s_showExtentsByEntityWithTagFiltersCommandsOptions:null,s_replaceExtentsCommandsOptions:null,s_alterCommandOptions:null,s_alterMergeAndDeleteCommandOptions:null,s_createCommandOptions:null,s_setUsersAdminsPrettyNameKeywordOptions:null,s_addSetDropUsersAdminsKeywordOptions:null,s_dropDatabaseKeywordOptions:null,s_setUsersAdminsViewersDatabaseCreatorsKeywordOptions:null,s_addDropUsersAdminsViewersDbCreatorsBlockedKeywordOptions:null,s_addClusterBlockedPrincipalsApplicationKeywordOptions:null,s_showBasicAuthUsersKeywordOptions:null,s_AddSetAdminsKeywordOptions:null,s_createTableEntitiesKeywordOptions:null,s_alterTableEntitiesKeywordOptions:null,s_alterMergeTableEntitiesKeywordOptions:null,s_dropTableEntitiesKeywordOptions:null,s_deleteTableEntitiesKeywordOptions:null,s_alterFunctionEntitiesKeywordOptions:null,s_DropColumnsSyntaxKeywordOptions:null,s_setNoneKeywordOptions:null,s_clusterPoliciesOptions:null,s_databasePoliciesOptions:null,s_tablePoliciesOptions:null,s_columnPoliciesOptions:null,s_multiplePoliciesOptions:null,s_multipleDeletionPoliciesOptions:null,s_databasePersistencyOptions:null,s_rowstorePersistencyOptions:null,s_ifNotExistsOptions:null,s_policyKeywordOptions:null,s_principalsPolicySchemaAndExtentsKeywordOptions:null,s_databasesShowKeywordOptions:null,s_exportFileFormatOptions:null,s_exportCommandOptions:null,s_alterDatabaseCommandOptions:null,s_duplicateIngestionCommandsOptions:null,s_purgeWhatIfCommandOptions:null,s_purgeTableCommandsOptions:null,s_purgeCleanupCommandsOptions:null,s_purgeCommandsOptions:null,s_purgeWithPropertiesCommandsOptions:null,s_showPrincipalKeywordOptions:null,s_showFabricKeywordOptions:null,s_alterMergePolicyRetentionOptions:null,s_alterMergePolicyRetentionSoftDeleteDefinedOptions:null,s_timeSpanPolicyOptions:null,s_createOrAlterOptions:null,s_suspendFabricNodeOptions:null,s_suspendFabricNodeOptionalOptions:null},ctors:{init:function(){this.s_showCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.show\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.set\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_addCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.add\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.alter\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterMergeCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.alter-merge\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_deleteCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.delete\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_createCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.create\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_dropCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.drop\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_moveCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.move\\s+(async\\s+)?$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_attachCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.attach\\s+(async\\s+)?$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_replaceCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.replace\\s+(async\\s+)?$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_ingestionDuplicationCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.dup-next-(failed-)?ingest\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_createOrAlterCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.create-or-alter\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_purgeCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.purge\\s+(async\\s+)?$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_purgeCleanupCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.purge-cleanup\\s+(async\\s+)?$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_runCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.run\\s+(async\\s+)?$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_suspendCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.suspend\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_createDatabaseCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.create\\s+database\\s+\\w+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_createDatabaseCommandEndingRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.create\\s+database\\s+\\w+\\s+(persist\\s+\\(.+\\)|volatile)\\s$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showDatabaseCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.show\\s+database\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showBasicAuthCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.show\\s+basicauth\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showDatabasePrincipalsCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.show\\s+database\\s+(\\w+|(\\[.+?\\]))\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showDatabasesCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.show\\s+databases\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showClusterCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.show\\s+cluster\\s$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showPrincipalCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.show\\s+principal\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showFabricCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.show\\s+fabric\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_suspendFabricNodeCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.suspend\\s+fabric\\s+node\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_suspendFabricNodeCommandWithDurationRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.suspend\\s+fabric\\s+node\\s+\\S+\\s+for\\s+\\d+\\w+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_addClusterAdminsUsersViewersDatabaseCreatorsBlockedPrincipalsCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.add\\s+cluster\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setClusterAdminsUsersViewersDatabaseCreatorsBlockedPrincipalsCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.set\\s+cluster\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_addClusterBlockedPrincipalsCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.add\\s+cluster\\s+blockedprincipals\\s+('(.*?)'|\"(.*?)\")\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setClusterAdminsNoneCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.set\\s+cluster\\s+admins\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setClusterUsersNoneCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.set\\s+cluster\\s+users\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setClusterViewersNoneCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.set\\s+cluster\\s+viewers\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setClusterDatabaseCreatorsNoneCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.set\\s+cluster\\s+databasecreators\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_dropClusterAdminsUsersViewersDatabaseCreatorsCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.drop\\s+cluster\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showTableOptionsCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.show\\s+table\\s+\\w+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setDatabaseCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.set\\s+database\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_addDatabaseCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.add\\s+database\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_dropDatabaseCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.drop\\s+database\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_anySimpleSyntaxActionTableCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.(show|create|add|set|alter|alter-merge|drop|delete)\\s+table\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_anySimpleSyntaxActionFunctionCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.(show|alter|drop)\\s+function\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_dropExtentTagsCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.drop\\s+extent\\s+tags\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterExtentTagsCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.alter\\s+extent\\s+tags\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_attachExtentsCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.attach\\s+(async\\s+)?extents\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_attachExtentsIntoTableCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.attach\\s+(async\\s+)?extents\\s+into\\s+table\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_attachExtentsIntoSpecifiedTableCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.attach\\s+(async\\s+)?extents\\s+into\\s+table\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_moveExtentsCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.move\\s+(async\\s+)?extents\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_moveSpecifiedExtentsCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.move\\s+(async\\s+)?extents\\s+([A-Za-z0-9(),.-]+)\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_moveExtentsFromSpecifiedTableCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.move\\s+(async\\s+)?extents\\s+([A-Za-z0-9(),.-]+)\\s+from\\s+table\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_moveExtentsFromTableCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.move\\s+(async\\s+)?extents\\s+([A-Za-z0-9(),.-]+)\\s+from\\s+table\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_moveExtentsToTableCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.move\\s+(async\\s+)?extents\\s+([A-Za-z0-9(),.-]+)\\s+from\\s+table\\s+\\S+\\s+to\\s+table\\s+$|^\\s*\\.move\\s+(async\\s+)?extents\\s+to\\s+table\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_replaceExtentsCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.replace\\s+(async\\s+)?extents\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_replaceExtentsInTableCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.replace\\s+(async\\s+)?extents\\s+in\\s+table\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showExtentsInSpecifiedEntityCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.show\\s+(database|table)\\s+\\S+\\s+extents\\s+(hot\\s+)?$|^\\s*\\.show\\s+cluster\\s+extents\\s+(hot\\s+)?$|^\\s*\\.show\\s+tables\\s+\\([^)]+\\)\\s+extents\\s+(hot\\s+)?$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showExtentsInSpecifiedEntityWithTagFiltersCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.show\\s+((database\\s+\\S+)|(table\\s+\\S+)|(tables\\s+\\([^)]+\\))|(cluster))\\s+extents\\s+(hot\\s+)?where\\s+tags\\s+((has|!has|contains|!contains)\\s+\\S+\\s+and\\s+tags\\s+)*$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_dropExtentTagsFromTableCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.drop\\s+extent\\s+tags\\s+from\\s+table\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setDatabaseAdminsUsersViewersPrettyNameCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.set\\s+database\\s+\\w+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_addDatabaseAdminsUsersViewersCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.add\\s+database\\s+\\w+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_dropDatabasePropertyCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.drop\\s+database\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setTableAdminsCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.set\\s+table\\s+\\w+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_addTableAdminsCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.add\\s+table\\s+\\w+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_createTableEntitiesCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.create\\s+table\\s+\\w+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterTableEntitiesCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.alter\\s+table\\s+\\w+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterMergeTableEntitiesCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.alter-merge\\s+table\\s+\\w+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_dropTableEntitiesCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.drop\\s+table\\s+\\w+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_deleteTableEntitiesCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.delete\\s+table\\s+\\w+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_dropTableColumnsSyntaxCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.drop\\s+table\\s+\\w+\\s+columns\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterFunctionEntitiesCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.alter\\s+function\\s+\\w+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setDatabaseAdminsNoneCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.set\\s+database\\s+\\w+\\s+admins\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setDatabaseUsersNoneCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.set\\s+database\\s+\\w+\\s+users\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setDatabaseViewersNoneCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.set\\s+database\\s+\\w+\\s+viewers\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setDatabaseIngestorsNoneCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.set\\s+database\\s+\\w+\\s+ingestors\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setTableAdminsNoneCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.set\\s+table\\s+\\w+\\s+admins\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setTableIngestorsNoneCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.set\\s+table\\s+\\w+\\s+ingestors\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_appendTableCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.append\\s+(async\\s+)?$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setOrAppendReplaceTableCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.(set-or-append|set-or-replace)\\s+(async\\s+)?$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_clusterPolicyRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.(show|alter|alter-merge|delete)\\s+cluster\\s+policy\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterDatabaseRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.alter\\s+database\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_databasePolicyRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.(show|alter|alter-merge|delete)\\s+database\\s+\\S+\\s+policy\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_tablePolicyRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.(show|alter|alter-merge|delete)\\s+table\\s+\\S+\\s+policy\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_columnPolicyRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.(show|alter|alter-merge|delete)\\s+column\\s+\\S+\\s+policy\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_policyCommandOnDatabase=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.(show|alter|alter-merge|delete)\\s+database\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_policyCommand=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.(alter|alter-merge|delete)\\s+column\\s+\\S+\\s+$|^\\s*\\.(alter|alter-merge|delete)\\s+cluster\\s+$|^\\s*\\.(alter-merge|delete)\\s+database\\s+\\S+\\s+$|^\\s*\\.show\\s+column\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterMultiplePoliciesRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.alter\\s+policies\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_deleteMultiplePoliciesRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.delete\\s+policies\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_exportCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.export\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_exportCommandWithModifiersToRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.export\\s+(async|async compressed|compressed)\\s+to\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_exportCommandNoModifiersToRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.export\\s+to\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_duplicateIngestionIntoRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.dup-next-(failed-)?ingest\\s+into\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_purgeWhatIfRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.purge\\s+(async\\s+)?whatif\\s*=\\s*$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_purgeWithPropertiesRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.purge\\s+(async\\s+)?whatif\\s*=\\s*\\S+\\s+(maxRecords\\s*=\\s*\\d+\\s+)?$|^\\s*\\.purge\\s+(async\\s+)?maxRecords\\s*=\\s*\\d+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_purgeTableRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.purge\\s+(async\\s+)?(whatif\\s*=\\s*\\S+\\s+)?(maxRecords\\s*=\\s*\\d+\\s+)?table\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_purgeSpecifiedTableRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.purge\\s+(async\\s+)?(whatif\\s*=\\s*\\S+\\s+)?(maxRecords\\s*=\\s*\\d+\\s+)?table\\s+\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterMergePolicyRetentionRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.(alter-merge)\\s+(database|table)\\s+\\S+\\s+policy\\s+retention\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterMergePolicyRetentionSoftDeleteDefinedRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.(alter-merge)\\s+(database|table)\\s+\\S+\\s+policy\\s+retention\\s+softdelete\\s*=\\s*\\S+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterMergePolicyRetentionOptionsRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.(alter-merge)\\s+(database|table)\\s+\\S+\\s+policy\\s+retention\\s+((softdelete\\s*=\\s*\\S+\\s+harddelete)|((soft|hard)delete))\\s*=\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_createRowstoreCommandRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.create\\s+rowstore\\s+\\w+\\s+$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_createRowstoreCommandEndingRegex=new System.Text.RegularExpressions.Regex.ctor("^\\s*\\.create\\s+rowstore\\s+\\w+\\s+(writeaheadlog\\s+\\(.+\\)|volatile)\\s$",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_adminOperationOptions=System.Array.init(["show","alter","alter-merge","append","attach","suspend","create","delete","detach","drop","rename","set-or-append","set-or-replace","set","export","move","replace","create-or-alter","dup-next-ingest","dup-next-failed-ingest","seal table","purge","purge-cleanup","run"],System.String);this.s_showCommandOptions=System.Linq.Enumerable.from(System.Array.init(["basicauth","cache","capacity","cluster","column","database","databases","diagnostics","extentcontainers","fabric","function","functions","ingestion failures","journal","memory","operations","schema","table","tables","version","queries","commands","commands-and-queries","principal","rowstores","rowstore","rowstore transactions","rowstore seals","external tables","external table","continuous-exports","continuous-export","stored_query_results"],System.String),System.String).orderBy($asm.$.Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.f1).ToArray(System.String);this.s_clusterShowKeywordOptions=System.Array.init(["principals","policy","extents","monitoring","journal","blockedprincipals","databases"," "],System.String);this.s_tableShowKeywordOptions=System.Array.init(["principals","policy","extents","ingestion csv mappings","ingestion json mappings","ingestion avro mappings","ingestion parquet mappings","ingestion orc mappings","rowstores","rowstore_references"," "],System.String);this.s_setAddCommandsOptions=System.Array.init(["database","cluster","table","async"],System.String);this.s_dropCommandsOptions=System.Array.init(["database","cluster","table","tables","function","column","extent tags","extent","extents","rowstore","external table","continuous-export"],System.String);this.s_runCommandOptions=System.Array.init(["continuous-export"],System.String);this.s_suspendCommandOptions=System.Array.init(["fabric node"],System.String);this.s_attachCommandsOptions=System.Array.init(["extents"],System.String);this.s_moveCommandsOptions=System.Array.init(["extents"],System.String);this.s_replaceCommandsOptions=System.Array.init(["extents"],System.String);this.s_dropExtentTagsCommandsOptions=System.Array.init(["from table"],System.String);this.s_attachExtentsCommandsOptions=System.Array.init(["into table","by metadata"],System.String);this.s_attachExtentsIntoSpecifedTableCommandsOptions=System.Array.init(["by metadata"],System.String);this.s_moveExtentsCommandsOptions=System.Array.init(["all","(GUID,...,GUID)","to table"],System.String);this.s_moveSpecifiedExtentsCommandsOptions=System.Array.init(["from table"],System.String);this.s_moveExtentsFromTableCommandsOptions=System.Array.init(["to table"],System.String);this.s_showExtentsByEntityCommandsOptions=System.Array.init(["hot","where tags"],System.String);this.s_showExtentsByEntityWithTagFiltersCommandsOptions=System.Array.init(["has","!has","contains","!contains"],System.String);this.s_replaceExtentsCommandsOptions=System.Array.init(["in table"],System.String);this.s_alterCommandOptions=System.Array.init(["cluster","column","database","function","table","policies","extent tags","external table"],System.String);this.s_alterMergeAndDeleteCommandOptions=System.Array.init(["cluster","column","database","table"],System.String);this.s_createCommandOptions=System.Array.init(["database","function","table","rowstore","external table"],System.String);this.s_setUsersAdminsPrettyNameKeywordOptions=System.Array.init(["users","admins","viewers","ingestors","monitors","prettyname"],System.String);this.s_addSetDropUsersAdminsKeywordOptions=System.Array.init(["users","admins","viewers","ingestors","monitors"],System.String);this.s_dropDatabaseKeywordOptions=System.Array.init(["users","admins","viewers","ingestors","monitors","prettyname"],System.String);this.s_setUsersAdminsViewersDatabaseCreatorsKeywordOptions=System.Array.init(["users","admins","viewers","databasecreators"],System.String);this.s_addDropUsersAdminsViewersDbCreatorsBlockedKeywordOptions=System.Array.init(["users","admins","viewers","databasecreators","blockedprincipals"],System.String);this.s_addClusterBlockedPrincipalsApplicationKeywordOptions=System.Array.init(["application","user","period","reason"],System.String);this.s_showBasicAuthUsersKeywordOptions=System.Array.init(["users"],System.String);this.s_AddSetAdminsKeywordOptions=System.Array.init(["admins","ingestors"],System.String);this.s_createTableEntitiesKeywordOptions=System.Array.init(["ingestion csv mapping","ingestion json mapping","ingestion avro mapping","ingestion parquet mapping","ingestion orc mapping"],System.String);this.s_alterTableEntitiesKeywordOptions=System.Array.init(["ingestion csv mapping","ingestion json mapping","ingestion avro mapping","ingestion parquet mapping","ingestion orc mapping","docstring","folder","column-docstrings","policy"],System.String);this.s_alterMergeTableEntitiesKeywordOptions=System.Array.init(["column-docstrings","policy"],System.String);this.s_dropTableEntitiesKeywordOptions=System.Array.init(["admins","ingestors","columns","ingestion csv mapping","ingestion json mapping","ingestion avro mapping","ingestion parquet mapping","ingestion orc mapping"],System.String);this.s_deleteTableEntitiesKeywordOptions=System.Array.init(["policy"],System.String);this.s_alterFunctionEntitiesKeywordOptions=System.Array.init(["docstring","folder"],System.String);this.s_DropColumnsSyntaxKeywordOptions=System.Array.init(["(COLUMN1,COLUMN2)"],System.String);this.s_setNoneKeywordOptions=System.Array.init(["none"],System.String);this.s_clusterPoliciesOptions=System.Array.init(["caching","querythrottling","capacity","rowstore","callout","querylimit","query_weak_consistency","streamingingestion"],System.String);this.s_databasePoliciesOptions=System.Array.init(["caching","encoding","merge","retention","sharding","streamingingestion","ingestionbatching"],System.String);this.s_tablePoliciesOptions=System.Array.init(["caching","encoding","merge","ingestiontime","retention","roworder","update","sharding","streamingingestion","restricted_view_access","ingestionbatching","partitioning"],System.String);this.s_columnPoliciesOptions=System.Array.init(["caching","encoding"],System.String);this.s_multiplePoliciesOptions=System.Array.init(["of retention","of encoding"],System.String);this.s_multipleDeletionPoliciesOptions=System.Array.init(["of retention"],System.String);this.s_databasePersistencyOptions=System.Array.init(["persist","volatile"],System.String);this.s_rowstorePersistencyOptions=System.Array.init(["writeaheadlog","volatile"],System.String);this.s_ifNotExistsOptions=System.Array.init(["ifnotexists"," "],System.String);this.s_policyKeywordOptions=System.Array.init(["policy"],System.String);this.s_principalsPolicySchemaAndExtentsKeywordOptions=System.Array.init(["principals","policy","schema","extents","journal","purge operations"," "],System.String);this.s_databasesShowKeywordOptions=System.Array.init(["identity","policies","datastats"," "],System.String);this.s_exportFileFormatOptions=System.Array.init(["csv","tsv","json","sql","parquet"],System.String);this.s_exportCommandOptions=System.Array.init(["async compressed","async","compressed"," "],System.String);this.s_alterDatabaseCommandOptions=System.Array.init(["policy","persist metadata","prettyname"],System.String);this.s_duplicateIngestionCommandsOptions=System.Array.init(["into"],System.String);this.s_purgeWhatIfCommandOptions=System.Array.init(["info","stats","purge","retain"],System.String);this.s_purgeTableCommandsOptions=System.Array.init(["records"],System.String);this.s_purgeCleanupCommandsOptions=System.Array.init(["until="],System.String);this.s_purgeCommandsOptions=System.Array.init(["whatif =","maxRecords =","table"],System.String);this.s_purgeWithPropertiesCommandsOptions=System.Array.init(["table"],System.String);this.s_showPrincipalKeywordOptions=System.Array.init(["access","roles","@'principal' roles"],System.String);this.s_showFabricKeywordOptions=System.Array.init(["clocks","locks","cache","nodes","services"],System.String);this.s_alterMergePolicyRetentionOptions=System.Array.init(["softdelete","harddelete"],System.String);this.s_alterMergePolicyRetentionSoftDeleteDefinedOptions=System.Array.init(["harddelete"],System.String);this.s_timeSpanPolicyOptions=System.Array.init(["1d","7d","30d","90d","365d"],System.String);this.s_createOrAlterOptions=System.Array.init(["function","continuous-export"],System.String);this.s_suspendFabricNodeOptions=System.Array.init(["for"],System.String);this.s_suspendFabricNodeOptionalOptions=System.Array.init(["reason"],System.String)}}},fields:{s_afterCreateDatabaseApplyPolicies:null,s_afterAlterDatabaseApplyPolicies:null,s_afterCreateRowStoreApplyPolicies:null,s_afterExportFile:null},ctors:{init:function(){this.s_afterCreateDatabaseApplyPolicies=$asm.$.Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.f2(new(System.Collections.Generic.Dictionary$2(System.String,Kusto.Data.IntelliSense.ApplyPolicy).ctor));this.s_afterAlterDatabaseApplyPolicies=$asm.$.Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.f3(new(System.Collections.Generic.Dictionary$2(System.String,Kusto.Data.IntelliSense.ApplyPolicy).ctor));this.s_afterCreateRowStoreApplyPolicies=$asm.$.Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.f4(new(System.Collections.Generic.Dictionary$2(System.String,Kusto.Data.IntelliSense.ApplyPolicy).ctor));this.s_afterExportFile=$asm.$.Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.f5(new(System.Collections.Generic.Dictionary$2(System.String,Kusto.Data.IntelliSense.ApplyPolicy).ctor))},$ctor1:function(cluster,schema,queryParameters,availableClusters,schemaResolver,allowQueryParameters,allowClientDirectives){queryParameters===void 0&&(queryParameters=null);availableClusters===void 0&&(availableClusters=null);schemaResolver===void 0&&(schemaResolver=null);allowQueryParameters===void 0&&(allowQueryParameters=!1);allowClientDirectives===void 0&&(allowClientDirectives=!1);this.$initialize();Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.$ctor1.call(this,cluster,schema,queryParameters,availableClusters,schemaResolver,allowQueryParameters,allowClientDirectives);this.LoadRules$1()},ctor:function(other){this.$initialize();Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ctor.call(this,other);this.LoadRules$1()}},methods:{Clone$1:function(){return new Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.ctor(this)},LoadRules$1:function(){Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(System.String,this.TableNames)&&this.AddTableControlCommands();Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(System.String,this.FunctionNames)&&this.AddFunctionControlCommands();this.AddControlCommandKeywords();this.AddPolicyControlCommands();this.AddMultiplePoliciesControlCommands();this.DeleteMultiplePoliciesControlCommands();this.AddPermissionsControlCommands();this.AddDatabaseCreateCommands();this.AddExportControlCommand();this.AddSuspendNodeControlCommand();Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity,this.Databases)&&this.AddDatabaseControlCommands(this.Databases);this.AddDatabasesShowControlCommands();this.AddAddDropControlCommandKeywords();this.AddRowStoreControlCommands()},AddDatabaseCreateCommands:function(){var $t;this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDatabaseCreatePersistencyOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_createDatabaseCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_databasePersistencyOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t.AfterApplyPolicies=this.s_afterCreateDatabaseApplyPolicies,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldCreateIfNotExistsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_createDatabaseCommandEndingRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_ifNotExistsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t))},AddControlCommandKeywords:function(){var $t;this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAdminCommandsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_lineWithDotBeginningRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Command,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_adminOperationOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_showCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_showCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowPrincipalCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_showPrincipalCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_showPrincipalKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowFabricOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_showFabricCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_showFabricKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t))},AddExportControlCommand:function(){var $t,$t1;this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldExportCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_exportCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_exportCommandOptions),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=" to ",$t1),$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldExportCommandWithModifiersAndOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_exportCommandWithModifiersToRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_exportFileFormatOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t.AfterApplyPolicies=this.s_afterExportFile,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldExportCommandNoModifiersAndOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_exportCommandNoModifiersToRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_exportFileFormatOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t.AfterApplyPolicies=this.s_afterExportFile,$t))},AddSuspendNodeControlCommand:function(){var $t;this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSuspendNodeControlCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_suspendFabricNodeCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_suspendFabricNodeOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSuspendNodeControlCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_suspendFabricNodeCommandWithDurationRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_suspendFabricNodeOptionalOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t))},AddPermissionsControlCommands:function(){var $t;this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowBasicAuthOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_showBasicAuthCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_showBasicAuthUsersKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowClusterPrincipalsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_showClusterCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_clusterShowKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetClusterAdminsUsersViewersDatabaseCreatorsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setClusterAdminsUsersViewersDatabaseCreatorsBlockedPrincipalsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setUsersAdminsViewersDatabaseCreatorsKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAddClusterAdminsUsersViewersDatabaseCreatorsBlockedPrincipalsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_addClusterAdminsUsersViewersDatabaseCreatorsBlockedPrincipalsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_addDropUsersAdminsViewersDbCreatorsBlockedKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDropClusterAdminsUsersViewersDatabaseCreatorsBlockedPrincipalsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_dropClusterAdminsUsersViewersDatabaseCreatorsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_addDropUsersAdminsViewersDbCreatorsBlockedKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAddClusterBlockedPrincipalsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_addClusterBlockedPrincipalsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_addClusterBlockedPrincipalsApplicationKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetClusterUsersNoneOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setClusterUsersNoneCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setNoneKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetClusterAdminsNoneOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setClusterAdminsNoneCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setNoneKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetClusterViewersNoneOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setClusterViewersNoneCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setNoneKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetClusterDatabaseCreatorsNoneOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setClusterDatabaseCreatorsNoneCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setNoneKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t))},AddPolicyControlCommands:function(){var $t;this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPoliciesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_policyCommand,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_policyKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldClusterPoliciesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_clusterPolicyRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Policy,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_clusterPoliciesOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDatabasePoliciesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_databasePolicyRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Policy,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_databasePoliciesOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTablePoliciesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_tablePolicyRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Policy,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_tablePoliciesOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldColumnPoliciesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_columnPolicyRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Policy,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_columnPoliciesOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t))},AddMultiplePoliciesControlCommands:function(){var $t;this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldMultiplePoliciesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterMultiplePoliciesRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Policy,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_multiplePoliciesOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t))},DeleteMultiplePoliciesControlCommands:function(){var $t;this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDeleteMultiplePoliciesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_deleteMultiplePoliciesRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Policy,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_multipleDeletionPoliciesOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t))},AddDatabasesShowControlCommands:function(){var $t;this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowDatabasesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_showDatabasesCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Policy,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_databasesShowKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t))},AddDatabaseControlCommands:function(databases){var $t,orderedDatabases;this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowDatabasePrincipalsPoliciesAndSchemaOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_showDatabasePrincipalsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_principalsPolicySchemaAndExtentsKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetDatabaseAdminsUsersViewersPrettyNameOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setDatabaseAdminsUsersViewersPrettyNameCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setUsersAdminsPrettyNameKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAddDatabaseAdminsUsersViewersOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_addDatabaseAdminsUsersViewersCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_addSetDropUsersAdminsKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDropDatabaseOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_dropDatabasePropertyCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_dropDatabaseKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetDatabaseUsersNoneOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setDatabaseUsersNoneCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setNoneKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetDatabaseAdminsNoneOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setDatabaseAdminsNoneCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setNoneKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetDatabaseViewersNoneOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setDatabaseViewersNoneCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setNoneKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetDatabaseIngestorsNoneOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setDatabaseIngestorsNoneCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setNoneKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));orderedDatabases=System.Linq.Enumerable.from(databases,Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity).select($asm.$.Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.f6).orderBy($asm.$.Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.f7).ToArray(System.String);this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDatabaseNames,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_showDatabaseCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Database,orderedDatabases),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDatabaseNames,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setDatabaseCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Database,orderedDatabases),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDatabaseNames,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_addDatabaseCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Database,orderedDatabases),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDatabaseNames,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_dropDatabaseCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Database,orderedDatabases),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDatabaseNames,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_policyCommandOnDatabase,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Database,orderedDatabases),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterDatabaseCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterDatabaseRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterDatabaseCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t.AfterApplyPolicies=this.s_afterAlterDatabaseApplyPolicies,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterMergePolicyRetentionOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterMergePolicyRetentionRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterMergePolicyRetentionOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendAssignmentPolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterMergePolicyRetentionSoftDeleteDefinedOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterMergePolicyRetentionSoftDeleteDefinedRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterMergePolicyRetentionSoftDeleteDefinedOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendAssignmentPolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterTimeSpanPolicyOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterMergePolicyRetentionOptionsRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_timeSpanPolicyOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t))},AddTableControlCommands:function(){var $t,$t1;this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_appendTableCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Table,this.TableNames),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setOrAppendReplaceTableCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Table,this.TableNames),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowTableEntitiesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_showTableOptionsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_tableShowKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_anySimpleSyntaxActionTableCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Table,this.TableNames),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDropExtentTagsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_dropExtentTagsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_dropExtentTagsCommandsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_dropExtentTagsFromTableCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Table,this.TableNames),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=" (@'')",$t1.OffsetPosition=-2,$t1),$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterExtentTagsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterExtentTagsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Command,System.Array.init(["(@'') <| "],System.String)),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text="",$t1.OffsetPosition=-6,$t1),$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAttachExtentsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_attachExtentsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_attachExtentsCommandsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_attachExtentsIntoTableCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Table,this.TableNames),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAttachExtentsIntoTableOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_attachExtentsIntoSpecifiedTableCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_attachExtentsIntoSpecifedTableCommandsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldMoveExtentsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_moveExtentsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_moveExtentsCommandsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldMoveSpecifiedExtentsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_moveSpecifiedExtentsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_moveSpecifiedExtentsCommandsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_moveExtentsFromTableCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Table,this.TableNames),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldMoveExtentsToTableOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_moveExtentsFromSpecifiedTableCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_moveExtentsFromTableCommandsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_moveExtentsToTableCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Table,this.TableNames),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowExtentsByEntityOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_showExtentsInSpecifiedEntityCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_showExtentsByEntityCommandsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowExtentsByEntityWithTagsFiltersOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_showExtentsInSpecifiedEntityWithTagFiltersCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_showExtentsByEntityWithTagFiltersCommandsOptions),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=" @''",$t1.OffsetPosition=-1,$t1),$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldReplaceExtentsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_replaceExtentsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_replaceExtentsCommandsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_replaceExtentsInTableCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Table,this.TableNames),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetTableAdminsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setTableAdminsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_AddSetAdminsKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAddTableAdminsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_addTableAdminsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_AddSetAdminsKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldCreateTableEntitiesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_createTableEntitiesCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_createTableEntitiesKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterTableEntitiesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterTableEntitiesCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterTableEntitiesKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterTableEntitiesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterMergeTableEntitiesCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterMergeTableEntitiesKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDropTableEntitiesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_dropTableEntitiesCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_dropTableEntitiesKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDeleteTableEntitiesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_deleteTableEntitiesCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_deleteTableEntitiesKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDropTableColumnsSyntaxOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_dropTableColumnsSyntaxCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_DropColumnsSyntaxKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetTableAdminsNoneOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setTableAdminsNoneCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setNoneKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetTableIngestorsNoneOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setTableIngestorsNoneCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setNoneKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_duplicateIngestionIntoRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Table,this.TableNames),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=" to h@''",$t1.OffsetPosition=-1,$t1),$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeWhatIfOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_purgeWhatIfRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_purgeWhatIfCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeWithPropertiesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_purgeWithPropertiesRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_purgeWithPropertiesCommandsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_purgeTableRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Table,this.TableNames),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeTableOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_purgeSpecifiedTableRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_purgeTableCommandsOptions),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=" <|",$t1),$t))},AddRowStoreControlCommands:function(){var $t;this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldRowStoreCreatePersistencyOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_createRowstoreCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_rowstorePersistencyOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t.AfterApplyPolicies=this.s_afterCreateRowStoreApplyPolicies,$t))},AddFunctionControlCommands:function(){var $t;this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldFunctionNamesForAdminOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_anySimpleSyntaxActionFunctionCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.ExpressionFunction,this.FunctionNames),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterFunctionEntitiesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterFunctionEntitiesCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterFunctionEntitiesKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t))},AddAddDropControlCommandKeywords:function(){var $t,$t1;this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setAddCommandsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAddCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_addCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setAddCommandsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDropCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_dropCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_dropCommandsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldMoveCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_moveCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_moveCommandsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAttachCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_attachCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_attachCommandsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldReplaceCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_replaceCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_replaceCommandsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterMergeCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterMergeCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterMergeAndDeleteCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDeleteCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_deleteCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterMergeAndDeleteCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldCreateCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_createCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_createCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldCreateOrAlterOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_createOrAlterCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_createOrAlterOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldIngestionDuplicationOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_ingestionDuplicationCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_duplicateIngestionCommandsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_purgeCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_purgeCommandsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeCleanupOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_purgeCleanupCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_purgeCleanupCommandsOptions),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=" datetime()",$t1.OffsetPosition=-1,$t1),$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldRunCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_runCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_runCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldRunCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_suspendCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_suspendCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t))}}});Bridge.ns("Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider",$asm.$);Bridge.apply($asm.$.Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider,{f1:function(s){return s},f2:function(_o1){var $t;return _o1.add("volatile",Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy),_o1.add("persist",($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=" (h@'', h@'') ",$t.OffsetPosition=-9,$t)),_o1},f3:function(_o2){var $t;return _o2.add("policy",Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy),_o2.add("persist metadata",($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=" h'' ",$t.OffsetPosition=-2,$t)),_o2},f4:function(_o3){var $t;return _o3.add("volatile",Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy),_o3.add("writeaheadlog",($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=" (h@'', h@'') ",$t.OffsetPosition=-9,$t)),_o3},f5:function(_o4){var $t;return _o4.add("csv",($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=" (h@'')",$t.OffsetPosition=-2,$t)),_o4.add("tsv",($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=" (h@'')",$t.OffsetPosition=-2,$t)),_o4.add("json",($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=" (h@'')",$t.OffsetPosition=-2,$t)),_o4.add("sql",Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy),_o4},f6:function(db){return Kusto.Data.Common.CslSyntaxGenerator.NormalizeDatabaseName(db.Name)},f7:function(n){return n}})});